cscope 15 /local/ama/openscep/openscep-0.4.2               0001467268
	@acconfig.h

1 @
	gBOTTOM
@

4 #unde‡
LOG_FACILITY


5 #i‚de‡
LOG_FACILITY


6 
	#LOG_FACILITY
 
LOG_USER


	)

10 #unde‡
HAVE_ALTZONE


	@lib/attr.c

8 
	~<©å.h
>

9 
	~<öô.h
>

11 
©å_add_°rög
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
©ås
, 
nid
, *
d©a
) {

12 
ASN1_STRING
 *
	ga¢1_°rög
 = 
NULL
;

13 
X509_ATTRIBUTE
 *
	gxa
;

15 i‡(
	gdebug
)

16 
BIO_¥ötf
(
bio_îr
, "%s:%d:ádding stringáttr %s (nid = %d) = '%s'\n",

17 
__FILE__
, 
__LINE__
, 
OBJ_nid2¢
(
nid
),Çid, 
d©a
);

18 
	ga¢1_°rög
 = 
ASN1_STRING_√w
();

19 
ASN1_STRING_£t
(
a¢1_°rög
, 
d©a
, 
°æí
(data));

20 
	gxa
 = 
X509_ATTRIBUTE_¸óã
(
nid
, 
V_ASN1_PRINTABLESTRING
, 
a¢1_°rög
);

21 
sk_X509_ATTRIBUTE_push
(
©ås
, 
xa
);

28 
©å_add_o˘ë
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
©ås
, 
nid
,

29 *
d©a
, 
Àn
) {

30 
ASN1_STRING
 *
	ga¢1_°rög
 = 
NULL
;

31 
X509_ATTRIBUTE
 *
	gxa
;

33 i‡(
	gdebug
)

34 
BIO_¥ötf
(
bio_îr
, "%s:%d:ádding octetáttr %s (nid = %d)Üength %d\n",

35 
__FILE__
, 
__LINE__
, 
OBJ_nid2¢
(
nid
),Çid, 
Àn
);

36 
	ga¢1_°rög
 = 
ASN1_STRING_√w
();

37 
ASN1_STRING_£t
(
a¢1_°rög
, 
d©a
, 
Àn
);

38 
	gxa
 = 
X509_ATTRIBUTE_¸óã
(
nid
, 
V_ASN1_OCTET_STRING
, 
a¢1_°rög
);

39 
sk_X509_ATTRIBUTE_push
(
©ås
, 
xa
);

	@lib/badreply.c

8 
	~<badª∂y.h
>

9 
	~<©å.h
>

10 
	~<öô.h
>

11 
	~<›ís¶/evp.h
>

12 
	~<sy¶og.h
>

14 
	$badª∂y
(
s˚p_t
 *
s˚p
, *
pki°©us
) {

15 
s˚pmsg_t
 *
ª∂y
;

17 
ª∂y
 = &
s˚p
->reply;

20 i‡(
debug
)

21 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öreparingá badÑeply ofÅype %s\n",

22 
__FILE__
, 
__LINE__
, 
	`SCEP_STATUS
(
pki°©us
));

25 
	`sy¶og
(
LOG_WARNING
, "%s:%d: sídög badÑïly o‡ty≥ %s", 
__FILE__
,

26 
__LINE__
, 
	`SCEP_STATUS
(
pki°©us
));

28 
ª∂y
->
pkiSètus
 = 
pki°©us
;

29 i‡((!
ª∂y
->
Áûöfo
)

30 && 
	`SCEP_PKISTATUS_is
(
SCEP_PKISTATUS_FAILURE
, 
pki°©us
))

31 
ª∂y
->
Áûöfo
 = 
SCEP_FAILURE_BADREQUEST
;

36 i‡(
debug
)

37 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: PKCS7ÑeadyÅoÑeturn\n",

38 
__FILE__
, 
__LINE__
);

40 
	}
}

	@lib/certrep.c

8 
	~<˚πªp.h
>

10 
	$˚πªp
(
s˚p_t
 *
s˚p
) {

14 
	}
}

	@lib/check.c

8 
	~<check.h
>

9 
	~<öô.h
>

10 
	~<›ís¶/a¢1.h
>

11 
	~<›ís¶/x509.h
>

12 
	~<›ís¶/îr.h
>

13 
	~<ld≠.h
>

14 
	~<s˚∂d≠.h
>

15 
	~<sy¶og.h
>

17 *
	$gë_chÆÀnge
(
s˚p_t
 *
s˚p
) {

18 
loc
, 
ty≥
, 
n
;

19 
X509_ATTRIBUTE
 *
©å
;

20 
X509_REQ
 *
ªq
;

21 
ASN1_TYPE
 *
a¢1
;

22 
ASN1_IA5STRING
 *
a¢1_°rög
;

23 *
chÆÀnge
;

26 
ªq
 = 
s˚p
->
˛õ¡ªq
;

27 i‡(
debug
)

28 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: getting challengeÖassword from "

29 "X.509Ñeque° %p\n", 
__FILE__
, 
__LINE__
, 
ªq
);

33 i‡(
NULL
 =
ªq
) {

34 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço X.509Ñequestávailable\n",

35 
__FILE__
, 
__LINE__
);

36 
îr
;

40 
n
 = 
	`X509_REQ_gë_©å_cou¡
(
ªq
);

41 i‡(
debug
)

42 
	`BIO_¥ötf
(
bio_îr
, "%s%d: %dáâribuã†found\n", 
__FILE__
,

43 
__LINE__
, 
n
);

44 
loc
 = 
	`X509_REQ_gë_©å_by_NID
(
ªq
, 
NID_pkcs9_chÆÀngePassw‹d
, -1);

45 i‡(
loc
 < 0) {

46 i‡(
debug
)

47 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: challengePasswordÇot "

48 "found\n", 
__FILE__
, 
__LINE__
);

49  
NULL
;

51 i‡(
debug
)

52 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: challengePasswordát offset %d\n",

53 
__FILE__
, 
__LINE__
, 
loc
);

54 
©å
 = 
	`X509_REQ_gë_©å
(
ªq
, 
loc
);

57 i‡(
NULL
 =(
a¢1
 = 
	`X509_ATTRIBUTE_gë0_ty≥
(
©å
, 0))) {

58 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑetrieve value\n",

59 
__FILE__
, 
__LINE__
);

60 
îr
;

63 
ty≥
 = 
	`ASN1_TYPE_gë
(
a¢1
);

64 i‡(
debug
)

65 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åype of challengePassword is %d\n",

66 
__FILE__
, 
__LINE__
, 
ty≥
);

67 i‡((
ty≥
 !
V_ASN1_IA5STRING
Ë&& (ty≥ !
V_ASN1_PRINTABLESTRING
)) {

68 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: challengePassword has wrongÅype\n",

69 
__FILE__
, 
__LINE__
, 
ty≥
);

70 
îr
;

73 
a¢1_°rög
 = (
ASN1_STRING
 *)
a¢1
->
vÆue
.
±r
;

74 
chÆÀnge
 = (*)
	`mÆloc
(
a¢1_°rög
->
Àngth
 + 1);

75 
	`mem˝y
(
chÆÀnge
, 
a¢1_°rög
->
d©a
,á¢1_°rög->
Àngth
);

76 
chÆÀnge
[
a¢1_°rög
->
Àngth
] = '\0';

77 i‡(
debug
)

78 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: challenge Password '%s'\n",

79 
__FILE__
, 
__LINE__
, 
chÆÀnge
);

82  
chÆÀnge
;

85 
îr
:

86 
	`ERR_¥öt_îr‹s
(
bio_îr
);

87  
NULL
;

88 
	}
}

90 
	$check_chÆÀnge
(
s˚p_t
 *
s˚p
) {

91 
X509_REQ
 *
ªq
;

92 *
chÆÀnge
, *
dn
;

93 
X509_NAME
 *
subje˘
;

94 
LDAP
 *
ld≠
 = 
NULL
;

99 
ªq
 = 
s˚p
->
˛õ¡ªq
;

100 i‡(
debug
)

101 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: checking challengeÖassword in "

102 "ªque° %p\n", 
__FILE__
, 
__LINE__
, 
ªq
);

105 i‡(
NULL
 =(
chÆÀnge
 = 
	`gë_chÆÀnge
(
s˚p
))) {

106 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço challengeÖassword found\n",

107 
__FILE__
, 
__LINE__
);

108 
îr
;

110 i‡(
debug
)

111 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: challenge Password '%s'\n",

112 
__FILE__
, 
__LINE__
, 
chÆÀnge
);

115 i‡(
	`°æí
(
chÆÀnge
) == 0) {

116 i‡(
debug
)

117 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: zero challenge\n",

118 
__FILE__
, 
__LINE__
);

119 
îr
;

123 
subje˘
 = 
	`X509_REQ_gë_subje˘_«me
(
ªq
);

124 i‡(
debug
) {

125 
«me
[1024];

126 
	`X509_NAME_⁄ñöe
(
subje˘
, 
«me
, (name));

127 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeque°‹: %s\n", 
__FILE__
,

128 
__LINE__
, 
«me
);

132 
dn
 = 
	`x509_to_ld≠
(
s˚p
, 
subje˘
);

133 i‡(
debug
)

134 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: mappedÑequestorÅo LDAP DN '%s'\n",

135 
__FILE__
, 
__LINE__
, 
dn
);

138 
ld≠
 = 
	`ld≠_›í
(
s˚p
->
l
.
ld≠ho°
, s˚p->l.
ld≠p‹t
);

139 i‡(
ld≠
 =
NULL
) {

140 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot connectÅo %s:%d\n",

141 
__FILE__
, 
__LINE__
, 
s˚p
->
l
.
ld≠ho°
, s˚p->l.
ld≠p‹t
);

142 
îr
;

146 i‡(
	`ld≠_sim∂e_böd_s
(
ld≠
, 
dn
, 
chÆÀnge
Ë!
LDAP_SUCCESS
) {

147 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÜdap_simple_bind_s\n",

148 
__FILE__
, 
__LINE__
);

149 
	`sy¶og
(
LOG_ERR
, "LDAPáuthítiˇti⁄ f‹ %†Áûed", 
dn
);

150 
îr
;

154 
	`ld≠_unböd
(
ld≠
);

157 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: check suc˚ssful\n", 
__FILE__
, 
__LINE__
);

159 
îr
:

161 i‡(
ld≠
Ë
	`ld≠_unböd
(ldap);

162 
	`ERR_¥öt_îr‹s
(
bio_îr
);

164 
	}
}

	@lib/createreq.c

8 
	~<c⁄fig.h
>

9 
	~<öô.h
>

10 
	~<s˚p.h
>

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/evp.h
>

16 
	~<›ís¶/≥m.h
>

17 
	~<›ís¶/îr.h
>

18 
	~<›ís¶/a¢1.h
>

19 
	~<¸óãªq.h
>

20 
	~<˘y≥.h
>

22 
	$¸óãªq
(
s˚p_t
 *
s˚p
, *
dn
, *
chÆÀnge
) {

23 
X509_REQ
 *
ªq
;

24 
X509_NAME
 *
subj
;

25 
EVP_MD
 *
dige°
 = 
	`EVP_md5
();

26 
BIO
 *
out
;

27 *
p
, *
dn2
, *
ty≥
, *
vÆue
;

28 
pos
 = 0;

31 i‡(
NULL
 =(
ªq
 = 
	`X509_REQ_√w
())) {

34 i‡(
debug
)

35 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÇewÑequestállocated\n",

36 
__FILE__
, 
__LINE__
);

39 
subj
 = 
	`X509_NAME_√w
();

43 
dn2
 = 
	`°rdup
(
dn
);

44 
p
 = 
	`°πok
(
dn2
, ",");

46 i‡(
debug
)

47 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åoken seen: %s\n",

48 
__FILE__
, 
__LINE__
, 
p
);

51 (*
p
Ë&& (
	`is•a˚
(*p)))Ö++;

54 
ty≥
 = 
p
;

57 
vÆue
 = 
p
;

58 (*
vÆue
) && (*value != '=')) value++;

59 *
vÆue
 = '\0';

60 
vÆue
++;

63 i‡(!
	`°rcmp
(
ty≥
, "C")) {

64 
p
 = 
vÆue
; *p;Ö++Ë*∞
	`touµî
(*p);

68 i‡(
	`X509_NAME_add_íåy_by_txt
(
subj
, 
ty≥
, 
MBSTRING_ASC
, 
vÆue
,

69 
	`°æí
(
vÆue
), 
pos
++, 0) <= 0) {

70 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:failedÅoáddÉntry %s=%s\n",

71 
__FILE__
, 
__LINE__
, 
ty≥
, 
vÆue
);

72 
îr
;

74 i‡(
debug
)

75 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: %s=%†added\n", 
__FILE__
,

76 
__LINE__
, 
ty≥
, 
vÆue
);

78 } 
NULL
 !(
p
 = 
	`°πok
(NULL, ",")));

80 
	`‰ì
(
dn2
);

82 
	`X509_REQ_£t_subje˘_«me
(
ªq
, 
subj
);

83 i‡(
debug
) {

84 
sdn
[1024];

85 
	`X509_NAME_⁄ñöe
(
	`X509_REQ_gë_subje˘_«me
(
ªq
), 
sdn
,

86 (
sdn
));

87 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: subject dn setÅo '%s'\n",

88 
__FILE__
, 
__LINE__
, 
sdn
);

92 
	`X509_REQ_£t_vîsi⁄
(
ªq
, 0L);

95 i‡(
chÆÀnge
) {

97 
	`X509_REQ_add1_©å_by_NID
(
ªq
, 
NID_pkcs9_chÆÀngePassw‹d
,

98 
MBSTRING_ASC
, 
chÆÀnge
, -1);

102 
	`X509_REQ_£t_pubkey
(
ªq
, 
s˚p
->
˛õ¡pubkey
);

105 
	`X509_REQ_sign
(
ªq
, 
s˚p
->
˛õ¡pkey
, 
dige°
);

108 i‡((
debug
Ë&& (
tmµ©h
)) {

109 
ªqfûíame
[1024];

110 
	`¢¥ötf
(
ªqfûíame
, (reqfilename),

111 "%s/ªq.%d", 
tmµ©h
, 
	`gëpid
());

112 
out
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

113 
	`BIO_wrôe_fûíame
(
out
, 
ªqfûíame
);

114 
	`i2d_X509_REQ_bio
(
out
, 
ªq
);

115 
	`BIO_‰ì
(
out
);

116 i‡(
debug
)

117 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest writtenÅo %s\n",

118 
__FILE__
, 
__LINE__
, 
ªqfûíame
);

122 
s˚p
->
˛õ¡ªq
 = 
ªq
;

126 
îr
:

127 
	`ERR_¥öt_îr‹s
(
bio_îr
);

129 
	}
}

	@lib/decode.c

8 
	~<decode.h
>

9 
	~<öô.h
>

10 
	~<sig©å.h
>

11 
	~<›ís¶/pkcs7.h
>

12 
	~<›ís¶/x509.h
>

13 
	~<›ís¶/≥m.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/îr.h
>

16 
	~<›ís¶/bn.h
>

17 
	~<uni°d.h
>

18 
	~<f˙é.h
>

19 
	~<î∫o.h
>

20 
	~<°rög.h
>

21 
	~<i£r.h
>

22 
	~<ißsu.h
>

23 
	~<¥oxy.h
>

35 
	$decode
(
s˚p_t
 *
s˚p
, 
BIO
 *
bio
) {

36 
BIO
 *
b64
, *
öbio
, *
p7bio
, *
outbio
,

37 *
membio
;

38 
byãs
, 
Àngth
, 
fd
, 
u£d
;

39 
nMesßgeTy≥
 = -1, 
nPkiSètus
 = -1;

40 
	`STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
söfo
;

41 
PKCS7_ISSUER_AND_SERIAL
 *
üs
;

42 
X509
 *
x509
, *
sig√r˚π
;

43 
	`STACK_OF
(
X509_ATTRIBUTE
Ë*
sig_©åibs
;

44 
s˚pmsg_t
 *
msg
;

45 
PKCS7
 *
p7ívñ›ed
;

46 
buf„r
[1024];

47 *
d©a
;

48 
EVP_PKEY
 *
ªcùõ¡pkey
;

49 
X509
 *
ªcùõ¡˚π
;

52 i‡(
s˚p
->
˛õ¡
)

53 
msg
 = &
s˚p
->
ª∂y
;

55 
msg
 = &
s˚p
->
ªque°
;

56 i‡(
debug
)

57 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decodög %†mesßge\n", 
__FILE__
,

58 
__LINE__
, (
s˚p
->
˛õ¡
) ? "reply" : "request");

61 
	`BIO_£t_mem_eof_ªtu∫
(
bio
, 0);

62 i‡(
msg
->
ba£64
) {

63 i‡(
debug
)

64 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Örepending Base64 "

65 "decodî\n", 
__FILE__
, 
__LINE__
);

66 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

67 
öbio
 = 
	`BIO_push
(
b64
, 
bio
);

69 
öbio
 = 
bio
;

71 
	`BIO_£t_Êags
(
öbio
, 
BIO_FLAGS_BASE64_NO_NL
);

72 
membio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

73 (
byãs
 = 
	`BIO_ªad
(
öbio
, 
buf„r
, (buffer))) > 0) {

74 i‡(
debug
)

75 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: chunk of %d bytes\n",

76 
__FILE__
, 
__LINE__
, 
byãs
);

77 
	`BIO_wrôe
(
membio
, 
buf„r
, 
byãs
);

79 
	`BIO_£t_Êags
(
membio
, 
BIO_FLAGS_MEM_RDONLY
);

80 
Àngth
 = 
	`BIO_gë_mem_d©a
(
membio
, &
d©a
);

81 i‡(
debug
)

82 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoded dataát %p: %d bytes\n",

83 
__FILE__
, 
__LINE__
, 
d©a
, 
Àngth
);

86 i‡((
debug
Ë&& (
tmµ©h
)) {

87 
fûíame
[1024];

88 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.d-1-signed.der",

89 
tmµ©h
, 
	`gëpid
());

90 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: wrôêd©®tÿ%s\n", 
__FILE__
,

91 
__LINE__
, 
fûíame
);

92 i‡(0 <(
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
,

94 
	`wrôe
(
fd
, 
d©a
, 
Àngth
);

95 
	`˛o£
(
fd
);

97 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open file %s: %s "

98 "(%d)\n", 
__FILE__
, 
__LINE__
, 
fûíame
,

99 
	`°ªº‹
(
î∫o
),Érrno);

104 
msg
->
p7
 = 
	`d2i_PKCS7_bio
(
membio
, 
NULL
);

105 i‡(
msg
->
p7
 =
NULL
) {

106 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode message\n",

107 
__FILE__
, 
__LINE__
);

108 
îr
;

112 i‡(!
	`PKCS7_ty≥_is_sig√d
(
msg
->
p7
)) {

113 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: supplied PKCS#7 isÇot signed "

114 "d©a\n", 
__FILE__
, 
__LINE__
);

115 
îr
;

117 i‡(
debug
)

118 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeceived message is signed\n",

119 
__FILE__
, 
__LINE__
);

122 
p7bio
 = 
	`PKCS7_d©aInô
(
msg
->
p7
, 
NULL
);

123 i‡(
p7bio
 =
NULL
) {

124 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÉxtract data from PKCS#7\n",

125 
__FILE__
, 
__LINE__
);

126 
îr
;

133 
outbio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

134 
u£d
 = 0;

136 
buf
[1024];

137 
byãs
 = 
	`BIO_ªad
(
p7bio
, 
buf
, (buf));

138 
u£d
 +
byãs
;

139 i‡(
byãs
 <= 0) ;

140 
	`BIO_wrôe
(
outbio
, 
buf
, 
byãs
);

142 
	`BIO_Êush
(
outbio
);

143 i‡(
debug
)

144 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: got %d bytes ofÉnveloped data\n",

145 
__FILE__
, 
__LINE__
, 
u£d
);

146 i‡((
debug
Ë&& (
tmµ©h
)) {

147 
fûíame
[1024];

148 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.d-2-enveloped.der",

149 
tmµ©h
, 
	`gëpid
());

150 i‡((
fd
 = 
	`›í
(
fûíame
, 
O_CREAT
|
O_TRUNC
|
O_WRONLY
, 0666)) >= 0){

151 
Àngth
 = 
	`BIO_gë_mem_d©a
(
outbio
, &
d©a
);

152 i‡((
Àngth
 > 0Ë&& (
d©a
)) {

153 
	`wrôe
(
fd
, 
d©a
, 
Àngth
);

155 
	`˛o£
(
fd
);

160 
söfo
 = 
	`PKCS7_gë_sig√r_öfo
(
msg
->
p7
);

161 i‡(
söfo
 =
NULL
) {

162 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Çÿsig√∏öfo\n", 
__FILE__
,

163 
__LINE__
);

164 
îr
;

166 i‡(
	`sk_PKCS7_SIGNER_INFO_num
(
söfo
) != 1) {

167 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: wrongÇumber of signers: %d\n",

168 
__FILE__
, 
__LINE__
, 
	`sk_PKCS7_SIGNER_INFO_num
(
söfo
));

169 
îr
;

171 i‡(
debug
)

172 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: foundÉxactly one signer: good\n",

173 
__FILE__
, 
__LINE__
);

176 
msg
->
si
 = 
	`sk_PKCS7_SIGNER_INFO_vÆue
(
söfo
, 0);

177 
üs
 = 
msg
->
si
->
issuî_™d_£rül
;

178 
x509
 = 
	`X509_föd_by_issuî_™d_£rül
(
msg
->
p7
->
d
.
sign
->
˚π
,

179 
üs
->
issuî
, ias->
£rül
);

183 i‡(
x509
 =
NULL
) {

184 
«me
[1024];

185 i‡(
debug
) {

186 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço signer certificate, "

188 
__FILE__
, 
__LINE__
);

189 
	`X509_NAME_⁄ñöe
(
üs
->
issuî
, 
«me
, (name));

190 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: signer cert issued by %s\n",

191 
__FILE__
, 
__LINE__
, 
«me
);

192 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: signer cert serial: %s\n",

193 
__FILE__
, 
__LINE__
,

194 
	`BN_bn2hex
(
	`ASN1_INTEGER_to_BN
(
üs
->
£rül
,

195 
NULL
)));

198 
«me
[1024];

199 i‡(
debug
) {

200 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
x509
), 
«me
,

201 (
«me
));

202 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: issuer of signer %s\n",

203 
__FILE__
, 
__LINE__
, 
«me
);

204 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
x509
), 
«me
,

205 (
«me
));

206 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: subject of signer: %s\n",

207 
__FILE__
, 
__LINE__
, 
«me
);

213 i‡(
debug
)

214 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öreparing cert store for "

215 "sig«tuª vîifiˇti⁄\n", 
__FILE__
, 
__LINE__
);

216 i‡(
s˚p
->
˛õ¡
) {

217 
sig√r˚π
 = 
s˚p
->
ˇ˚π
;

218 i‡(
debug
)

219 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: verifying server signature "

220 "agaö° know¿CA cît\n", 
__FILE__
, 
__LINE__
);

222 i‡(
debug
)

223 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: working with signer @%p\n",

224 
__FILE__
, 
__LINE__
, 
x509
);

225 i‡(!
	`X509_NAME_cmp
(
	`X509_gë_subje˘_«me
(
x509
),

226 
	`X509_gë_issuî_«me
(
x509
))) {

229 
s˚p
->
£lfsig√d˚π
 = 
x509
;

230 i‡(
debug
)

231 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: verifyágainst "

232 "£lfsig√d cîà%p\n", 
__FILE__
,

233 
__LINE__
, 
x509
);

235 
s˚p
->
˛õ¡˚π
 = 
x509
;

236 i‡(
debug
)

237 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: verifyágainst "

238 "officü»˚πáà%p\n", 
__FILE__
,

239 
__LINE__
, 
x509
);

241 
sig√r˚π
 = 
x509
;

242 i‡(
debug
) {

243 
«me
[1024];

244 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
sig√r˚π
),

245 
«me
, 1024);

246 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificate (@%p) for '%s' "

247 "addedÅÿ°‹e\n", 
__FILE__
, 
__LINE__
, 
x509
,

248 
«me
);

253 i‡(
debug
)

254 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: vîifyög sig«tuª\n", 
__FILE__
,

255 
__LINE__
);

256 i‡(
	`PKCS7_sig«tuªVîify
(
p7bio
, 
msg
->
p7
, msg->
si
, 
sig√r˚π
) <= 0) {

257 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: vîifiˇti⁄ faûed\n", 
__FILE__
,

258 
__LINE__
);

259 
îr
;

261 i‡(
debug
)

262 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sig«tuª vîfõd OK\n", 
__FILE__
,

263 
__LINE__
);

266 
sig_©åibs
 = 
	`PKCS7_gë_sig√d_©åibuãs
(
msg
->
si
);

267 i‡((
sig_©åibs
 =
NULL
Ë|| (
	`sk_X509_ATTRIBUTE_num
(sig_attribs) == 0)){

268 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço signedáttributes found\n",

269 
__FILE__
, 
__LINE__
);

270 
îr
;

274 
s˚p
->
å™sId
 = 
	`sig©å_°rög
(scep, "transId");

275 
msg
->
mesßgeTy≥
 = 
	`sig©å_°rög
(
s˚p
, "messageType");

276 
msg
->
pkiSètus
 = 
	`sig©å_°rög
(
s˚p
, "pkiStatus");

277 
msg
->
Áûöfo
 = 
	`sig©å_°rög
(
s˚p
, "failinfo");

278 
s˚p
->
£ndîN⁄˚
 = 
	`sig©å_o˘ë
(scep, "senderNonce",

279 &
s˚p
->
£ndîN⁄˚Lígth
);

280 
s˚p
->
ªcùõ¡N⁄˚
 = 
	`sig©å_o˘ë
(scep, "recipientNonce",

281 &
s˚p
->
ªcùõ¡N⁄˚Lígth
);

282 
s˚p
->
authítiˇt‹
 = 
	`sig©å_a¢1_o˘ë
(scep, "proxyAuthenticator");

283 i‡(
debug
)

284 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: signedáttributesÑetrieved\n",

285 
__FILE__
, 
__LINE__
);

292 i‡(
NULL
 =
msg
->
mesßgeTy≥
) {

293 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço messageÅype (settingÅo 3)\n",

294 
__FILE__
, 
__LINE__
);

295 
msg
->
mesßgeTy≥
 = "3";

300 i‡(
NULL
 =
s˚p
->
£ndîN⁄˚
) {

301 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: senderNonce missing\n",

302 
__FILE__
, 
__LINE__
);

305 i‡(
NULL
 =
msg
->
mesßgeTy≥
) {

306 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: messageÅype missing\n",

307 
__FILE__
, 
__LINE__
);

308 
îr
;

310 
nMesßgeTy≥
 = 
	`©oi
(
msg
->
mesßgeTy≥
);

311 i‡(
msg
->
pkiSètus
) {

312 
nPkiSètus
 = 
	`©oi
(
msg
->
pkiSètus
);

316 i‡((
u£d
 =0Ë&& (
nMesßgeTy≥
 != 3)) {

317 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: only CertRep message may be "

318 "em±y\n", 
__FILE__
, 
__LINE__
);

319 
îr
;

321 i‡((
u£d
 =0Ë&& (
nMesßgeTy≥
 =3Ë&& (
nPkiSètus
 == 0)) {

322 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CertRep may only beÉmpty for "

323 "Áûuª o∏≥ndög\n", 
__FILE__
, 
__LINE__
);

324 
îr
;

329 i‡(
u£d
 == 0) {

330 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Émpty PKCSReq, must be failure or "

331 "≥ndög\n", 
__FILE__
, 
__LINE__
);

332 
sig√d⁄ly
;

334 i‡(
debug
)

335 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: working on innerÖkcs#7\n",

336 
__FILE__
, 
__LINE__
);

339 
p7ívñ›ed
 = 
	`d2i_PKCS7_bio
(
outbio
, 
NULL
);

340 i‡(
p7ívñ›ed
 =
NULL
) {

342 i‡(
	`°rcmp
(
msg
->
mesßgeTy≥
, 
SCEP_MESSAGE_TYPE_CERTREP
)) {

343 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode signed "

344 "d©a\n", 
__FILE__
, 
__LINE__
);

345 
îr
;

347 
msg
->
p7
 = 
NULL
;

348 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÇoÉnveloped dataÅo decrypt, "

350 
__FILE__
, 
__LINE__
);

351 
îr
;

354 
ªcùõ¡pkey
 = (
s˚p
->
˛õ¡
Ë? s˚p->
˛õ¡pkey
 : s˚p->
ˇpkey
;

355 
ªcùõ¡˚π
 = (
s˚p
->
˛õ¡
Ë? s˚p->
£lfsig√d˚π
 : s˚p->
ˇ˚π
;

357 i‡(
debug
) {

358 
ªcùõ¡dn
[1024];

360 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
ªcùõ¡˚π
),

361 
ªcùõ¡dn
, (recipientdn));

362 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decrypting data with keyát %p, "

363 "˚πifiˇã f‹ %†© %p\n", 
__FILE__
, 
__LINE__
,

364 
ªcùõ¡pkey
, 
ªcùõ¡dn
, 
ªcùõ¡˚π
);

366 
outbio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

367 i‡(0 =
	`PKCS7_de¸y±
(
p7ívñ›ed
, 
ªcùõ¡pkey
, 
ªcùõ¡˚π
,

368 
outbio
, 0)) {

369 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: de¸y±i⁄ faûed\n", 
__FILE__
,

370 
__LINE__
);

371 
îr
;

373 
	`BIO_Êush
(
outbio
);

374 
msg
->
Àngth
 = 
	`BIO_gë_mem_d©a
(
outbio
, &msg->
d©a
);

375 i‡(
debug
)

376 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: got %d bytes of decrypted data\n",

377 
__FILE__
, 
__LINE__
, 
msg
->
Àngth
);

380 
	`BIO_£t_Êags
(
outbio
, 
BIO_FLAGS_MEM_RDONLY
);

383 i‡((
debug
Ë&& (
tmµ©h
)) {

384 
fûíame
[1024];

385 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.d-3-payload.der",

386 
tmµ©h
, 
	`gëpid
());

387 i‡((
fd
 = 
	`›í
(
fûíame
, 
O_CREAT
|
O_TRUNC
|
O_WRONLY
, 0666)) >= 0){

388 
	`wrôe
(
fd
, 
msg
->
d©a
, msg->
Àngth
);

394 
	`©oi
(
msg
->
mesßgeTy≥
)) {

395 
MSG_CERTREP
:

396 i‡(
debug
)

397 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding CertRep\n",

398 
__FILE__
, 
__LINE__
);

399 
msg
->
rd
.
p7
 = 
	`d2i_PKCS7_bio
(
outbio
, 
NULL
);

401 
MSG_V2PROXY
:

403 i‡(
s˚p
->
authítiˇt‹
 =
NULL
) {

404 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áuthenticator missing\n",

405 
__FILE__
, 
__LINE__
);

406 
îr
;

408 i‡(!
	`¥oxy_check
(
s˚p
, 
msg
, s˚p->
authítiˇt‹
)) {

409 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öroxyáuthentication "

410 "Áûs\n", 
__FILE__
, 
__LINE__
);

411 
îr
;

414 
MSG_V2REQUEST
:

416 i‡(
debug
)

417 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding v2Öayload\n",

418 
__FILE__
, 
__LINE__
);

419 
msg
->
rd
.
∑ylﬂd
 = 
	`d2i_∑ylﬂd_bio
(
outbio
, 
NULL
);

420 i‡(
debug
)

421 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decodedáÖayload of "

423 
__FILE__
, 
__LINE__
, 
msg
->
rd
.
∑ylﬂd
->
π
,

424 
msg
->
rd
.
∑ylﬂd
->
‹igöÆ
->
Àngth
);

426 
MSG_PKCSREQ
:

427 i‡(
debug
)

428 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding X509_REQ\n",

429 
__FILE__
, 
__LINE__
);

430 
s˚p
->
˛õ¡ªq
 = 
msg
->
rd
.
ªq
 = 
	`d2i_X509_REQ_bio
(
outbio
, 
NULL
);

431 
s˚p
->
ªque°‹ªq
 = s˚p->
˛õ¡ªq
;

433 
MSG_GETCERTINITIAL
:

434 i‡(
debug
)

435 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding issueránd "

436 "subje˘\n", 
__FILE__
, 
__LINE__
);

437 
msg
->
rd
.
is
 = 
	`d2i_issuî_™d_subje˘_bio
(
outbio
, 
NULL
);

439 
MSG_GETCERT
:

440 
MSG_GETCRL
:

441 i‡(
debug
)

442 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding issueránd "

443 "£rül\n", 
__FILE__
, 
__LINE__
);

444 
msg
->
rd
.
i£r
 = 
	`d2i_PKCS7_ISSUER_AND_SERIAL_bio
(
NULL
, 
outbio
);

447 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: unknown messageÅype: %s\n",

448 
__FILE__
, 
__LINE__
, 
msg
->
mesßgeTy≥
);

451 i‡(
msg
->
rd
.
unknown
 =
NULL
) {

452 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decodingÅhe message failed\n",

453 
__FILE__
, 
__LINE__
);

454 
îr
;

456 
	`BIO_‰ì
(
outbio
);

457 
sig√d⁄ly
:

461 
îr
:

462 i‡(
debug
)

463 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÉrrorÑeturn from decode\n",

464 
__FILE__
, 
__LINE__
);

465 
	`ERR_¥öt_îr‹s
(
bio_îr
);

467 
	}
}

	@lib/encode.c

8 
	~<ícode.h
>

9 
	~<öô.h
>

10 
	~<›ís¶/evp.h
>

11 
	~<›ís¶/x509.h
>

12 
	~<›ís¶/bio.h
>

13 
	~<›ís¶/pkcs7.h
>

14 
	~<›ís¶/îr.h
>

15 
	~<©å.h
>

16 
	~<uni°d.h
>

17 
	~<f˙é.h
>

18 
	~<i£r.h
>

19 
	~<¥oxy.h
>

21 
	$ícode
(
s˚p_t
 *
s˚p
) {

22 
BIO
 *
öbio
, *
p7bio
, *
membio
, *
ebio
,

23 *
b64
, *
outbio
;

24 
PKCS7
 *
p7e
;

25 *
ívñ›ed
 = 
NULL
;

26 
ívñ›edÀn
 = 0, 
rc
;

27 
	`STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibs
;

28 
	`STACK_OF
(
X509
Ë*
ªcùs
;

29 
PKCS7_SIGNER_INFO
 *
si
;

30 
s˚pmsg_t
 *
msg
;

31 
EVP_PKEY
 *
sig√Ωkey
;

32 
X509
 *
sig√r˚π
, *
ªcùõ¡˚π
;

33 
nMesßgeTy≥
 = -1, 
nPkiSètus
 = -1,

34 
¥oxy
 = 0;

35 
X509_ATTRIBUTE
 *
auth
;

38 i‡(
debug
)

39 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éncode of %s message\n",

40 
__FILE__
, 
__LINE__
,

41 (
s˚p
->
˛õ¡
) ? "client" : "server");

42 i‡(
s˚p
->
˛õ¡
)

43 
msg
 = &
s˚p
->
ªque°
;

45 
msg
 = &
s˚p
->
ª∂y
;

48 i‡(
msg
->
mesßgeTy≥
)

49 
nMesßgeTy≥
 = 
	`©oi
(
msg
->
mesßgeTy≥
);

50 i‡(
msg
->
pkiSètus
)

51 
nPkiSètus
 = 
	`©oi
(
msg
->
pkiSètus
);

54 i‡(!((
s˚p
->
˛õ¡˚π
Ë|| (s˚p->
£lfsig√d˚π
))) {

55 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço certificateÅoÉncryptÑeply\n",

56 
__FILE__
, 
__LINE__
);

57 
îr
;

59 i‡(
s˚p
->
˛õ¡
) {

60 i‡(
debug
)

61 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: using CA cert for "

62 "ªcùõ¡\n", 
__FILE__
, 
__LINE__
);

63 
ªcùõ¡˚π
 = 
s˚p
->
ˇ˚π
;

64 i‡(
debug
)

65 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: using self signed cert "

66 "f‹ sig«tuª\n", 
__FILE__
, 
__LINE__
);

67 
sig√r˚π
 = 
s˚p
->
£lfsig√d˚π
;

68 
sig√Ωkey
 = 
s˚p
->
˛õ¡pkey
;

70 
ªcùõ¡˚π
 = (
s˚p
->
£lfsig√d˚π
)

71 ? 
s˚p
->
£lfsig√d˚π
 : s˚p->
˛õ¡˚π
;

72 i‡(
debug
)

73 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: using %s cert for "

74 "í¸y±i⁄ (%p)\n", 
__FILE__
, 
__LINE__
,

75 (
s˚p
->
£lfsig√d˚π
)

77 
ªcùõ¡˚π
);

78 
sig√r˚π
 = 
s˚p
->
ˇ˚π
;

79 
sig√Ωkey
 = 
s˚p
->
ˇpkey
;

80 i‡(
debug
)

81 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: using CA cert for "

82 "sig«tuª\n", 
__FILE__
, 
__LINE__
);

86 i‡((
debug
Ë&& (
ªcùõ¡˚π
)) {

87 
ªc
[1024];

88 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
ªcùõ¡˚π
), 
ªc
,

89 (
ªc
));

90 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éncrypting for '%s'\n",

91 
__FILE__
, 
__LINE__
, 
ªc
);

95 
öbio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

96 i‡(
debug
)

97 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: writingá message ofÅype %s, "

98 "°©u†%s\n", 
__FILE__
, 
__LINE__
,

99 
	`SCEP_TYPE
(
msg
->
mesßgeTy≥
),

100 
	`SCEP_STATUS
(
msg
->
pkiSètus
));

101 
	`©oi
(
msg
->
mesßgeTy≥
)) {

102 
MSG_CERTREP
:

104 i‡(
msg
->
rd
.
p7
)

105 
rc
 = 
	`i2d_PKCS7_bio
(
öbio
, 
msg
->
rd
.
p7
);

107 i‡(
debug
)

108 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åhere isÇo data "

110 
__FILE__
, 
__LINE__
);

111 
sig√d⁄ly
;

114 
MSG_V2PROXY
:

117 
¥oxy
 = 1;

118 
MSG_V2REQUEST
:

120 i‡(
debug
)

121 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: converting v2Ñequest\n",

122 
__FILE__
, 
__LINE__
);

123 
rc
 = 
	`i2d_∑ylﬂd_bio
(
öbio
, 
msg
->
rd
.
∑ylﬂd
);

125 
MSG_PKCSREQ
:

126 i‡(
debug
)

127 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: converting X509Ñequest\n",

128 
__FILE__
, 
__LINE__
);

129 
rc
 = 
	`i2d_X509_REQ_bio
(
öbio
, 
msg
->
rd
.
ªq
);

130 i‡(
rc
 <= 0) {

131 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo write X509_REQ "

132 "tÿbio\n", 
__FILE__
, 
__LINE__
);

133 
îr
;

136 
MSG_GETCERTINITIAL
:

138 
rc
 = 
	`i2d_issuî_™d_subje˘_bio
(
öbio
, 
msg
->
rd
.
is
);

140 
MSG_GETCERT
:

141 
MSG_GETCRL
:

142 
rc
 = 
	`i2d_PKCS7_ISSUER_AND_SERIAL_bio
(
öbio
, 
msg
->
rd
.
i£r
);

143 i‡(
rc
 <= 0) {

144 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot write issueránd "

145 "£rü»tÿbio\n", 
__FILE__
, 
__LINE__
);

146 
îr
;

150 
	`BIO_Êush
(
öbio
);

151 i‡(
rc
 <= 0) {

152 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot write interior data "

153 "a†DER\n", 
__FILE__
, 
__LINE__
);

154 
îr
;

158 
	`BIO_£t_Êags
(
öbio
, 
BIO_FLAGS_MEM_RDONLY
);

159 
msg
->
Àngth
 = 
	`BIO_gë_mem_d©a
(
öbio
, &msg->
d©a
);

160 
	`BIO_‰ì
(
öbio
);

161 i‡(
debug
)

162 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖayloadÅoÉncrypt: %d bytes\n",

163 
__FILE__
, 
__LINE__
, 
msg
->
Àngth
);

166 i‡((
debug
Ë&& (
tmµ©h
)) {

167 
fûíame
[1024];

168 
fd
;

169 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.e-1-payload.der",

170 
tmµ©h
, 
	`gëpid
());

171 i‡((
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0666)) >= 0){

172 
	`wrôe
(
fd
, 
msg
->
d©a
, msg->
Àngth
);

173 
	`˛o£
(
fd
);

178 i‡(
NULL
 =(
ªcùs
 = 
	`sk_X509_√w
(NULL))) {

179 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot createÑecipient stack\n",

180 
__FILE__
, 
__LINE__
);

181 
îr
;

183 i‡(
	`sk_X509_push
(
ªcùs
, 
ªcùõ¡˚π
) <= 0) {

184 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áddingÑecipient cert failed\n",

185 
__FILE__
, 
__LINE__
);

186 
îr
;

188 i‡(
debug
) {

189 
ªcùõ¡«me
[1024];

190 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
ªcùõ¡˚π
),

191 
ªcùõ¡«me
, (recipientname));

192 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áddedÑecipient certificate for %s "

193 "© %p\n", 
__FILE__
, 
__LINE__
,

194 
ªcùõ¡«me
, 
ªcùõ¡˚π
);

196 i‡(
NULL
 =(
ebio
 = 
	`BIO_√w_mem_buf
(
msg
->
d©a
, msg->
Àngth
))) {

197 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: creating data bio failed\n",

198 
__FILE__
, 
__LINE__
);

199 
îr
;

201 
p7e
 = 
	`PKCS7_í¸y±
(
ªcùs
, 
ebio
, 
	`EVP_des_cbc
(), 
PKCS7_BINARY
);

202 i‡(
p7e
 =
NULL
) {

203 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Én¸y±i⁄ faûed\n", 
__FILE__
,

204 
__LINE__
);

207 i‡(
debug
)

208 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: d©®í¸y±ed\n", 
__FILE__
,

209 
__LINE__
);

212 
membio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

213 i‡(
	`i2d_PKCS7_bio
(
membio
, 
p7e
) <= 0) {

214 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo writeÉnveloped data\n",

215 
__FILE__
, 
__LINE__
);

216 
îr
;

218 
	`BIO_Êush
(
membio
);

219 
	`BIO_£t_Êags
(
membio
, 
BIO_FLAGS_MEM_RDONLY
);

220 
ívñ›edÀn
 = 
	`BIO_gë_mem_d©a
(
membio
, &
ívñ›ed
);

221 i‡(
debug
)

222 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: %d bytes ofÉvenloped dataát %p\n",

223 
__FILE__
, 
__LINE__
, 
ívñ›edÀn
, 
ívñ›ed
);

224 
	`BIO_‰ì
(
membio
);

225 i‡((
debug
Ë&& (
tmµ©h
)) {

226 
fûíame
[1024];

227 
fd
;

228 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.e-2-enveloped.der",

229 
tmµ©h
, 
	`gëpid
());

230 i‡((
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0666)) >= 0){

231 
	`wrôe
(
fd
, 
ívñ›ed
, 
ívñ›edÀn
);

232 
	`˛o£
(
fd
);

236 
sig√d⁄ly
:

238 
msg
->
p7
 = 
	`PKCS7_√w
();

239 i‡(
msg
->
p7
 =
NULL
) {

240 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot create PKCS#7 for sig\n",

241 
__FILE__
, 
__LINE__
);

242 
îr
;

244 i‡(!
	`PKCS7_£t_ty≥
(
msg
->
p7
, 
NID_pkcs7_sig√d
)) {

245 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot set PKCS#7Åype\n",

246 
__FILE__
, 
__LINE__
);

247 
îr
;

249 i‡(!
	`PKCS7_c⁄ã¡_√w
(
msg
->
p7
, 
NID_pkcs7_d©a
)) {

250 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot set contentÅype\n",

251 
__FILE__
, 
__LINE__
);

252 
îr
;

254 i‡(
debug
)

255 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: PKCS#7Åypeánd content set up\n",

256 
__FILE__
, 
__LINE__
);

259 i‡(
sig√r˚π
 =
NULL
) {

260 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço signer certificate\n",

261 
__FILE__
, 
__LINE__
);

262 
îr
;

266 i‡(
sig√Ωkey
 =
NULL
) {

267 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço signer key\n");

268 
îr
;

270 
si
 = 
	`PKCS7_add_sig«tuª
(
msg
->
p7
, 
sig√r˚π
, 
sig√Ωkey
, 
	`EVP_md5
());

271 i‡(
si
 =
NULL
) {

272 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotádd sender signature\n",

273 
__FILE__
, 
__LINE__
);

274 
îr
;

276 i‡(
debug
)

277 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sídî sig«tuªádded\n", 
__FILE__
,

278 
__LINE__
);

282 
nMesßgeTy≥
) {

283 
MSG_CERTREP
:

284 i‡(
nPkiSètus
 =
PKI_SUCCESS
) {

285 
	`PKCS7_add_˚πifiˇã
(
msg
->
p7
, 
s˚p
->
˛õ¡˚π
);

286 
	`PKCS7_add_˚πifiˇã
(
msg
->
p7
, 
s˚p
->
ˇ˚π
);

289 
MSG_PKCSREQ
:

290 
MSG_GETCERTINITIAL
:

291 
MSG_V2REQUEST
:

292 
MSG_V2PROXY
:

293 
	`PKCS7_add_˚πifiˇã
(
msg
->
p7
, 
sig√r˚π
);

298 
p7bio
 = 
	`PKCS7_d©aInô
(
msg
->
p7
, 
NULL
);

299 i‡(
p7bio
 =
NULL
) {

300 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot create BIOÅo write data\n",

301 
__FILE__
, 
__LINE__
);

302 
îr
;

304 i‡(
ívñ›edÀn
 > 0) {

305 i‡(
ívñ›edÀn
 !
	`BIO_wrôe
(
p7bio
, 
ívñ›ed
,Énvelopedlen)) {

306 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: unableÅo writeáll data\n",

307 
__FILE__
, 
__LINE__
);

308 
îr
;

315 
©åibs
 = 
	`sk_X509_ATTRIBUTE_√w_nuŒ
();

316 
	`©å_add_°rög
(
©åibs
, 
	`OBJ_¢2nid
("å™sId"), 
s˚p
->
å™sId
);

317 
	`©å_add_°rög
(
©åibs
, 
	`OBJ_¢2nid
("messageType"),

318 
msg
->
mesßgeTy≥
);

319 i‡(
msg
->
pkiSètus
)

320 
	`©å_add_°rög
(
©åibs
, 
	`OBJ_¢2nid
("pkiStatus"),

321 
msg
->
pkiSètus
);

322 i‡(
msg
->
Áûöfo
)

323 
	`©å_add_°rög
(
©åibs
, 
	`OBJ_¢2nid
("Áûöfo"), 
msg
->
Áûöfo
);

324 i‡(
s˚p
->
£ndîN⁄˚
)

325 
	`©å_add_o˘ë
(
©åibs
, 
	`OBJ_¢2nid
("senderNonce"),

326 
s˚p
->
£ndîN⁄˚
, s˚p->
£ndîN⁄˚Lígth
);

327 i‡(
s˚p
->
ªcùõ¡N⁄˚
)

328 
	`©å_add_o˘ë
(
©åibs
, 
	`OBJ_¢2nid
("recipientNonce"),

329 
s˚p
->
ªcùõ¡N⁄˚
, s˚p->
ªcùõ¡N⁄˚Lígth
);

330 i‡((
s˚p
->
communôy
Ë&& (
¥oxy
)) {

331 
s˚p
->
authítiˇt‹
 = 
	`¥oxy_authítiˇt‹
(
msg
, s˚p->
communôy
);

332 
auth
 = 
	`X509_ATTRIBUTE_¸óã
(

333 
	`OBJ_¢2nid
("proxyAuthenticator"),

334 
V_ASN1_OCTET_STRING
, 
s˚p
->
authítiˇt‹
);

335 
	`sk_X509_ATTRIBUTE_push
(
©åibs
, 
auth
);

337 
	`PKCS7_£t_sig√d_©åibuãs
(
si
, 
©åibs
);

338 i‡(
debug
)

339 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:álláuthenticatedáttributes "

340 "added\n", 
__FILE__
, 
__LINE__
);

343 
	`PKCS7_add_sig√d_©åibuã
(
si
, 
NID_pkcs9_c⁄ã¡Ty≥
,

344 
V_ASN1_OBJECT
, 
	`OBJ_nid2obj
(
NID_pkcs7_d©a
));

347 
	`PKCS7_d©aFöÆ
(
msg
->
p7
, 
p7bio
);

348 i‡(
debug
)

349 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: signature finalized\n",

350 
__FILE__
, 
__LINE__
);

354 
membio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

355 i‡(
msg
->
ba£64
) {

356 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

357 
outbio
 = 
	`BIO_push
(
b64
, 
membio
);

359 
outbio
 = 
membio
;

361 
	`i2d_PKCS7_bio
(
outbio
, 
msg
->
p7
);

362 
	`BIO_Êush
(
outbio
);

367 
	`BIO_£t_Êags
(
membio
, 
BIO_FLAGS_MEM_RDONLY
);

368 
msg
->
Àngth
 = 
	`BIO_gë_mem_d©a
(
membio
, &msg->
d©a
);

369 i‡(
debug
)

370 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éncoded byãs: %d %s\n", 
__FILE__
,

371 
__LINE__
, 
msg
->
Àngth
,

372 (
msg
->
ba£64
) ? "(base64)" : "(DER)");

373 
	`BIO_‰ì
(
outbio
);

374 i‡((
debug
Ë&& (
tmµ©h
)) {

375 
fûíame
[1024];

376 
BIO
 *
b
;

377 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.e-3-signed.der",

378 
tmµ©h
, 
	`gëpid
());

379 
b
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

380 
	`BIO_wrôe_fûíame
(
b
, 
fûíame
);

381 
	`i2d_PKCS7_bio
(
b
, 
msg
->
p7
);

382 
	`BIO_Êush
(
b
);

383 
	`BIO_‰ì
(
b
);

387 i‡(
debug
)

388 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éncode(%s) completes "

389 "suc˚ssfuŒy\n", 
__FILE__
, 
__LINE__
,

390 
	`SCEP_TYPE
(
msg
->
mesßgeTy≥
));

392 
îr
:

393 i‡(
debug
)

394 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÉrrorÑeturn fromÉncode\n",

395 
__FILE__
, 
__LINE__
);

396 
	`ERR_¥öt_îr‹s
(
bio_îr
);

398 
	}
}

	@lib/fingerprint.c

9 
	~<fögî¥öt.h
>

10 
	~<›ís¶/bio.h
>

11 
	~<›ís¶/evp.h
>

12 
	~<›ís¶/md5.h
>

13 
	~<öô.h
>

14 
	~<°rög.h
>

16 
	gÂ_bœnks
 = 0;

24 
	$fögî¥öt_cmp
(c⁄° *
f1
, c⁄° *
f2
) {

25 
l1
, 
l2
;

26 
l1
 = 
	`°æí
(
f1
); 
l2
 = såÀn(
f2
);

27 i‡(
l1
 =
l2
) {

28  
	`°rˇ£cmp
(
f1
, 
f2
);

30 i‡(
l1
 > 
l2
) {

31  ((
	`°∫ˇ£cmp
(
f1
, 
f2
, 8) != 0) ||

32 (
	`°∫ˇ£cmp
(
f1
 + 9, 
f2
 + 8, 8) != 0) ||

33 (
	`°∫ˇ£cmp
(
f1
 + 18, 
f2
 + 16, 8) != 0) ||

34 (
	`°∫ˇ£cmp
(
f1
 + 27, 
f2
 + 24, 8) != 0));

36  ((
	`°∫ˇ£cmp
(
f2
, 
f1
, 8) != 0) ||

37 (
	`°∫ˇ£cmp
(
f2
 + 9, 
f1
 + 8, 8) != 0) ||

38 (
	`°∫ˇ£cmp
(
f2
 + 18, 
f1
 + 16, 8) != 0) ||

39 (
	`°∫ˇ£cmp
(
f2
 + 27, 
f1
 + 24, 8) != 0));

42 
	}
}

44 *
	$¥öèbÀ_fögî¥öt
(*
Â
) {

45 *
Ω
, *
p
;

46 
i
;

49 
Ω
 = (*)
	`mÆloc
(2 * 
MD5_DIGEST_LENGTH
 + 2 + 
Â_bœnks
 * 3);

50 
p
 = 
Ω
;

51 
i
 = 0; i < 
MD5_DIGEST_LENGTH
; i++, 
p
 += 2) {

52 i‡(
Â_bœnks
)

53 i‡((
i
 > 0Ë&& ((ò% 4Ë=0)Ë
p
 += 1;

54 
	`•rötf
((*)
p
, "%02X ", 
Â
[
i
]);

56 
Ω
[2 * 
MD5_DIGEST_LENGTH
 + 3 * 
Â_bœnks
] = '\0';

57 i‡(
debug
)

58 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åhe fingerprint is '%s'\n",

59 
__FILE__
, 
__LINE__
, 
Ω
);

60  
Ω
;

61 
	}
}

63 *
	$fögî¥öt
(*
d©a
, 
Àngth
) {

64 
MD5_CTX
 
c
;

65 
md
[
MD5_DIGEST_LENGTH
];

68 i‡(
debug
)

69 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: computing MD5 fingerprint\n",

70 
__FILE__
, 
__LINE__
);

74 
	`MD5_Inô
(&
c
);

75 
	`MD5_Upd©e
(&
c
, 
d©a
, 
Àngth
);

76 
	`MD5_FöÆ
(
md
, &
c
);

78  
	`¥öèbÀ_fögî¥öt
(
md
);

79 
	}
}

81 *
	$x509_key_fögî¥öt
(
X509_REQ
 *
ªq
) {

82 *
d©a
;

83 
Àngth
;

84 *
Â
;

85 
BIO
 *
bio
;

88 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

91 
	`i2d_PUBKEY_bio
(
bio
, 
	`X509_REQ_gë_pubkey
(
ªq
));

94 
Àngth
 = 
	`BIO_gë_mem_d©a
(
bio
, &
d©a
);

97 
Â
 = 
	`fögî¥öt
(
d©a
, 
Àngth
);

100 
	`BIO_‰ì
(
bio
);

101  
Â
;

102 
	}
}

104 *
	$key_fögî¥öt
(
EVP_PKEY
 *
key
) {

105 
X509_REQ
 *
ªq
;

106 *
ªsu…
;

109 
ªq
 = 
	`X509_REQ_√w
();

112 
	`X509_REQ_£t_pubkey
(
ªq
, 
key
);

115 
ªsu…
 = 
	`x509_key_fögî¥öt
(
ªq
);

120  
ªsu…
;

121 
	}
}

	@lib/getcert.c

8 
	~<c⁄fig.h
>

9 
	~<gë˚π.h
>

10 
	~<öô.h
>

11 
	~<›ís¶/bio.h
>

12 
	~<›ís¶/pkcs7.h
>

13 
	~<›ís¶/îr.h
>

14 
	~<uni°d.h
>

15 
	~<°dlib.h
>

16 
	~<°dio.h
>

17 
	~<î∫o.h
>

18 
	~<°rög.h
>

19 
	~<f˙é.h
>

20 
	~<s˚∂d≠.h
>

21 
	~<goodª∂y.h
>

23 
	$gë˚π
(
s˚p_t
 *
s˚p
) {

24 
PKCS7_ISSUER_AND_SERIAL
 *
üs
;

25 
s˚pmsg_t
 *
msg
;

27 i‡(
debug
)

28 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificateáccess msgÑeceived\n",

29 
__FILE__
, 
__LINE__
);

30 
msg
 = &
s˚p
->
ªque°
;

33 i‡((
debug
Ë&& (
tmµ©h
)) {

34 
fûíame
[1024];

35 
fd
;

36 
	`¢¥ötf
(
fûíame
, (filename),

37 "%s/gë˚π.%d", 
tmµ©h
, 
	`gëpid
());

38 
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_TRUNC
 | 
O_CREAT
, 0666);

39 i‡(
fd
 < 0) {

40 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open file %s: "

41 "%†(%d)\n", 
fûíame
, 
__FILE__
, 
__LINE__
,

42 
	`°ªº‹
(
î∫o
),Érrno);

43 
îr
;

45 i‡(
msg
->
Àngth
 !
	`wrôe
(
fd
, msg->
d©a
, msg->length)) {

46 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo completely write "

47 "ªque°: %†(%d)\n", 
__FILE__
, 
__LINE__
,

48 
	`°ªº‹
(
î∫o
),Érrno);

49 
îr
;

51 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: GetCertÑequest writtenÅo %s\n",

52 
__FILE__
, 
__LINE__
, 
fûíame
);

53 
	`˛o£
(
fd
);

58 
üs
 = 
msg
->
rd
.
i£r
;

59 i‡(
debug
) {

60 
issuî
[1024];

61 
	`X509_NAME_⁄ñöe
(
üs
->
issuî
, issuer, (issuer));

62 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest for Cert from CA %s\n",

63 
__FILE__
, 
__LINE__
, 
issuî
);

68 i‡(
	`ld≠_gë_˚π_‰om_issuî_™d_£rül
(
s˚p
, 
üs
) < 0) {

69 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificateÇot found in "

70 "dúe˘‹y\n", 
__FILE__
, 
__LINE__
);

71 
îr
;

75 i‡(
	`goodª∂y
(
s˚p
, 0) < 0) {

76 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öreparing OKÑeply failed\n",

77 
__FILE__
, 
__LINE__
);

78 
îr
;

85 
îr
:

86 
	`ERR_¥öt_îr‹s
(
bio_îr
);

88 
	}
}

	@lib/getcertinitial.c

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<s˚p.h
>

11 
	~<öô.h
>

12 
	~<gë˚πöôül.h
>

13 
	~<goodª∂y.h
>

14 
	~<badª∂y.h
>

15 
	~<c⁄fig.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/°©.h
>

29 
	$gë˚πöôül
(
s˚p_t
 *
s˚p
) {

30 
fûíame
[1024];

31 
°©
 
sb
;

32 
s˚pmsg_t
 *
msg
;

33 
havîeq
 = 0;

35 i‡(
debug
)

36 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: handling GetCertInitial\n",

37 
__FILE__
, 
__LINE__
);

38 
msg
 = &
s˚p
->
ªque°
;

42 i‡(
	`å™scheck_ªje˘ed
(
s˚p
)) {

43 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_FAILURE
);

54 
s˚p
->
˛õ¡ªq
 = 
NULL
;

55 i‡(
	`å™scheck_gø¡ed
(
s˚p
)) {

56 
	`goodª∂y
(
s˚p
, 1);

62 i‡(
	`å™scheck_≥ndög
(
s˚p
)) {

63 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_PENDING
);

73 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: don'tÑeally know whatÅo do\n",

74 
__FILE__
, 
__LINE__
);

76 
	}
}

	@lib/getcrl.c

8 
	~<gë¸l.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<uni°d.h
>

11 
	~<f˙é.h
>

12 
	~<öô.h
>

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/pkcs7.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<î∫o.h
>

18 
	~<°rög.h
>

19 
	~<ícode.h
>

29 
	$gë¸l
(
s˚p_t
 *
s˚p
) {

30 
PKCS7_ISSUER_AND_SERIAL
 *
üs
;

31 
X509
 
x
;

32 
X509_CINF
 
cöf
;

33 
s˚pmsg_t
 *
ªque°
, *
ª∂y
;

35 
ªque°
 = &
s˚p
->request;

36 
ª∂y
 = &
s˚p
->reply;

39 
ª∂y
->
mesßgeTy≥
 = 
SCEP_MESSAGE_TYPE_CERTREP
;

40 
ª∂y
->
pkiSètus
 = 
SCEP_PKISTATUS_FAILURE
;

41 i‡(
debug
)

42 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öreparingá CertRep message with "

43 "CRL\n", 
__FILE__
, 
__LINE__
);

47 i‡((
debug
Ë&& (
tmµ©h
)) {

48 
fûíame
[1024];

49 
fd
;

50 
	`¢¥ötf
(
fûíame
, (filename),

51 "%s/gë¸l.%d", 
tmµ©h
, 
	`gëpid
());

52 
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_TRUNC
 | 
O_CREAT
, 0666);

53 i‡(
fd
 < 0) {

54 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open file: "

55 "%†(%d)\n", 
__FILE__
, 
__LINE__
,

56 
	`°ªº‹
(
î∫o
),Érrno);

57 
îr
;

59 i‡(
ªque°
->
Àngth
 !
	`wrôe
(
fd
,Ñeque°->
d©a
,Ñequest->length)) {

60 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo writeÑequest: "

61 "%†(%d)\n", 
__FILE__
, 
__LINE__
,

62 
	`°ªº‹
(
î∫o
),Érrno);

63 
îr
;

65 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CetCRLÑequest writtenÅo %s\n",

66 
__FILE__
, 
__LINE__
, 
fûíame
);

67 
	`˛o£
(
fd
);

74 
üs
 = 
ªque°
->
rd
.
i£r
;

75 i‡(
üs
 =
NULL
) {

76 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest seemsÅo bÜackingán "

77 "issuîánd sîü»fõld\n", 
__FILE__
, 
__LINE__
);

78 
îr
;

85 
x
.
˚π_öfo
 = &
cöf
;

86 
cöf
.
£rülNumbî
 = 
üs
->
£rül
;

87 
cöf
.
issuî
 = 
üs
->issuer;

88 i‡((
cöf
.
issuî
 =
NULL
Ë|| (cöf.
£rülNumbî
 == NULL)) {

89 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: issueránd serial seemsÅo be "

90 "öcom∂ëe\n", 
__FILE__
, 
__LINE__
);

91 
îr
;

93 i‡(
	`X509_issuî_™d_£rül_cmp
(
s˚p
->
ˇ˚π
, &
x
) != 0) {

94 
dn1
[1024], 
dn2
[1024];

95 
	`X509_NAME_⁄ñöe
(
üs
->
issuî
, 
dn1
, (dn1));

96 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
s˚p
->
ˇ˚π
), 
dn2
,

97 (
dn2
));

98 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: issueránd serial don't match: "

99 "%s, %s\n", 
__FILE__
, 
__LINE__
, 
dn1
, 
dn2
);

100 
îr
;

102 i‡(
debug
)

103 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÅheÑequest matches our CRL\n",

104 
__FILE__
, 
__LINE__
);

109 
ª∂y
->
rd
.
p7
 = 
	`PKCS7_√w
();

110 
	`PKCS7_£t_ty≥
(
ª∂y
->
rd
.
p7
, 
NID_pkcs7_sig√d
);

111 
	`PKCS7_c⁄ã¡_√w
(
ª∂y
->
rd
.
p7
, 
NID_pkcs7_d©a
);

112 
	`PKCS7_add_¸l
(
ª∂y
->
rd
.
p7
, 
s˚p
->
¸l
);

113 i‡(
debug
)

114 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: PKCS#7 containing CRL created\n",

115 
__FILE__
, 
__LINE__
);

123 i‡(
debug
)

124 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: have clientcertát %pánd self "

125 "sig√d cîà© %p\n", 
__FILE__
, 
__LINE__
,

126 
s˚p
->
˛õ¡˚π
, s˚p->
£lfsig√d˚π
);

129 i‡(
debug
)

130 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: GetCRLÑeplyÑeadyÅo send\n",

131 
__FILE__
, 
__LINE__
);

133 
ª∂y
->
pkiSètus
 = 
SCEP_PKISTATUS_SUCCESS
;

136 
îr
:

137 
	`ERR_¥öt_îr‹s
(
bio_îr
);

139 
	}
}

	@lib/goodreply.c

8 
	~<c⁄fig.h
>

9 
	~<goodª∂y.h
>

10 
	~<badª∂y.h
>

11 
	~<öô.h
>

12 
	~<›ís¶/pkcs7.h
>

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/îr.h
>

16 
	~<sy¶og.h
>

17 
	~<s˚∂d≠.h
>

18 
	~<ícode.h
>

27 
	$goodª∂y
(
s˚p_t
 *
s˚p
, 
°‹e
) {

28 
fûíame
[1024];

29 
BIO
 *
˚πbio
;

30 
s˚pmsg_t
 *
ª∂y
;

32 
ª∂y
 = &
s˚p
->reply;

35 i‡(
debug
)

36 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öreparingá SUCCESSÑeply\n",

37 
__FILE__
, 
__LINE__
);

40 
ª∂y
->
pkiSètus
 = 
SCEP_PKISTATUS_SUCCESS
;

43 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/gø¡ed/%s.dî", 
OPENSCEPDIR
,

44 
s˚p
->
å™sId
);

45 i‡(
debug
)

46 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: granted certificate in %s\n",

47 
__FILE__
, 
__LINE__
, 
fûíame
);

48 i‡(
NULL
 =(
˚πbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
()))) {

49 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotállocate bioÅoÑead cert\n",

50 
__FILE__
, 
__LINE__
);

51 
îr
;

53 i‡(
	`BIO_ªad_fûíame
(
˚πbio
, 
fûíame
) <= 0) {

54 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open cert file\n",

55 
__FILE__
, 
__LINE__
);

56 
îr
;

60 
s˚p
->
˛õ¡˚π
 = 
	`d2i_X509_bio
(
˚πbio
, 
NULL
);

61 i‡(
s˚p
->
˛õ¡˚π
 =
NULL
) {

62 
ª∂y
->
Áûöfo
 = 
SCEP_FAILURE_BADCERTID
;

63 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_FAILURE
);

69 
˛õ¡
[1024];

70 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
s˚p
->
˛õ¡˚π
),

71 
˛õ¡
, (client));

72 
	`sy¶og
(
LOG_INFO
, "%s:%d: sending certificateÅo %s",

73 
__FILE__
, 
__LINE__
, 
˛õ¡
);

77 i‡(
	`ld≠_°‹e_˚π
(
s˚p
) < 0) {

78 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åhere wasáÖroblem storingÅhe "

79 "˚πifiˇã i¿thêdúe˘‹y\n", 
__FILE__
, 
__LINE__
);

80 
îr
;

84 
ª∂y
->
rd
.
p7
 = 
	`PKCS7_√w
();

85 
	`PKCS7_£t_ty≥
(
ª∂y
->
rd
.
p7
, 
NID_pkcs7_sig√d
);

86 
	`PKCS7_c⁄ã¡_√w
(
ª∂y
->
rd
.
p7
, 
NID_pkcs7_d©a
);

87 
	`PKCS7_add_˚πifiˇã
(
ª∂y
->
rd
.
p7
, 
s˚p
->
˛õ¡˚π
);

88 
	`PKCS7_add_˚πifiˇã
(
ª∂y
->
rd
.
p7
, 
s˚p
->
ˇ˚π
);

98 
îr
:

99 
	`ERR_¥öt_îr‹s
(
bio_îr
);

100 
	`sy¶og
(
LOG_ERR
, "%s:%d: goodreply failedÅoÖrepareáÑeply",

101 
__FILE__
, 
__LINE__
);

103 
	}
}

	@lib/grant.c

8 
	~<c⁄fig.h
>

9 
	~<gø¡.h
>

10 
	~<öô.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/waô.h
>

13 
	~<uni°d.h
>

14 
	~<°rög.h
>

15 
	~<î∫o.h
>

16 
	~<sy¶og.h
>

24 
	$˚π_gø¡
(
s˚p_t
 *
s˚p
) {

25 *
cmd
;

26 
°
;

27 
pid_t
 
pid
;

39 
cmd
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "grantcmd");

40 i‡(
cmd
 =
NULL
) {

41 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço grant commandÇame defined\n",

42 
__FILE__
, 
__LINE__
);

43 
îr
;

47 
pid
 = 
	`f‹k
();

48 i‡(
pid
 < 0) {

49 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot fork: %s (%d)\n",

50 
__FILE__
, 
__LINE__
, 
	`°ªº‹
(
î∫o
),Érrno);

51 
îr
;

53 i‡(
pid
 > 0) {

55 i‡(
pid
 !
	`waôpid
’id, &
°
, 0)) {

56 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: wait failed: %s (%d)\n",

57 
__FILE__
, 
__LINE__
, 
	`°ªº‹
(
î∫o
),Érrno);

58 
îr
;

62 i‡(!
	`WIFEXITED
(
°
)) {

63 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: grant command failed\n",

64 
__FILE__
, 
__LINE__
);

65 
îr
;

69 i‡(
	`WEXITSTATUS
(
°
)) {

70 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificate grant cmd "

71 "'%s' faûed\n", 
__FILE__
, 
__LINE__
, 
cmd
);

72 
îr
;

74 
	`sy¶og
(
LOG_DEBUG
, "%s:%d: certificate grantedáutomatically",

75 
__FILE__
, 
__LINE__
);

78 
	`dup2
(2, 1);

81 
	`exe˛
(
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "grantcmd"),

82 "s˚pgø¡", 
s˚p
->
å™sId
, 
NULL
);

83 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÉxecÅhe grant command: "

84 "%†(%d)\n", 
__FILE__
, 
__LINE__
, 
	`°ªº‹
(
î∫o
),

85 
î∫o
);

86 
	`exô
(
EXIT_FAILURE
);

90 
îr
:

91 
	`sy¶og
(
LOG_ERR
, "%s:%d: gø¡ög cîtifiˇã faûed", 
__FILE__
,

92 
__LINE__
);

94 
	}
}

	@lib/http.c

9 
	~<c⁄fig.h
>

10 
	~<hâp.h
>

11 
	~<s˚p.h
>

12 
	~<öô.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/sockë.h
>

15 
	~<√tdb.h
>

16 
	~<î∫o.h
>

17 
	~<°dlib.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<›ís¶/îr.h
>

21 
	~<¨∑/öë.h
>

27 
	$∑r£uæ
(
s˚p_t
 *
s˚p
, *
uæ
) {

28 *
ho°
, *
∑th
, *
p‹t
;

31 
s˚p
->
h
.
hâµ‹t
 = 80;

34 i‡(
	`°∫cmp
(
uæ
, "http://", 7)) {

35 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: URL '%s' doesÇot begin with "

36 "'hâp://'\n", 
__FILE__
, 
__LINE__
, 
uæ
);

37 
îr
;

39 
ho°
 = 
	`°rdup
(
uæ
 + 7);

42 
∑th
 = 
	`°rchr
(
ho°
, '/');

43 i‡(
∑th
 =
NULL
) {

44 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÇoÖath component,ássuming '/'\n",

45 
__FILE__
, 
__LINE__
);

46 
s˚p
->
h
.
hâµ©h
 = "/";

48 
s˚p
->
h
.
hâµ©h
 = 
	`°rdup
(
∑th
);

49 *
∑th
 = '\0';

54 
p‹t
 = 
	`°rchr
(
ho°
, ':');

55 i‡(
p‹t
 !
NULL
) {

56 *
p‹t
 = '\0';

57 
p‹t
++;

58 
s˚p
->
h
.
hâµ‹t
 = 
	`©oi
(
p‹t
);

62 
s˚p
->
h
.
hâpho°
 = 
ho°
;

65 i‡(
debug
)

66 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: URL: %s|%d|%s\n", 
__FILE__
,

67 
__LINE__
, 
s˚p
->
h
.
hâpho°
, s˚p->h.
hâµ‹t
,

68 
s˚p
->
h
.
hâµ©h
);

71 
îr
:

72 
	`ERR_¥öt_îr‹s
(
bio_îr
);

74 
	}
}

79 *
	$uæícode
(c⁄° *
°rög
) {

80 *
ªsu…
, *
p
, *
q
;

81 
l
;

84 
l
 = 3 * 
	`°æí
(
°rög
) + 1;

85 
ªsu…
 = (*)
	`mÆloc
(
l
);

86 
	`mem£t
(
ªsu…
, 0, 
l
);

89 
p
 = 
°rög
, 
q
 = 
ªsu…
; *p;Ö++) {

90 *
p
) {

92 
	`°r˝y
(
q
, "%0A"); q += 3;

95 
	`°r˝y
(
q
, "%2B"); q += 3;

98 
	`°r˝y
(
q
, "%2D"); q += 3;

101 
	`°r˝y
(
q
, "%3D"); q += 3;

104 *(
q
++Ë*
p
;

108  
ªsu…
;

109 
	}
}

115 
BIO
 *
	$gëªque°
(
s˚p_t
 *
s˚p
) {

116 
s
, 
byãs
, 
u£d
, 
rc
, 
l
;

117 
sockaddr_ö
 
ß
;

118 
ho°ít
 *
hï
;

119 
hódîs
[20480];

120 *
buf„r
;

121 *
p
;

122 
BIO
 *
bio
;

125 i‡((
s
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0)) < 0) {

126 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotállocate socket for HTTP\n",

127 
__FILE__
, 
__LINE__
);

128 
îr
;

130 i‡(
NULL
 =(
hï
 = 
	`gëho°by«me
(
s˚p
->
h
.
hâpho°
))) {

131 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑesolveÇame '%s': "

132 "%†(%d)\n", 
__FILE__
, 
__LINE__
, 
s˚p
->
h
.
hâpho°
,

133 
	`°ªº‹
(
î∫o
),Érrno);

134 
îr
;

136 
	`mem˝y
(&
ß
.
sö_addr
, 
hï
->
h_addr
, hï->
h_Àngth
);

137 
ß
.
sö_p‹t
 = 
	`ht⁄s
(
s˚p
->
h
.
hâµ‹t
);

138 
ß
.
sö_Ámûy
 = 
AF_INET
;

139 i‡(
debug
)

140 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: connectingÅo %s:%hd -> %s\n",

141 
__FILE__
, 
__LINE__
, 
s˚p
->
h
.
hâpho°
, 
	`¡ohs
(
ß
.
sö_p‹t
),

142 
	`öë_¡ﬂ
(
ß
.
sö_addr
));

144 i‡(
	`c⁄√˘
(
s
, (
sockaddr
 *)&
ß
, (sa)) < 0) {

145 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot connectÅoÑemote host: "

146 "%†(%d)\n", 
__FILE__
, 
__LINE__
, 
	`°ªº‹
(
î∫o
),

147 
î∫o
);

148 
îr
;

152 
p
 = 
	`uæícode
(
s˚p
->
ªque°
.
d©a
);

153 i‡(
debug
)

154 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest data is '%24.24s...%24.24s'\n",

155 
__FILE__
, 
__LINE__
, 
p
,Ö + 
	`°æí
(p) - 24);

156 i‡(
debug
 > 1) {

157 
fûíame
[64];

158 
FILE
 *
s˚pfûe
;

159 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%d-s˚p.b64", 
tmµ©h
,

160 
	`gëpid
());

161 i‡(
NULL
 !(
s˚pfûe
 = 
	`f›í
(
fûíame
, "w"))) {

162 
	`Âuts
(
s˚p
->
ªque°
.
d©a
, 
s˚pfûe
);

163 
	`f˛o£
(
s˚pfûe
);

168 
	`¢¥ötf
(
hódîs
, (headers),

170 "HTTP/1.0\r\n\r\n", 
s˚p
->
h
.
hâµ©h
, 
p
);

171 i‡(
debug
)

172 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest is '%68.68s...%21.21s'\n",

173 
__FILE__
, 
__LINE__
,

174 
hódîs
, hódî†+ 
	`°æí
(headers) - 21);

175 
	`wrôe
(
s
, 
hódîs
, 
	`°æí
(headers));

178 
buf„r
 = (*)
	`mÆloc
(1024);

179 
u£d
 = 0;

180 (
byãs
 = 
	`ªad
(
s
, &
buf„r
[
u£d
], 1024)) > 0) {

181 
u£d
 +
byãs
;

182 
buf„r
 = (*)
	`ªÆloc
(buf„r, 
u£d
 + 1024);

184 
buf„r
[
u£d
] = '\0';

187 
	`ssˇnf
(
buf„r
, "%†%d ", 
hódîs
, &
rc
);

188 i‡(
debug
)

189 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: HTTPÑëu∫ code: %d\n", 
__FILE__
,

190 
__LINE__
, 
rc
);

191 i‡(
rc
 >= 300) {

192 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: HTTPÑeturn code %d >= 300\n",

193 
__FILE__
, 
__LINE__
, 
rc
);

194 
îr
;

198 i‡(
	`°r°r
(
buf„r
, "≠∂iˇti⁄/x-pki-mesßge"Ë=
NULL
) {

199 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeply seemsÅo have wrong content "

200 "ty≥\n", 
__FILE__
, 
__LINE__
);

201 
îr
;

203 i‡(
debug
)

204 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÑïlyÅy≥ c‹ª˘\n", 
__FILE__
,

205 
__LINE__
);

208 i‡((
p
 = 
	`°r°r
(
buf„r
, "\n\n")))Ö += 2;

209 i‡(
p
 =
NULL
)

210 i‡((
p
 = 
	`°r°r
(
buf„r
, "\n\r\n\r")))Ö += 4;

211 i‡(
p
 =
NULL
)

212 i‡((
p
 = 
	`°r°r
(
buf„r
, "\r\n\r\n")))Ö += 4;

213 i‡(
p
 =
NULL
) {

214 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeply content marker (two "

215 "c⁄£cutivê√wlöesËnŸ found\n", 
__FILE__
,

216 
__LINE__
);

217 
îr
;

219 i‡(
debug
)

220 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeply from server: %*.*s\n",

221 
__FILE__
, 
__LINE__
, 
p
 - 
buf„r
,Ö - buffer, buffer);

223 i‡(
debug
)

224 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: hódîÜígth: %d\n", 
__FILE__
,

225 
__LINE__
, 
p
 - 
buf„r
);

226 
l
 = 
u£d
 - (
p
 - 
buf„r
);

227 i‡(
debug
)

228 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeply content hasÜength %d\n",

229 
__FILE__
, 
__LINE__
, 
l
);

232 
bio
 = 
	`BIO_√w_mem_buf
(
p
, 
l
);

233  
bio
;

236 
îr
:

237 
	`ERR_¥öt_îr‹s
(
bio_îr
);

238  
NULL
;

239 
	}
}

	@lib/init.c

9 
	~<öô.h
>

10 
	~<c⁄fig.h
>

11 
	~<›ís¶/bio.h
>

12 
	~<›ís¶/evp.h
>

13 
	~<›ís¶/≥m.h
>

14 
	~<›ís¶/îr.h
>

15 
	~<›ís¶/ønd.h
>

16 
	~<°rög.h
>

17 
	~<lbî.h
>

18 
	~<ld≠.h
>

19 
	~<sy¶og.h
>

20 
	~<›ís˚p_vîs.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/°©.h
>

23 
	~<uni°d.h
>

24 
	~<›ís˚p_îr.h
>

26 
	#TMPPATH
 "/v¨/tmp/›ís˚p"

	)

28 
	gdebug
 = 1;

29 *
	gtmµ©h
 = 
NULL
;

30 
BIO
 *
	gbio_îr
 = 
NULL
;

33 
	mnid
;

34 *
	moid
;

35 *
	m«me1
;

36 *
	m«me2
;

37 } 
	tniddef_t
;

38 
	#NEW_NIDS
 8

	)

39 
niddef_t
 
	gs˚p_oid_def
[
NEW_NIDS
] = {

55 
	$s˚pöô
() {

56 
i
;

57 
øndpoﬁ
[1024];

58 
°©
 
sb
;

61 
	`›ílog
("s˚p", 
LOG_PID
|
LOG_NDELAY
, 
LOG_FACILITY
);

64 
	`sy¶og
(
LOG_DEBUG
, "vîsi⁄ %†°¨tög", 
›ís˚p_vîsi⁄
.
v_l⁄g
);

67 
	`ERR_lﬂd_¸y±o_°rögs
();

68 i‡(
debug
)

69 
	`Ârötf
(
°dîr
, "%s:%d: cry±ÿ°rög†lﬂded\n", 
__FILE__
,

70 
__LINE__
);

72 
	`ERR_lﬂd_OPENSCEP_°rögs
();

73 i‡(
debug
)

74 
	`Ârötf
(
°dîr
, "%s:%d: o≥ns˚∞°rög†lﬂded\n", 
__FILE__
,
__LINE__
);

78 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

79 i‡(
debug
)

80 
	`Ârötf
(
°dîr
, "%s:%d:álg‹ôhm†added\n", 
__FILE__
,

81 
__LINE__
);

84 
	`RAND_£ed
(
øndpoﬁ
, (randpool));

85 i‡(
debug
)

86 
	`Ârötf
(
°dîr
, "%s:%d:Ñ™dom sour˚ sìded\n", 
__FILE__
,

87 
__LINE__
);

91 i‡((
bio_îr
 = 
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

92 
	`BIO_£t_Â
(
bio_îr
, 
°dîr
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

93 i‡(
debug
)

94 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: stderr BIO initialized\n",

95 
__FILE__
, 
__LINE__
);

98 
i
 = 0; i < 
NEW_NIDS
; i++) {

99 
s˚p_oid_def
[
i
].
nid
 = 
	`OBJ_¸óã
(s˚p_oid_def[i].
oid
,

100 
s˚p_oid_def
[
i
].
«me1
, s˚p_oid_def[i].
«me2
);

101 i‡(
debug
)

102 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ádded oid %s forÇame %s\n",

103 
__FILE__
, 
__LINE__
, 
s˚p_oid_def
[
i
].
oid
,

104 
s˚p_oid_def
[
i
].
«me1
);

108 i‡(
	`°©
(
TMPPATH
, &
sb
) == 0) {

109 i‡(
	`S_ISDIR
(
sb
.
°_mode
))

110 i‡(
	`ac˚ss
(
TMPPATH
, 
W_OK
) == 0)

111 
tmµ©h
 = 
TMPPATH
;

116 
	}
}

118 
	$s˚p_˛ór
(
s˚p_t
 *
s˚p
) {

120 i‡(
s˚p
)

121 
	`mem£t
(
s˚p
, 0, (
s˚p_t
));

122 
s˚p
->
check_å™sid
 = 1;

123 
s˚p
->
l
.
ld≠ho°
 = "localhost";

124 
s˚p
->
l
.
ld≠p‹t
 = 
LDAP_PORT
;

125 i‡(
debug
)

126 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: scep structure initialized\n",

127 
__FILE__
, 
__LINE__
);

128 
	}
}

130 
	$s˚p_c⁄fig
(
s˚p_t
 *
s˚p
, *
c⁄figfûe
) {

131 *
«me
;

132 
BIO
 *
bio
;

133 
ñöe
;

136 
s˚p
->
c⁄f
 = 
	`CONF_lﬂd
(
NULL
, (
c⁄figfûe
) ? configfile

137 : 
OPENSCEPDIR
 "/›ís˚p.˙f", &
ñöe
);

138 i‡(
s˚p
->
c⁄f
 =
NULL
) {

139 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑead config file %s\n",

140 
__FILE__
, 
__LINE__
, 
c⁄figfûe
);

141 
îr
;

145 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "debug");

146 i‡(
«me
) {

147 i‡(
	`©oi
(
«me
) > 0)

148 
debug
 = 
	`©oi
(
«me
);

149 i‡(
debug
)

150 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: conf sets debugÅo %d\n",

151 
__FILE__
, 
__LINE__
, 
debug
);

155 
s˚p
->
«me
 = 
	`CONF_gë_°rög
(s˚p->
c⁄f
, "scepd", "name");

156 i‡(
debug
)

157 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Çame: %s\n", 
__FILE__
, 
__LINE__
,

158 
s˚p
->
«me
);

161 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "cacert");

162 
«me
 = («meË?Çamê: 
OPENSCEPDIR
 "/cacert.pem";

163 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

164 
	`BIO_ªad_fûíame
(
bio
, 
«me
);

165 
s˚p
->
ˇ˚π
 = 
	`PEM_ªad_bio_X509
(
bio
, 
NULL
, NULL, NULL);

166 i‡(
s˚p
->
ˇ˚π
 =
NULL
) {

167 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑead CA "

168 "˚πifiˇã\n", 
__FILE__
, 
__LINE__
);

169 
îr
;

171 
	`BIO_‰ì
(
bio
);

172 i‡(
debug
)

173 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CA certificate from %sÑead\n",

174 
__FILE__
, 
__LINE__
, 
«me
);

176 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "cakey");

177 
«me
 = («meË?Çamê: 
OPENSCEPDIR
 "/cakey.pem";

178 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

179 
	`BIO_ªad_fûíame
(
bio
, 
«me
);

180 
s˚p
->
ˇpkey
 = 
	`PEM_ªad_bio_Priv©eKey
(
bio
, 
NULL
, NULL, NULL);

181 i‡(
s˚p
->
ˇpkey
 =
NULL
) {

182 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑeadÖrivate key\n",

183 
__FILE__
, 
__LINE__
);

184 
îr
;

186 
	`BIO_‰ì
(
bio
);

187 i‡(
debug
)

188 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CAÖrivate key from %sÑead\n",

189 
__FILE__
, 
__LINE__
, 
«me
);

191 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "crl");

192 
«me
 = («meË?Çamê: 
OPENSCEPDIR
 "/crl.pem";

193 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

194 
	`BIO_ªad_fûíame
(
bio
, 
«me
);

195 
s˚p
->
¸l
 = 
	`PEM_ªad_bio_X509_CRL
(
bio
, 
NULL
, NULL, NULL);

196 i‡(
s˚p
->
¸l
 =
NULL
) {

197 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑead CRL\n",

198 
__FILE__
, 
__LINE__
);

199 
îr
;

201 
	`BIO_‰ì
(
bio
);

202 i‡(
debug
)

203 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CA CRL from %sÑead\n",

204 
__FILE__
, 
__LINE__
, 
«me
);

207 
s˚p
->
l
.
ld≠ho°
 = 
	`CONF_gë_°rög
(s˚p->
c⁄f
, "ldap", "ldaphost");

208 
s˚p
->
l
.
ld≠p‹t
 = 
	`©oi
(
	`CONF_gë_°rög
(s˚p->
c⁄f
, "ldap", "ldapport"));

209 
s˚p
->
l
.
ld≠ba£
 = 
	`CONF_gë_°rög
(s˚p->
c⁄f
, "ldap", "ldapbase");

210 
s˚p
->
l
.
böddn
 = 
	`CONF_gë_°rög
(s˚p->
c⁄f
, "ldap", "binddn");

211 
s˚p
->
l
.
bödpw
 = 
	`CONF_gë_°rög
(s˚p->
c⁄f
, "ldap", "bindpw");

212 i‡(
debug
)

213 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: LDAPÖarametersÜdap://%s:%d, "

214 "ba£ %s, bödá†%s/%s\n", 
__FILE__
, 
__LINE__
,

215 
s˚p
->
l
.
ld≠ho°
, s˚p->l.
ld≠p‹t
,

216 (
s˚p
->
l
.
ld≠ba£
) ? scep->l.ldapbase : "(not set)",

217 (
s˚p
->
l
.
böddn
) ? scep->l.binddn : "(not set)",

218 (
s˚p
->
l
.
bödpw
) ? scep->l.bindpw : "(not set)");

221 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "automatic");

222 i‡(
«me
 !
NULL
) {

223 i‡(
	`°rˇ£cmp
(
«me
, "true") == 0) {

224 
s˚p
->
autom©ic
 = 1;

225 i‡(
debug
)

226 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomatic mode "

227 "íabÀd\n", 
__FILE__
, 
__LINE__
);

232 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "checktransid");

233 i‡(
«me
 !
NULL
) {

234 i‡((
	`°rˇ£cmp
(
«me
, "false") == 0) ||

235 (
	`°rˇ£cmp
(
«me
, "no") == 0)) {

236 
s˚p
->
check_å™sid
 = 0;

237 i‡(
debug
)

238 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: check ofÅransid "

240 
__FILE__
, 
__LINE__
);

245 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "proxycommunity");

246 i‡(
«me
 !
NULL
) {

247 
s˚p
->
communôy
 = 
	`°rdup
(
«me
);

248 i‡(
debug
)

249 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öroxy community is '%s'\n",

250 
__FILE__
, 
__LINE__
, 
s˚p
->
communôy
);

255 
îr
:

256 
	`ERR_¥öt_îr‹s
(
bio_îr
);

258 
	}
}

	@lib/isasu.c

8 
	~<›ís¶/x509.h
>

9 
	~<›ís¶/a¢1_mac.h
>

10 
	~<›ís¶/îr.h
>

11 
	~<ißsu.h
>

12 
	~<öô.h
>

13 
	~<uni°d.h
>

14 
	~<f˙é.h
>

15 
	~<›ís˚p_îr.h
>

26 
	$i2d_issuî_™d_subje˘
(
issuî_™d_subje˘_t
 *
a
, **
µ
) {

27 
	`M_ASN1_I2D_v¨s
(
a
);

28 
	`M_ASN1_I2D_Àn
(
a
->
issuî
, 
i2d_X509_NAME
);

29 
	`M_ASN1_I2D_Àn
(
a
->
subje˘
, 
i2d_X509_NAME
);

30 
	`M_ASN1_I2D_£q_tŸÆ
();

31 
	`M_ASN1_I2D_put
(
a
->
issuî
, 
i2d_X509_NAME
);

32 
	`M_ASN1_I2D_put
(
a
->
subje˘
, 
i2d_X509_NAME
);

33 
	`M_ASN1_I2D_föish
();

34 
	}
}

36 
issuî_™d_subje˘_t
 *
	$d2i_issuî_™d_subje˘
(
issuî_™d_subje˘_t
 **
a
,

37 **
µ
, 
Àngth
) {

38 
	`M_ASN1_D2I_v¨s
(
a
, 
issuî_™d_subje˘_t
 *,
issuî_™d_subje˘_√w
);

39 
	`M_ASN1_D2I_Inô
();

40 
	`M_ASN1_D2I_°¨t_£quí˚
();

41 
	`M_ASN1_D2I_gë
(
ªt
->
issuî
, 
d2i_X509_NAME
);

42 
	`M_ASN1_D2I_gë
(
ªt
->
subje˘
, 
d2i_X509_NAME
);

43 
	`M_ASN1_D2I_Föish
(
a
,
issuî_™d_subje˘_‰ì
,

44 
OPENSCEP_F_D2I_ISSUER_AND_SUBJECT
);

45 
	}
}

47 
issuî_™d_subje˘_t
 *
	$issuî_™d_subje˘_√w
() {

48 
issuî_™d_subje˘_t
 *
ªt
 = 
NULL
;

49 
ASN1_CTX
 
c
;

50 
	`M_ASN1_New_MÆloc
(
ªt
, 
issuî_™d_subje˘_t
);

51 
	`M_ASN1_New
(
ªt
->
issuî
, 
X509_NAME_√w
);

52 
	`M_ASN1_New
(
ªt
->
subje˘
, 
X509_NAME_√w
);

53  
ªt
;

54 
	`M_ASN1_New_Eº‹
(
OPENSCEP_F_ISSUER_AND_SUBJECT_NEW
);

55 
	}
}

57 
	$issuî_™d_subje˘_‰ì
(
issuî_™d_subje˘_t
 *
ißsu
) {

58 i‡(
NULL
 =
ißsu
) ;

59 
	`X509_NAME_‰ì
(
ißsu
->
issuî
);

60 
	`X509_NAME_‰ì
(
ißsu
->
subje˘
);

61 
	`OPENSSL_‰ì
(
ißsu
);

62 
	}
}

	@lib/iser.c

8 
	~<c⁄fig.h
>

9 
	~<i£r.h
>

10 
	~<öô.h
>

13 
PKCS7_ISSUER_AND_SERIAL
 *
	$d2i_PKCS7_ISSUER_AND_SERIAL_bio
(

14 
PKCS7_ISSUER_AND_SERIAL
 **
is
, 
BIO
 *
b
) {

15 
buf„r
[2048];

16 *
µ
;

17 
l
;

18 
PKCS7_ISSUER_AND_SERIAL
 *
i
;

21 
l
 = 
	`BIO_ªad
(
b
, 
buf„r
, (buffer));

22 i‡(
l
 <= 0) {

23 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Çÿd©®‰om bio\n", 
__FILE__
,

24 
__LINE__
);

25 
îr
;

29 
µ
 = 
buf„r
;

30 
i
 = 
	`d2i_PKCS7_ISSUER_AND_SERIAL
(
is
, &
µ
, 
l
);

31 i‡(
i
 =
NULL
) {

32 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode issueránd serial\n",

33 
__FILE__
, 
__LINE__
);

34 
îr
;

38  
i
;

41 
îr
:

42 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding of issueránd serial failed\n",

43 
__FILE__
, 
__LINE__
);

44  
NULL
;

45 
	}
}

47 
	$i2d_PKCS7_ISSUER_AND_SERIAL_bio
(
BIO
 *
b
, 
PKCS7_ISSUER_AND_SERIAL
 *
is
) {

48 
l
;

49 *
d©a
, *
µ
;

52 
l
 = 
	`i2d_PKCS7_ISSUER_AND_SERIAL
(
is
, 
NULL
);

53 i‡(
l
 <= 0)

57 
µ
 = 
d©a
 = (*)
	`Æloˇ
(
l
);

60 i‡(0 >
	`i2d_PKCS7_ISSUER_AND_SERIAL
(
is
, &
µ
))

64 
	`BIO_wrôe
(
b
, 
d©a
, 
l
);

65 
	`BIO_Êush
(
b
);

68  
l
;

69 
	}
}

	@lib/openscep_err.c

1 
	~<°dio.h
>

2 
	~<›ís¶/îr.h
>

3 
	~"›ís˚p_îr.h
"

6 #i‚de‡
OPENSSL_NO_ERR


7 
ERR_STRING_DATA
 
	gOPENSCEP_°r_fun˘s
[]=

9 {
ERR_PACK
(0,
OPENSCEP_F_D2I_ISSUER_AND_SUBJECT
,0), "D2I_ISSUER_AND_SUBJECT"},

10 {
ERR_PACK
(0,
OPENSCEP_F_D2I_PAYLOAD
,0), "D2I_PAYLOAD"},

11 {
ERR_PACK
(0,
OPENSCEP_F_ISSUER_AND_SUBJECT_NEW
,0), "ISSUER_AND_SUBJECT_NEW"},

12 {
ERR_PACK
(0,
OPENSCEP_F_PAYLOAD_NEW
,0), "PAYLOAD_NEW"},

13 {0,
NULL
}

16 
ERR_STRING_DATA
 
	gOPENSCEP_°r_ªas⁄s
[]=

18 {0,
NULL
}

23 #ifde‡
OPENSCEP_LIB_NAME


24 
ERR_STRING_DATA
 
	gOPENSCEP_lib_«me
[]=

26 {0 ,
OPENSCEP_LIB_NAME
},

27 {0,
NULL
}

32 
	gOPENSCEP_lib_îr‹_code
=0;

33 
	gOPENSCEP_îr‹_öô
=1;

35 
	$ERR_lﬂd_OPENSCEP_°rögs
()

37 i‡(
OPENSCEP_lib_îr‹_code
 == 0)

38 
OPENSCEP_lib_îr‹_code
=
	`ERR_gë_√xt_îr‹_libøry
();

40 i‡(
OPENSCEP_îr‹_öô
)

42 
OPENSCEP_îr‹_öô
=0;

43 #i‚de‡
OPENSSL_NO_ERR


44 
	`ERR_lﬂd_°rögs
(
OPENSCEP_lib_îr‹_code
,
OPENSCEP_°r_fun˘s
);

45 
	`ERR_lﬂd_°rögs
(
OPENSCEP_lib_îr‹_code
,
OPENSCEP_°r_ªas⁄s
);

48 #ifde‡
OPENSCEP_LIB_NAME


49 
OPENSCEP_lib_«me
->
îr‹
 = 
	`ERR_PACK
(
OPENSCEP_lib_îr‹_code
,0,0);

50 
	`ERR_lﬂd_°rögs
(0,
OPENSCEP_lib_«me
);

53 
	}
}

55 
	$ERR_u∆ﬂd_OPENSCEP_°rögs
()

57 i‡(
OPENSCEP_îr‹_öô
 == 0)

59 #i‚de‡
OPENSSL_NO_ERR


60 
	`ERR_u∆ﬂd_°rögs
(
OPENSCEP_lib_îr‹_code
,
OPENSCEP_°r_fun˘s
);

61 
	`ERR_u∆ﬂd_°rögs
(
OPENSCEP_lib_îr‹_code
,
OPENSCEP_°r_ªas⁄s
);

64 #ifde‡
OPENSCEP_LIB_NAME


65 
	`ERR_u∆ﬂd_°rögs
(0,
OPENSCEP_lib_«me
);

67 
OPENSCEP_îr‹_öô
=1;

69 
	}
}

71 
	$ERR_OPENSCEP_îr‹
(
fun˘i⁄
, 
ªas⁄
, *
fûe
, 
löe
)

73 i‡(
OPENSCEP_lib_îr‹_code
 == 0)

74 
OPENSCEP_lib_îr‹_code
=
	`ERR_gë_√xt_îr‹_libøry
();

75 
	`ERR_PUT_îr‹
(
OPENSCEP_lib_îr‹_code
,
fun˘i⁄
,
ªas⁄
,
fûe
,
löe
);

76 
	}
}

	@lib/openscep_vers.c

6 #ifde‡
_OPENSCEP_VERS_C_AS_HEADER_


8 #i‚de‡
_OPENSCEP_VERS_C_


9 
	#_OPENSCEP_VERS_C_


	)

11 
	#OPENSCEP_VERSION
 0x004202

	)

14 c⁄° 
	mv_hex
;

15 c⁄° *
	mv_sh‹t
;

16 c⁄° *
	mv_l⁄g
;

17 c⁄° *
	mv_ãx
;

18 c⁄° *
	mv_gnu
;

19 c⁄° *
	mv_web
;

20 c⁄° *
	mv_sccs
;

21 c⁄° *
	mv_rcs
;

22 } 
	t›ís˚p_vîsi⁄_t
;

24 
›ís˚p_vîsi⁄_t
 
›ís˚p_vîsi⁄
;

30 
	#_OPENSCEP_VERS_C_AS_HEADER_


	)

31 
	~"›ís˚p_vîs.c
"

32 #unde‡
_OPENSCEP_VERS_C_AS_HEADER_


34 
›ís˚p_vîsi⁄_t
 
	g›ís˚p_vîsi⁄
 = {

	@lib/payload.c

11 
	~<›ís¶/a¢1_mac.h
>

12 
	~<›ís¶/îr.h
>

13 
	~<›ís¶/x509.h
>

14 
	~<∑ylﬂd.h
>

15 
	~<öô.h
>

16 
	~<mis¶.h
>

17 
	~<s˚∂d≠.h
>

18 
	~<f˙é.h
>

19 
	~<›ís˚p_îr.h
>

24 
	$∑ylﬂd_buûd_‹igöÆ
(
∑ylﬂd_t
 *
∂
) {

25 *
r
 = 
NULL
, *
r2
;

26 
l
;

28 i‡(
debug
)

29 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: convertingÅype %dÖayload\n",

30 
__FILE__
, 
__LINE__
, 
∂
->
π
);

33 
∂
->
π
) {

35 
l
 = 
	`i2d_X509_REQ
(
∂
->
od
.
ªq
, 
NULL
);

36 
r2
 = 
r
 = (*)
	`mÆloc
(
l
);

37 
l
 = 
	`i2d_X509_REQ
(
∂
->
od
.
ªq
, &
r2
);

38 i‡(
debug
)

39 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖayloadÑequest converted "

40 "tÿDER: %d byãs\n", 
__FILE__
, 
__LINE__
, 
l
);

43 
l
 = 
	`i2d_NETSCAPE_SPKI
(
∂
->
od
.
•ki
, 
NULL
);

44 
r2
 = 
r
 = (*)
	`mÆloc
(
l
);

45 
l
 = 
	`i2d_NETSCAPE_SPKI
(
∂
->
od
.
•ki
, &
r2
);

46 i‡(
debug
)

47 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öayload SPKI converted "

48 "tÿDER: %d byãs\n", 
__FILE__
, 
__LINE__
, 
l
);

54 
	`ASN1_BIT_STRING_£t
(
∂
->
‹igöÆ
, 
r
, 
l
);

55 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: saved %d bytesát %p inÖl->original\n",

56 
__FILE__
, 
__LINE__
, 
l
, 
r
);

57 
	}
}

62 
∑ylﬂd_t
 *
	$∑ylﬂd_√w
() {

63 
∑ylﬂd_t
 *
p
 = 
NULL
;

64 
ASN1_CTX
 
c
;

65 
	`M_ASN1_New_MÆloc
(
p
, 
∑ylﬂd_t
);

66 
	`M_ASN1_New
(
p
->
ªque°ty≥
, 
ASN1_INTEGER_√w
);

67 
	`M_ASN1_New
(
p
->
‹igöÆ
, 
ASN1_BIT_STRING_√w
);

68 
	`M_ASN1_New
(
p
->
©åibuãs
, 
sk_X509_ATTRIBUTE_√w_nuŒ
);

69 
p
->
π
 = -1;

70 
p
->
od
.
ªq
 = 
NULL
;

71  
p
;

72 
	`M_ASN1_New_Eº‹
(
OPENSCEP_F_PAYLOAD_NEW
);

73 
	}
}

75 
	$∑ylﬂd_‰ì
(
∑ylﬂd_t
 *
a
) {

76 i‡(
NULL
 =
a
)

78 
	`ASN1_INTEGER_‰ì
(
a
->
ªque°ty≥
);

79 
	`ASN1_BIT_STRING_‰ì
(
a
->
‹igöÆ
);

80 
	`sk_X509_ATTRIBUTE_p›_‰ì
(
a
->
©åibuãs
, 
X509_ATTRIBUTE_‰ì
);

81 
a
->
π
) {

83 i‡(
a
->
od
.
ªq
) {

84 
	`X509_REQ_‰ì
(
a
->
od
.
ªq
);

85 
a
->
od
.
ªq
 = 
NULL
;

89 i‡(
a
->
od
.
•ki
) {

90 
	`NETSCAPE_SPKI_‰ì
(
a
->
od
.
•ki
);

91 
a
->
od
.
•ki
 = 
NULL
;

98 
	`OPENSSL_‰ì
(
a
);

99 
	}
}

104 
	$i2d_∑ylﬂd
(
∑ylﬂd_t
 *
a
, **
µ
) {

105 
	`M_ASN1_I2D_v¨s
(
a
);

106 i‡(
debug
)

107 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: i2d_payload called\n",

108 
__FILE__
, 
__LINE__
);

109 
	`∑ylﬂd_buûd_‹igöÆ
(
a
);

110 
	`M_ASN1_I2D_Àn
(
a
->
ªque°ty≥
, 
i2d_ASN1_INTEGER
);

111 
	`M_ASN1_I2D_Àn
(
a
->
‹igöÆ
, 
i2d_ASN1_BIT_STRING
);

112 
	`M_ASN1_I2D_Àn_IMP_SET_ty≥
(
X509_ATTRIBUTE
, 
a
->
©åibuãs
,

113 
i2d_X509_ATTRIBUTE
, 1);

114 
	`M_ASN1_I2D_£q_tŸÆ
();

115 
	`M_ASN1_I2D_put
(
a
->
ªque°ty≥
, 
i2d_ASN1_INTEGER
);

116 
	`M_ASN1_I2D_put
(
a
->
‹igöÆ
, 
i2d_ASN1_BIT_STRING
);

117 
	`M_ASN1_I2D_put_IMP_SET_ty≥
(
X509_ATTRIBUTE
, 
a
->
©åibuãs
,

118 
i2d_X509_ATTRIBUTE
, 1);

119 
	`M_ASN1_I2D_föish
();

120 
	}
}

122 
∑ylﬂd_t
 *
	$d2i_∑ylﬂd
(
∑ylﬂd_t
 **
a
, **
µ
, 
Àngth
) {

123 *
u
;

124 
l
;

125 
X509_REQ
 *
r1
;

126 
NETSCAPE_SPKI
 *
r2
;

128 
	`M_ASN1_D2I_v¨s
(
a
, 
∑ylﬂd_t
 *, 
∑ylﬂd_√w
);

129 
	`M_ASN1_D2I_Inô
();

130 
	`M_ASN1_D2I_°¨t_£quí˚
();

131 
	`M_ASN1_D2I_gë
(
ªt
->
ªque°ty≥
, 
d2i_ASN1_INTEGER
);

132 
	`M_ASN1_D2I_gë
(
ªt
->
‹igöÆ
, 
d2i_ASN1_BIT_STRING
);

133 
	`M_ASN1_D2I_gë_IMP_£t_ty≥
(
X509_ATTRIBUTE
, 
ªt
->
©åibuãs
,

134 
d2i_X509_ATTRIBUTE
, 
X509_ATTRIBUTE_‰ì
, 1);

135 
ªt
->
π
 = 
	`ASN1_INTEGER_gë
‘ë->
ªque°ty≥
);

136 i‡(
debug
)

137 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖayloadÅype: %d\n",

138 
__FILE__
, 
__LINE__
, 
ªt
->
π
);

139 
u
 = 
ªt
->
‹igöÆ
->
d©a
;

140 
l
 = 
ªt
->
‹igöÆ
->
Àngth
;

141 i‡(
debug
) {

142 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding %dÖayload bytes\n",

143 
__FILE__
, 
__LINE__
, 
l
);

144 i‡(
tmµ©h
) {

145 
fûíame
[1024];

146 
fd
;

148 
	`¢¥ötf
(
fûíame
, (filename),

149 "%s/%d.d-4-‹igöÆ.dî", 
tmµ©h
, 
	`gëpid
());

150 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: write original dataÅo "

151 "%s\n", 
__FILE__
, 
__LINE__
, 
fûíame
);

154 i‡(0 <(
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_CREAT


155 | 
O_TRUNC
, 066))) {

156 
	`wrôe
(
fd
, 
u
, 
l
);

157 
	`˛o£
(
fd
);

159 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open file "

160 "%s: %†(%d)\n", 
__FILE__
, 
__LINE__
,

161 
fûíame
, 
	`°ªº‹
(
î∫o
),Érrno);

165 
ªt
->
π
) {

167 
r1
 = 
NULL
;

168 
ªt
->
od
.
ªq
 = 
	`d2i_X509_REQ
(&
r1
, &
u
, 
l
);

171 
r2
 = 
NULL
;

172 
ªt
->
od
.
•ki
 = 
	`d2i_NETSCAPE_SPKI
(&
r2
, &
u
, 
l
);

175 
	`M_ASN1_D2I_Föish
(
a
, 
∑ylﬂd_‰ì
, 
OPENSCEP_F_D2I_PAYLOAD
);

177 
	}
}

182 
X509_REQ
 *
	$∑ylﬂd_gëªq
(
∑ylﬂd_t
 *
∂
) {

184 i‡(
∂
->
π
 != 0) {

185 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Çotá PKCS#10Ñequest\n",

186 
__FILE__
, 
__LINE__
);

187  
NULL
;

190  
∂
->
od
.
ªq
;

191 
	}
}

193 
NETSCAPE_SPKI
 *
	$∑ylﬂd_gë•ki
(
∑ylﬂd_t
 *
∂
) {

195 i‡(
∂
->
π
 != 1) {

196 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÇŸá¿SPKIÑeque°\n", 
__FILE__
,

197 
__LINE__
);

198  
NULL
;

201  
∂
->
od
.
•ki
;

202 
	}
}

204 
	$∑ylﬂd_gë_ªque°ty≥
(
∑ylﬂd_t
 *
∂
) {

205  
∂
->
π
;

206 
	}
}

212 
	$∑ylﬂd_‰ì_od
(
∑ylﬂd_t
 *
∂
) {

213 i‡(
NULL
 =
∂
->
od
.
ªq
)

215 
∂
->
π
) {

217 
	`X509_REQ_‰ì
(
∂
->
od
.
ªq
);

218 
∂
->
od
.
ªq
 = 
NULL
;

221 
	`NETSCAPE_SPKI_‰ì
(
∂
->
od
.
•ki
);

222 
∂
->
od
.
•ki
 = 
NULL
;

225 
	}
}

231 
BIO
 *
	$∑ylﬂd_£t_comm⁄
(
∑ylﬂd_t
 *
∂
, *
fûíame
) {

232 
BIO
 *
öbio
 = 
NULL
;

233 
	`∑ylﬂd_‰ì_od
(
∂
);

234 
öbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

235 
	`BIO_ªad_fûíame
(
öbio
, 
fûíame
);

236  
öbio
;

238 
	}
}

244 
	$∑ylﬂd_£t_ªq
(
∑ylﬂd_t
 *
∂
, 
X509_REQ
 *
ªq
) {

245 i‡(
debug
)

246 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: setting X509Ñeq inÖayload\n",

247 
__FILE__
, 
__LINE__
);

248 
∂
->
π
 = 0;

249 
	`ASN1_INTEGER_£t
(
∂
->
ªque°ty≥
,Öl->
π
);

250 
∂
->
od
.
ªq
 =Ñeq;

251 
	`∑ylﬂd_buûd_‹igöÆ
(
∂
);

253 
	}
}

254 
	$∑ylﬂd_£t_ªq_‰om_fûe
(
∑ylﬂd_t
 *
∂
, *
fûíame
) {

255 
BIO
 *
öbio
;

256 
öbio
 = 
	`∑ylﬂd_£t_comm⁄
(
∂
, 
fûíame
);

257 i‡(
öbio
 =
NULL
)

260 
	`∑ylﬂd_£t_ªq
(
∂
, 
	`d2i_X509_REQ_bio
(
öbio
, 
NULL
));

261 
	`BIO_‰ì
(
öbio
);

263 
	}
}

269 
	$∑ylﬂd_£t_•ki
(
∑ylﬂd_t
 *
∂
, 
NETSCAPE_SPKI
 *
•ki
) {

270 i‡(
debug
)

271 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: setting SPKI inÖayload\n",

272 
__FILE__
, 
__LINE__
);

273 
∂
->
π
 = 1;

274 
	`ASN1_INTEGER_£t
(
∂
->
ªque°ty≥
,Öl->
π
);

275 
∂
->
od
.
•ki
 = spki;

276 
	`∑ylﬂd_buûd_‹igöÆ
(
∂
);

278 
	}
}

279 
	$∑ylﬂd_£t_•ki_‰om_fûe
(
∑ylﬂd_t
 *
∂
, *
fûíame
) {

280 
BIO
 *
öbio
;

281 
öbio
 = 
	`∑ylﬂd_£t_comm⁄
(
∂
, 
fûíame
);

282 i‡(
öbio
 =
NULL
)

285 
	`∑ylﬂd_£t_•ki
(
∂
, 
	`d2i_NETSCAPE_SPKI_bio
(
öbio
, 
NULL
));

286 
	`BIO_‰ì
(
öbio
);

288 
	}
}

294 
EVP_PKEY
 *
	$∑ylﬂd_gë_pubkey
(
∑ylﬂd_t
 *
∂
) {

295 
∂
->
π
) {

297  
	`X509_REQ_gë_pubkey
(
∂
->
od
.
ªq
);

300  
	`NETSCAPE_SPKI_gë_pubkey
(
∂
->
od
.
•ki
);

303  
NULL
;

304 
	}
}

309 
	$∑ylﬂd_dn_to_©ås
(
∑ylﬂd_t
 *
∂
, *
dn
) {

310 
X509_NAME
 *
«me
;

311 
ASN1_OBJECT
 *
us
;

312 
ASN1_STRING
 *
as
;

313 
X509_NAME_ENTRY
 *
√
;

314 
i
, 
n
;

317 
«me
 = 
	`ld≠_to_x509
(
dn
);

318 i‡(
«me
 =
NULL
)

320 i‡(
debug
)

321 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: converted dn '%s'Åo X509_NAME "

322 "@%p\n", 
__FILE__
, 
__LINE__
, 
dn
, 
«me
);

325 
n
 = 
	`X509_NAME_íåy_cou¡
(
«me
);

326 i‡(
debug
)

327 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: X509_NAME has %d components\n",

328 
__FILE__
, 
__LINE__
, 
n
);

329 
i
 = 0; i < 
n
; i++) {

330 
√
 = 
	`X509_NAME_gë_íåy
(
«me
, 
i
);

331 
us
 = 
	`X509_NAME_ENTRY_gë_obje˘
(
√
);

332 
as
 = 
	`X509_NAME_ENTRY_gë_d©a
(
√
);

333 i‡(
debug
)

334 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áddingáttr %s = %*.*s "

335 "—y≥ %d)\n", 
__FILE__
, 
__LINE__
,

336 
	`OBJ_nid2¢
(
	`OBJ_obj2nid
(
us
)),

337 
as
->
Àngth
,ás->length,

338 (
as
->
d©a
) ? (*)as->data : "(null)",

339 
as
->
ty≥
);

340 
	`X509©_add1_©å_by_OBJ
(&
∂
->
©åibuãs
, 
us
,

341 
as
->
ty≥
,ás->
d©a
,ás->
Àngth
);

344 
	}
}

346 
	#nNamóârs
 6

	)

347 *
	g«móârs
[
nNamóârs
] = { "CN", "OU", "O", "L", "ST", "C" };

349 
X509_NAME
 *
x509_«me_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
©ås
) {

350 
	gi
 = 0, 
	gj
;

351 
X509_NAME
 *
	gn
;

352 
X509_ATTRIBUTE
 *
	gxa
;

353 
ASN1_TYPE
 *
	gt
;

355 
	gn
 = 
X509_NAME_√w
();

356 i‡(
	gdebug
)

357 
BIO_¥ötf
(
bio_îr
, "%s:%d: convertingáttributes into "

358 "X509_NAME\n", 
__FILE__
, 
__LINE__
);

361 
	gi
 = 
X509©_gë_©å_by_NID
(
©ås
, 
OBJ_ 2nid
("unstructuredName"), 0);

362 i‡(
	gi
 >= 0) {

363 i‡(
debug
)

364 
BIO_¥ötf
(
bio_îr
, "%s:%d: unstructuredName case\n",

365 
__FILE__
, 
__LINE__
);

366 
	gxa
 = 
X509©_gë_©å
(
©ås
, 
i
);

367 
	gt
 = 
X509_ATTRIBUTE_gë0_ty≥
(
xa
, 0);

368 
X509_NAME_add_íåy_by_txt
(
n
, "unstructuredName",

369 
V_ASN1_PRINTABLESTRING
,

370 
t
->
vÆue
.
a¢1_°rög
->
d©a
,

371 
t
->
vÆue
.
a¢1_°rög
->
Àngth
, 0, 1);

373  
	gn
;

377 i‡(
	gdebug
)

378 
BIO_¥ötf
(
bio_îr
, "%s:%d: com∂exÇamêˇ£\n", 
__FILE__
,

379 
__LINE__
);

380 
	gi
 = 0; i < 
	gnNamóârs
; i++) {

381 
	gj
 = 
X509©_gë_©å_by_NID
(
©ås
, 
OBJ_¢2nid
(
«móârs
[
i
]), -1);

382 i‡(
	gj
 >= 0) {

383 i‡(
debug
)

384 
BIO_¥ötf
(
bio_îr
, "%s:%d:áddingáttribute "

385 "%s\n", 
__FILE__
, 
__LINE__
,

386 
«móârs
[
i
]);

387 
	gxa
 = 
X509©_gë_©å
(
©ås
, 
j
);

388 
	gt
 = 
X509_ATTRIBUTE_gë0_ty≥
(
xa
, 0);

389 
X509_NAME_add_íåy_by_NID
(
n
, 
OBJ_¢2nid
(
«móârs
[
i
]),

390 
V_ASN1_PRINTABLESTRING
,

391 
t
->
vÆue
.
a¢1_°rög
->
d©a
,

392 
t
->
vÆue
.
a¢1_°rög
->
Àngth
, 0, 1);

393 i‡(
	gdebug
)

394 
BIO_¥ötf
(
bio_îr
, "%s:%d: value '%*.*s'\n",

395 
__FILE__
, 
__LINE__
,

396 
t
->
vÆue
.
a¢1_°rög
->
Àngth
,

397 
t
->
vÆue
.
a¢1_°rög
->
Àngth
,

398 
t
->
vÆue
.
a¢1_°rög
->
d©a
);

401  
	gn
;

	@lib/pending.c

8 
	~<≥ndög.h
>

9 
	~<öô.h
>

10 
	~<sy¶og.h
>

11 
	~<›ís¶/x509.h
>

12 
	~<›ís¶/bio.h
>

13 
	~<›ís¶/a¢1.h
>

14 
	~<›ís¶/obje˘s.h
>

15 
	~<mis¶.h
>

21 
	$¸óã_≥ndög_pkcs10
(
s˚p_t
 *
s˚p
) {

22 
BIO
 *
outbio
;

23 
fûíame
[1024];

24 
rc
 = -1;

27 
outbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

28 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%s/%s.dî", 
OPENSCEPDIR
,

29 "≥ndög", 
s˚p
->
å™sId
);

30 
	`BIO_wrôe_fûíame
(
outbio
, 
fûíame
);

31 i‡(
	`i2d_X509_REQ_bio
(
outbio
, 
s˚p
->
ªque°‹ªq
) <= 0) {

32 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo writeÑequestÅo "

33 "queuêa†%s\n", 
__FILE__
, 
__LINE__
, 
fûíame
);

34 
	`sy¶og
(
LOG_ERR
, "%s:%d: faûedÅÿwrôêªque°Åÿqueuêa†%s", 
__FILE__
, 
__LINE__
, 
fûíame
);

35 
îr
;

37 
rc
 = 0;

38 i‡(
debug
)

39 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖendingÑequest writtenÅo %s\n",

40 
__FILE__
, 
__LINE__
, 
fûíame
);

41 
îr
:

42 
	`BIO_‰ì
(
outbio
);

43  
rc
;

44 
	}
}

46 
	$¸óã_≥ndög_•ki
(
s˚p_t
 *
s˚p
, 
X509_NAME
 *
«me
) {

47 
fûíame
[1024];

48 
rc
 = -1;

51 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%s/%s.•ki", 
OPENSCEPDIR
,

52 "≥ndög", 
s˚p
->
å™sId
);

53 i‡(
	`•ki2fûe
(
fûíame
, 
«me
,

54 
s˚p
->
ªque°
.
rd
.
∑ylﬂd
->
‹igöÆ
->
d©a
,

55 
s˚p
->
ªque°
.
rd
.
∑ylﬂd
->
‹igöÆ
->
Àngth
) < 0) {

56 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo writeÑequestÅo "

57 "queuêa†%s\n", 
__FILE__
, 
__LINE__
, 
fûíame
);

58 
	`sy¶og
(
LOG_ERR
, "%s:%d: faûedÅÿwrôêªque°Åÿqueuêa†%s", 
__FILE__
, 
__LINE__
, 
fûíame
);

59 
îr
;

61 
rc
 = 0;

62 i‡(
debug
)

63 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖendingÑequest writtenÅo %s\n",

64 
__FILE__
, 
__LINE__
, 
fûíame
);

65 
îr
:

66  
rc
;

67 
	}
}

72 
	$≥ndög_gë_ªque°
(
s˚p_t
 *
s˚p
) {

74 i‡(
	`©oi
(
s˚p
->
ªque°
.
mesßgeTy≥
Ë=
MSG_PKCSREQ
) {

75 
s˚p
->
˛õ¡ªq
 = s˚p->
ªque°
.
rd
.
ªq
;

80 
	`∑ylﬂd_gë_ªque°ty≥
(
s˚p
->
ªque°
.
rd
.
∑ylﬂd
)) {

82 
s˚p
->
ªque°‹ªq
 = 
	`∑ylﬂd_gëªq
(s˚p->
ªque°
.
rd
.
∑ylﬂd
);

85 
s˚p
->
ªque°‹•ki
 = 
	`∑ylﬂd_gë•ki
(s˚p->
ªque°
.
rd
.
∑ylﬂd
);

88 
	}
}

93 
X509_NAME
 *
	$≥ndög_gësubje˘
(
s˚p_t
 *
s˚p
) {

94 
	`STACK_OF
(
X509_ATTRIBUTE
Ë*
©ås
;

97 i‡(
s˚p
->
ªque°‹ªq
 !
NULL
) {

99 i‡(
debug
)

100 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éxtracting DN from "

101 "ªque°\n", 
__FILE__
, 
__LINE__
);

103  
	`X509_REQ_gë_subje˘_«me
(
s˚p
->
ªque°‹ªq
);

106 i‡(
debug
)

107 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éxtracting DN from "

108 "©åibuãs\n", 
__FILE__
, 
__LINE__
);

109 
©ås
 = 
s˚p
->
ªque°
.
rd
.
∑ylﬂd
->
©åibuãs
;

110  
	`x509_«me_‰om_©åibuãs
(
©ås
);

112 
	}
}

118 
	$¸óã_≥ndög
(
s˚p_t
 *
s˚p
) {

119 
X509_NAME
 *
¢
;

120 
subje˘
[1024];

121 
i
;

122 
fûíame
[1024];

123 
BIO
 *
outbio
;

126 
	`≥ndög_gë_ªque°
(
s˚p
);

129 
¢
 = 
	`≥ndög_gësubje˘
(
s˚p
);

130 i‡(
debug
)

131 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: subjectÇame is @%p\n",

132 
__FILE__
, 
__LINE__
, 
¢
);

135 i‡(
s˚p
->
ªque°‹ªq
)

136 
	`¸óã_≥ndög_pkcs10
(
s˚p
);

137 i‡(
s˚p
->
ªque°‹•ki
)

138 
	`¸óã_≥ndög_•ki
(
s˚p
, 
¢
);

142 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%s/%s.öfo", 
OPENSCEPDIR
,

143 "≥ndög", 
s˚p
->
å™sId
);

144 i‡(
debug
)

145 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: creating info file %s\n",

146 
__FILE__
, 
__LINE__
, 
fûíame
);

147 
outbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

148 
	`BIO_wrôe_fûíame
(
outbio
, 
fûíame
);

152 
	`X509_NAME_⁄ñöe
(
¢
, 
subje˘
, (subject));

153 
	`BIO_¥ötf
(
outbio
, "subje˘: %s\n", 
subje˘
);

156 
	`BIO_¥ötf
(
outbio
, "å™sId: %s\n", 
s˚p
->
å™sId
);

157 
	`BIO_¥ötf
(
outbio
, "senderNonce: ");

158 
i
 = 0; i < 
s˚p
->
£ndîN⁄˚Lígth
; i++) {

159 
	`BIO_¥ötf
(
outbio
, "%02X", 
s˚p
->
£ndîN⁄˚
[
i
]);

161 
	`BIO_¥ötf
(
outbio
, "\n");

165 
	`BIO_¥ötf
(
outbio
, "fögî¥öt: %s\n", 
s˚p
->
fögî¥öt
);

166 
	`BIO_¥ötf
(
outbio
, "keyfögî¥öt: %s\n", 
s˚p
->
keyfögî¥t
);

167 
	`BIO_‰ì
(
outbio
);

171 
	}
}

	@lib/pkcsreq.c

8 
	~<c⁄fig.h
>

9 
	~<öô.h
>

10 
	~<pkc§eq.h
>

11 
	~<›ís¶/x509.h
>

12 
	~<›ís¶/bio.h
>

13 
	~<fögî¥öt.h
>

14 
	~<sy¶og.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<goodª∂y.h
>

18 
	~<badª∂y.h
>

19 
	~<gø¡.h
>

20 
	~<check.h
>

21 
	~<å™scheck.h
>

22 
	~<≥ndög.h
>

24 
	$pkc§eq
(
s˚p_t
 *
s˚p
) {

25 
BIO
 *
outbio
;

26 
fûíame
[1024];

28 
s˚pmsg_t
 *
msg
;

31 
msg
 = &
s˚p
->
ªque°
;

34 i‡(
debug
)

35 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: handling PKCSreq message\n",

36 
__FILE__
, 
__LINE__
);

40 
s˚p
->
fögî¥öt
 = 
	`fögî¥öt
(
msg
->
d©a
, msg->
Àngth
);

41 i‡(
debug
)

42 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÅheÑequest fingerprint is '%s'\n",

43 
__FILE__
, 
__LINE__
, 
s˚p
->
fögî¥öt
);

46 
s˚p
->
keyfögî¥t
 = 
	`x509_key_fögî¥öt
(
msg
->
rd
.
ªq
);

47 i‡(
debug
)

48 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: key fingerprint is %s\n",

49 
__FILE__
, 
__LINE__
, 
s˚p
->
keyfögî¥t
);

53 i‡(
s˚p
->
check_å™sid
) {

54 i‡(
	`fögî¥öt_cmp
(
s˚p
->
keyfögî¥t
, s˚p->
å™sId
)) {

55 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: key fingerprint != "

56 "å™sId\n", 
__FILE__
, 
__LINE__
);

57 
	`sy¶og
(
LOG_ERR
, "%s:%d: fingerprint doesÇot match "

58 "å™sid", 
__FILE__
, 
__LINE__
);

59 
îr
;

61 i‡(
debug
)

62 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: key fingerprint matches "

63 "å™sId %s\n", 
__FILE__
, 
__LINE__
,

64 
s˚p
->
å™sId
);

69 i‡(
	`å™scheck_gø¡ed
(
s˚p
))

70  
	`goodª∂y
(
s˚p
, 1);

74 i‡(
	`å™scheck_≥ndög
(
s˚p
))

75  
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_PENDING
);

78 
	`¸óã_≥ndög
(
s˚p
);

82 
s˚p
->
˛õ¡ªq
 = s˚p->
ªque°
.
rd
.
ªq
;

83 i‡(
debug
)

84 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: clientÑequest isát %p\n",

85 
__FILE__
, 
__LINE__
, 
s˚p
->
˛õ¡ªq
);

88 
outbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

89 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%s/%s.dî", 
OPENSCEPDIR
,

90 "≥ndög", 
s˚p
->
å™sId
);

91 
	`BIO_wrôe_fûíame
(
outbio
, 
fûíame
);

92 i‡(
	`i2d_X509_REQ_bio
(
outbio
, 
msg
->
rd
.
ªq
) <= 0) {

93 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo writeÑequestÅo "

94 "queuêa†%s\n", 
__FILE__
, 
__LINE__
, 
fûíame
);

95 
	`sy¶og
(
LOG_ERR
, "%s:%d: failedÅo writeÑequestÅo queueás %s",

96 
__FILE__
, 
__LINE__
, 
fûíame
);

97 
îr
;

99 
	`BIO_‰ì
(
outbio
);

100 i‡(
debug
)

101 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖendingÑequest writtenÅo %s\n",

102 
__FILE__
, 
__LINE__
, 
fûíame
);

105 i‡((
s˚p
->
autom©ic
Ë&& (s˚p->
l
.
ld≠
 !
NULL
)) {

106 i‡(
debug
)

107 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomaticÉnrollment in "

108 "ef„˘\n", 
__FILE__
, 
__LINE__
);

111 i‡(
	`check_chÆÀnge
(
s˚p
) == 0) {

113 i‡(
debug
)

114 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomatic grant\n",

115 
__FILE__
, 
__LINE__
);

116 i‡(
	`˚π_gø¡
(
s˚p
) < 0) {

117 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: grant failed\n",

118 
__FILE__
, 
__LINE__
);

119 
msg
->
Áûöfo
 = 
SCEP_FAILURE_BADCERTID
;

120 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_FAILURE
);

123 
	`goodª∂y
(
s˚p
, 1);

127 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomaticÉnrollment disabled\n",

128 
__FILE__
, 
__LINE__
);

131 i‡(
debug
)

132 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomaticÉnrollment "

133 "díõd\n", 
__FILE__
, 
__LINE__
);

134 
	`sy¶og
(
LOG_DEBUG
, "%s:%d:áutomaticÉnrollment denied",

135 
__FILE__
, 
__LINE__
);

138 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_PENDING
);

142 
îr
:

143 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_FAILURE
);

145 
	}
}

	@lib/proxy.c

8 
	~<°dlib.h
>

9 
	~<öô.h
>

10 
	~<s˚p.h
>

11 
	~<¥oxy.h
>

12 
	~<›ís¶/evp.h
>

13 
	~<›ís¶/md5.h
>

22 
ASN1_OCTET_STRING
 *
	$¥oxy_authítiˇt‹
(
s˚pmsg_t
 *
msg
, *
communôy
) {

23 
MD5_CTX
 
˘x
;

24 
md
[
MD5_DIGEST_LENGTH
];

25 
ASN1_OCTET_STRING
 *
ao
;

28 i‡(
msg
->
d©a
 =
NULL
)

29  
NULL
;

32 i‡(
communôy
 =
NULL
)

33  
NULL
;

36 
	`MD5_Inô
(&
˘x
);

39 
	`MD5_Upd©e
(&
˘x
, 
msg
->
d©a
, msg->
Àngth
);

42 
	`MD5_Upd©e
(&
˘x
, 
communôy
, 
	`°æí
(community));

45 
	`MD5_FöÆ
(
md
, &
˘x
);

48 
ao
 = 
	`ASN1_OCTET_STRING_√w
();

49 
	`ASN1_OCTET_STRING_£t
(
ao
, 
md
, 
MD5_DIGEST_LENGTH
);

50  
ao
;

51 
	}
}

57 
	$¥oxy_check
(
s˚p_t
 *
s˚p
, 
s˚pmsg_t
 *
msg
, 
ASN1_OCTET_STRING
 *
auth
) {

58 
rc
 = 0;

59 
ASN1_OCTET_STRING
 *
a1
;

62 i‡(
NULL
 =
s˚p
->
communôy
) {

63 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: communityÇot set, cannot check "

64 "¥oxy\n", 
__FILE__
, 
__LINE__
);

65 
föish
;

69 
a1
 = 
	`¥oxy_authítiˇt‹
(
msg
, 
s˚p
->
communôy
);

70 i‡(
a1
 =
NULL
) {

71 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot computeáuthenticator\n",

72 
__FILE__
, 
__LINE__
);

73 
föish
;

78 i‡(0 =
	`ASN1_OCTET_STRING_cmp
(
a1
, 
auth
)) {

79 i‡(
debug
)

80 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öroxyáuthenticators match\n",

81 
__FILE__
, 
__LINE__
);

82 
rc
 = 1;

83 
föish
;

88 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öroxyáuthenticators failÅo match\n",

89 
__FILE__
, 
__LINE__
);

90 
föish
:

91  
rc
;

92 
	}
}

	@lib/scepldap.c

8 
	~<c⁄fig.h
>

9 
	~<lbî.h
>

10 
	~<ld≠.h
>

11 
	~<s˚p.h
>

12 
	~<s˚∂d≠.h
>

13 
	~<öô.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/bio.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<î∫o.h
>

18 
	~<°rög.h
>

19 
	~<check.h
>

29 *
	$x509_to_ld≠
(
s˚p_t
 *
s˚p
, 
X509_NAME
 *
«me
) {

30 *
dn
 = 
NULL
;

31 
ncomp⁄íts
, 
dl
 = 0, 
∆
, 
i
, 
d∆
;

32 
X509_NAME_ENTRY
 *
√
 = 
NULL
;

33 
⁄ame
[1024];

34 c⁄° *
¢
;

35 
ASN1_OBJECT
 *
us
;

36 
ASN1_STRING
 *
as
;

38 i‡(
debug
) {

39 
	`X509_NAME_⁄ñöe
(
«me
, 
⁄ame
, (oname));

40 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: LDAP mapping of %sÑequested\n",

41 
__FILE__
, 
__LINE__
, 
⁄ame
);

45 i‡(
NULL
 =(
us
 = 
	`OBJ_nid2obj
(
NID_pkcs9_un°ru˘uªdName
))) {

46 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: unstructuredNameÇot found\n",

47 
__FILE__
, 
__LINE__
);

48 
îr
;

53 
ncomp⁄íts
 = 
	`X509_NAME_íåy_cou¡
(
«me
);

54 
i
 = 0; i < 
ncomp⁄íts
; i++) {

55 
ASN1_OBJECT
 *
o
;

56 
o
 = 
	`X509_NAME_ENTRY_gë_obje˘
(
	`X509_NAME_gë_íåy
(
«me
, 
i
));

57 i‡(
	`OBJ_cmp
(
o
, 
us
) == 0) {

58 
√
 = 
	`X509_NAME_gë_íåy
(
«me
, 
i
);

64 i‡(
√
) {

65 
as
 = 
	`X509_NAME_ENTRY_gë_d©a
(
√
);

66 i‡(
as
 =
NULL
) {

67 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço data for unstruturedName"

68 "áâribuã\n", 
__FILE__
, 
__LINE__
);

69 
îr
;

71 
d∆
 = 
	`°æí
("un°ru˘uªdName=,"Ë+ såÀn(
s˚p
->
l
.
ld≠ba£
)

72 + 
as
->
Àngth
 + 1;

73 
dn
 = (*)
	`mÆloc
(
d∆
);

74 i‡(
debug
)

75 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: unstructuredName hasÅype "

77 " byãs\n", 
__FILE__
,

78 
__LINE__
, 
as
->
ty≥
,ás->
Àngth
,ás->length,

79 
as
->
Àngth
,ás->
d©a
, 
d∆
);

80 
	`¢¥ötf
(
dn
, 
d∆
, "un°ru˘uªdName=%*.*s,%s", 
as
->
Àngth
,

81 
as
->
Àngth
,ás->
d©a
, 
s˚p
->
l
.
ld≠ba£
);

82 
ª∂y
;

86 
i
 = 
	`X509_NAME_íåy_cou¡
(
«me
) - 1; i >= 0; i--) {

87 
us
 = 
	`X509_NAME_ENTRY_gë_obje˘
(
	`X509_NAME_gë_íåy
(
«me
, 
i
));

88 
as
 = 
	`X509_NAME_ENTRY_gë_d©a
(
	`X509_NAME_gë_íåy
(
«me
, 
i
));

89 
¢
 = 
	`OBJ_nid2¢
(
	`OBJ_obj2nid
(
us
));

90 
∆
 = 
	`°æí
(
¢
Ë+ 
as
->
Àngth
 + 1;

91 i‡(
dl
Ë{ ++
∆
; }

92 
dn
 = (*)
	`ªÆloc
(dn, 
dl
 + 
∆
 + 1);

93 
	`¢¥ötf
(
dn
 + 
dl
, 
∆
 + 1, "%s%s=%*.*s",

94 (
dl
Ë? "," : "", 
¢
, 
as
->
Àngth
,ás->length,

95 
as
->
d©a
);

96 
dl
 +
∆
;

100 
ª∂y
:

101 i‡(
debug
)

102 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: X509_NAME '%s' mappedÅo '%s'\n",

103 
__FILE__
, 
__LINE__
, 
⁄ame
, 
dn
);

104  
dn
;

107 
îr
:

108  
NULL
;

109 
	}
}

118 
X509_NAME
 *
	$ld≠_to_x509
(*
dn
) {

119 *
wdn
, *
comp
, *
«me
, *
vÆue
;

120 
X509_NAME
 *
DN
;

121 
X509_NAME_ENTRY
 *
√
;

122 
i
 = 0, 
ty≥
;

125 
wdn
 = 
	`°rdup
(
dn
);

128 
DN
 = 
	`X509_NAME_√w
();

133 
comp
 = 
	`°ºchr
(
wdn
, ',');

134 i‡(
comp
 =
NULL
) {

135 
comp
 = 
wdn
;

137 *
comp
 = '\0'; comp++;

141 
«me
 = 
comp
;

142 
vÆue
 = 
	`°rchr
(
«me
, '=');

143 i‡(
vÆue
 =
NULL
) {

144 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço = on dn component %s\n",

145 
__FILE__
, 
__LINE__
, 
«me
);

146 
îr
;

148 *
vÆue
 = '\0'; value++;

149 i‡(
debug
)

150 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: foundÇame = '%s', "

151 "vÆuê'%s'\n", 
__FILE__
, 
__LINE__
, 
«me
,

152 
vÆue
);

155 
ty≥
 = 
V_ASN1_PRINTABLESTRING
;

158 
√
 = 
	`X509_NAME_ENTRY_¸óã_by_txt
(
NULL
, 
«me
, 
ty≥
,

159 (*)
vÆue
, 
	`°æí
(value));

160 i‡(
√
 =
NULL
) {

161 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot createÇameÉntry "

162 "%s=%s\n", 
__FILE__
, 
__LINE__
, 
«me
, 
vÆue
);

163 
îr
;

165 
	`X509_NAME_add_íåy
(
DN
, 
√
, 
i
++, 0);

166 } 
wdn
 !
comp
);

169  
DN
;

172 
îr
:

173  
NULL
;

174 
	}
}

179 
	$s˚p_ld≠_öô
(
s˚p_t
 *
s˚p
) {

181 i‡(
NULL
 =(
s˚p
->
l
.
ld≠
 = 
	`ld≠_öô
(s˚p->l.
ld≠ho°
,

182 
s˚p
->
l
.
ld≠p‹t
))) {

183 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot initialize LDAP: %s (%d)\n",

184 
__FILE__
, 
__LINE__
, 
	`°ªº‹
(
î∫o
),Érrno);

185 
îr
;

187 i‡(
debug
)

188 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: LDAP %s:%d initialized\n",

189 
__FILE__
, 
__LINE__
, 
s˚p
->
l
.
ld≠ho°
, s˚p->l.
ld≠p‹t
);

192 i‡((
s˚p
->
l
.
böddn
Ë&& (s˚p->l.
bödpw
)) {

193 i‡(
LDAP_SUCCESS
 !
	`ld≠_sim∂e_böd_s
(
s˚p
->
l
.
ld≠
,

194 
s˚p
->
l
.
böddn
, s˚p->l.
bödpw
)) {

195 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: böd faûed\n", 
__FILE__
,

196 
__LINE__
);

197 
îr
;

199 i‡(
debug
)

200 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: LDAP bind complete\n",

201 
__FILE__
, 
__LINE__
);

203 i‡(
debug
)

204 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: LDAP bindÇotÇecessary, "

205 "ösufficõ¡Ö¨amëîs\n", 
__FILE__
,

206 
__LINE__
);

210 
îr
:

212 i‡(
s˚p
->
l
.
ld≠
 !
NULL
) {

213 
	`ld≠_unböd
(
s˚p
->
l
.
ld≠
);

214 
s˚p
->
l
.
ld≠
 = 
NULL
;

216 
	`ERR_¥öt_îr‹s
(
bio_îr
);

218 
	}
}

227 *
	$a¢1_to_°rög
(
ASN1_INTEGER
 *
i
) {

228 *
˝
, *
p
;

229 
j
;

231 
˝
 = (*)
	`mÆloc
(1 + (3 * 
i
->
Àngth
));

232 
p
 = 
˝
;

233 i‡(
i
->
ty≥
 =
V_ASN1_NEG_INTEGER
) {

234 *(
p
++) = '-';

236 
j
 = 0; j < 
i
->
Àngth
; j++) {

237 i‡(
j
Ë*(
p
++) = ':';

238 
	`¢¥ötf
(
p
, 3, "%02X", 
i
->
d©a
[
j
]);Ö += 2;

240  
˝
;

241 
	}
}

247 
	$ld≠_°‹e_˚π
(
s˚p_t
 *
s˚p
) {

248 
fûíame
[1024];

249 
issuîDN
[1024], 
subje˘DN
[1024];

250 
ASN1_INTEGER
 *
£rülNumbî
;

251 *
dn
, *
£rül
, *
chÆÀnge
;

252 
LDAPMesßge
 *
ªsu…
;

253 *
ocvÆs
[3], *
idnvÆs
[2], *
sdnvÆs
[2], *
£rvÆs
[2],

254 *
upvÆs
[2];

255 
bîvÆ
 *
˚πvÆs
[2];

256 
bîvÆ
 
˚πvÆ
;

257 
LDAPMod
 
ocmod
, 
idnmod
, 
sdnmod
, 
£rmod
, 
˚πmod
, 
upmod
;

258 
LDAPMod
 *
mods
[5];

259 
BIO
 *
bio_mem
;

260 
rc
;

264 i‡(
s˚p
->
l
.
ld≠
 =
NULL
) {

265 i‡(
debug
)

266 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço LDAP, store_cert "

267 "Áked\n", 
__FILE__
, 
__LINE__
);

272 i‡(
s˚p
->
˛õ¡˚π
 !
NULL
) {

273 
BIO
 *
x509_bio
;

274 
	`¢¥ötf
(
fûíame
, (filename), "%s/granted/%s.der",

275 
OPENSCEPDIR
, 
s˚p
->
å™sId
);

276 
x509_bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

277 
	`BIO_ªad_fûíame
(
x509_bio
, 
fûíame
);

278 
s˚p
->
˛õ¡˚π
 = 
	`d2i_X509_bio
(
x509_bio
, 
NULL
);

279 i‡(
s˚p
->
˛õ¡˚π
 =
NULL
) {

280 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot getÅhe client "

281 "˚πifiˇã fromÅhêfûêsy°em\n", 
__FILE__
,

282 
__LINE__
);

283 
îr
;

285 
	`BIO_‰ì
(
x509_bio
);

290 
dn
 = 
	`x509_to_ld≠
(
s˚p
, 
	`X509_gë_subje˘_«me
(s˚p->
˛õ¡˚π
));

291 i‡(
dn
 =
NULL
) {

292 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot convert DNÅo LDAP form\n",

293 
__FILE__
, 
__LINE__
);

294 
îr
;

298 i‡(
LDAP_SUCCESS
 !(
rc
 = 
	`ld≠_£¨ch_s
(
s˚p
->
l
.
ld≠
, 
dn
,

299 
LDAP_SCOPE_BASE
, "(obje˘˛ass=*)", 
NULL
, 1, &
ªsu…
))) {

301 
ocvÆs
[0] = "top";

302 
ocvÆs
[1] = "sCEPClient";

303 
ocvÆs
[2] = 
NULL
;

304 
ocmod
.
mod_›
 = 
LDAP_MOD_ADD
;

305 
ocmod
.
mod_ty≥
 = "objectclass";

306 
ocmod
.
mod_vÆues
 = 
ocvÆs
;

307 
mods
[0] = &
ocmod
;

308 
mods
[1] = 
NULL
;

309 i‡(
	`ld≠_add_s
(
s˚p
->
l
.
ld≠
, 
dn
, 
mods
Ë!
LDAP_SUCCESS
) {

310 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotáddÇewÇode %s\n",

311 
__FILE__
, 
__LINE__
, 
dn
);

312 
îr
;

314 i‡(
debug
)

315 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ádding skeletonÇode for "

316 "%s\n", 
__FILE__
, 
__LINE__
, 
dn
);

320 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
s˚p
->
˛õ¡˚π
),

321 
issuîDN
, (issuerDN));

322 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
s˚p
->
˛õ¡˚π
),

323 
subje˘DN
, (subjectDN));

324 
£rülNumbî
 = 
	`X509_gë_£rülNumbî
(
s˚p
->
˛õ¡˚π
);

325 
£rül
 = 
	`a¢1_to_°rög
(
£rülNumbî
);

326 i‡(
debug
) {

327 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeplacingáttributes in dn = %s:\n",

328 
__FILE__
, 
__LINE__
, 
dn
);

329 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:\tissuîDN=%s\n", 
__FILE__
,

330 
__LINE__
, 
issuîDN
);

331 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:\tsubje˘DN=%s\n", 
__FILE__
,

332 
__LINE__
, 
subje˘DN
);

333 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:\t£rülNumbî=%s\n", 
__FILE__
,

334 
__LINE__
, 
£rül
);

338 
chÆÀnge
 = 
	`gë_chÆÀnge
(
s˚p
);

339 i‡(
debug
)

340 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: got challengeÖassword: %s\n",

341 
__FILE__
, 
__LINE__
, (
chÆÀnge
) ? challenge: "<null>");

346 
£rvÆs
[0] = 
£rül
;

347 
£rvÆs
[1] = 
NULL
;

348 
£rmod
.
mod_›
 = 
LDAP_MOD_REPLACE
;

349 
£rmod
.
mod_ty≥
 = "serialNumber";

350 
£rmod
.
mod_vÆues
 = 
£rvÆs
;

352 
idnvÆs
[0] = 
issuîDN
;

353 
idnvÆs
[1] = 
NULL
;

354 
idnmod
.
mod_›
 = 
LDAP_MOD_REPLACE
;

355 
idnmod
.
mod_ty≥
 = "issuerDN";

356 
idnmod
.
mod_vÆues
 = 
idnvÆs
;

358 
sdnvÆs
[0] = 
subje˘DN
;

359 
sdnvÆs
[1] = 
NULL
;

360 
sdnmod
.
mod_›
 = 
LDAP_MOD_REPLACE
;

361 
sdnmod
.
mod_ty≥
 = "subjectDN";

362 
sdnmod
.
mod_vÆues
 = 
sdnvÆs
;

364 
˚πvÆs
[0] = &
˚πvÆ
;

365 
˚πvÆs
[1] = 
NULL
;

366 
˚πmod
.
mod_›
 = 
LDAP_MOD_REPLACE
 | 
LDAP_MOD_BVALUES
;

367 
˚πmod
.
mod_ty≥
 = "userCertificate;binary";

368 
˚πmod
.
mod_bvÆues
 = 
˚πvÆs
;

370 
bio_mem
 = 
	`BIO_√w
(
	`BIO_s_mem
());

371 i‡(!
	`i2d_X509_bio
(
bio_mem
, 
s˚p
->
˛õ¡˚π
)) {

372 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot write client certás DER\n",

373 
__FILE__
, 
__LINE__
);

374 
îr
;

376 
	`BIO_£t_Êags
(
bio_mem
, 
BIO_FLAGS_MEM_RDONLY
);

377 
˚πvÆ
.
bv_Àn
 = 
	`BIO_gë_mem_d©a
(
bio_mem
, &˚πvÆ.
bv_vÆ
);

378 
	`BIO_‰ì
(
bio_mem
);

380 
mods
[0] = &
£rmod
;

381 
mods
[1] = &
idnmod
;

382 
mods
[2] = &
sdnmod
;

383 
mods
[3] = &
˚πmod
;

384 i‡(
chÆÀnge
) {

385 
upvÆs
[0] = 
chÆÀnge
;

386 
upvÆs
[1] = 
NULL
;

387 
upmod
.
mod_›
 = 
LDAP_MOD_REPLACE
;

388 
upmod
.
mod_ty≥
 = "userPassword";

389 
upmod
.
mod_vÆues
 = 
upvÆs
;

390 
mods
[4] = &
upmod
;

392 
mods
[4] = 
NULL
;

394 
mods
[5] = 
NULL
;

396 i‡(
LDAP_SUCCESS
 !
	`ld≠_modify_s
(
s˚p
->
l
.
ld≠
, 
dn
, 
mods
)) {

397 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot update directory with cert "

398 "™dáâribuãs\n", 
__FILE__
, 
__LINE__
);

399 
îr
;

401 i‡(
debug
)

402 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificateándáttributes for "

403 "%†suc˚ssfuŒyádded\n", 
__FILE__
, 
__LINE__
, 
dn
);

406 
	`‰ì
(
˚πvÆ
.
bv_vÆ
);

407 
	`‰ì
(
£rül
);

408 
	`‰ì
(
dn
);

414 
îr
:

415 
	`ERR_¥öt_îr‹s
(
bio_îr
);

417 
	}
}

427 
	$ld≠_gë_˚π_comm⁄
(
s˚p_t
 *
s˚p
, *
fûãr
) {

428 
LDAPMesßge
 *
ªsu…
, *
e
;

429 
bîvÆ
 **
bv
;

430 
BIO
 *
bio
;

433 i‡(
LDAP_SUCCESS
 !
	`ld≠_£¨ch_s
(
s˚p
->
l
.
ld≠
, s˚p->l.
ld≠ba£
,

434 
LDAP_SCOPE_SUBTREE
, 
fûãr
, 
NULL
, 0, &
ªsu…
)) {

435 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot find certificate\n",

436 
__FILE__
, 
__LINE__
);

437 
îr
;

441 i‡(
	`ld≠_cou¡_íåõs
(
s˚p
->
l
.
ld≠
, 
ªsu…
) != 1) {

442 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: wrongÇumber ofÉntriesÑeturned\n",

443 
__FILE__
, 
__LINE__
);

444 
îr
;

448 
e
 = 
	`ld≠_fú°_íåy
(
s˚p
->
l
.
ld≠
, 
ªsu…
);

449 i‡(
debug
)

450 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñetrieving certificate from %s\n",

451 
__FILE__
, 
__LINE__
, 
	`ld≠_gë_dn
(
s˚p
->
l
.
ld≠
, 
e
));

455 
bv
 = 
	`ld≠_gë_vÆues_Àn
(
s˚p
->
l
.
ld≠
, 
e
, "userCertificate");

456 i‡(
bv
 =
NULL
) {

457 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áâribuãÇŸ found\n", 
__FILE__
,

458 
__LINE__
);

459 
îr
;

464 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

465 
	`BIO_wrôe
(
bio
, 
bv
[0]->
bv_vÆ
, bv[0]->
bv_Àn
);

466 
s˚p
->
˛õ¡˚π
 = 
	`d2i_X509_bio
(
bio
, 
NULL
);

467 i‡(
s˚p
->
˛õ¡˚π
 =
NULL
) {

468 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode certificate "

469 "ªåõved from LDAP dúe˘‹y\n", 
__FILE__
, 
__LINE__
);

470 
îr
;

472 
	`BIO_‰ì
(
bio
);

478 
îr
:

479 
	`ERR_¥öt_îr‹s
(
bio_îr
);

481 
	}
}

483 
	$ld≠_gë_˚π_‰om_issuî_™d_£rül
(
s˚p_t
 *
s˚p
,

484 
PKCS7_ISSUER_AND_SERIAL
 *
üs
) {

485 
issuîDN
[1024], 
fûãr
[2048];

486 *
£rül
 = 
NULL
;

487 
rc
;

490 i‡(
s˚p
->
l
.
ld≠
 =
NULL
)

491 
îr
;

496 
	`X509_NAME_⁄ñöe
(
üs
->
issuî
, 
issuîDN
, (issuerDN));

497 
£rül
 = 
	`a¢1_to_°rög
(
üs
->serial);

498 
	`¢¥ötf
(
fûãr
, (filter), "(&(objectclass=sCEPClient)"

500 
issuîDN
, 
£rül
);

501 i‡(
debug
)

502 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: search filter: %s\n",

503 
__FILE__
, 
__LINE__
, 
fûãr
);

506 
rc
 = 
	`ld≠_gë_˚π_comm⁄
(
s˚p
, 
fûãr
);

507 i‡(
rc
 < 0) {

508 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificateÑetrieval commonÖart "

509 "Áûed\n", 
__FILE__
, 
__LINE__
);

510 
îr
;

514 
	`‰ì
(
£rül
);

518 
îr
:

519 
	`ERR_¥öt_îr‹s
(
bio_îr
);

520 i‡(
£rül
Ë
	`‰ì
(serial);

522 
	}
}

524 
	$ld≠_gë_˚π_‰om_issuî_™d_subje˘
(
s˚p_t
 *
s˚p
,

525 
issuî_™d_subje˘_t
 *
üs
) {

526 
fûãr
[2048];

527 
issuîDN
[1024], 
subje˘DN
[1024];

528 
rc
;

531 i‡(
s˚p
->
l
.
ld≠
 =
NULL
)

532 
îr
;

535 
	`X509_NAME_⁄ñöe
(
üs
->
issuî
, 
issuîDN
, (issuerDN));

536 
	`X509_NAME_⁄ñöe
(
üs
->
subje˘
, 
subje˘DN
, (subjectDN));

537 
	`¢¥ötf
(
fûãr
, (filter), "(&objectClass=sCEPClient)"

539 
issuîDN
, 
subje˘DN
);

540 i‡(
debug
)

541 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: searching for certificate with "

542 "fûã∏'%s'\n", 
__FILE__
, 
__LINE__
, 
fûãr
);

545 
rc
 = 
	`ld≠_gë_˚π_comm⁄
(
s˚p
, 
fûãr
);

546 i‡(
rc
 < 0) {

547 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot get cert common\n",

548 
__FILE__
, 
__LINE__
);

549 
îr
;

554 
îr
:

555 
	`ERR_¥öt_îr‹s
(
bio_îr
);

557 
	}
}

	@lib/selfsigned.c

7 
	~<°dlib.h
>

8 
	~<°dio.h
>

9 
	~<c⁄fig.h
>

10 
	~<£lfsig√d.h
>

11 
	~<öô.h
>

12 
	~<s˚p.h
>

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/evp.h
>

15 
	~<›ís¶/≥m.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<›ís¶/x509.h
>

18 
	~<›ís¶/x509v3.h
>

20 
	$£lfsig√d
(
s˚p_t
 *
s˚p
) {

21 
X509
 *
ss
;

22 
X509V3_CTX
 
˘x
;

23 
EVP_PKEY
 *
tmpkey
;

24 
BIO
 *
out
;

25 
£lfsig√d«me
[1024];

26 *
p
;

27 
ASN1_INTEGER
 *
£rül
;

30 
ss
 = 
	`X509_√w
();

33 i‡(
	`X509_£t_vîsi⁄
(
ss
, 3) <= 0) {

34 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot set versionÇumber\n",

35 
__FILE__
, 
__LINE__
);

36 
îr
;

41 
p
 = (*)
s˚p
->
å™sId
;

42 i‡(
p
) {

43 
£rül
 = 
	`c2i_ASN1_INTEGER
(
NULL
, &
p
, 32);

44 i‡(!
£rül
) {

45 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot convertÅransid "

46 "ötÿ£rü»numbî\n", 
__FILE__
, 
__LINE__
);

47 
îr
;

49 i‡(
	`X509_£t_£rülNumbî
(
ss
, 
£rül
) <= 0) {

50 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot set serialÇumber\n",

51 
__FILE__
, 
__LINE__
);

52 
îr
;

54 i‡(
debug
)

55 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: serial setÅoÅrans id\n",

56 
__FILE__
, 
__LINE__
);

58 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: must haveÅrans idás serial\n",

59 
__FILE__
, 
__LINE__
);

60 
îr
;

64 i‡(0 >
	`X509_£t_issuî_«me
(
ss
,

65 
	`X509_REQ_gë_subje˘_«me
(
s˚p
->
˛õ¡ªq
))) {

66 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: së subje˘Çame\n", 
__FILE__
,

67 
__LINE__
);

68 
îr
;

72 i‡(0 =
	`X509_gmtime_adj
(
	`X509_gë_nŸBef‹e
(
ss
), 0)) {

73 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot setÇotBeforeÅime\n",

74 
__FILE__
, 
__LINE__
);

75 
îr
;

80 i‡(0 =
	`X509_gmtime_adj
(
	`X509_gë_nŸA·î
(
ss
), ()3600 * 24 * 30)) {

81 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot setÇotAfterÅime\n",

82 
__FILE__
, 
__LINE__
);

83 
îr
;

87 i‡(0 >
	`X509_£t_subje˘_«me
(
ss
,

88 
	`X509_REQ_gë_subje˘_«me
(
s˚p
->
˛õ¡ªq
))) {

89 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot set subjectÇame\n",

90 
__FILE__
, 
__LINE__
);

91 
îr
;

96 
tmpkey
 = 
	`X509_REQ_gë_pubkey
(
s˚p
->
˛õ¡ªq
);

97 i‡(
tmpkey
 =
NULL
) {

98 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: ownÖublic keyÇot found\n",

99 
__FILE__
, 
__LINE__
);

100 
îr
;

102 i‡(0 >
	`X509_£t_pubkey
(
ss
, 
tmpkey
)) {

103 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot setÖublic key\n",

104 
__FILE__
, 
__LINE__
);

105 
îr
;

109 
	`X509V3_£t_˘x
(&
˘x
, 
ss
, ss, 
NULL
, NULL, 0);

110 i‡(
debug
)

111 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: setting signing context failed\n",

112 
__FILE__
, 
__LINE__
);

117 i‡(0 >
	`X509_sign
(
ss
, 
s˚p
->
˛õ¡pkey
, 
	`EVP_md5
())) {

118 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: signing failed\n",

119 
__FILE__
, 
__LINE__
);

120 
îr
;

124 i‡(
debug
) {

125 
issuîdn
[1024], 
subje˘dn
[1024];

126 
X509_NAME
 *
n
;

127 i‡((
n
 = 
	`X509_gë_issuî_«me
(
ss
)Ë=
NULL
) {

128 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: issuer dnÇot found\n",

129 
__FILE__
, 
__LINE__
);

130 
îr
;

132 
	`X509_NAME_⁄ñöe
(
n
, 
issuîdn
, (issuerdn));

134 i‡((
n
 = 
	`X509_gë_subje˘_«me
(
ss
)Ë=
NULL
) {

135 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: subject dnÇot found\n",

136 
__FILE__
, 
__LINE__
);

137 
îr
;

139 
	`X509_NAME_⁄ñöe
(
n
, 
subje˘dn
, (subjectdn));

141 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: self signed certificate %s/%s "

142 "¥ï¨ed @%p\n", 
__FILE__
, 
__LINE__
,

143 
issuîdn
, 
subje˘dn
, 
ss
);

147 i‡((
debug
Ë&& (
tmµ©h
)) {

148 
out
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

149 
	`¢¥ötf
(
£lfsig√d«me
, (selfsignedname),

150 "%s/%d.£lfsig√d.dî", 
tmµ©h
, 
	`gëpid
());

151 
	`BIO_wrôe_fûíame
(
out
, 
£lfsig√d«me
);

152 
	`i2d_X509_bio
(
out
, 
ss
);

153 
	`BIO_‰ì
(
out
);

154 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: selfsigned certificate written "

155 "tÿ'%s'\n", 
__FILE__
, 
__LINE__
, 
£lfsig√d«me
);

159 
s˚p
->
£lfsig√d˚π
 = 
ss
;

163 
îr
:

164 
	`ERR_¥öt_îr‹s
(
bio_îr
);

166 
	}
}

	@lib/sigattr.c

8 
	~<sig©å.h
>

9 
	~<öô.h
>

10 
	~<›ís¶/îr.h
>

11 
	~<›ís¶/›ís¶v.h
>

16 *
	$sig©å_°rög
(
s˚p_t
 *
s˚p
, *
©å«me
) {

17 
	`STACK_OF
(
X509_ATTRIBUTE
Ë*
sig_©åibs
;

18 
ASN1_OBJECT
 *
a¢1_obj
;

19 
ASN1_TYPE
 *
a¢1_ty≥
;

20 
X509_ATTRIBUTE
 *
©å
;

21 
Àn
, 
i
;

22 *
d©a
 = 
NULL
;

23 
s˚pmsg_t
 *
msg
;

25 i‡(
debug
)

26 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Üooking foráttribute '%s'\n",

27 
__FILE__
, 
__LINE__
, 
©å«me
);

30 i‡(
s˚p
->
˛õ¡
)

31 
msg
 = &
s˚p
->
ª∂y
;

33 
msg
 = &
s˚p
->
ªque°
;

36 
a¢1_obj
 = 
	`OBJ_nid2obj
(
	`OBJ_¢2nid
(
©å«me
));

37 
a¢1_ty≥
 = 
NULL
;

40 i‡(
NULL
 =(
sig_©åibs
 = 
	`PKCS7_gë_sig√d_©åibuãs
(
msg
->
si
))) {

41 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço signedáttributes\n",

42 
__FILE__
, 
__LINE__
);

43  
NULL
;

47 
i
 = 0; i < 
	`sk_X509_ATTRIBUTE_num
(
sig_©åibs
); i++) {

48 
©å
 = 
	`sk_X509_ATTRIBUTE_vÆue
(
sig_©åibs
, 
i
);

49 i‡(
	`OBJ_cmp
(
©å
->
obje˘
, 
a¢1_obj
) == 0) {

50 i‡(
debug
)

51 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: foundáttribute\n",

52 
__FILE__
, 
__LINE__
);

53 
a¢1_ty≥
 = 
	`sk_ASN1_TYPE_vÆue
(
©å
->
vÆue
.
£t
, 0);

59 i‡(
a¢1_ty≥
 =
NULL
) {

60 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot findáttribute\n",

61 
__FILE__
, 
__LINE__
);

62 
îr
;

64 i‡(
	`ASN1_TYPE_gë
(
a¢1_ty≥
Ë!
V_ASN1_PRINTABLESTRING
) {

65 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áttribute has wrongÅype\n",

66 
__FILE__
, 
__LINE__
);

67 
îr
;

70 i‡(
debug
)

71 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: foundáttribute '%s'\n",

72 
__FILE__
, 
__LINE__
, 
©å«me
);

74 
Àn
 = 
	`ASN1_STRING_Àngth
(
a¢1_ty≥
->
vÆue
.
a¢1_°rög
);

75 
d©a
 = (*)
	`mÆloc
(1 + 
Àn
);

76 
	`mem˝y
(
d©a
, 
	`ASN1_STRING_d©a
(
a¢1_ty≥
->
vÆue
.
a¢1_°rög
), 
Àn
);

77 
d©a
[
Àn
] = '\0';

78 i‡(
debug
)

79 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: value of %d bytesÑetrieved\n",

80 
__FILE__
, 
__LINE__
, 
Àn
);

83  
d©a
;

84 
îr
:

85 
	`ERR_¥öt_îr‹s
(
bio_îr
);

86  
NULL
;

87 
	}
}

92 *
	$sig©å_o˘ë
(
s˚p_t
 *
s˚p
, *
©å«me
, *
Àn
) {

93 
ASN1_OCTET_STRING
 *
a¢1
;

94 *
d©a
 = 
NULL
;

98 
a¢1
 = 
	`sig©å_a¢1_o˘ë
(
s˚p
, 
©å«me
);

99 i‡(
a¢1
 =
NULL
)

100  
NULL
;

101 i‡(
debug
)

102 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: gotánásn1 string foráttribute\n",

103 
__FILE__
 , 
__LINE__
);

106 *
Àn
 = 
	`ASN1_STRING_Àngth
(
a¢1
);

107 
d©a
 = (*)
	`mÆloc
(*
Àn
);

108 
	`mem˝y
(
d©a
, 
	`ASN1_STRING_d©a
(
a¢1
), *
Àn
);

109 i‡(
debug
)

110 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:állocated %dÇew bytes for value\n",

111 
__FILE__
, 
__LINE__
, *
Àn
);

115  
d©a
;

116 
	}
}

119 
ASN1_OCTET_STRING
 *
	$sig©å_a¢1_o˘ë
(
s˚p_t
 *
s˚p
, *
©å«me
) {

120 
	`STACK_OF
(
X509_ATTRIBUTE
Ë*
sig_©åibs
;

121 
ASN1_OBJECT
 *
a¢1_obj
;

122 
ASN1_TYPE
 *
a¢1_ty≥
;

123 
X509_ATTRIBUTE
 *
©å
;

124 
i
;

125 
s˚pmsg_t
 *
msg
;

126 
sögÀ
;

128 i‡(
debug
)

129 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Üooking foráttribute '%s'\n",

130 
__FILE__
, 
__LINE__
, 
©å«me
);

133 i‡(
s˚p
->
˛õ¡
)

134 
msg
 = &
s˚p
->
ª∂y
;

136 
msg
 = &
s˚p
->
ªque°
;

139 
a¢1_obj
 = 
	`OBJ_nid2obj
(
	`OBJ_¢2nid
(
©å«me
));

140 
a¢1_ty≥
 = 
NULL
;

143 i‡(
NULL
 =(
sig_©åibs
 = 
	`PKCS7_gë_sig√d_©åibuãs
(
msg
->
si
))) {

144 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: signedáttributesÇot found\n",

145 
__FILE__
, 
__LINE__
);

146  
NULL
;

150 
i
 = 0; i < 
	`sk_X509_ATTRIBUTE_num
(
sig_©åibs
); i++) {

151 
©å
 = 
	`sk_X509_ATTRIBUTE_vÆue
(
sig_©åibs
, 
i
);

152 i‡(
	`OBJ_cmp
(
©å
->
obje˘
, 
a¢1_obj
) == 0) {

153 #i‡
OPENSSL_VERSION_NUMBER
 < 0x00907000L

156 
sögÀ
 = !
©å
->
£t
;

158 
sögÀ
 = 
©å
->single;

160 i‡(
sögÀ
 || (
	`sk_ASN1_TYPE_num
(
©å
->
vÆue
.
£t
) == 0)) {

161 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áâ∏ha†nÿvÆ\n",
__FILE__
, 
__LINE__
);

162 
îr
;

164 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áttr hasÇo val\n",

165 
__FILE__
, 
__LINE__
);

166 
îr
;

168 i‡(
debug
)

169 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: found matching "

170 "©åibuã wôh %d vÆues\n", 
__FILE__
,

171 
__LINE__
,

172 
	`sk_ASN1_TYPE_num
(
©å
->
vÆue
.
£t
));

173 
a¢1_ty≥
 = 
	`sk_ASN1_TYPE_vÆue
(
©å
->
vÆue
.
£t
, 0);

174 i‡(
debug
)

175 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åype found: %p\n",

176 
__FILE__
, 
__LINE__
, 
a¢1_ty≥
);

182 i‡(
debug
)

183 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: checking foráttribute\n",

184 
__FILE__
, 
__LINE__
);

185 i‡(
a¢1_ty≥
 =
NULL
) {

186 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áttribute hasÇoÅype\n",

187 
__FILE__
, 
__LINE__
);

188 
îr
;

190 i‡(
	`ASN1_TYPE_gë
(
a¢1_ty≥
Ë!
V_ASN1_OCTET_STRING
) {

191 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áttribute has wrongÅype\n",

192 
__FILE__
, 
__LINE__
);

193 
îr
;

195 i‡(
debug
)

196 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: foundáttribute '%s'\n",

197 
__FILE__
, 
__LINE__
, 
©å«me
);

201  
a¢1_ty≥
->
vÆue
.
o˘ë_°rög
;

204 
îr
:

205 i‡(
debug
)

206 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áttributeÇot found orÉrror\n",

207 
__FILE__
, 
__LINE__
);

208 
	`ERR_¥öt_îr‹s
(
bio_îr
);

209  
NULL
;

210 
	}
}

	@lib/spki2file.c

9 
	~<•ki2fûe.h
>

10 
	~<öô.h
>

11 
	~<hâp.h
>

13 
	$•ki2fûe
(*
fûíame
, 
X509_NAME
 *
«me
,

14 *
•kid©a
, 
•kûígth
) {

15 
BIO
 *
membio
, *
b64
, *
outbio
, *
outfûe
;

16 *
d©a
 = 
NULL
, *
uæd©a
;

17 
Àngth
;

18 
n
, 
i
, 
rc
 = -1;

21 
outfûe
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

22 i‡(
	`BIO_wrôe_fûíame
(
outfûe
, 
fûíame
) < 0) {

23 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open file '%s'\n",

24 
__FILE__
, 
__LINE__
, 
fûíame
);

25 
îr
;

30 
n
 = 
	`X509_NAME_íåy_cou¡
(
«me
);

31 
i
 = 0; i < 
n
; i++) {

32 
X509_NAME_ENTRY
 *
√
;

33 
ASN1_OBJECT
 *
o
;

34 
ASN1_STRING
 *
as
;

35 
√
 = 
	`X509_NAME_gë_íåy
(
«me
, 
i
);

36 
o
 = 
	`X509_NAME_ENTRY_gë_obje˘
(
√
);

37 
as
 = 
	`X509_NAME_ENTRY_gë_d©a
(
√
);

38 
	`BIO_¥ötf
(
outfûe
, "%s=%*.*s\n", 
	`OBJ_nid2 
(
	`OBJ_obj2nid
(
o
)),

39 
as
->
Àngth
,ás->Àngth,ás->
d©a
);

40 i‡(
debug
)

41 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áddingáttribute "

42 "%s=%*.*s\n", 
__FILE__
, 
__LINE__
,

43 
	`OBJ_nid2 
(
	`OBJ_obj2nid
(
o
)),

44 
as
->
Àngth
,ás->Àngth,ás->
d©a
);

48 
membio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

49 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

50 
	`BIO_£t_Êags
(
b64
, 
BIO_FLAGS_BASE64_NO_NL
);

51 
outbio
 = 
	`BIO_push
(
b64
, 
membio
);

52 
	`BIO_wrôe
(
outbio
, 
•kid©a
, 
•kûígth
);

53 
	`BIO_Êush
(
outbio
);

54 
	`BIO_£t_Êags
(
membio
, 
BIO_FLAGS_MEM_RDONLY
);

55 
Àngth
 = 
	`BIO_gë_mem_d©a
(
membio
, &
d©a
);

56 i‡(
debug
)

57 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: written %d base64 bytes\n",

58 
__FILE__
, 
__LINE__
, 
Àngth
);

61 
	`BIO_¥ötf
(
outfûe
, "SPKAC=%s\n", 
d©a
);

62 
	`‰ì
(
d©a
);

65 
rc
 = 0;

68 
îr
:

69 
	`BIO_‰ì
(
outfûe
);

70  
rc
;

71 
	}
}

	@lib/transcheck.c

8 
	~<å™scheck.h
>

9 
	~<c⁄fig.h
>

10 
	~<öô.h
>

11 
	~<›ís¶/bio.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

14 
	~<sy¶og.h
>

19 
	$å™scheck_gø¡ed
(
s˚p_t
 *
s˚p
) {

20 
fûíame
[1024];

21 
°©
 
sb
;

25 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/gø¡ed/%s.öfo", 
OPENSCEPDIR
,

26 
s˚p
->
å™sId
);

27 i‡(
	`°©
(
fûíame
, &
sb
) == 0) {

28 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest forÅhisÅransIDálready "

29 "gø¡ed\n", 
__FILE__
, 
__LINE__
);

30 
	`sy¶og
(
LOG_INFO
, "%s:%d:Ñequest forÅhisÅransidálready "

31 "gø¡ed", 
__FILE__
, 
__LINE__
);

35 
	}
}

40 
	$å™scheck_≥ndög
(
s˚p_t
 *
s˚p
) {

41 
fûíame
[1024];

42 
°©
 
sb
;

46 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/≥ndög/%s.öfo", 
OPENSCEPDIR
,

47 
s˚p
->
å™sId
);

48 i‡(
	`°©
(
fûíame
, &
sb
) == 0) {

49 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:álreadyáÑequest with same id: "

50 "'%s'\n", 
__FILE__
, 
__LINE__
, 
s˚p
->
å™sId
);

51 
	`sy¶og
(
LOG_INFO
, "%s:%d: PKCSReq forÖending certificate",

52 
__FILE__
, 
__LINE__
);

57 
	}
}

62 
	$å™scheck_ªje˘ed
(
s˚p_t
 *
s˚p
) {

63 
fûíame
[1024];

64 
°©
 
sb
;

68 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/ªje˘ed/%s.öfo", 
OPENSCEPDIR
,

69 
s˚p
->
å™sId
);

70 i‡(
	`°©
(
fûíame
, &
sb
) == 0) {

71 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:álreadyáÑequest with same id: "

72 "'%s'\n", 
__FILE__
, 
__LINE__
, 
s˚p
->
å™sId
);

73 
	`sy¶og
(
LOG_INFO
, "%s:%d: PKCSReq forÑejectd certificate",

74 
__FILE__
, 
__LINE__
);

79 
	}
}

	@lib/v2request.c

8 
	~<v2ªque°.h
>

9 
	~<å™scheck.h
>

10 
	~<≥ndög.h
>

11 
	~<goodª∂y.h
>

12 
	~<badª∂y.h
>

13 
	~<öô.h
>

15 
	$v2ªque°
(
s˚p_t
 *
s˚p
) {

16 i‡(
debug
)

17 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Örocessing v2Ñequest\n",

18 
__FILE__
, 
__LINE__
);

22 i‡(
	`å™scheck_gø¡ed
(
s˚p
)) {

23 i‡(
debug
)

24 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sending CERTÑeply\n",

25 
__FILE__
, 
__LINE__
);

26  
	`goodª∂y
(
s˚p
, 1);

29 i‡(
	`å™scheck_≥ndög
(
s˚p
)) {

30 i‡(
debug
)

31 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sendingÖendingÑeply\n",

32 
__FILE__
, 
__LINE__
);

33  
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_PENDING
);

36 i‡(
	`å™scheck_ªje˘ed
(
s˚p
)) {

37 i‡(
debug
)

38 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sendingÑejectedÑeply\n",

39 
__FILE__
, 
__LINE__
);

40  
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_FAILURE
);

45 i‡(
	`¸óã_≥ndög
(
s˚p
) < 0) {

46 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo createÖending\n",

47 
__FILE__
, 
__LINE__
);

48 
îr
;

52 i‡((
s˚p
->
autom©ic
Ë&& (s˚p->
l
.
ld≠
 !
NULL
)) {

53 i‡(
debug
)

54 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomaticÉnrollment in "

55 "ef„˘\n", 
__FILE__
, 
__LINE__
);

57 i‡(
debug
)

58 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomaticÉnrollment denied\n",

59 
__FILE__
, 
__LINE__
);

62 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_PENDING
);

65 
îr
:

66 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_FAILURE
);

68 
	}
}

	@libltdl/acconfig.h

6 #unde‡
HAVE_LIBDL


9 #unde‡
HAVE_DLD


12 #unde‡
HAVE_SHL_LOAD


	@libltdl/ltdl.c

27 
	#_LTDL_COMPILE_


	)

29 #i‡
HAVE_CONFIG_H


30 
	~<c⁄fig.h
>

33 #i‡
HAVE_STRING_H


34 
	~<°rög.h
>

37 #i‡
HAVE_STRINGS_H


38 
	~<°rögs.h
>

41 #i‡
HAVE_CTYPE_H


42 
	~<˘y≥.h
>

45 #i‡
HAVE_MALLOC_H


46 
	~<mÆloc.h
>

49 #i‡
HAVE_MEMORY_H


50 
	~<mem‹y.h
>

53 #i‡
HAVE_STDLIB_H


54 
	~<°dlib.h
>

57 #i‡
HAVE_STDIO_H


58 
	~<°dio.h
>

61 
	~"…dl.h
"

64 #i‚de‡
LTDL_FILENAME_MAX


65 
	#LTDL_FILENAME_MAX
 1024

	)

68 #unde‡
LTDL_READTEXT_MODE


70 #ifde‡
_WIN32


71 
	#LTDL_READTEXT_MODE
 "π"

	)

73 
	#LTDL_READTEXT_MODE
 "r"

	)

76 #unde‡
LTDL_SYMBOL_LENGTH


78 
	#LTDL_SYMBOL_LENGTH
 128

	)

80 #unde‡
LTDL_SYMBOL_OVERHEAD


82 
	#LTDL_SYMBOL_OVERHEAD
 5

	)

84 c⁄° 
	gobjdú
[] = 
LTDL_OBJDIR
;

85 #ifdef 
LTDL_SHLIB_EXT


86 c⁄° 
	gshlib_ext
[] = 
LTDL_SHLIB_EXT
;

89 c⁄° 
	gunknown_îr‹
[] = "unknownÉrror";

90 c⁄° 
	gdl›í_nŸ_suµ‹ãd_îr‹
[] = "dlopen supportÇotávailable";

91 c⁄° 
	gfûe_nŸ_found_îr‹
[] = "fileÇot found";

92 c⁄° 
	gno_symbﬁs_îr‹
[] = "no symbols defined";

93 c⁄° 
	gˇ¬Ÿ_›í_îr‹
[] = "can't openÅhe module";

94 c⁄° 
	gˇ¬Ÿ_˛o£_îr‹
[] = "can't closeÅhe module";

95 c⁄° 
	gsymbﬁ_îr‹
[] = "symbolÇot found";

96 c⁄° 
	gmem‹y_îr‹
[] = "notÉnough memory";

97 c⁄° 
	gövÆid_h™dÀ_îr‹
[] = "invalid handle";

98 c⁄° 
	gbuf„r_ovîÊow_îr‹
[] = "internal buffer overflow";

99 c⁄° 
	gshutdown_îr‹
[] = "libraryálready shutdown";

101 #i‚de‡
HAVE_PRELOADED_SYMBOLS


103 c⁄° 
…_dlsymli°
 
	g…_¥ñﬂded_symbﬁs
[1] = { { 0, 0 } };

106 c⁄° *
	gœ°_îr‹
 = 0;

108 
	$…_±r_t
 (*
…_dlmÆloc
Ë
	`LTDL_PARAMS
((
size_t
 
size
)Ë(
	$…_±r_t
(*)
	`LTDL_PARAMS
((
size_t
)))
mÆloc
;

109 (*
…_dl‰ì
Ë
	`LTDL_PARAMS
((
…_±r_t
 
±r
)Ë((*)LTDL_PARAMS(÷t_±r_t)))
‰ì
;

111 
	s…_d…y≥_t
 {

112 
…_d…y≥_t
 *
√xt
;

113 c⁄° *
sym_¥efix
;

114 (*
mod_öô
Ë
	`LTDL_PARAMS
(());

115 (*
mod_exô
Ë
	`LTDL_PARAMS
(());

116 (*
lib_›í
Ë
	`LTDL_PARAMS
((
…_dlh™dÀ
 
h™dÀ
, c⁄° *
fûíame
));

117 (*
lib_˛o£
Ë
	`LTDL_PARAMS
((
…_dlh™dÀ
 
h™dÀ
));

118 
	`…_±r_t
 (*
föd_sym
Ë
	`LTDL_PARAMS
((
…_dlh™dÀ
 
h™dÀ
, c⁄° *
symbﬁ
));

119 } 
	t…_d…y≥_t
;

121 
	#LTDL_TYPE_TOP
 0

	)

123 
	s…_dlh™dÀ_t
 {

124 
…_dlh™dÀ_t
 *
√xt
;

125 
…_d…y≥_t
 *
ty≥
;

126 *
fûíame
;

127 *
«me
;

128 
ußge
;

129 
dïcou¡
;

130 
…_dlh™dÀ
 *
dïlibs
;

131 
…_±r_t
 
h™dÀ
;

132 
…_±r_t
 
sy°em
;

133 } 
	t…_dlh™dÀ_t
;

135 #unde‡
°rdup


136 
	#°rdup
 
x°rdup


	)

138 
ölöe
 *

139 
	$°rdup
(
°r
)

140 c⁄° *
°r
;

142 *
tmp
;

144 i‡(!
°r
)

146 
tmp
 = (*Ë
	`…_dlmÆloc
(
	`°æí
(
°r
)+1);

147 i‡(
tmp
)

148 
	`°r˝y
(
tmp
, 
°r
);

149  
tmp
;

150 
	}
}

152 #i‡! 
HAVE_STRCHR


154 #i‡
HAVE_INDEX


156 
	#°rchr
 
ödex


	)

160 
	#°rchr
 
x°rchr


	)

162 
ölöe
 const *

163 
	$°rchr
(
°r
, 
ch
)

164 c⁄° *
°r
;

165 
ch
;

167 c⁄° *
p
;

169 
p
 = 
°r
; *∞!()
ch
 && *p != '\0';Ö++)

172  (*
p
 =()
ch
) ?Ö : 0;

173 
	}
}

179 #i‡! 
HAVE_STRRCHR


181 #i‡
HAVE_RINDEX


183 
	#°ºchr
 
rödex


	)

187 
	#°ºchr
 
x°ºchr


	)

189 
ölöe
 const *

190 
	$°ºchr
(
°r
, 
ch
)

191 c⁄° *
°r
;

192 
ch
;

194 c⁄° *
p
;

196 
p
 = 
°r
; *p != '\0';Ö++)

199 *
p
 !()
ch
 &&Ö >
°r
)

200 
p
--;

202  (*
p
 =()
ch
) ?Ö : 0;

203 
	}
}

209 #i‡
HAVE_LIBDL


213 #i‡
HAVE_DLFCN_H


214 
	~<dlf˙.h
>

217 #ifde‡
RTLD_GLOBAL


218 
	#LTDL_GLOBAL
 
RTLD_GLOBAL


	)

220 #ifde‡
DL_GLOBAL


221 
	#LTDL_GLOBAL
 
DL_GLOBAL


	)

223 
	#LTDL_GLOBAL
 0

	)

229 #i‚de‡
LTDL_LAZY_OR_NOW


230 #ifde‡
RTLD_LAZY


231 
	#LTDL_LAZY_OR_NOW
 
RTLD_LAZY


	)

233 #ifde‡
DL_LAZY


234 
	#LTDL_LAZY_OR_NOW
 
DL_LAZY


	)

236 #ifde‡
RTLD_NOW


237 
	#LTDL_LAZY_OR_NOW
 
RTLD_NOW


	)

239 #ifde‡
DL_NOW


240 
	#LTDL_LAZY_OR_NOW
 
DL_NOW


	)

242 
	#LTDL_LAZY_OR_NOW
 0

	)

250 
sys_dl_öô
 
LTDL_PARAMS
(())

256 
sys_dl_exô
 
LTDL_PARAMS
(())

262 
	$sys_dl_›í
 (
h™dÀ
, 
fûíame
)

263 
…_dlh™dÀ
 
h™dÀ
;

264 c⁄° *
fûíame
;

266 
h™dÀ
->h™dÀ = 
	`dl›í
(
fûíame
, 
LTDL_GLOBAL
 | 
LTDL_LAZY_OR_NOW
);

267 i‡(!
h™dÀ
->handle) {

268 #i‡
HAVE_DLERROR


269 
œ°_îr‹
 = 
	`dÀº‹
();

271 
œ°_îr‹
 = 
ˇ¬Ÿ_›í_îr‹
;

276 
	}
}

279 
	$sys_dl_˛o£
 (
h™dÀ
)

280 
…_dlh™dÀ
 
h™dÀ
;

282 i‡(
	`dl˛o£
(
h™dÀ
->handle) != 0) {

283 #i‡
HAVE_DLERROR


284 
œ°_îr‹
 = 
	`dÀº‹
();

286 
œ°_îr‹
 = 
ˇ¬Ÿ_˛o£_îr‹
;

291 
	}
}

293 
…_±r_t


294 
	$sys_dl_sym
 (
h™dÀ
, 
symbﬁ
)

295 
…_dlh™dÀ
 
h™dÀ
;

296 c⁄° *
symbﬁ
;

298 
…_±r_t
 
addªss
 = 
	`dlsym
(
h™dÀ
->h™dÀ, 
symbﬁ
);

300 i‡(!
addªss
)

301 #i‡
HAVE_DLERROR


302 
œ°_îr‹
 = 
	`dÀº‹
();

304 
œ°_îr‹
 = 
symbﬁ_îr‹
;

306  
addªss
;

307 
	}
}

310 
	g…_d…y≥_t


311 #ifde‡
NEED_USCORE


312 
	gsys_dl
 = { 
LTDL_TYPE_TOP
, "_", 
sys_dl_öô
, 
sys_dl_exô
,

313 
sys_dl_›í
, 
sys_dl_˛o£
, 
sys_dl_sym
 };

315 
	gsys_dl
 = { 
LTDL_TYPE_TOP
, 0, 
sys_dl_öô
, 
sys_dl_exô
,

316 
sys_dl_›í
, 
sys_dl_˛o£
, 
sys_dl_sym
 };

319 #unde‡
LTDL_TYPE_TOP


320 
	#LTDL_TYPE_TOP
 &
sys_dl


	)

324 #i‡
HAVE_SHL_LOAD


328 #ifde‡
HAVE_DL_H


329 
	~<dl.h
>

358 #i‚def 
DYNAMIC_PATH


359 
	#DYNAMIC_PATH
 0

	)

361 #i‚def 
BIND_RESTRICTED


362 
	#BIND_RESTRICTED
 0

	)

365 
	#LTDL_BIND_FLAGS
 (
BIND_IMMEDIATE
 | 
BIND_NONFATAL
 | 
DYNAMIC_PATH
)

	)

368 
sys_shl_öô
 
LTDL_PARAMS
(())

374 
sys_shl_exô
 
LTDL_PARAMS
(())

380 
	$sys_shl_›í
 (
h™dÀ
, 
fûíame
)

381 
…_dlh™dÀ
 
h™dÀ
;

382 c⁄° *
fûíame
;

384 
h™dÀ
->h™dÀ = 
	`shl_lﬂd
(
fûíame
, 
LTDL_BIND_FLAGS
, 0L);

385 i‡(!
h™dÀ
->handle) {

386 
œ°_îr‹
 = 
ˇ¬Ÿ_›í_îr‹
;

390 
	}
}

393 
	$sys_shl_˛o£
 (
h™dÀ
)

394 
…_dlh™dÀ
 
h™dÀ
;

396 i‡(
	`shl_u∆ﬂd
((
shl_t
Ë(
h™dÀ
->handle)) != 0) {

397 
œ°_îr‹
 = 
ˇ¬Ÿ_˛o£_îr‹
;

401 
	}
}

403 
…_±r_t


404 
	$sys_shl_sym
 (
h™dÀ
, 
symbﬁ
)

405 
…_dlh™dÀ
 
h™dÀ
;

406 c⁄° *
symbﬁ
;

408 
…_±r_t
 
addªss
;

410 i‡(
h™dÀ
->h™dÀ && 
	`shl_födsym
((
shl_t
*) &(handle->handle),

411 
symbﬁ
, 
TYPE_UNDEFINED
, &
addªss
) == 0)

412 i‡(
addªss
)

413  
addªss
;

414 
œ°_îr‹
 = 
symbﬁ_îr‹
;

416 
	}
}

419 
…_d…y≥_t


420 
	gsys_shl
 = { 
LTDL_TYPE_TOP
, 0, 
sys_shl_öô
, 
sys_shl_exô
,

421 
sys_shl_›í
, 
sys_shl_˛o£
, 
sys_shl_sym
 };

423 #unde‡
LTDL_TYPE_TOP


424 
	#LTDL_TYPE_TOP
 &
sys_shl


	)

428 #i‡
HAVE_DLD


432 #i‡
HAVE_DLD_H


433 
	~<dld.h
>

437 
sys_dld_öô
 
LTDL_PARAMS
(())

443 
sys_dld_exô
 
LTDL_PARAMS
(())

449 
	$sys_dld_›í
 (
h™dÀ
, 
fûíame
)

450 
…_dlh™dÀ
 
h™dÀ
;

451 c⁄° *
fûíame
;

453 
h™dÀ
->h™dÀ = 
	`°rdup
(
fûíame
);

454 i‡(!
h™dÀ
->handle) {

455 
œ°_îr‹
 = 
mem‹y_îr‹
;

458 i‡(
	`dld_lök
(
fûíame
) != 0) {

459 
œ°_îr‹
 = 
ˇ¬Ÿ_›í_îr‹
;

460 
	`…_dl‰ì
(
h™dÀ
->handle);

464 
	}
}

467 
	$sys_dld_˛o£
 (
h™dÀ
)

468 
…_dlh™dÀ
 
h™dÀ
;

470 i‡(
	`dld_u∆ök_by_fûe
((*)(
h™dÀ
->handle), 1) != 0) {

471 
œ°_îr‹
 = 
ˇ¬Ÿ_˛o£_îr‹
;

474 
	`…_dl‰ì
(
h™dÀ
->
fûíame
);

476 
	}
}

478 
…_±r_t


479 
	$sys_dld_sym
 (
h™dÀ
, 
symbﬁ
)

480 
…_dlh™dÀ
 
h™dÀ
;

481 c⁄° *
symbﬁ
;

483 
…_±r_t
 
addªss
 = 
	`dld_gë_func
(
symbﬁ
);

485 i‡(!
addªss
)

486 
œ°_îr‹
 = 
symbﬁ_îr‹
;

487  
addªss
;

488 
	}
}

491 
…_d…y≥_t


492 
	gsys_dld
 = { 
LTDL_TYPE_TOP
, 0, 
sys_dld_öô
, 
sys_dld_exô
,

493 
sys_dld_›í
, 
sys_dld_˛o£
, 
sys_dld_sym
 };

495 #unde‡
LTDL_TYPE_TOP


496 
	#LTDL_TYPE_TOP
 &
sys_dld


	)

500 #ifde‡
_WIN32


504 
	~<wödows.h
>

507 
sys_wŒ_öô
 
LTDL_PARAMS
(())

513 
sys_wŒ_exô
 
LTDL_PARAMS
(())

519 
…_dlh™dÀ
 
	gh™dÀs
;

522 
	$sys_wŒ_›í
 (
h™dÀ
, 
fûíame
)

523 
…_dlh™dÀ
 
h™dÀ
;

524 c⁄° *
fûíame
;

526 
…_dlh™dÀ
 
cur
;

527 *
£¨ch«me
 = 
NULL
;

528 *
ext
 = 
	`°ºchr
(
fûíame
, '.');

530 i‡(
ext
) {

532 
£¨ch«me
 = 
	`°rdup
(
fûíame
);

536 
£¨ch«me
 = (*)
	`…_dlmÆloc
(2+ 
	`°æí
(
fûíame
));

537 
	`°r˝y
(
£¨ch«me
, 
fûíame
);

538 
	`°rˇt
(
£¨ch«me
, ".");

541 
h™dÀ
->h™dÀ = 
	`LﬂdLibøry
(
£¨ch«me
);

542 
	`…_dl‰ì
(
£¨ch«me
);

552 
cur
 = 
h™dÀs
;

553 
cur
) {

554 i‡(!
cur
->
h™dÀ
) {

555 
cur
 = 0;

558 i‡(
cur
->
h™dÀ
 == handle->handle)

560 
cur
 = cur->
√xt
;

563 i‡(
cur
 || !
h™dÀ
->handle) {

564 
œ°_îr‹
 = 
ˇ¬Ÿ_›í_îr‹
;

569 
	}
}

572 
	$sys_wŒ_˛o£
 (
h™dÀ
)

573 
…_dlh™dÀ
 
h™dÀ
;

575 i‡(
	`FªeLibøry
(
h™dÀ
->handle) == 0) {

576 
œ°_îr‹
 = 
ˇ¬Ÿ_˛o£_îr‹
;

580 
	}
}

582 
…_±r_t


583 
	$sys_wŒ_sym
 (
h™dÀ
, 
symbﬁ
)

584 
…_dlh™dÀ
 
h™dÀ
;

585 c⁄° *
symbﬁ
;

587 
…_±r_t
 
addªss
 = 
	`GëProcAddªss
(
h™dÀ
->h™dÀ, 
symbﬁ
);

589 i‡(!
addªss
)

590 
œ°_îr‹
 = 
symbﬁ_îr‹
;

591  
addªss
;

592 
	}
}

595 
…_d…y≥_t


596 
	gsys_wŒ
 = { 
LTDL_TYPE_TOP
, 0, 
sys_wŒ_öô
, 
sys_wŒ_exô
,

597 
sys_wŒ_›í
, 
sys_wŒ_˛o£
, 
sys_wŒ_sym
 };

599 #unde‡
LTDL_TYPE_TOP


600 
	#LTDL_TYPE_TOP
 &
sys_wŒ


	)

604 #ifde‡
__BEOS__


608 
	~<kî√l/image.h
>

611 
sys_bedl_öô
 
LTDL_PARAMS
(())

617 
sys_bedl_exô
 
LTDL_PARAMS
(())

623 
	$sys_bedl_›í
 (
h™dÀ
, 
fûíame
)

624 
…_dlh™dÀ
 
h™dÀ
;

625 c⁄° *
fûíame
;

627 
image_id
 
image
 = 0;

629 i‡(
fûíame
) {

630 
image
 = 
	`lﬂd_add_⁄
(
fûíame
);

632 
image_öfo
 
öfo
;

633 
öt32
 
cookõ
 = 0;

634 i‡(
	`gë_√xt_image_öfo
(0, &
cookõ
, &
öfo
Ë=
B_OK
)

635 
image
 = 
	`lﬂd_add_⁄
(
öfo
.
«me
);

637 i‡(
image
 <= 0) {

638 
œ°_îr‹
 = 
ˇ¬Ÿ_›í_îr‹
;

641 
h™dÀ
->h™dÀ = (*Ë
image
;

643 
	}
}

646 
	$sys_bedl_˛o£
 (
h™dÀ
)

647 
…_dlh™dÀ
 
h™dÀ
;

649 i‡(
	`u∆ﬂd_add_⁄
((
image_id
)
h™dÀ
->h™dÀË!
B_OK
) {

650 
œ°_îr‹
 = 
ˇ¬Ÿ_˛o£_îr‹
;

654 
	}
}

656 
…_±r_t


657 
	$sys_bedl_sym
 (
h™dÀ
, 
symbﬁ
)

658 
…_dlh™dÀ
 
h™dÀ
;

659 c⁄° *
symbﬁ
;

661 
…_±r_t
 
addªss
 = 0;

662 
image_id
 
image
 = (image_id)
h™dÀ
->handle;

664 i‡(
	`gë_image_symbﬁ
(
image
, 
symbﬁ
, 
B_SYMBOL_TYPE_ANY
,

665 &
addªss
Ë!
B_OK
) {

666 
œ°_îr‹
 = 
symbﬁ_îr‹
;

669  
addªss
;

670 
	}
}

673 
…_d…y≥_t


674 
	gsys_bedl
 = { 
LTDL_TYPE_TOP
, 0, 
sys_bedl_öô
, 
sys_bedl_exô
,

675 
sys_bedl_›í
, 
sys_bedl_˛o£
, 
sys_bedl_sym
 };

677 #unde‡
LTDL_TYPE_TOP


678 
	#LTDL_TYPE_TOP
 &
sys_bedl


	)

684 
	s…_dlsymli°s_t
 {

685 
…_dlsymli°s_t
 *
	m√xt
;

686 c⁄° 
…_dlsymli°
 *
	msyms
;

687 } 
	t…_dlsymli°s_t
;

689 c⁄° 
…_dlsymli°
 *
	gdeÁu…_¥ñﬂded_symbﬁs
 = 0;

690 
…_dlsymli°s_t
 *
	g¥ñﬂded_symbﬁs
 = 0;

693 
¥esym_öô
 
LTDL_PARAMS
(())

695 
	g¥ñﬂded_symbﬁs
 = 0;

696 i‡(
	gdeÁu…_¥ñﬂded_symbﬁs
)

697  
…_dÕªlﬂd
(
deÁu…_¥ñﬂded_symbﬁs
);

702 
¥esym_‰ì_symli°s
 
LTDL_PARAMS
(())

704 
…_dlsymli°s_t
 *
	gli°s
 = 
¥ñﬂded_symbﬁs
;

706 
	gli°s
) {

707 
…_dlsymli°s_t
 *
	gtmp
 = 
li°s
;

709 
	gli°s
 = 
li°s
->
√xt
;

710 
…_dl‰ì
(
tmp
);

712 
	g¥ñﬂded_symbﬁs
 = 0;

717 
¥esym_exô
 
LTDL_PARAMS
(())

719 
¥esym_‰ì_symli°s
();

724 
	$¥esym_add_symli°
 (
¥ñﬂded
)

725 c⁄° 
…_dlsymli°
 *
¥ñﬂded
;

727 
…_dlsymli°s_t
 *
tmp
;

728 
…_dlsymli°s_t
 *
li°s
 = 
¥ñﬂded_symbﬁs
;

730 
li°s
) {

731 i‡(
li°s
->
syms
 =
¥ñﬂded
)

733 
li°s
 =Üi°s->
√xt
;

736 
tmp
 = (
…_dlsymli°s_t
*Ë
	`…_dlmÆloc
((lt_dlsymlists_t));

737 i‡(!
tmp
) {

738 
œ°_îr‹
 = 
mem‹y_îr‹
;

741 
tmp
->
syms
 = 
¥ñﬂded
;

742 
tmp
->
√xt
 = 0;

743 i‡(!
¥ñﬂded_symbﬁs
)

744 
¥ñﬂded_symbﬁs
 = 
tmp
;

747 
li°s
 = 
¥ñﬂded_symbﬁs
;

748 
li°s
->
√xt
)

749 
li°s
 =Üi°s->
√xt
;

750 
li°s
->
√xt
 = 
tmp
;

753 
	}
}

756 
	$¥esym_›í
 (
h™dÀ
, 
fûíame
)

757 
…_dlh™dÀ
 
h™dÀ
;

758 c⁄° *
fûíame
;

760 
…_dlsymli°s_t
 *
li°s
 = 
¥ñﬂded_symbﬁs
;

762 i‡(!
li°s
) {

763 
œ°_îr‹
 = 
no_symbﬁs_îr‹
;

766 i‡(!
fûíame
)

767 
fûíame
 = "@PROGRAM@";

768 
li°s
) {

769 c⁄° 
…_dlsymli°
 *
syms
 = 
li°s
->syms;

771 
syms
->
«me
) {

772 i‡(!
syms
->
addªss
 &&

773 
	`°rcmp
(
syms
->
«me
, 
fûíame
) == 0) {

774 
h™dÀ
->h™dÀ = (
…_±r_t
Ë
syms
;

777 
syms
++;

779 
li°s
 =Üi°s->
√xt
;

781 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

783 
	}
}

786 
	$¥esym_˛o£
 (
h™dÀ
)

787 
…_dlh™dÀ
 
h™dÀ
;

790 
h™dÀ
 = 0;

792 
	}
}

794 
…_±r_t


795 
	$¥esym_sym
 (
h™dÀ
, 
symbﬁ
)

796 
…_dlh™dÀ
 
h™dÀ
;

797 c⁄° *
symbﬁ
;

799 
…_dlsymli°
 *
syms
 = (…_dlsymli°*)(
h™dÀ
->handle);

801 
syms
++;

802 
syms
->
addªss
) {

803 i‡(
	`°rcmp
(
syms
->
«me
, 
symbﬁ
) == 0)

804  
syms
->
addªss
;

805 
syms
++;

807 
œ°_îr‹
 = 
symbﬁ_îr‹
;

809 
	}
}

812 
…_d…y≥_t


813 
	g¥esym
 = { 
LTDL_TYPE_TOP
, 0, 
¥esym_öô
, 
¥esym_exô
,

814 
¥esym_›í
, 
¥esym_˛o£
, 
¥esym_sym
 };

816 #unde‡
LTDL_TYPE_TOP


817 
	#LTDL_TYPE_TOP
 &
¥esym


	)

819 *
	gu£r_£¨ch_∑th
 = 0;

820 
…_dlh™dÀ
 
	gh™dÀs
 = 0;

821 
	göôülized
 = 0;

823 
…_d…y≥_t
 *
	gty≥s
 = 
LTDL_TYPE_TOP
;

824 #unde‡
LTDL_TYPE_TOP


827 
…_dlöô
 
LTDL_PARAMS
(())

830 
…_d…y≥_t
 **
	gty≥
 = &
ty≥s
;

831 
	gty≥cou¡
 = 0;

833 i‡(
	göôülized
) {

834 
	göôülized
++;

837 
	gh™dÀs
 = 0;

838 
	gu£r_£¨ch_∑th
 = 0;

840 *
	gty≥
) {

841 i‡((*
	gty≥
)->
mod_öô
())

842 *
	gty≥
 = (*
ty≥
)->
√xt
;

844 
	gty≥
 = &(*
ty≥
)->
√xt
;

845 
	gty≥cou¡
++;

848 i‡(
	gty≥cou¡
 == 0) {

849 
œ°_îr‹
 = 
dl›í_nŸ_suµ‹ãd_îr‹
;

852 
	gœ°_îr‹
 = 0;

853 
	göôülized
 = 1;

858 
	$…_dÕªlﬂd
 (
¥ñﬂded
)

859 c⁄° 
…_dlsymli°
 *
¥ñﬂded
;

861 i‡(
¥ñﬂded
)

862  
	`¥esym_add_symli°
(
¥ñﬂded
);

863 
	`¥esym_‰ì_symli°s
();

864 i‡(
deÁu…_¥ñﬂded_symbﬁs
)

865  
	`…_dÕªlﬂd
(
deÁu…_¥ñﬂded_symbﬁs
);

867 
	}
}

870 
	$…_dÕªlﬂd_deÁu…
 (
¥ñﬂded
)

871 c⁄° 
…_dlsymli°
 *
¥ñﬂded
;

873 
deÁu…_¥ñﬂded_symbﬁs
 = 
¥ñﬂded
;

875 
	}
}

878 
…_dÀxô
 
LTDL_PARAMS
(())

881 
…_d…y≥_t
 *
	gty≥
 = 
ty≥s
;

882 
	gîr‹s
;

884 i‡(!
	göôülized
) {

885 
	gœ°_îr‹
 = 
shutdown_îr‹
;

888 i‡(
	göôülized
 != 1) {

889 
öôülized
--;

893 
	gîr‹s
 = 0;

894 
	gh™dÀs
) {

896 i‡(
…_dl˛o£
(
h™dÀs
))

897 
	gîr‹s
++;

899 
	göôülized
 = 0;

900 
	gty≥
) {

901 i‡(
	gty≥
->
mod_exô
())

902 
	gîr‹s
++;

903 
	gty≥
 = 
ty≥
->
√xt
;

905  
	gîr‹s
;

909 
	$åyÆl_dl›í
 (
h™dÀ
, 
fûíame
)

910 
…_dlh™dÀ
 *
h™dÀ
;

911 c⁄° *
fûíame
;

913 
…_dlh™dÀ
 
cur
;

914 
…_d…y≥_t
 *
ty≥
 = 
ty≥s
;

915 c⁄° *
ßved_îr‹
 = 
œ°_îr‹
;

918 
cur
 = 
h™dÀs
;

919 
cur
) {

920 i‡(!
cur
->
fûíame
 && !filename)

922 i‡(
cur
->
fûíame
 && filename &&

923 
	`°rcmp
(
cur
->
fûíame
, filename) == 0)

925 
cur
 = cur->
√xt
;

927 i‡(
cur
) {

928 
cur
->
ußge
++;

929 *
h™dÀ
 = 
cur
;

933 
cur
 = *
h™dÀ
;

934 i‡(
fûíame
) {

935 
cur
->
fûíame
 = 
	`°rdup
(filename);

936 i‡(!
cur
->
fûíame
) {

937 
œ°_îr‹
 = 
mem‹y_îr‹
;

941 
cur
->
fûíame
 = 0;

942 
ty≥
) {

943 i‡(
ty≥
->
	`lib_›í
(
cur
, 
fûíame
) == 0)

945 
ty≥
 =Åy≥->
√xt
;

947 i‡(!
ty≥
) {

948 i‡(
cur
->
fûíame
)

949 
	`…_dl‰ì
(
cur
->
fûíame
);

952 
cur
->
ty≥
 =Åype;

953 
œ°_îr‹
 = 
ßved_îr‹
;

955 
	}
}

958 
	$föd_moduÀ
 (
h™dÀ
, 
dú
, 
libdú
, 
d ame
, 
ﬁd_«me
, 
ö°ÆÀd
)

959 
…_dlh™dÀ
 *
h™dÀ
;

960 c⁄° *
dú
;

961 c⁄° *
libdú
;

962 c⁄° *
d ame
;

963 c⁄° *
ﬁd_«me
;

964 
ö°ÆÀd
;

966 
îr‹
;

967 *
fûíame
;

971 i‡(
ﬁd_«me
 && 
	`åyÆl_dl›í
(
h™dÀ
, old_name) == 0)

974 i‡(
d ame
) {

976 i‡(
ö°ÆÀd
 && 
libdú
) {

977 
fûíame
 = (*)

978 
	`…_dlmÆloc
(
	`°æí
(
libdú
)+1+°æí(
d ame
)+1);

979 i‡(!
fûíame
) {

980 
œ°_îr‹
 = 
mem‹y_îr‹
;

983 
	`°r˝y
(
fûíame
, 
libdú
);

984 
	`°rˇt
(
fûíame
, "/");

985 
	`°rˇt
(
fûíame
, 
d ame
);

986 
îr‹
 = 
	`åyÆl_dl›í
(
h™dÀ
, 
fûíame
) == 0;

987 
	`…_dl‰ì
(
fûíame
);

988 i‡(
îr‹
)

992 i‡(!
ö°ÆÀd
) {

993 
fûíame
 = (*)

994 
	`…_dlmÆloc
((
dú
 ? 
	`°æí
(dir) : 0)

995 + 
	`°æí
(
objdú
Ë+ såÀn(
d ame
) + 1);

996 i‡(!
fûíame
) {

997 
œ°_îr‹
 = 
mem‹y_îr‹
;

1000 i‡(
dú
)

1001 
	`°r˝y
(
fûíame
, 
dú
);

1003 *
fûíame
 = 0;

1004 
	`°rˇt
(
fûíame
, 
objdú
);

1005 
	`°rˇt
(
fûíame
, 
d ame
);

1007 
îr‹
 = 
	`åyÆl_dl›í
(
h™dÀ
, 
fûíame
) == 0;

1008 
	`…_dl‰ì
(
fûíame
);

1009 i‡(
îr‹
)

1014 
fûíame
 = (*)

1015 
	`…_dlmÆloc
((
dú
 ? 
	`°æí
(dir) : 0)

1016 + 
	`°æí
(
d ame
) + 1);

1017 i‡(
dú
)

1018 
	`°r˝y
(
fûíame
, 
dú
);

1020 *
fûíame
 = 0;

1021 
	`°rˇt
(
fûíame
, 
d ame
);

1022 
îr‹
 = 
	`åyÆl_dl›í
(
h™dÀ
, 
fûíame
) == 0;

1023 
	`…_dl‰ì
(
fûíame
);

1024 i‡(
îr‹
)

1028 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

1030 
	}
}

1032 
…_±r_t


1033 
	$föd_fûe
 (
ba£«me
, 
£¨ch_∑th
, 
pdú
, 
h™dÀ
)

1034 c⁄° *
ba£«me
;

1035 c⁄° *
£¨ch_∑th
;

1036 **
pdú
;

1037 
…_dlh™dÀ
 *
h™dÀ
;

1042 *
fûíame
 = 0;

1043 
fûíamesize
 = 0;

1044 c⁄° *
√xt
 = 
£¨ch_∑th
;

1045 
Ànba£
 = 
	`°æí
(
ba£«me
);

1047 i‡(!
√xt
 || !*next) {

1048 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

1051 
√xt
) {

1052 
Àndú
;

1053 c⁄° *
cur
 = 
√xt
;

1055 
√xt
 = 
	`°rchr
(
cur
, ':');

1056 i‡(!
√xt
)

1057 
√xt
 = 
cur
 + 
	`°æí
(cur);

1058 
Àndú
 = 
√xt
 - 
cur
;

1059 i‡(*
√xt
 == ':')

1060 ++
√xt
;

1062 
√xt
 = 0;

1063 i‡(
Àndú
 == 0)

1065 i‡(
Àndú
 + 1 + 
Ànba£
 >
fûíamesize
) {

1066 i‡(
fûíame
)

1067 
	`…_dl‰ì
(
fûíame
);

1068 
fûíamesize
 = 
Àndú
 + 1 + 
Ànba£
 + 1;

1069 
fûíame
 = (*Ë
	`…_dlmÆloc
(
fûíamesize
);

1070 i‡(!
fûíame
) {

1071 
œ°_îr‹
 = 
mem‹y_îr‹
;

1075 
	`°∫˝y
(
fûíame
, 
cur
, 
Àndú
);

1076 i‡(
fûíame
[
Àndú
-1] != '/')

1077 
fûíame
[
Àndú
++] = '/';

1078 
	`°r˝y
(
fûíame
+
Àndú
, 
ba£«me
);

1079 i‡(
h™dÀ
) {

1080 i‡(
	`åyÆl_dl›í
(
h™dÀ
, 
fûíame
) == 0) {

1081 
	`…_dl‰ì
(
fûíame
);

1082  (
…_±r_t
Ë
h™dÀ
;

1085 
FILE
 *
fûe
 = 
	`f›í
(
fûíame
, 
LTDL_READTEXT_MODE
);

1086 i‡(
fûe
) {

1087 i‡(*
pdú
)

1088 
	`…_dl‰ì
(*
pdú
);

1089 
fûíame
[
Àndú
] = '\0';

1090 *
pdú
 = 
	`°rdup
(
fûíame
);

1091 i‡(!*
pdú
) {

1095 *
pdú
 = 
fûíame
;

1097 
	`…_dl‰ì
(
fûíame
);

1098  (
…_±r_t
Ë
fûe
;

1102 i‡(
fûíame
)

1103 
	`…_dl‰ì
(
fûíame
);

1104 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

1106 
	}
}

1109 
	$lﬂd_dïlibs
(
h™dÀ
, 
dïlibs
)

1110 
…_dlh™dÀ
 
h™dÀ
;

1111 c⁄° *
dïlibs
;

1114 
h™dÀ
->
dïcou¡
 = 0;

1115 
h™dÀ
->
dïlibs
 = 0;

1117 
dïlibs
 = 0;

1119 
	}
}

1122 
	$u∆ﬂd_dïlibs
(
h™dÀ
)

1123 
…_dlh™dÀ
 
h™dÀ
;

1127 
h™dÀ
 = 0;

1129 
	}
}

1131 
ölöe
 

1132 
	$åim
 (
de°
, 
°r
)

1133 **
de°
;

1134 c⁄° *
°r
;

1138 *
tmp
;

1139 c⁄° *
íd
 = 
	`°ºchr
(
°r
, '\'');

1140 
Àn
 = 
	`°æí
(
°r
);

1142 i‡(*
de°
)

1143 
	`…_dl‰ì
(*
de°
);

1144 i‡(
Àn
 > 3 && 
°r
[0] == '\'') {

1145 
tmp
 = (*Ë
	`…_dlmÆloc
(
íd
 - 
°r
);

1146 i‡(!
tmp
) {

1147 
œ°_îr‹
 = 
mem‹y_îr‹
;

1150 
	`°∫˝y
(
tmp
, &
°r
[1], (
íd
 - str) - 1);

1151 
tmp
[
Àn
-3] = '\0';

1152 *
de°
 = 
tmp
;

1154 *
de°
 = 0;

1156 
	}
}

1158 
ölöe
 

1159 
	$‰ì_v¨s
(
dú
, 
«me
, 
d ame
, 
ﬁd«me
, 
libdú
, 
dïlibs
)

1160 *
dú
;

1161 *
«me
;

1162 *
d ame
;

1163 *
ﬁd«me
;

1164 *
libdú
;

1165 *
dïlibs
;

1167 i‡(
dú
)

1168 
	`…_dl‰ì
(
dú
);

1169 i‡(
«me
)

1170 
	`…_dl‰ì
(
«me
);

1171 i‡(
d ame
)

1172 
	`…_dl‰ì
(
d ame
);

1173 i‡(
ﬁd«me
)

1174 
	`…_dl‰ì
(
ﬁd«me
);

1175 i‡(
libdú
)

1176 
	`…_dl‰ì
(
libdú
);

1177 i‡(
dïlibs
)

1178 
	`…_dl‰ì
(
dïlibs
);

1180 
	}
}

1182 
…_dlh™dÀ


1183 
	$…_dl›í
 (
fûíame
)

1184 c⁄° *
fûíame
;

1186 
…_dlh™dÀ
 
h™dÀ
, 
√wh™dÀ
;

1187 c⁄° *
ba£«me
, *
ext
;

1188 c⁄° *
ßved_îr‹
 = 
œ°_îr‹
;

1189 *
dú
 = 0, *
«me
 = 0;

1191 i‡(!
fûíame
) {

1192 
h™dÀ
 = (
…_dlh™dÀ
Ë
	`…_dlmÆloc
((
…_dlh™dÀ_t
));

1193 i‡(!
h™dÀ
) {

1194 
œ°_îr‹
 = 
mem‹y_îr‹
;

1197 
h™dÀ
->
ußge
 = 0;

1198 
h™dÀ
->
dïcou¡
 = 0;

1199 
h™dÀ
->
dïlibs
 = 0;

1200 
√wh™dÀ
 = 
h™dÀ
;

1201 i‡(
	`åyÆl_dl›í
(&
√wh™dÀ
, 0) != 0) {

1202 
	`…_dl‰ì
(
h™dÀ
);

1205 
ªgi°î_h™dÀ
;

1207 
ba£«me
 = 
	`°ºchr
(
fûíame
, '/');

1208 i‡(
ba£«me
) {

1209 
ba£«me
++;

1210 
dú
 = (*Ë
	`…_dlmÆloc
(
ba£«me
 - 
fûíame
 + 1);

1211 i‡(!
dú
) {

1212 
œ°_îr‹
 = 
mem‹y_îr‹
;

1215 
	`°∫˝y
(
dú
, 
fûíame
, 
ba£«me
 - filename);

1216 
dú
[
ba£«me
 - 
fûíame
] = '\0';

1218 
ba£«me
 = 
fûíame
;

1220 
ext
 = 
	`°ºchr
(
ba£«me
, '.');

1221 i‡(
ext
 && 
	`°rcmp
(ext, ".la") == 0) {

1223 
FILE
 *
fûe
;

1224 
i
;

1225 *
d ame
 = 0, *
ﬁd_«me
 = 0;

1226 *
libdú
 = 0, *
dïlibs
 = 0;

1227 *
löe
;

1228 
îr‹
 = 0;

1232 
ö°ÆÀd
 = 1;

1235 
«me
 = (*Ë
	`…_dlmÆloc
(
ext
 - 
ba£«me
 + 1);

1236 i‡(!
«me
) {

1237 
œ°_îr‹
 = 
mem‹y_îr‹
;

1238 i‡(
dú
)

1239 
	`…_dl‰ì
(
dú
);

1243 
i
 = 0; i < 
ext
 - 
ba£«me
; i++)

1244 i‡(
	`iß um
(()(
ba£«me
[
i
])))

1245 
«me
[
i
] = 
ba£«me
[i];

1247 
«me
[
i
] = '_';

1248 
«me
[
ext
 - 
ba£«me
] = '\0';

1250 
fûe
 = 
	`f›í
(
fûíame
, 
LTDL_READTEXT_MODE
);

1251 i‡(!
fûe
)

1252 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

1253 i‡(!
fûe
 && !
dú
) {

1255 
fûe
 = (
FILE
*Ë
	`föd_fûe
(
ba£«me
,

1256 
u£r_£¨ch_∑th
,

1257 &
dú
, 0);

1258 i‡(!
fûe
)

1259 
fûe
 = (
FILE
*Ë
	`föd_fûe
(
ba£«me
,

1260 
	`gëív
("LTDL_LIBRARY_PATH"),

1261 &
dú
, 0);

1262 #ifde‡
LTDL_SHLIBPATH_VAR


1263 i‡(!
fûe
)

1264 
fûe
 = (
FILE
*Ë
	`föd_fûe
(
ba£«me
,

1265 
	`gëív
(
LTDL_SHLIBPATH_VAR
),

1266 &
dú
, 0);

1269 i‡(!
fûe
) {

1270 i‡(
«me
)

1271 
	`…_dl‰ì
(
«me
);

1272 i‡(
dú
)

1273 
	`…_dl‰ì
(
dú
);

1276 
löe
 = (*Ë
	`…_dlmÆloc
(
LTDL_FILENAME_MAX
);

1277 i‡(!
löe
) {

1278 
	`f˛o£
(
fûe
);

1279 
œ°_îr‹
 = 
mem‹y_îr‹
;

1283 !
	`„of
(
fûe
)) {

1284 i‡(!
	`fgës
(
löe
, 
LTDL_FILENAME_MAX
, 
fûe
))

1286 i‡(
löe
[0] == '\n' ||Üine[0] == '#')

1288 #unde‡
STR_DLNAME


1289 
	#STR_DLNAME
 "d ame="

	)

1290 i‡(
	`°∫cmp
(
löe
, 
STR_DLNAME
,

1291 (
STR_DLNAME
) - 1) == 0)

1292 
îr‹
 = 
	`åim
(&
d ame
,

1293 &
löe
[(
STR_DLNAME
) - 1]);

1295 #unde‡
STR_OLD_LIBRARY


1296 
	#STR_OLD_LIBRARY
 "ﬁd_libøry="

	)

1297 i‡(
	`°∫cmp
(
löe
, 
STR_OLD_LIBRARY
,

1298 (
STR_OLD_LIBRARY
) - 1) == 0)

1299 
îr‹
 = 
	`åim
(&
ﬁd_«me
,

1300 &
löe
[(
STR_OLD_LIBRARY
) - 1]);

1302 #unde‡
STR_LIBDIR


1303 
	#STR_LIBDIR
 "libdú="

	)

1304 i‡(
	`°∫cmp
(
löe
, 
STR_LIBDIR
,

1305 (
STR_LIBDIR
) - 1) == 0)

1306 
îr‹
 = 
	`åim
(&
libdú
,

1307 &
löe
[(
STR_LIBDIR
) - 1]);

1309 #unde‡
STR_DL_DEPLIBS


1310 
	#STR_DL_DEPLIBS
 "dl_dïídícy_libs="

	)

1311 i‡(
	`°∫cmp
(
löe
, 
STR_DL_DEPLIBS
,

1312 (
STR_DL_DEPLIBS
) - 1) == 0)

1313 
îr‹
 = 
	`åim
(&
dïlibs
,

1314 &
löe
[(
STR_DL_DEPLIBS
) - 1]);

1316 i‡(
	`°rcmp
(
löe
, "installed=yes\n") == 0)

1317 
ö°ÆÀd
 = 1;

1319 i‡(
	`°rcmp
(
löe
, "installed=no\n") == 0)

1320 
ö°ÆÀd
 = 0;

1321 i‡(
îr‹
)

1324 
	`f˛o£
(
fûe
);

1325 
	`…_dl‰ì
(
löe
);

1327 
h™dÀ
 = (
…_dlh™dÀ
Ë
	`…_dlmÆloc
((
…_dlh™dÀ_t
));

1328 i‡(!
h™dÀ
 || 
îr‹
) {

1329 i‡(
h™dÀ
)

1330 
	`…_dl‰ì
(
h™dÀ
);

1331 i‡(!
îr‹
)

1332 
œ°_îr‹
 = 
mem‹y_îr‹
;

1333 
	`‰ì_v¨s
(
«me
, 
dú
, 
d ame
, 
ﬁd_«me
, 
libdú
, 
dïlibs
);

1336 
h™dÀ
->
ußge
 = 0;

1337 i‡(
	`lﬂd_dïlibs
(
h™dÀ
, 
dïlibs
) == 0) {

1338 
√wh™dÀ
 = 
h™dÀ
;

1340 i‡(
	`föd_moduÀ
(&
√wh™dÀ
, 
dú
, 
libdú
,

1341 
d ame
, 
ﬁd_«me
, 
ö°ÆÀd
)) {

1342 
	`u∆ﬂd_dïlibs
(
h™dÀ
);

1343 
îr‹
 = 1;

1346 
îr‹
 = 1;

1347 i‡(
îr‹
) {

1348 
	`…_dl‰ì
(
h™dÀ
);

1349 
	`‰ì_v¨s
(
«me
, 
dú
, 
d ame
, 
ﬁd_«me
, 
libdú
, 
dïlibs
);

1352 i‡(
h™dÀ
 !
√wh™dÀ
) {

1353 
	`u∆ﬂd_dïlibs
(
h™dÀ
);

1357 
h™dÀ
 = (
…_dlh™dÀ
Ë
	`…_dlmÆloc
((
…_dlh™dÀ_t
));

1358 i‡(!
h™dÀ
) {

1359 
œ°_îr‹
 = 
mem‹y_îr‹
;

1360 i‡(
dú
)

1361 
	`…_dl‰ì
(
dú
);

1364 
h™dÀ
->
ußge
 = 0;

1366 
h™dÀ
->
dïcou¡
 = 0;

1367 
h™dÀ
->
dïlibs
 = 0;

1368 
√wh™dÀ
 = 
h™dÀ
;

1369 i‡(
	`åyÆl_dl›í
(&
√wh™dÀ
, 
fûíame
)

1370 && (
dú


1371 || (!
	`föd_fûe
(
ba£«me
, 
u£r_£¨ch_∑th
,

1372 0, &
√wh™dÀ
)

1373 && !
	`föd_fûe
(
ba£«me
,

1374 
	`gëív
("LTDL_LIBRARY_PATH"),

1375 0, &
√wh™dÀ
)

1376 #ifde‡
LTDL_SHLIBPATH_VAR


1377 && !
	`föd_fûe
(
ba£«me
,

1378 
	`gëív
(
LTDL_SHLIBPATH_VAR
),

1379 0, &
√wh™dÀ
)

1382 
	`…_dl‰ì
(
h™dÀ
);

1383 i‡(
dú
)

1384 
	`…_dl‰ì
(
dú
);

1388 
ªgi°î_h™dÀ
:

1389 i‡(
√wh™dÀ
 !
h™dÀ
) {

1390 
	`…_dl‰ì
(
h™dÀ
);

1391 
h™dÀ
 = 
√wh™dÀ
;

1393 i‡(!
h™dÀ
->
ußge
) {

1394 
h™dÀ
->
ußge
 = 1;

1395 
h™dÀ
->
«me
 =Çame;

1396 
h™dÀ
->
√xt
 = 
h™dÀs
;

1397 
h™dÀs
 = 
h™dÀ
;

1398 } i‡(
«me
)

1399 
	`…_dl‰ì
(
«me
);

1400 i‡(
dú
)

1401 
	`…_dl‰ì
(
dú
);

1402 
œ°_îr‹
 = 
ßved_îr‹
;

1403  
h™dÀ
;

1404 
	}
}

1406 
…_dlh™dÀ


1407 
	$…_dl›íext
 (
fûíame
)

1408 c⁄° *
fûíame
;

1410 
…_dlh™dÀ
 
h™dÀ
;

1411 *
tmp
;

1412 
Àn
;

1413 c⁄° *
ßved_îr‹
 = 
œ°_îr‹
;

1415 i‡(!
fûíame
)

1416  
	`…_dl›í
(
fûíame
);

1417 
Àn
 = 
	`°æí
(
fûíame
);

1418 i‡(!
Àn
) {

1419 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

1423 
h™dÀ
 = 
	`…_dl›í
(
fûíame
);

1424 i‡(
h™dÀ
)

1425  
h™dÀ
;

1427 
tmp
 = (*Ë
	`…_dlmÆloc
(
Àn
+4);

1428 i‡(!
tmp
) {

1429 
œ°_îr‹
 = 
mem‹y_îr‹
;

1432 
	`°r˝y
(
tmp
, 
fûíame
);

1433 
	`°rˇt
(
tmp
, ".la");

1434 
h™dÀ
 = 
	`…_dl›í
(
tmp
);

1435 i‡(
h™dÀ
) {

1436 
œ°_îr‹
 = 
ßved_îr‹
;

1437 
	`…_dl‰ì
(
tmp
);

1438  
h™dÀ
;

1440 #ifde‡
LTDL_SHLIB_EXT


1442 i‡(
	`°æí
(
shlib_ext
) > 3) {

1443 
	`…_dl‰ì
(
tmp
);

1444 
tmp
 = (*Ë
	`…_dlmÆloc
(
Àn
 + 
	`°æí
(
shlib_ext
) + 1);

1445 i‡(!
tmp
) {

1446 
œ°_îr‹
 = 
mem‹y_îr‹
;

1449 
	`°r˝y
(
tmp
, 
fûíame
);

1451 
tmp
[
Àn
] = '\0';

1452 
	`°rˇt
(
tmp
, 
shlib_ext
);

1453 
h™dÀ
 = 
	`…_dl›í
(
tmp
);

1454 i‡(
h™dÀ
) {

1455 
œ°_îr‹
 = 
ßved_îr‹
;

1456 
	`…_dl‰ì
(
tmp
);

1457  
h™dÀ
;

1460 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

1461 
	`…_dl‰ì
(
tmp
);

1463 
	}
}

1466 
	$…_dl˛o£
 (
h™dÀ
)

1467 
…_dlh™dÀ
 
h™dÀ
;

1469 
…_dlh™dÀ
 
cur
, 
œ°
;

1472 
œ°
 = 
cur
 = 
h™dÀs
;

1473 
cur
 && 
h™dÀ
 != cur) {

1474 
œ°
 = 
cur
;

1475 
cur
 = cur->
√xt
;

1477 i‡(!
cur
) {

1478 
œ°_îr‹
 = 
övÆid_h™dÀ_îr‹
;

1481 
h™dÀ
->
ußge
--;

1482 i‡(!
h™dÀ
->
ußge
) {

1483 
îr‹
;

1485 i‡(
h™dÀ
 !
h™dÀs
)

1486 
œ°
->
√xt
 = 
h™dÀ
->next;

1488 
h™dÀs
 = 
h™dÀ
->
√xt
;

1489 
îr‹
 = 
h™dÀ
->
ty≥
->
	`lib_˛o£
(handle);

1490 
îr‹
 +
	`u∆ﬂd_dïlibs
(
h™dÀ
);

1491 i‡(
h™dÀ
->
fûíame
)

1492 
	`…_dl‰ì
(
h™dÀ
->
fûíame
);

1493 i‡(
h™dÀ
->
«me
)

1494 
	`…_dl‰ì
(
h™dÀ
->
«me
);

1495 
	`…_dl‰ì
(
h™dÀ
);

1496  
îr‹
;

1499 
	}
}

1501 
…_±r_t


1502 
	$…_dlsym
 (
h™dÀ
, 
symbﬁ
)

1503 
…_dlh™dÀ
 
h™dÀ
;

1504 c⁄° *
symbﬁ
;

1506 
Ànsym
;

1507 
lsym
[
LTDL_SYMBOL_LENGTH
];

1508 *
sym
;

1509 
…_±r_t
 
addªss
;

1511 i‡(!
h™dÀ
) {

1512 
œ°_îr‹
 = 
övÆid_h™dÀ_îr‹
;

1515 i‡(!
symbﬁ
) {

1516 
œ°_îr‹
 = 
symbﬁ_îr‹
;

1519 
Ànsym
 = 
	`°æí
(
symbﬁ
);

1520 i‡(
h™dÀ
->
ty≥
->
sym_¥efix
)

1521 
Ànsym
 +
	`°æí
(
h™dÀ
->
ty≥
->
sym_¥efix
);

1522 i‡(
h™dÀ
->
«me
)

1523 
Ànsym
 +
	`°æí
(
h™dÀ
->
«me
);

1524 i‡(
Ànsym
 + 
LTDL_SYMBOL_OVERHEAD
 < 
LTDL_SYMBOL_LENGTH
)

1525 
sym
 = 
lsym
;

1527 
sym
 = (*Ë
	`…_dlmÆloc
(
Ànsym
 + 
LTDL_SYMBOL_OVERHEAD
 + 1);

1528 i‡(!
sym
) {

1529 
œ°_îr‹
 = 
buf„r_ovîÊow_îr‹
;

1532 i‡(
h™dÀ
->
«me
) {

1533 c⁄° *
ßved_îr‹
 = 
œ°_îr‹
;

1536 i‡(
h™dÀ
->
ty≥
->
sym_¥efix
) {

1537 
	`°r˝y
(
sym
, 
h™dÀ
->
ty≥
->
sym_¥efix
);

1538 
	`°rˇt
(
sym
, 
h™dÀ
->
«me
);

1540 
	`°r˝y
(
sym
, 
h™dÀ
->
«me
);

1541 
	`°rˇt
(
sym
, "_LTX_");

1542 
	`°rˇt
(
sym
, 
symbﬁ
);

1544 
addªss
 = 
h™dÀ
->
ty≥
->
	`föd_sym
(h™dÀ, 
sym
);

1545 i‡(
addªss
) {

1546 i‡(
sym
 !
lsym
)

1547 
	`…_dl‰ì
(
sym
);

1548  
addªss
;

1550 
œ°_îr‹
 = 
ßved_îr‹
;

1553 i‡(
h™dÀ
->
ty≥
->
sym_¥efix
) {

1554 
	`°r˝y
(
sym
, 
h™dÀ
->
ty≥
->
sym_¥efix
);

1555 
	`°rˇt
(
sym
, 
symbﬁ
);

1557 
	`°r˝y
(
sym
, 
symbﬁ
);

1558 
addªss
 = 
h™dÀ
->
ty≥
->
	`föd_sym
(h™dÀ, 
sym
);

1559 i‡(
sym
 !
lsym
)

1560 
	`…_dl‰ì
(
sym
);

1561  
addªss
;

1562 
	}
}

1565 
…_dÀº‹
 
LTDL_PARAMS
(())

1567 c⁄° *
	gîr‹
 = 
œ°_îr‹
;

1569 
	gœ°_îr‹
 = 0;

1570  
	gîr‹
;

1574 
	$…_dœdd£¨chdú
 (
£¨ch_dú
)

1575 c⁄° *
£¨ch_dú
;

1577 i‡(!
£¨ch_dú
 || !
	`°æí
(search_dir))

1579 i‡(!
u£r_£¨ch_∑th
) {

1580 
u£r_£¨ch_∑th
 = 
	`°rdup
(
£¨ch_dú
);

1581 i‡(!
u£r_£¨ch_∑th
) {

1582 
œ°_îr‹
 = 
mem‹y_îr‹
;

1586 *
√w_£¨ch_∑th
 = (*)

1587 
	`…_dlmÆloc
(
	`°æí
(
u£r_£¨ch_∑th
) +

1588 
	`°æí
(
£¨ch_dú
) + 2);

1589 i‡(!
√w_£¨ch_∑th
) {

1590 
œ°_îr‹
 = 
mem‹y_îr‹
;

1593 
	`°r˝y
(
√w_£¨ch_∑th
, 
u£r_£¨ch_∑th
);

1594 
	`°rˇt
(
√w_£¨ch_∑th
, ":");

1595 
	`°rˇt
(
√w_£¨ch_∑th
, 
£¨ch_dú
);

1596 
	`…_dl‰ì
(
u£r_£¨ch_∑th
);

1597 
u£r_£¨ch_∑th
 = 
√w_£¨ch_∑th
;

1600 
	}
}

1603 
	$…_dl£t£¨ch∑th
 (
£¨ch_∑th
)

1604 c⁄° *
£¨ch_∑th
;

1606 i‡(
u£r_£¨ch_∑th
)

1607 
	`…_dl‰ì
(
u£r_£¨ch_∑th
);

1608 
u£r_£¨ch_∑th
 = 0;

1609 i‡(!
£¨ch_∑th
 || !
	`°æí
(search_path))

1611 
u£r_£¨ch_∑th
 = 
	`°rdup
(
£¨ch_∑th
);

1612 i‡(!
u£r_£¨ch_∑th
)

1615 
	}
}

1618 
…_dlgë£¨ch∑th
 
LTDL_PARAMS
(())

1620  
	gu£r_£¨ch_∑th
;

	@rogi/openscep-0.4.2/acconfig.h

1 @
	gBOTTOM
@

4 #unde‡
LOG_FACILITY


5 #i‚de‡
LOG_FACILITY


6 
	#LOG_FACILITY
 
LOG_USER


	)

10 #unde‡
HAVE_ALTZONE


	@rogi/openscep-0.4.2/lib/attr.c

8 
	~<©å.h
>

9 
	~<öô.h
>

11 
©å_add_°rög
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
©ås
, 
nid
, *
d©a
) {

12 
ASN1_STRING
 *
	ga¢1_°rög
 = 
NULL
;

13 
X509_ATTRIBUTE
 *
	gxa
;

15 i‡(
	gdebug
)

16 
BIO_¥ötf
(
bio_îr
, "%s:%d:ádding stringáttr %s (nid = %d) = '%s'\n",

17 
__FILE__
, 
__LINE__
, 
OBJ_nid2¢
(
nid
),Çid, 
d©a
);

18 
	ga¢1_°rög
 = 
ASN1_STRING_√w
();

19 
ASN1_STRING_£t
(
a¢1_°rög
, 
d©a
, 
°æí
(data));

20 
	gxa
 = 
X509_ATTRIBUTE_¸óã
(
nid
, 
V_ASN1_PRINTABLESTRING
, 
a¢1_°rög
);

21 
sk_X509_ATTRIBUTE_push
(
©ås
, 
xa
);

28 
©å_add_o˘ë
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
©ås
, 
nid
,

29 *
d©a
, 
Àn
) {

30 
ASN1_STRING
 *
	ga¢1_°rög
 = 
NULL
;

31 
X509_ATTRIBUTE
 *
	gxa
;

33 i‡(
	gdebug
)

34 
BIO_¥ötf
(
bio_îr
, "%s:%d:ádding octetáttr %s (nid = %d)Üength %d\n",

35 
__FILE__
, 
__LINE__
, 
OBJ_nid2¢
(
nid
),Çid, 
Àn
);

36 
	ga¢1_°rög
 = 
ASN1_STRING_√w
();

37 
ASN1_STRING_£t
(
a¢1_°rög
, 
d©a
, 
Àn
);

38 
	gxa
 = 
X509_ATTRIBUTE_¸óã
(
nid
, 
V_ASN1_OCTET_STRING
, 
a¢1_°rög
);

39 
sk_X509_ATTRIBUTE_push
(
©ås
, 
xa
);

	@rogi/openscep-0.4.2/lib/badreply.c

8 
	~<badª∂y.h
>

9 
	~<©å.h
>

10 
	~<öô.h
>

11 
	~<›ís¶/evp.h
>

12 
	~<sy¶og.h
>

14 
	$badª∂y
(
s˚p_t
 *
s˚p
, *
pki°©us
) {

15 
s˚pmsg_t
 *
ª∂y
;

17 
ª∂y
 = &
s˚p
->reply;

20 i‡(
debug
)

21 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öreparingá badÑeply ofÅype %s\n",

22 
__FILE__
, 
__LINE__
, 
	`SCEP_STATUS
(
pki°©us
));

25 
	`sy¶og
(
LOG_WARNING
, "%s:%d: sídög badÑïly o‡ty≥ %s", 
__FILE__
,

26 
__LINE__
, 
	`SCEP_STATUS
(
pki°©us
));

28 
ª∂y
->
pkiSètus
 = 
pki°©us
;

29 i‡((!
ª∂y
->
Áûöfo
)

30 && 
	`SCEP_PKISTATUS_is
(
SCEP_PKISTATUS_FAILURE
, 
pki°©us
))

31 
ª∂y
->
Áûöfo
 = 
SCEP_FAILURE_BADREQUEST
;

36 i‡(
debug
)

37 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: PKCS7ÑeadyÅoÑeturn\n",

38 
__FILE__
, 
__LINE__
);

40 
	}
}

	@rogi/openscep-0.4.2/lib/certrep.c

8 
	~<˚πªp.h
>

10 
	$˚πªp
(
s˚p_t
 *
s˚p
) {

14 
	}
}

	@rogi/openscep-0.4.2/lib/check.c

8 
	~<check.h
>

9 
	~<öô.h
>

10 
	~<›ís¶/a¢1.h
>

11 
	~<›ís¶/x509.h
>

12 
	~<›ís¶/îr.h
>

13 
	~<ld≠.h
>

14 
	~<s˚∂d≠.h
>

15 
	~<sy¶og.h
>

17 *
	$gë_chÆÀnge
(
s˚p_t
 *
s˚p
) {

18 
loc
, 
ty≥
, 
n
;

19 
X509_ATTRIBUTE
 *
©å
;

20 
X509_REQ
 *
ªq
;

21 
ASN1_TYPE
 *
a¢1
;

22 
ASN1_IA5STRING
 *
a¢1_°rög
;

23 *
chÆÀnge
;

26 
ªq
 = 
s˚p
->
˛õ¡ªq
;

27 i‡(
debug
)

28 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: getting challengeÖassword from "

29 "X.509Ñeque° %p\n", 
__FILE__
, 
__LINE__
, 
ªq
);

33 i‡(
NULL
 =
ªq
) {

34 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço X.509Ñequestávailable\n",

35 
__FILE__
, 
__LINE__
);

36 
îr
;

40 
n
 = 
	`X509_REQ_gë_©å_cou¡
(
ªq
);

41 i‡(
debug
)

42 
	`BIO_¥ötf
(
bio_îr
, "%s%d: %dáâribuã†found\n", 
__FILE__
,

43 
__LINE__
, 
n
);

44 
loc
 = 
	`X509_REQ_gë_©å_by_NID
(
ªq
, 
NID_pkcs9_chÆÀngePassw‹d
, -1);

45 i‡(
loc
 < 0) {

46 i‡(
debug
)

47 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: challengePasswordÇot "

48 "found\n", 
__FILE__
, 
__LINE__
);

49  
NULL
;

51 i‡(
debug
)

52 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: challengePasswordát offset %d\n",

53 
__FILE__
, 
__LINE__
, 
loc
);

54 
©å
 = 
	`X509_REQ_gë_©å
(
ªq
, 
loc
);

57 i‡(
NULL
 =(
a¢1
 = 
	`X509_ATTRIBUTE_gë0_ty≥
(
©å
, 0))) {

58 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑetrieve value\n",

59 
__FILE__
, 
__LINE__
);

60 
îr
;

63 
ty≥
 = 
	`ASN1_TYPE_gë
(
a¢1
);

64 i‡(
debug
)

65 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åype of challengePassword is %d\n",

66 
__FILE__
, 
__LINE__
, 
ty≥
);

67 i‡((
ty≥
 !
V_ASN1_IA5STRING
Ë&& (ty≥ !
V_ASN1_PRINTABLESTRING
)) {

68 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: challengePassword has wrongÅype\n",

69 
__FILE__
, 
__LINE__
, 
ty≥
);

70 
îr
;

73 
a¢1_°rög
 = (
ASN1_STRING
 *)
a¢1
->
vÆue
.
±r
;

74 
chÆÀnge
 = (*)
	`mÆloc
(
a¢1_°rög
->
Àngth
 + 1);

75 
	`mem˝y
(
chÆÀnge
, 
a¢1_°rög
->
d©a
,á¢1_°rög->
Àngth
);

76 
chÆÀnge
[
a¢1_°rög
->
Àngth
] = '\0';

77 i‡(
debug
)

78 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: challenge Password '%s'\n",

79 
__FILE__
, 
__LINE__
, 
chÆÀnge
);

82  
chÆÀnge
;

85 
îr
:

86 
	`ERR_¥öt_îr‹s
(
bio_îr
);

87  
NULL
;

88 
	}
}

90 
	$check_chÆÀnge
(
s˚p_t
 *
s˚p
) {

91 
X509_REQ
 *
ªq
;

92 *
chÆÀnge
, *
dn
;

93 
X509_NAME
 *
subje˘
;

94 
LDAP
 *
ld≠
 = 
NULL
;

99 
ªq
 = 
s˚p
->
˛õ¡ªq
;

100 i‡(
debug
)

101 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: checking challengeÖassword in "

102 "ªque° %p\n", 
__FILE__
, 
__LINE__
, 
ªq
);

105 i‡(
NULL
 =(
chÆÀnge
 = 
	`gë_chÆÀnge
(
s˚p
))) {

106 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço challengeÖassword found\n",

107 
__FILE__
, 
__LINE__
);

108 
îr
;

110 i‡(
debug
)

111 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: challenge Password '%s'\n",

112 
__FILE__
, 
__LINE__
, 
chÆÀnge
);

115 i‡(
	`°æí
(
chÆÀnge
) == 0) {

116 i‡(
debug
)

117 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: zero challenge\n",

118 
__FILE__
, 
__LINE__
);

119 
îr
;

123 
subje˘
 = 
	`X509_REQ_gë_subje˘_«me
(
ªq
);

124 i‡(
debug
) {

125 
«me
[1024];

126 
	`X509_NAME_⁄ñöe
(
subje˘
, 
«me
, (name));

127 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeque°‹: %s\n", 
__FILE__
,

128 
__LINE__
, 
«me
);

132 
dn
 = 
	`x509_to_ld≠
(
s˚p
, 
subje˘
);

133 i‡(
debug
)

134 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: mappedÑequestorÅo LDAP DN '%s'\n",

135 
__FILE__
, 
__LINE__
, 
dn
);

138 
ld≠
 = 
	`ld≠_›í
(
s˚p
->
l
.
ld≠ho°
, s˚p->l.
ld≠p‹t
);

139 i‡(
ld≠
 =
NULL
) {

140 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot connectÅo %s:%d\n",

141 
__FILE__
, 
__LINE__
, 
s˚p
->
l
.
ld≠ho°
, s˚p->l.
ld≠p‹t
);

142 
îr
;

146 i‡(
	`ld≠_sim∂e_böd_s
(
ld≠
, 
dn
, 
chÆÀnge
Ë!
LDAP_SUCCESS
) {

147 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÜdap_simple_bind_s\n",

148 
__FILE__
, 
__LINE__
);

149 
	`sy¶og
(
LOG_ERR
, "LDAPáuthítiˇti⁄ f‹ %†Áûed", 
dn
);

150 
îr
;

154 
	`ld≠_unböd
(
ld≠
);

157 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: check suc˚ssful\n", 
__FILE__
, 
__LINE__
);

159 
îr
:

161 i‡(
ld≠
Ë
	`ld≠_unböd
(ldap);

162 
	`ERR_¥öt_îr‹s
(
bio_îr
);

164 
	}
}

	@rogi/openscep-0.4.2/lib/createreq.c

8 
	~<c⁄fig.h
>

9 
	~<öô.h
>

10 
	~<s˚p.h
>

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/evp.h
>

16 
	~<›ís¶/≥m.h
>

17 
	~<›ís¶/îr.h
>

18 
	~<›ís¶/a¢1.h
>

19 
	~<¸óãªq.h
>

20 
	~<˘y≥.h
>

22 
	$¸óãªq
(
s˚p_t
 *
s˚p
, *
dn
, *
chÆÀnge
) {

23 
X509_REQ
 *
ªq
;

24 
X509_NAME
 *
subj
;

25 
EVP_MD
 *
dige°
 = 
	`EVP_md5
();

26 
BIO
 *
out
;

27 *
p
, *
dn2
, *
ty≥
, *
vÆue
;

28 
pos
 = 0;

31 i‡(
NULL
 =(
ªq
 = 
	`X509_REQ_√w
())) {

34 i‡(
debug
)

35 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÇewÑequestállocated\n",

36 
__FILE__
, 
__LINE__
);

39 
subj
 = 
	`X509_NAME_√w
();

43 
dn2
 = 
	`°rdup
(
dn
);

44 
p
 = 
	`°πok
(
dn2
, ",");

46 i‡(
debug
)

47 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åoken seen: %s\n",

48 
__FILE__
, 
__LINE__
, 
p
);

51 (*
p
Ë&& (
	`is•a˚
(*p)))Ö++;

54 
ty≥
 = 
p
;

57 
vÆue
 = 
p
;

58 (*
vÆue
) && (*value != '=')) value++;

59 *
vÆue
 = '\0';

60 
vÆue
++;

63 i‡(!
	`°rcmp
(
ty≥
, "C")) {

64 
p
 = 
vÆue
; *p;Ö++Ë*∞
	`touµî
(*p);

68 i‡(
	`X509_NAME_add_íåy_by_txt
(
subj
, 
ty≥
, 
MBSTRING_ASC
, 
vÆue
,

69 
	`°æí
(
vÆue
), 
pos
++, 0) <= 0) {

70 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:failedÅoáddÉntry %s=%s\n",

71 
__FILE__
, 
__LINE__
, 
ty≥
, 
vÆue
);

72 
îr
;

74 i‡(
debug
)

75 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: %s=%†added\n", 
__FILE__
,

76 
__LINE__
, 
ty≥
, 
vÆue
);

78 } 
NULL
 !(
p
 = 
	`°πok
(NULL, ",")));

80 
	`‰ì
(
dn2
);

82 
	`X509_REQ_£t_subje˘_«me
(
ªq
, 
subj
);

83 i‡(
debug
) {

84 
sdn
[1024];

85 
	`X509_NAME_⁄ñöe
(
	`X509_REQ_gë_subje˘_«me
(
ªq
), 
sdn
,

86 (
sdn
));

87 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: subject dn setÅo '%s'\n",

88 
__FILE__
, 
__LINE__
, 
sdn
);

92 
	`X509_REQ_£t_vîsi⁄
(
ªq
, 0L);

95 i‡(
chÆÀnge
) {

97 
	`X509_REQ_add1_©å_by_NID
(
ªq
, 
NID_pkcs9_chÆÀngePassw‹d
,

98 
MBSTRING_ASC
, 
chÆÀnge
, -1);

102 
	`X509_REQ_£t_pubkey
(
ªq
, 
s˚p
->
˛õ¡pubkey
);

105 
	`X509_REQ_sign
(
ªq
, 
s˚p
->
˛õ¡pkey
, 
dige°
);

108 i‡((
debug
Ë&& (
tmµ©h
)) {

109 
ªqfûíame
[1024];

110 
	`¢¥ötf
(
ªqfûíame
, (reqfilename),

111 "%s/ªq.%d", 
tmµ©h
, 
	`gëpid
());

112 
out
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

113 
	`BIO_wrôe_fûíame
(
out
, 
ªqfûíame
);

114 
	`i2d_X509_REQ_bio
(
out
, 
ªq
);

115 
	`BIO_‰ì
(
out
);

116 i‡(
debug
)

117 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest writtenÅo %s\n",

118 
__FILE__
, 
__LINE__
, 
ªqfûíame
);

122 
s˚p
->
˛õ¡ªq
 = 
ªq
;

126 
îr
:

127 
	`ERR_¥öt_îr‹s
(
bio_îr
);

129 
	}
}

	@rogi/openscep-0.4.2/lib/decode.c

8 
	~<decode.h
>

9 
	~<öô.h
>

10 
	~<sig©å.h
>

11 
	~<›ís¶/pkcs7.h
>

12 
	~<›ís¶/x509.h
>

13 
	~<›ís¶/≥m.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/îr.h
>

16 
	~<›ís¶/bn.h
>

17 
	~<uni°d.h
>

18 
	~<f˙é.h
>

19 
	~<î∫o.h
>

20 
	~<°rög.h
>

21 
	~<i£r.h
>

22 
	~<ißsu.h
>

23 
	~<¥oxy.h
>

35 
	$decode
(
s˚p_t
 *
s˚p
, 
BIO
 *
bio
) {

36 
BIO
 *
b64
, *
öbio
, *
p7bio
, *
outbio
,

37 *
membio
;

38 
byãs
, 
Àngth
, 
fd
, 
u£d
;

39 
nMesßgeTy≥
 = -1, 
nPkiSètus
 = -1;

40 
	`STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
söfo
;

41 
PKCS7_ISSUER_AND_SERIAL
 *
üs
;

42 
X509
 *
x509
, *
sig√r˚π
;

43 
	`STACK_OF
(
X509_ATTRIBUTE
Ë*
sig_©åibs
;

44 
s˚pmsg_t
 *
msg
;

45 
PKCS7
 *
p7ívñ›ed
;

46 
buf„r
[1024];

47 *
d©a
;

48 
EVP_PKEY
 *
ªcùõ¡pkey
;

49 
X509
 *
ªcùõ¡˚π
;

52 i‡(
s˚p
->
˛õ¡
)

53 
msg
 = &
s˚p
->
ª∂y
;

55 
msg
 = &
s˚p
->
ªque°
;

56 i‡(
debug
)

57 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decodög %†mesßge\n", 
__FILE__
,

58 
__LINE__
, (
s˚p
->
˛õ¡
) ? "reply" : "request");

61 i‡(
msg
->
ba£64
) {

62 i‡(
debug
)

63 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Örepending Base64 "

64 "decodî\n", 
__FILE__
, 
__LINE__
);

65 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

66 
öbio
 = 
	`BIO_push
(
b64
, 
bio
);

68 
öbio
 = 
bio
;

70 
membio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

71 (
byãs
 = 
	`BIO_ªad
(
öbio
, 
buf„r
, (buffer))) > 0) {

72 i‡(
debug
)

73 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: chunk of %d bytes\n",

74 
__FILE__
, 
__LINE__
, 
byãs
);

75 
	`BIO_wrôe
(
membio
, 
buf„r
, 
byãs
);

77 
	`BIO_£t_Êags
(
membio
, 
BIO_FLAGS_MEM_RDONLY
);

78 
Àngth
 = 
	`BIO_gë_mem_d©a
(
membio
, &
d©a
);

79 i‡(
debug
)

80 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoded dataát %p: %d bytes\n",

81 
__FILE__
, 
__LINE__
, 
d©a
, 
Àngth
);

84 i‡((
debug
Ë&& (
tmµ©h
)) {

85 
fûíame
[1024];

86 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.d-1-signed.der",

87 
tmµ©h
, 
	`gëpid
());

88 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: wrôêd©®tÿ%s\n", 
__FILE__
,

89 
__LINE__
, 
fûíame
);

90 i‡(0 <(
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
,

92 
	`wrôe
(
fd
, 
d©a
, 
Àngth
);

93 
	`˛o£
(
fd
);

95 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open file %s: %s "

96 "(%d)\n", 
__FILE__
, 
__LINE__
, 
fûíame
,

97 
	`°ªº‹
(
î∫o
),Érrno);

102 
msg
->
p7
 = 
	`d2i_PKCS7_bio
(
membio
, 
NULL
);

103 i‡(
msg
->
p7
 =
NULL
) {

104 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode message\n",

105 
__FILE__
, 
__LINE__
);

106 
îr
;

110 i‡(!
	`PKCS7_ty≥_is_sig√d
(
msg
->
p7
)) {

111 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: supplied PKCS#7 isÇot signed "

112 "d©a\n", 
__FILE__
, 
__LINE__
);

113 
îr
;

115 i‡(
debug
)

116 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeceived message is signed\n",

117 
__FILE__
, 
__LINE__
);

120 
p7bio
 = 
	`PKCS7_d©aInô
(
msg
->
p7
, 
NULL
);

121 i‡(
p7bio
 =
NULL
) {

122 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÉxtract data from PKCS#7\n",

123 
__FILE__
, 
__LINE__
);

124 
îr
;

131 
outbio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

132 
u£d
 = 0;

134 
buf
[1024];

135 
byãs
 = 
	`BIO_ªad
(
p7bio
, 
buf
, (buf));

136 
u£d
 +
byãs
;

137 i‡(
byãs
 <= 0) ;

138 
	`BIO_wrôe
(
outbio
, 
buf
, 
byãs
);

140 
	`BIO_Êush
(
outbio
);

141 i‡(
debug
)

142 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: got %d bytes ofÉnveloped data\n",

143 
__FILE__
, 
__LINE__
, 
u£d
);

144 i‡((
debug
Ë&& (
tmµ©h
)) {

145 
fûíame
[1024];

146 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.d-2-enveloped.der",

147 
tmµ©h
, 
	`gëpid
());

148 i‡((
fd
 = 
	`›í
(
fûíame
, 
O_CREAT
|
O_TRUNC
|
O_WRONLY
, 0666)) >= 0){

149 
Àngth
 = 
	`BIO_gë_mem_d©a
(
outbio
, &
d©a
);

150 i‡((
Àngth
 > 0Ë&& (
d©a
)) {

151 
	`wrôe
(
fd
, 
d©a
, 
Àngth
);

153 
	`˛o£
(
fd
);

158 
söfo
 = 
	`PKCS7_gë_sig√r_öfo
(
msg
->
p7
);

159 i‡(
söfo
 =
NULL
) {

160 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Çÿsig√∏öfo\n", 
__FILE__
,

161 
__LINE__
);

162 
îr
;

164 i‡(
	`sk_PKCS7_SIGNER_INFO_num
(
söfo
) != 1) {

165 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: wrongÇumber of signers: %d\n",

166 
__FILE__
, 
__LINE__
, 
	`sk_PKCS7_SIGNER_INFO_num
(
söfo
));

167 
îr
;

169 i‡(
debug
)

170 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: foundÉxactly one signer: good\n",

171 
__FILE__
, 
__LINE__
);

174 
msg
->
si
 = 
	`sk_PKCS7_SIGNER_INFO_vÆue
(
söfo
, 0);

175 
üs
 = 
msg
->
si
->
issuî_™d_£rül
;

176 
x509
 = 
	`X509_föd_by_issuî_™d_£rül
(
msg
->
p7
->
d
.
sign
->
˚π
,

177 
üs
->
issuî
, ias->
£rül
);

181 i‡(
x509
 =
NULL
) {

182 
«me
[1024];

183 i‡(
debug
) {

184 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço signer certificate, "

186 
__FILE__
, 
__LINE__
);

187 
	`X509_NAME_⁄ñöe
(
üs
->
issuî
, 
«me
, (name));

188 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: signer cert issued by %s\n",

189 
__FILE__
, 
__LINE__
, 
«me
);

190 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: signer cert serial: %s\n",

191 
__FILE__
, 
__LINE__
,

192 
	`BN_bn2hex
(
	`ASN1_INTEGER_to_BN
(
üs
->
£rül
,

193 
NULL
)));

196 
«me
[1024];

197 i‡(
debug
) {

198 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
x509
), 
«me
,

199 (
«me
));

200 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: issuer of signer %s\n",

201 
__FILE__
, 
__LINE__
, 
«me
);

202 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
x509
), 
«me
,

203 (
«me
));

204 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: subject of signer: %s\n",

205 
__FILE__
, 
__LINE__
, 
«me
);

211 i‡(
debug
)

212 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öreparing cert store for "

213 "sig«tuª vîifiˇti⁄\n", 
__FILE__
, 
__LINE__
);

214 i‡(
s˚p
->
˛õ¡
) {

215 
sig√r˚π
 = 
s˚p
->
ˇ˚π
;

216 i‡(
debug
)

217 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: verifying server signature "

218 "agaö° know¿CA cît\n", 
__FILE__
, 
__LINE__
);

220 i‡(
debug
)

221 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: working with signer @%p\n",

222 
__FILE__
, 
__LINE__
, 
x509
);

223 i‡(!
	`X509_NAME_cmp
(
	`X509_gë_subje˘_«me
(
x509
),

224 
	`X509_gë_issuî_«me
(
x509
))) {

227 
s˚p
->
£lfsig√d˚π
 = 
x509
;

228 i‡(
debug
)

229 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: verifyágainst "

230 "£lfsig√d cîà%p\n", 
__FILE__
,

231 
__LINE__
, 
x509
);

233 
s˚p
->
˛õ¡˚π
 = 
x509
;

234 i‡(
debug
)

235 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: verifyágainst "

236 "officü»˚πáà%p\n", 
__FILE__
,

237 
__LINE__
, 
x509
);

239 
sig√r˚π
 = 
x509
;

240 i‡(
debug
) {

241 
«me
[1024];

242 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
sig√r˚π
),

243 
«me
, 1024);

244 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificate (@%p) for '%s' "

245 "addedÅÿ°‹e\n", 
__FILE__
, 
__LINE__
, 
x509
,

246 
«me
);

251 i‡(
debug
)

252 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: vîifyög sig«tuª\n", 
__FILE__
,

253 
__LINE__
);

254 i‡(
	`PKCS7_sig«tuªVîify
(
p7bio
, 
msg
->
p7
, msg->
si
, 
sig√r˚π
) <= 0) {

255 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: vîifiˇti⁄ faûed\n", 
__FILE__
,

256 
__LINE__
);

257 
îr
;

259 i‡(
debug
)

260 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sig«tuª vîfõd OK\n", 
__FILE__
,

261 
__LINE__
);

264 
sig_©åibs
 = 
	`PKCS7_gë_sig√d_©åibuãs
(
msg
->
si
);

265 i‡((
sig_©åibs
 =
NULL
Ë|| (
	`sk_X509_ATTRIBUTE_num
(sig_attribs) == 0)){

266 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço signedáttributes found\n",

267 
__FILE__
, 
__LINE__
);

268 
îr
;

272 
s˚p
->
å™sId
 = 
	`sig©å_°rög
(scep, "transId");

273 
msg
->
mesßgeTy≥
 = 
	`sig©å_°rög
(
s˚p
, "messageType");

274 
msg
->
pkiSètus
 = 
	`sig©å_°rög
(
s˚p
, "pkiStatus");

275 
msg
->
Áûöfo
 = 
	`sig©å_°rög
(
s˚p
, "failinfo");

276 
s˚p
->
£ndîN⁄˚
 = 
	`sig©å_o˘ë
(scep, "senderNonce",

277 &
s˚p
->
£ndîN⁄˚Lígth
);

278 
s˚p
->
ªcùõ¡N⁄˚
 = 
	`sig©å_o˘ë
(scep, "recipientNonce",

279 &
s˚p
->
ªcùõ¡N⁄˚Lígth
);

280 
s˚p
->
authítiˇt‹
 = 
	`sig©å_a¢1_o˘ë
(scep, "proxyAuthenticator");

281 i‡(
debug
)

282 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: signedáttributesÑetrieved\n",

283 
__FILE__
, 
__LINE__
);

290 i‡(
NULL
 =
msg
->
mesßgeTy≥
) {

291 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço messageÅype (settingÅo 3)\n",

292 
__FILE__
, 
__LINE__
);

293 
msg
->
mesßgeTy≥
 = "3";

298 i‡(
NULL
 =
s˚p
->
£ndîN⁄˚
) {

299 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: senderNonce missing\n",

300 
__FILE__
, 
__LINE__
);

303 i‡(
NULL
 =
msg
->
mesßgeTy≥
) {

304 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: messageÅype missing\n",

305 
__FILE__
, 
__LINE__
);

306 
îr
;

308 
nMesßgeTy≥
 = 
	`©oi
(
msg
->
mesßgeTy≥
);

309 i‡(
msg
->
pkiSètus
) {

310 
nPkiSètus
 = 
	`©oi
(
msg
->
pkiSètus
);

314 i‡((
u£d
 =0Ë&& (
nMesßgeTy≥
 != 3)) {

315 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: only CertRep message may be "

316 "em±y\n", 
__FILE__
, 
__LINE__
);

317 
îr
;

319 i‡((
u£d
 =0Ë&& (
nMesßgeTy≥
 =3Ë&& (
nPkiSètus
 == 0)) {

320 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CertRep may only beÉmpty for "

321 "Áûuª o∏≥ndög\n", 
__FILE__
, 
__LINE__
);

322 
îr
;

327 i‡(
u£d
 == 0) {

328 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Émpty PKCSReq, must be failure or "

329 "≥ndög\n", 
__FILE__
, 
__LINE__
);

330 
sig√d⁄ly
;

332 i‡(
debug
)

333 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: working on innerÖkcs#7\n",

334 
__FILE__
, 
__LINE__
);

337 
p7ívñ›ed
 = 
	`d2i_PKCS7_bio
(
outbio
, 
NULL
);

338 i‡(
p7ívñ›ed
 =
NULL
) {

340 i‡(
	`°rcmp
(
msg
->
mesßgeTy≥
, 
SCEP_MESSAGE_TYPE_CERTREP
)) {

341 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode signed "

342 "d©a\n", 
__FILE__
, 
__LINE__
);

343 
îr
;

345 
msg
->
p7
 = 
NULL
;

346 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÇoÉnveloped dataÅo decrypt, "

348 
__FILE__
, 
__LINE__
);

349 
îr
;

352 
ªcùõ¡pkey
 = (
s˚p
->
˛õ¡
Ë? s˚p->
˛õ¡pkey
 : s˚p->
ˇpkey
;

353 
ªcùõ¡˚π
 = (
s˚p
->
˛õ¡
Ë? s˚p->
£lfsig√d˚π
 : s˚p->
ˇ˚π
;

355 i‡(
debug
) {

356 
ªcùõ¡dn
[1024];

358 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
ªcùõ¡˚π
),

359 
ªcùõ¡dn
, (recipientdn));

360 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decrypting data with keyát %p, "

361 "˚πifiˇã f‹ %†© %p\n", 
__FILE__
, 
__LINE__
,

362 
ªcùõ¡pkey
, 
ªcùõ¡dn
, 
ªcùõ¡˚π
);

364 
outbio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

365 i‡(0 =
	`PKCS7_de¸y±
(
p7ívñ›ed
, 
ªcùõ¡pkey
, 
ªcùõ¡˚π
,

366 
outbio
, 0)) {

367 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: de¸y±i⁄ faûed\n", 
__FILE__
,

368 
__LINE__
);

369 
îr
;

371 
	`BIO_Êush
(
outbio
);

372 
msg
->
Àngth
 = 
	`BIO_gë_mem_d©a
(
outbio
, &msg->
d©a
);

373 i‡(
debug
)

374 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: got %d bytes of decrypted data\n",

375 
__FILE__
, 
__LINE__
, 
msg
->
Àngth
);

378 
	`BIO_£t_Êags
(
outbio
, 
BIO_FLAGS_MEM_RDONLY
);

381 i‡((
debug
Ë&& (
tmµ©h
)) {

382 
fûíame
[1024];

383 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.d-3-payload.der",

384 
tmµ©h
, 
	`gëpid
());

385 i‡((
fd
 = 
	`›í
(
fûíame
, 
O_CREAT
|
O_TRUNC
|
O_WRONLY
, 0666)) >= 0){

386 
	`wrôe
(
fd
, 
msg
->
d©a
, msg->
Àngth
);

392 
	`©oi
(
msg
->
mesßgeTy≥
)) {

393 
MSG_CERTREP
:

394 i‡(
debug
)

395 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding CertRep\n",

396 
__FILE__
, 
__LINE__
);

397 
msg
->
rd
.
p7
 = 
	`d2i_PKCS7_bio
(
outbio
, 
NULL
);

399 
MSG_V2PROXY
:

401 i‡(
s˚p
->
authítiˇt‹
 =
NULL
) {

402 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áuthenticator missing\n",

403 
__FILE__
, 
__LINE__
);

404 
îr
;

406 i‡(!
	`¥oxy_check
(
s˚p
, 
msg
, s˚p->
authítiˇt‹
)) {

407 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öroxyáuthentication "

408 "Áûs\n", 
__FILE__
, 
__LINE__
);

409 
îr
;

412 
MSG_V2REQUEST
:

414 i‡(
debug
)

415 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding v2Öayload\n",

416 
__FILE__
, 
__LINE__
);

417 
msg
->
rd
.
∑ylﬂd
 = 
	`d2i_∑ylﬂd_bio
(
outbio
, 
NULL
);

418 i‡(
debug
)

419 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decodedáÖayload of "

421 
__FILE__
, 
__LINE__
, 
msg
->
rd
.
∑ylﬂd
->
π
,

422 
msg
->
rd
.
∑ylﬂd
->
‹igöÆ
->
Àngth
);

424 
MSG_PKCSREQ
:

425 i‡(
debug
)

426 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding X509_REQ\n",

427 
__FILE__
, 
__LINE__
);

428 
s˚p
->
˛õ¡ªq
 = 
msg
->
rd
.
ªq
 = 
	`d2i_X509_REQ_bio
(
outbio
, 
NULL
);

429 
s˚p
->
ªque°‹ªq
 = s˚p->
˛õ¡ªq
;

431 
MSG_GETCERTINITIAL
:

432 i‡(
debug
)

433 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding issueránd "

434 "subje˘\n", 
__FILE__
, 
__LINE__
);

435 
msg
->
rd
.
is
 = 
	`d2i_issuî_™d_subje˘_bio
(
outbio
, 
NULL
);

437 
MSG_GETCERT
:

438 
MSG_GETCRL
:

439 i‡(
debug
)

440 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding issueránd "

441 "£rül\n", 
__FILE__
, 
__LINE__
);

442 
msg
->
rd
.
i£r
 = 
	`d2i_PKCS7_ISSUER_AND_SERIAL_bio
(
NULL
, 
outbio
);

445 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: unknown messageÅype: %s\n",

446 
__FILE__
, 
__LINE__
, 
msg
->
mesßgeTy≥
);

449 i‡(
msg
->
rd
.
unknown
 =
NULL
) {

450 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decodingÅhe message failed\n",

451 
__FILE__
, 
__LINE__
);

452 
îr
;

454 
	`BIO_‰ì
(
outbio
);

455 
sig√d⁄ly
:

459 
îr
:

460 i‡(
debug
)

461 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÉrrorÑeturn from decode\n",

462 
__FILE__
, 
__LINE__
);

463 
	`ERR_¥öt_îr‹s
(
bio_îr
);

465 
	}
}

	@rogi/openscep-0.4.2/lib/encode.c

8 
	~<ícode.h
>

9 
	~<öô.h
>

10 
	~<›ís¶/evp.h
>

11 
	~<›ís¶/x509.h
>

12 
	~<›ís¶/bio.h
>

13 
	~<›ís¶/pkcs7.h
>

14 
	~<›ís¶/îr.h
>

15 
	~<©å.h
>

16 
	~<uni°d.h
>

17 
	~<f˙é.h
>

18 
	~<i£r.h
>

19 
	~<¥oxy.h
>

21 
	$ícode
(
s˚p_t
 *
s˚p
) {

22 
BIO
 *
öbio
, *
p7bio
, *
membio
, *
ebio
,

23 *
b64
, *
outbio
;

24 
PKCS7
 *
p7e
;

25 *
ívñ›ed
 = 
NULL
;

26 
ívñ›edÀn
 = 0, 
rc
;

27 
	`STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibs
;

28 
	`STACK_OF
(
X509
Ë*
ªcùs
;

29 
PKCS7_SIGNER_INFO
 *
si
;

30 
s˚pmsg_t
 *
msg
;

31 
EVP_PKEY
 *
sig√Ωkey
;

32 
X509
 *
sig√r˚π
, *
ªcùõ¡˚π
;

33 
nMesßgeTy≥
 = -1, 
nPkiSètus
 = -1,

34 
¥oxy
 = 0;

35 
X509_ATTRIBUTE
 *
auth
;

38 i‡(
debug
)

39 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éncode of %s message\n",

40 
__FILE__
, 
__LINE__
,

41 (
s˚p
->
˛õ¡
) ? "client" : "server");

42 i‡(
s˚p
->
˛õ¡
)

43 
msg
 = &
s˚p
->
ªque°
;

45 
msg
 = &
s˚p
->
ª∂y
;

48 i‡(
msg
->
mesßgeTy≥
)

49 
nMesßgeTy≥
 = 
	`©oi
(
msg
->
mesßgeTy≥
);

50 i‡(
msg
->
pkiSètus
)

51 
nPkiSètus
 = 
	`©oi
(
msg
->
pkiSètus
);

54 i‡(!((
s˚p
->
˛õ¡˚π
Ë|| (s˚p->
£lfsig√d˚π
))) {

55 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço certificateÅoÉncryptÑeply\n",

56 
__FILE__
, 
__LINE__
);

57 
îr
;

59 i‡(
s˚p
->
˛õ¡
) {

60 i‡(
debug
)

61 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: using CA cert for "

62 "ªcùõ¡\n", 
__FILE__
, 
__LINE__
);

63 
ªcùõ¡˚π
 = 
s˚p
->
ˇ˚π
;

64 i‡(
debug
)

65 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: using self signed cert "

66 "f‹ sig«tuª\n", 
__FILE__
, 
__LINE__
);

67 
sig√r˚π
 = 
s˚p
->
£lfsig√d˚π
;

68 
sig√Ωkey
 = 
s˚p
->
˛õ¡pkey
;

70 
ªcùõ¡˚π
 = (
s˚p
->
£lfsig√d˚π
)

71 ? 
s˚p
->
£lfsig√d˚π
 : s˚p->
˛õ¡˚π
;

72 i‡(
debug
)

73 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: using %s cert for "

74 "í¸y±i⁄ (%p)\n", 
__FILE__
, 
__LINE__
,

75 (
s˚p
->
£lfsig√d˚π
)

77 
ªcùõ¡˚π
);

78 
sig√r˚π
 = 
s˚p
->
ˇ˚π
;

79 
sig√Ωkey
 = 
s˚p
->
ˇpkey
;

80 i‡(
debug
)

81 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: using CA cert for "

82 "sig«tuª\n", 
__FILE__
, 
__LINE__
);

86 i‡((
debug
Ë&& (
ªcùõ¡˚π
)) {

87 
ªc
[1024];

88 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
ªcùõ¡˚π
), 
ªc
,

89 (
ªc
));

90 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éncrypting for '%s'\n",

91 
__FILE__
, 
__LINE__
, 
ªc
);

95 
öbio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

96 i‡(
debug
)

97 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: writingá message ofÅype %s, "

98 "°©u†%s\n", 
__FILE__
, 
__LINE__
,

99 
	`SCEP_TYPE
(
msg
->
mesßgeTy≥
),

100 
	`SCEP_STATUS
(
msg
->
pkiSètus
));

101 
	`©oi
(
msg
->
mesßgeTy≥
)) {

102 
MSG_CERTREP
:

104 i‡(
msg
->
rd
.
p7
)

105 
rc
 = 
	`i2d_PKCS7_bio
(
öbio
, 
msg
->
rd
.
p7
);

107 i‡(
debug
)

108 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åhere isÇo data "

110 
__FILE__
, 
__LINE__
);

111 
sig√d⁄ly
;

114 
MSG_V2PROXY
:

117 
¥oxy
 = 1;

118 
MSG_V2REQUEST
:

120 i‡(
debug
)

121 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: converting v2Ñequest\n",

122 
__FILE__
, 
__LINE__
);

123 
rc
 = 
	`i2d_∑ylﬂd_bio
(
öbio
, 
msg
->
rd
.
∑ylﬂd
);

125 
MSG_PKCSREQ
:

126 i‡(
debug
)

127 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: converting X509Ñequest\n",

128 
__FILE__
, 
__LINE__
);

129 
rc
 = 
	`i2d_X509_REQ_bio
(
öbio
, 
msg
->
rd
.
ªq
);

130 i‡(
rc
 <= 0) {

131 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo write X509_REQ "

132 "tÿbio\n", 
__FILE__
, 
__LINE__
);

133 
îr
;

136 
MSG_GETCERTINITIAL
:

138 
rc
 = 
	`i2d_issuî_™d_subje˘_bio
(
öbio
, 
msg
->
rd
.
is
);

140 
MSG_GETCERT
:

141 
MSG_GETCRL
:

142 
rc
 = 
	`i2d_PKCS7_ISSUER_AND_SERIAL_bio
(
öbio
, 
msg
->
rd
.
i£r
);

143 i‡(
rc
 <= 0) {

144 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot write issueránd "

145 "£rü»tÿbio\n", 
__FILE__
, 
__LINE__
);

146 
îr
;

150 
	`BIO_Êush
(
öbio
);

151 i‡(
rc
 <= 0) {

152 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot write interior data "

153 "a†DER\n", 
__FILE__
, 
__LINE__
);

154 
îr
;

158 
	`BIO_£t_Êags
(
öbio
, 
BIO_FLAGS_MEM_RDONLY
);

159 
msg
->
Àngth
 = 
	`BIO_gë_mem_d©a
(
öbio
, &msg->
d©a
);

160 
	`BIO_‰ì
(
öbio
);

161 i‡(
debug
)

162 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖayloadÅoÉncrypt: %d bytes\n",

163 
__FILE__
, 
__LINE__
, 
msg
->
Àngth
);

166 i‡((
debug
Ë&& (
tmµ©h
)) {

167 
fûíame
[1024];

168 
fd
;

169 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.e-1-payload.der",

170 
tmµ©h
, 
	`gëpid
());

171 i‡((
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0666)) >= 0){

172 
	`wrôe
(
fd
, 
msg
->
d©a
, msg->
Àngth
);

173 
	`˛o£
(
fd
);

178 i‡(
NULL
 =(
ªcùs
 = 
	`sk_X509_√w
(NULL))) {

179 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot createÑecipient stack\n",

180 
__FILE__
, 
__LINE__
);

181 
îr
;

183 i‡(
	`sk_X509_push
(
ªcùs
, 
ªcùõ¡˚π
) <= 0) {

184 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áddingÑecipient cert failed\n",

185 
__FILE__
, 
__LINE__
);

186 
îr
;

188 i‡(
debug
) {

189 
ªcùõ¡«me
[1024];

190 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
ªcùõ¡˚π
),

191 
ªcùõ¡«me
, (recipientname));

192 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áddedÑecipient certificate for %s "

193 "© %p\n", 
__FILE__
, 
__LINE__
,

194 
ªcùõ¡«me
, 
ªcùõ¡˚π
);

196 i‡(
NULL
 =(
ebio
 = 
	`BIO_√w_mem_buf
(
msg
->
d©a
, msg->
Àngth
))) {

197 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: creating data bio failed\n",

198 
__FILE__
, 
__LINE__
);

199 
îr
;

201 
p7e
 = 
	`PKCS7_í¸y±
(
ªcùs
, 
ebio
, 
	`EVP_des_cbc
(), 
PKCS7_BINARY
);

202 i‡(
p7e
 =
NULL
) {

203 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Én¸y±i⁄ faûed\n", 
__FILE__
,

204 
__LINE__
);

207 i‡(
debug
)

208 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: d©®í¸y±ed\n", 
__FILE__
,

209 
__LINE__
);

212 
membio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

213 i‡(
	`i2d_PKCS7_bio
(
membio
, 
p7e
) <= 0) {

214 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo writeÉnveloped data\n",

215 
__FILE__
, 
__LINE__
);

216 
îr
;

218 
	`BIO_Êush
(
membio
);

219 
	`BIO_£t_Êags
(
membio
, 
BIO_FLAGS_MEM_RDONLY
);

220 
ívñ›edÀn
 = 
	`BIO_gë_mem_d©a
(
membio
, &
ívñ›ed
);

221 i‡(
debug
)

222 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: %d bytes ofÉvenloped dataát %p\n",

223 
__FILE__
, 
__LINE__
, 
ívñ›edÀn
, 
ívñ›ed
);

224 
	`BIO_‰ì
(
membio
);

225 i‡((
debug
Ë&& (
tmµ©h
)) {

226 
fûíame
[1024];

227 
fd
;

228 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.e-2-enveloped.der",

229 
tmµ©h
, 
	`gëpid
());

230 i‡((
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0666)) >= 0){

231 
	`wrôe
(
fd
, 
ívñ›ed
, 
ívñ›edÀn
);

232 
	`˛o£
(
fd
);

236 
sig√d⁄ly
:

238 
msg
->
p7
 = 
	`PKCS7_√w
();

239 i‡(
msg
->
p7
 =
NULL
) {

240 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot create PKCS#7 for sig\n",

241 
__FILE__
, 
__LINE__
);

242 
îr
;

244 i‡(!
	`PKCS7_£t_ty≥
(
msg
->
p7
, 
NID_pkcs7_sig√d
)) {

245 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot set PKCS#7Åype\n",

246 
__FILE__
, 
__LINE__
);

247 
îr
;

249 i‡(!
	`PKCS7_c⁄ã¡_√w
(
msg
->
p7
, 
NID_pkcs7_d©a
)) {

250 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot set contentÅype\n",

251 
__FILE__
, 
__LINE__
);

252 
îr
;

254 i‡(
debug
)

255 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: PKCS#7Åypeánd content set up\n",

256 
__FILE__
, 
__LINE__
);

259 i‡(
sig√r˚π
 =
NULL
) {

260 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço signer certificate\n",

261 
__FILE__
, 
__LINE__
);

262 
îr
;

266 i‡(
sig√Ωkey
 =
NULL
) {

267 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço signer key\n");

268 
îr
;

270 
si
 = 
	`PKCS7_add_sig«tuª
(
msg
->
p7
, 
sig√r˚π
, 
sig√Ωkey
, 
	`EVP_md5
());

271 i‡(
si
 =
NULL
) {

272 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotádd sender signature\n",

273 
__FILE__
, 
__LINE__
);

274 
îr
;

276 i‡(
debug
)

277 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sídî sig«tuªádded\n", 
__FILE__
,

278 
__LINE__
);

282 
nMesßgeTy≥
) {

283 
MSG_CERTREP
:

284 i‡(
nPkiSètus
 =
PKI_SUCCESS
) {

285 
	`PKCS7_add_˚πifiˇã
(
msg
->
p7
, 
s˚p
->
˛õ¡˚π
);

286 
	`PKCS7_add_˚πifiˇã
(
msg
->
p7
, 
s˚p
->
ˇ˚π
);

289 
MSG_PKCSREQ
:

290 
MSG_GETCERTINITIAL
:

291 
MSG_V2REQUEST
:

292 
MSG_V2PROXY
:

293 
	`PKCS7_add_˚πifiˇã
(
msg
->
p7
, 
sig√r˚π
);

298 
p7bio
 = 
	`PKCS7_d©aInô
(
msg
->
p7
, 
NULL
);

299 i‡(
p7bio
 =
NULL
) {

300 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot create BIOÅo write data\n",

301 
__FILE__
, 
__LINE__
);

302 
îr
;

304 i‡(
ívñ›edÀn
 > 0) {

305 i‡(
ívñ›edÀn
 !
	`BIO_wrôe
(
p7bio
, 
ívñ›ed
,Énvelopedlen)) {

306 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: unableÅo writeáll data\n",

307 
__FILE__
, 
__LINE__
);

308 
îr
;

315 
©åibs
 = 
	`sk_X509_ATTRIBUTE_√w_nuŒ
();

316 
	`©å_add_°rög
(
©åibs
, 
	`OBJ_¢2nid
("å™sId"), 
s˚p
->
å™sId
);

317 
	`©å_add_°rög
(
©åibs
, 
	`OBJ_¢2nid
("messageType"),

318 
msg
->
mesßgeTy≥
);

319 i‡(
msg
->
pkiSètus
)

320 
	`©å_add_°rög
(
©åibs
, 
	`OBJ_¢2nid
("pkiStatus"),

321 
msg
->
pkiSètus
);

322 i‡(
msg
->
Áûöfo
)

323 
	`©å_add_°rög
(
©åibs
, 
	`OBJ_¢2nid
("Áûöfo"), 
msg
->
Áûöfo
);

324 i‡(
s˚p
->
£ndîN⁄˚
)

325 
	`©å_add_o˘ë
(
©åibs
, 
	`OBJ_¢2nid
("senderNonce"),

326 
s˚p
->
£ndîN⁄˚
, s˚p->
£ndîN⁄˚Lígth
);

327 i‡(
s˚p
->
ªcùõ¡N⁄˚
)

328 
	`©å_add_o˘ë
(
©åibs
, 
	`OBJ_¢2nid
("recipientNonce"),

329 
s˚p
->
ªcùõ¡N⁄˚
, s˚p->
ªcùõ¡N⁄˚Lígth
);

330 i‡((
s˚p
->
communôy
Ë&& (
¥oxy
)) {

331 
s˚p
->
authítiˇt‹
 = 
	`¥oxy_authítiˇt‹
(
msg
, s˚p->
communôy
);

332 
auth
 = 
	`X509_ATTRIBUTE_¸óã
(

333 
	`OBJ_¢2nid
("proxyAuthenticator"),

334 
V_ASN1_OCTET_STRING
, 
s˚p
->
authítiˇt‹
);

335 
	`sk_X509_ATTRIBUTE_push
(
©åibs
, 
auth
);

337 
	`PKCS7_£t_sig√d_©åibuãs
(
si
, 
©åibs
);

338 i‡(
debug
)

339 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:álláuthenticatedáttributes "

340 "added\n", 
__FILE__
, 
__LINE__
);

343 
	`PKCS7_add_sig√d_©åibuã
(
si
, 
NID_pkcs9_c⁄ã¡Ty≥
,

344 
V_ASN1_OBJECT
, 
	`OBJ_nid2obj
(
NID_pkcs7_d©a
));

347 
	`PKCS7_d©aFöÆ
(
msg
->
p7
, 
p7bio
);

348 i‡(
debug
)

349 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: signature finalized\n",

350 
__FILE__
, 
__LINE__
);

354 
membio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

355 i‡(
msg
->
ba£64
) {

356 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

357 
outbio
 = 
	`BIO_push
(
b64
, 
membio
);

359 
outbio
 = 
membio
;

361 
	`i2d_PKCS7_bio
(
outbio
, 
msg
->
p7
);

362 
	`BIO_Êush
(
outbio
);

367 
	`BIO_£t_Êags
(
membio
, 
BIO_FLAGS_MEM_RDONLY
);

368 
msg
->
Àngth
 = 
	`BIO_gë_mem_d©a
(
membio
, &msg->
d©a
);

369 i‡(
debug
)

370 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éncoded byãs: %d %s\n", 
__FILE__
,

371 
__LINE__
, 
msg
->
Àngth
,

372 (
msg
->
ba£64
) ? "(base64)" : "(DER)");

373 
	`BIO_‰ì
(
outbio
);

374 i‡((
debug
Ë&& (
tmµ©h
)) {

375 
fûíame
[1024];

376 
BIO
 *
b
;

377 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.e-3-signed.der",

378 
tmµ©h
, 
	`gëpid
());

379 
b
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

380 
	`BIO_wrôe_fûíame
(
b
, 
fûíame
);

381 
	`i2d_PKCS7_bio
(
b
, 
msg
->
p7
);

382 
	`BIO_Êush
(
b
);

383 
	`BIO_‰ì
(
b
);

387 i‡(
debug
)

388 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éncode(%s) completes "

389 "suc˚ssfuŒy\n", 
__FILE__
, 
__LINE__
,

390 
	`SCEP_TYPE
(
msg
->
mesßgeTy≥
));

392 
îr
:

393 i‡(
debug
)

394 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÉrrorÑeturn fromÉncode\n",

395 
__FILE__
, 
__LINE__
);

396 
	`ERR_¥öt_îr‹s
(
bio_îr
);

398 
	}
}

	@rogi/openscep-0.4.2/lib/fingerprint.c

9 
	~<fögî¥öt.h
>

10 
	~<›ís¶/bio.h
>

11 
	~<›ís¶/evp.h
>

12 
	~<öô.h
>

13 
	~<°rög.h
>

15 
	gÂ_bœnks
 = 0;

23 
	$fögî¥öt_cmp
(c⁄° *
f1
, c⁄° *
f2
) {

24 
l1
, 
l2
;

25 
l1
 = 
	`°æí
(
f1
); 
l2
 = såÀn(
f2
);

26 i‡(
l1
 =
l2
) {

27  
	`°rˇ£cmp
(
f1
, 
f2
);

29 i‡(
l1
 > 
l2
) {

30  ((
	`°∫ˇ£cmp
(
f1
, 
f2
, 8) != 0) ||

31 (
	`°∫ˇ£cmp
(
f1
 + 9, 
f2
 + 8, 8) != 0) ||

32 (
	`°∫ˇ£cmp
(
f1
 + 18, 
f2
 + 16, 8) != 0) ||

33 (
	`°∫ˇ£cmp
(
f1
 + 27, 
f2
 + 24, 8) != 0));

35  ((
	`°∫ˇ£cmp
(
f2
, 
f1
, 8) != 0) ||

36 (
	`°∫ˇ£cmp
(
f2
 + 9, 
f1
 + 8, 8) != 0) ||

37 (
	`°∫ˇ£cmp
(
f2
 + 18, 
f1
 + 16, 8) != 0) ||

38 (
	`°∫ˇ£cmp
(
f2
 + 27, 
f1
 + 24, 8) != 0));

41 
	}
}

43 *
	$¥öèbÀ_fögî¥öt
(*
Â
) {

44 *
Ω
, *
p
;

45 
i
;

48 
Ω
 = (*)
	`mÆloc
(2 * 
MD5_DIGEST_LENGTH
 + 1 + 
Â_bœnks
 * 3);

49 
p
 = 
Ω
;

50 
i
 = 0; i < 
MD5_DIGEST_LENGTH
; i++, 
p
 += 2) {

51 i‡(
Â_bœnks
)

52 i‡((
i
 > 0Ë&& ((ò% 4Ë=0)Ë
p
 += 1;

53 
	`•rötf
((*)
p
, "%02X ", 
Â
[
i
]);

55 
Ω
[2 * 
MD5_DIGEST_LENGTH
 + 3 * 
Â_bœnks
] = '\0';

56 i‡(
debug
)

57 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åhe fingerprint is '%s'\n",

58 
__FILE__
, 
__LINE__
, 
Ω
);

59  
Ω
;

60 
	}
}

62 *
	$fögî¥öt
(*
d©a
, 
Àngth
) {

63 
MD5_CTX
 
c
;

64 
md
[
MD5_DIGEST_LENGTH
];

67 i‡(
debug
)

68 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: computing MD5 fingerprint\n",

69 
__FILE__
, 
__LINE__
);

73 
	`MD5_Inô
(&
c
);

74 
	`MD5_Upd©e
(&
c
, 
d©a
, 
Àngth
);

75 
	`MD5_FöÆ
(
md
, &
c
);

77  
	`¥öèbÀ_fögî¥öt
(
md
);

78 
	}
}

80 *
	$x509_key_fögî¥öt
(
X509_REQ
 *
ªq
) {

81 *
d©a
;

82 
Àngth
;

83 *
Â
;

84 
BIO
 *
bio
;

87 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

90 
	`i2d_PUBKEY_bio
(
bio
, 
	`X509_REQ_gë_pubkey
(
ªq
));

93 
Àngth
 = 
	`BIO_gë_mem_d©a
(
bio
, &
d©a
);

96 
Â
 = 
	`fögî¥öt
(
d©a
, 
Àngth
);

99 
	`BIO_‰ì
(
bio
);

100  
Â
;

101 
	}
}

103 *
	$key_fögî¥öt
(
EVP_PKEY
 *
key
) {

104 
X509_REQ
 *
ªq
;

105 *
ªsu…
;

108 
ªq
 = 
	`X509_REQ_√w
();

111 
	`X509_REQ_£t_pubkey
(
ªq
, 
key
);

114 
ªsu…
 = 
	`x509_key_fögî¥öt
(
ªq
);

119  
ªsu…
;

120 
	}
}

	@rogi/openscep-0.4.2/lib/getcert.c

8 
	~<c⁄fig.h
>

9 
	~<gë˚π.h
>

10 
	~<öô.h
>

11 
	~<›ís¶/bio.h
>

12 
	~<›ís¶/pkcs7.h
>

13 
	~<›ís¶/îr.h
>

14 
	~<uni°d.h
>

15 
	~<°dlib.h
>

16 
	~<°dio.h
>

17 
	~<î∫o.h
>

18 
	~<°rög.h
>

19 
	~<f˙é.h
>

20 
	~<s˚∂d≠.h
>

21 
	~<goodª∂y.h
>

23 
	$gë˚π
(
s˚p_t
 *
s˚p
) {

24 
PKCS7_ISSUER_AND_SERIAL
 *
üs
;

25 
s˚pmsg_t
 *
msg
;

27 i‡(
debug
)

28 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificateáccess msgÑeceived\n",

29 
__FILE__
, 
__LINE__
);

30 
msg
 = &
s˚p
->
ªque°
;

33 i‡((
debug
Ë&& (
tmµ©h
)) {

34 
fûíame
[1024];

35 
fd
;

36 
	`¢¥ötf
(
fûíame
, (filename),

37 "%s/gë˚π.%d", 
tmµ©h
, 
	`gëpid
());

38 
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_TRUNC
 | 
O_CREAT
, 0666);

39 i‡(
fd
 < 0) {

40 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open file %s: "

41 "%†(%d)\n", 
fûíame
, 
__FILE__
, 
__LINE__
,

42 
	`°ªº‹
(
î∫o
),Érrno);

43 
îr
;

45 i‡(
msg
->
Àngth
 !
	`wrôe
(
fd
, msg->
d©a
, msg->length)) {

46 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo completely write "

47 "ªque°: %†(%d)\n", 
__FILE__
, 
__LINE__
,

48 
	`°ªº‹
(
î∫o
),Érrno);

49 
îr
;

51 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: GetCertÑequest writtenÅo %s\n",

52 
__FILE__
, 
__LINE__
, 
fûíame
);

53 
	`˛o£
(
fd
);

58 
üs
 = 
msg
->
rd
.
i£r
;

59 i‡(
debug
) {

60 
issuî
[1024];

61 
	`X509_NAME_⁄ñöe
(
üs
->
issuî
, issuer, (issuer));

62 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest for Cert from CA %s\n",

63 
__FILE__
, 
__LINE__
, 
issuî
);

68 i‡(
	`ld≠_gë_˚π_‰om_issuî_™d_£rül
(
s˚p
, 
üs
) < 0) {

69 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificateÇot found in "

70 "dúe˘‹y\n", 
__FILE__
, 
__LINE__
);

71 
îr
;

75 i‡(
	`goodª∂y
(
s˚p
, 0) < 0) {

76 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öreparing OKÑeply failed\n",

77 
__FILE__
, 
__LINE__
);

78 
îr
;

85 
îr
:

86 
	`ERR_¥öt_îr‹s
(
bio_îr
);

88 
	}
}

	@rogi/openscep-0.4.2/lib/getcertinitial.c

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<s˚p.h
>

11 
	~<öô.h
>

12 
	~<gë˚πöôül.h
>

13 
	~<goodª∂y.h
>

14 
	~<badª∂y.h
>

15 
	~<c⁄fig.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/°©.h
>

29 
	$gë˚πöôül
(
s˚p_t
 *
s˚p
) {

30 
fûíame
[1024];

31 
°©
 
sb
;

32 
s˚pmsg_t
 *
msg
;

33 
havîeq
 = 0;

35 i‡(
debug
)

36 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: handling GetCertInitial\n",

37 
__FILE__
, 
__LINE__
);

38 
msg
 = &
s˚p
->
ªque°
;

42 i‡(
	`å™scheck_ªje˘ed
(
s˚p
)) {

43 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_FAILURE
);

54 
s˚p
->
˛õ¡ªq
 = 
NULL
;

55 i‡(
	`å™scheck_gø¡ed
(
s˚p
)) {

56 
	`goodª∂y
(
s˚p
, 1);

62 i‡(
	`å™scheck_≥ndög
(
s˚p
)) {

63 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_PENDING
);

73 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: don'tÑeally know whatÅo do\n",

74 
__FILE__
, 
__LINE__
);

76 
	}
}

	@rogi/openscep-0.4.2/lib/getcrl.c

8 
	~<gë¸l.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<uni°d.h
>

11 
	~<f˙é.h
>

12 
	~<öô.h
>

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/pkcs7.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<î∫o.h
>

18 
	~<°rög.h
>

19 
	~<ícode.h
>

29 
	$gë¸l
(
s˚p_t
 *
s˚p
) {

30 
PKCS7_ISSUER_AND_SERIAL
 *
üs
;

31 
X509
 
x
;

32 
X509_CINF
 
cöf
;

33 
s˚pmsg_t
 *
ªque°
, *
ª∂y
;

35 
ªque°
 = &
s˚p
->request;

36 
ª∂y
 = &
s˚p
->reply;

39 
ª∂y
->
mesßgeTy≥
 = 
SCEP_MESSAGE_TYPE_CERTREP
;

40 
ª∂y
->
pkiSètus
 = 
SCEP_PKISTATUS_FAILURE
;

41 i‡(
debug
)

42 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öreparingá CertRep message with "

43 "CRL\n", 
__FILE__
, 
__LINE__
);

47 i‡((
debug
Ë&& (
tmµ©h
)) {

48 
fûíame
[1024];

49 
fd
;

50 
	`¢¥ötf
(
fûíame
, (filename),

51 "%s/gë¸l.%d", 
tmµ©h
, 
	`gëpid
());

52 
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_TRUNC
 | 
O_CREAT
, 0666);

53 i‡(
fd
 < 0) {

54 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open file: "

55 "%†(%d)\n", 
__FILE__
, 
__LINE__
,

56 
	`°ªº‹
(
î∫o
),Érrno);

57 
îr
;

59 i‡(
ªque°
->
Àngth
 !
	`wrôe
(
fd
,Ñeque°->
d©a
,Ñequest->length)) {

60 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo writeÑequest: "

61 "%†(%d)\n", 
__FILE__
, 
__LINE__
,

62 
	`°ªº‹
(
î∫o
),Érrno);

63 
îr
;

65 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CetCRLÑequest writtenÅo %s\n",

66 
__FILE__
, 
__LINE__
, 
fûíame
);

67 
	`˛o£
(
fd
);

74 
üs
 = 
ªque°
->
rd
.
i£r
;

75 i‡(
üs
 =
NULL
) {

76 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest seemsÅo bÜackingán "

77 "issuîánd sîü»fõld\n", 
__FILE__
, 
__LINE__
);

78 
îr
;

85 
x
.
˚π_öfo
 = &
cöf
;

86 
cöf
.
£rülNumbî
 = 
üs
->
£rül
;

87 
cöf
.
issuî
 = 
üs
->issuer;

88 i‡((
cöf
.
issuî
 =
NULL
Ë|| (cöf.
£rülNumbî
 == NULL)) {

89 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: issueránd serial seemsÅo be "

90 "öcom∂ëe\n", 
__FILE__
, 
__LINE__
);

91 
îr
;

93 i‡(
	`X509_issuî_™d_£rül_cmp
(
s˚p
->
ˇ˚π
, &
x
) != 0) {

94 
dn1
[1024], 
dn2
[1024];

95 
	`X509_NAME_⁄ñöe
(
üs
->
issuî
, 
dn1
, (dn1));

96 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
s˚p
->
ˇ˚π
), 
dn2
,

97 (
dn2
));

98 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: issueránd serial don't match: "

99 "%s, %s\n", 
__FILE__
, 
__LINE__
, 
dn1
, 
dn2
);

100 
îr
;

102 i‡(
debug
)

103 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÅheÑequest matches our CRL\n",

104 
__FILE__
, 
__LINE__
);

109 
ª∂y
->
rd
.
p7
 = 
	`PKCS7_√w
();

110 
	`PKCS7_£t_ty≥
(
ª∂y
->
rd
.
p7
, 
NID_pkcs7_sig√d
);

111 
	`PKCS7_c⁄ã¡_√w
(
ª∂y
->
rd
.
p7
, 
NID_pkcs7_d©a
);

112 
	`PKCS7_add_¸l
(
ª∂y
->
rd
.
p7
, 
s˚p
->
¸l
);

113 i‡(
debug
)

114 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: PKCS#7 containing CRL created\n",

115 
__FILE__
, 
__LINE__
);

123 i‡(
debug
)

124 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: have clientcertát %pánd self "

125 "sig√d cîà© %p\n", 
__FILE__
, 
__LINE__
,

126 
s˚p
->
˛õ¡˚π
, s˚p->
£lfsig√d˚π
);

129 i‡(
debug
)

130 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: GetCRLÑeplyÑeadyÅo send\n",

131 
__FILE__
, 
__LINE__
);

133 
ª∂y
->
pkiSètus
 = 
SCEP_PKISTATUS_SUCCESS
;

136 
îr
:

137 
	`ERR_¥öt_îr‹s
(
bio_îr
);

139 
	}
}

	@rogi/openscep-0.4.2/lib/goodreply.c

8 
	~<c⁄fig.h
>

9 
	~<goodª∂y.h
>

10 
	~<badª∂y.h
>

11 
	~<öô.h
>

12 
	~<›ís¶/pkcs7.h
>

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/îr.h
>

16 
	~<sy¶og.h
>

17 
	~<s˚∂d≠.h
>

18 
	~<ícode.h
>

27 
	$goodª∂y
(
s˚p_t
 *
s˚p
, 
°‹e
) {

28 
fûíame
[1024];

29 
BIO
 *
˚πbio
;

30 
s˚pmsg_t
 *
ª∂y
;

32 
ª∂y
 = &
s˚p
->reply;

35 i‡(
debug
)

36 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öreparingá SUCCESSÑeply\n",

37 
__FILE__
, 
__LINE__
);

40 
ª∂y
->
pkiSètus
 = 
SCEP_PKISTATUS_SUCCESS
;

43 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/gø¡ed/%s.dî", 
OPENSCEPDIR
,

44 
s˚p
->
å™sId
);

45 i‡(
debug
)

46 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: granted certificate in %s\n",

47 
__FILE__
, 
__LINE__
, 
fûíame
);

48 i‡(
NULL
 =(
˚πbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
()))) {

49 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotállocate bioÅoÑead cert\n",

50 
__FILE__
, 
__LINE__
);

51 
îr
;

53 i‡(
	`BIO_ªad_fûíame
(
˚πbio
, 
fûíame
) <= 0) {

54 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open cert file\n",

55 
__FILE__
, 
__LINE__
);

56 
îr
;

60 
s˚p
->
˛õ¡˚π
 = 
	`d2i_X509_bio
(
˚πbio
, 
NULL
);

61 i‡(
s˚p
->
˛õ¡˚π
 =
NULL
) {

62 
ª∂y
->
Áûöfo
 = 
SCEP_FAILURE_BADCERTID
;

63 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_FAILURE
);

69 
˛õ¡
[1024];

70 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
s˚p
->
˛õ¡˚π
),

71 
˛õ¡
, (client));

72 
	`sy¶og
(
LOG_INFO
, "%s:%d: sending certificateÅo %s",

73 
__FILE__
, 
__LINE__
, 
˛õ¡
);

77 i‡(
	`ld≠_°‹e_˚π
(
s˚p
) < 0) {

78 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åhere wasáÖroblem storingÅhe "

79 "˚πifiˇã i¿thêdúe˘‹y\n", 
__FILE__
, 
__LINE__
);

80 
îr
;

84 
ª∂y
->
rd
.
p7
 = 
	`PKCS7_√w
();

85 
	`PKCS7_£t_ty≥
(
ª∂y
->
rd
.
p7
, 
NID_pkcs7_sig√d
);

86 
	`PKCS7_c⁄ã¡_√w
(
ª∂y
->
rd
.
p7
, 
NID_pkcs7_d©a
);

87 
	`PKCS7_add_˚πifiˇã
(
ª∂y
->
rd
.
p7
, 
s˚p
->
˛õ¡˚π
);

88 
	`PKCS7_add_˚πifiˇã
(
ª∂y
->
rd
.
p7
, 
s˚p
->
ˇ˚π
);

98 
îr
:

99 
	`ERR_¥öt_îr‹s
(
bio_îr
);

100 
	`sy¶og
(
LOG_ERR
, "%s:%d: goodreply failedÅoÖrepareáÑeply",

101 
__FILE__
, 
__LINE__
);

103 
	}
}

	@rogi/openscep-0.4.2/lib/grant.c

8 
	~<c⁄fig.h
>

9 
	~<gø¡.h
>

10 
	~<öô.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/waô.h
>

13 
	~<uni°d.h
>

14 
	~<°rög.h
>

15 
	~<î∫o.h
>

16 
	~<sy¶og.h
>

24 
	$˚π_gø¡
(
s˚p_t
 *
s˚p
) {

25 *
cmd
;

26 
°
;

27 
pid_t
 
pid
;

39 
cmd
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "grantcmd");

40 i‡(
cmd
 =
NULL
) {

41 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço grant commandÇame defined\n",

42 
__FILE__
, 
__LINE__
);

43 
îr
;

47 
pid
 = 
	`f‹k
();

48 i‡(
pid
 < 0) {

49 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot fork: %s (%d)\n",

50 
__FILE__
, 
__LINE__
, 
	`°ªº‹
(
î∫o
),Érrno);

51 
îr
;

53 i‡(
pid
 > 0) {

55 i‡(
pid
 !
	`waôpid
’id, &
°
, 0)) {

56 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: wait failed: %s (%d)\n",

57 
__FILE__
, 
__LINE__
, 
	`°ªº‹
(
î∫o
),Érrno);

58 
îr
;

62 i‡(!
	`WIFEXITED
(
°
)) {

63 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: grant command failed\n",

64 
__FILE__
, 
__LINE__
);

65 
îr
;

69 i‡(
	`WEXITSTATUS
(
°
)) {

70 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificate grant cmd "

71 "'%s' faûed\n", 
__FILE__
, 
__LINE__
, 
cmd
);

72 
îr
;

74 
	`sy¶og
(
LOG_DEBUG
, "%s:%d: certificate grantedáutomatically",

75 
__FILE__
, 
__LINE__
);

78 
	`dup2
(2, 1);

81 
	`exe˛
(
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "grantcmd"),

82 "s˚pgø¡", 
s˚p
->
å™sId
, 
NULL
);

83 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÉxecÅhe grant command: "

84 "%†(%d)\n", 
__FILE__
, 
__LINE__
, 
	`°ªº‹
(
î∫o
),

85 
î∫o
);

86 
	`exô
(
EXIT_FAILURE
);

90 
îr
:

91 
	`sy¶og
(
LOG_ERR
, "%s:%d: gø¡ög cîtifiˇã faûed", 
__FILE__
,

92 
__LINE__
);

94 
	}
}

	@rogi/openscep-0.4.2/lib/http.c

9 
	~<c⁄fig.h
>

10 
	~<hâp.h
>

11 
	~<s˚p.h
>

12 
	~<öô.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/sockë.h
>

15 
	~<√tdb.h
>

16 
	~<î∫o.h
>

17 
	~<°dlib.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<›ís¶/îr.h
>

21 
	~<¨∑/öë.h
>

27 
	$∑r£uæ
(
s˚p_t
 *
s˚p
, *
uæ
) {

28 *
ho°
, *
∑th
, *
p‹t
;

31 
s˚p
->
h
.
hâµ‹t
 = 80;

34 i‡(
	`°∫cmp
(
uæ
, "http://", 7)) {

35 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: URL '%s' doesÇot begin with "

36 "'hâp://'\n", 
__FILE__
, 
__LINE__
, 
uæ
);

37 
îr
;

39 
ho°
 = 
	`°rdup
(
uæ
 + 7);

42 
∑th
 = 
	`°rchr
(
ho°
, '/');

43 i‡(
∑th
 =
NULL
) {

44 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÇoÖath component,ássuming '/'\n",

45 
__FILE__
, 
__LINE__
);

46 
s˚p
->
h
.
hâµ©h
 = "/";

48 
s˚p
->
h
.
hâµ©h
 = 
	`°rdup
(
∑th
);

49 *
∑th
 = '\0';

54 
p‹t
 = 
	`°rchr
(
ho°
, ':');

55 i‡(
p‹t
 !
NULL
) {

56 *
p‹t
 = '\0';

57 
p‹t
++;

58 
s˚p
->
h
.
hâµ‹t
 = 
	`©oi
(
p‹t
);

62 
s˚p
->
h
.
hâpho°
 = 
ho°
;

65 i‡(
debug
)

66 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: URL: %s|%d|%s\n", 
__FILE__
,

67 
__LINE__
, 
s˚p
->
h
.
hâpho°
, s˚p->h.
hâµ‹t
,

68 
s˚p
->
h
.
hâµ©h
);

71 
îr
:

72 
	`ERR_¥öt_îr‹s
(
bio_îr
);

74 
	}
}

79 *
	$uæícode
(c⁄° *
°rög
) {

80 *
ªsu…
, *
p
, *
q
;

81 
l
;

84 
l
 = 3 * 
	`°æí
(
°rög
) + 1;

85 
ªsu…
 = (*)
	`mÆloc
(
l
);

86 
	`mem£t
(
ªsu…
, 0, 
l
);

89 
p
 = 
°rög
, 
q
 = 
ªsu…
; *p;Ö++) {

90 *
p
) {

92 
	`°r˝y
(
q
, "%0A"); q += 3;

95 
	`°r˝y
(
q
, "%2B"); q += 3;

98 
	`°r˝y
(
q
, "%2D"); q += 3;

101 
	`°r˝y
(
q
, "%3D"); q += 3;

104 *(
q
++Ë*
p
;

108  
ªsu…
;

109 
	}
}

115 
BIO
 *
	$gëªque°
(
s˚p_t
 *
s˚p
) {

116 
s
, 
byãs
, 
u£d
, 
rc
, 
l
;

117 
sockaddr_ö
 
ß
;

118 
ho°ít
 *
hï
;

119 
hódîs
[20480];

120 *
buf„r
;

121 *
p
;

122 
BIO
 *
bio
;

125 i‡((
s
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0)) < 0) {

126 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotállocate socket for HTTP\n",

127 
__FILE__
, 
__LINE__
);

128 
îr
;

130 i‡(
NULL
 =(
hï
 = 
	`gëho°by«me
(
s˚p
->
h
.
hâpho°
))) {

131 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑesolveÇame '%s': "

132 "%†(%d)\n", 
__FILE__
, 
__LINE__
, 
s˚p
->
h
.
hâpho°
,

133 
	`°ªº‹
(
î∫o
),Érrno);

134 
îr
;

136 
	`mem˝y
(&
ß
.
sö_addr
, 
hï
->
h_addr
, hï->
h_Àngth
);

137 
ß
.
sö_p‹t
 = 
	`ht⁄s
(
s˚p
->
h
.
hâµ‹t
);

138 
ß
.
sö_Ámûy
 = 
AF_INET
;

139 i‡(
debug
)

140 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: connectingÅo %s:%hd -> %s\n",

141 
__FILE__
, 
__LINE__
, 
s˚p
->
h
.
hâpho°
, 
	`¡ohs
(
ß
.
sö_p‹t
),

142 
	`öë_¡ﬂ
(
ß
.
sö_addr
));

144 i‡(
	`c⁄√˘
(
s
, (
sockaddr
 *)&
ß
, (sa)) < 0) {

145 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot connectÅoÑemote host: "

146 "%†(%d)\n", 
__FILE__
, 
__LINE__
, 
	`°ªº‹
(
î∫o
),

147 
î∫o
);

148 
îr
;

152 
p
 = 
	`uæícode
(
s˚p
->
ªque°
.
d©a
);

153 i‡(
debug
)

154 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest data is '%24.24s...%24.24s'\n",

155 
__FILE__
, 
__LINE__
, 
p
,Ö + 
	`°æí
(p) - 24);

156 i‡(
debug
 > 1) {

157 
fûíame
[64];

158 
FILE
 *
s˚pfûe
;

159 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%d-s˚p.b64", 
tmµ©h
,

160 
	`gëpid
());

161 i‡(
NULL
 !(
s˚pfûe
 = 
	`f›í
(
fûíame
, "w"))) {

162 
	`Âuts
(
s˚p
->
ªque°
.
d©a
, 
s˚pfûe
);

163 
	`f˛o£
(
s˚pfûe
);

168 
	`¢¥ötf
(
hódîs
, (headers),

170 "HTTP/1.0\r\n\r\n", 
s˚p
->
h
.
hâµ©h
, 
p
);

171 i‡(
debug
)

172 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest is '%68.68s...%21.21s'\n",

173 
__FILE__
, 
__LINE__
,

174 
hódîs
, hódî†+ 
	`°æí
(headers) - 21);

175 
	`wrôe
(
s
, 
hódîs
, 
	`°æí
(headers));

178 
buf„r
 = (*)
	`mÆloc
(1024);

179 
u£d
 = 0;

180 (
byãs
 = 
	`ªad
(
s
, &
buf„r
[
u£d
], 1024)) > 0) {

181 
u£d
 +
byãs
;

182 
buf„r
 = (*)
	`ªÆloc
(buf„r, 
u£d
 + 1024);

184 
buf„r
[
u£d
] = '\0';

187 
	`ssˇnf
(
buf„r
, "%†%d ", 
hódîs
, &
rc
);

188 i‡(
debug
)

189 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: HTTPÑëu∫ code: %d\n", 
__FILE__
,

190 
__LINE__
, 
rc
);

191 i‡(
rc
 >= 300) {

192 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: HTTPÑeturn code %d >= 300\n",

193 
__FILE__
, 
__LINE__
, 
rc
);

194 
îr
;

198 i‡(
	`°r°r
(
buf„r
, "≠∂iˇti⁄/x-pki-mesßge"Ë=
NULL
) {

199 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeply seemsÅo have wrong content "

200 "ty≥\n", 
__FILE__
, 
__LINE__
);

201 
îr
;

203 i‡(
debug
)

204 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÑïlyÅy≥ c‹ª˘\n", 
__FILE__
,

205 
__LINE__
);

208 i‡((
p
 = 
	`°r°r
(
buf„r
, "\n\n")))Ö += 2;

209 i‡(
p
 =
NULL
)

210 i‡((
p
 = 
	`°r°r
(
buf„r
, "\n\r\n\r")))Ö += 4;

211 i‡(
p
 =
NULL
)

212 i‡((
p
 = 
	`°r°r
(
buf„r
, "\r\n\r\n")))Ö += 4;

213 i‡(
p
 =
NULL
) {

214 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeply content marker (two "

215 "c⁄£cutivê√wlöesËnŸ found\n", 
__FILE__
,

216 
__LINE__
);

217 
îr
;

219 i‡(
debug
)

220 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeply from server: %*.*s\n",

221 
__FILE__
, 
__LINE__
, 
p
 - 
buf„r
,Ö - buffer, buffer);

223 i‡(
debug
)

224 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: hódîÜígth: %d\n", 
__FILE__
,

225 
__LINE__
, 
p
 - 
buf„r
);

226 
l
 = 
u£d
 - (
p
 - 
buf„r
);

227 i‡(
debug
)

228 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeply content hasÜength %d\n",

229 
__FILE__
, 
__LINE__
, 
l
);

232 
bio
 = 
	`BIO_√w_mem_buf
(
p
, 
l
);

233  
bio
;

236 
îr
:

237 
	`ERR_¥öt_îr‹s
(
bio_îr
);

238  
NULL
;

239 
	}
}

	@rogi/openscep-0.4.2/lib/init.c

9 
	~<öô.h
>

10 
	~<c⁄fig.h
>

11 
	~<›ís¶/bio.h
>

12 
	~<›ís¶/evp.h
>

13 
	~<›ís¶/≥m.h
>

14 
	~<›ís¶/îr.h
>

15 
	~<›ís¶/ønd.h
>

16 
	~<°rög.h
>

17 
	~<lbî.h
>

18 
	~<ld≠.h
>

19 
	~<sy¶og.h
>

20 
	~<›ís˚p_vîs.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/°©.h
>

23 
	~<uni°d.h
>

25 
	#TMPPATH
 "/v¨/tmp/›ís˚p"

	)

27 
	gdebug
 = 1;

28 *
	gtmµ©h
 = 
NULL
;

29 
BIO
 *
	gbio_îr
 = 
NULL
;

32 
	mnid
;

33 *
	moid
;

34 *
	m«me1
;

35 *
	m«me2
;

36 } 
	tniddef_t
;

37 
	#NEW_NIDS
 8

	)

38 
niddef_t
 
	gs˚p_oid_def
[
NEW_NIDS
] = {

54 
	$s˚pöô
() {

55 
i
;

56 
øndpoﬁ
[1024];

57 
°©
 
sb
;

60 
	`›ílog
("s˚p", 
LOG_PID
|
LOG_NDELAY
, 
LOG_FACILITY
);

63 
	`sy¶og
(
LOG_DEBUG
, "vîsi⁄ %†°¨tög", 
›ís˚p_vîsi⁄
.
v_l⁄g
);

66 
	`ERR_lﬂd_¸y±o_°rögs
();

67 i‡(
debug
)

68 
	`Ârötf
(
°dîr
, "%s:%d: cry±ÿ°rög†lﬂded\n", 
__FILE__
,

69 
__LINE__
);

72 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

73 i‡(
debug
)

74 
	`Ârötf
(
°dîr
, "%s:%d:álg‹ôhm†added\n", 
__FILE__
,

75 
__LINE__
);

78 
	`RAND_£ed
(
øndpoﬁ
, (randpool));

79 i‡(
debug
)

80 
	`Ârötf
(
°dîr
, "%s:%d:Ñ™dom sour˚ sìded\n", 
__FILE__
,

81 
__LINE__
);

85 i‡((
bio_îr
 = 
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

86 
	`BIO_£t_Â
(
bio_îr
, 
°dîr
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

87 i‡(
debug
)

88 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: stderr BIO initialized\n",

89 
__FILE__
, 
__LINE__
);

92 
i
 = 0; i < 
NEW_NIDS
; i++) {

93 
s˚p_oid_def
[
i
].
nid
 = 
	`OBJ_¸óã
(s˚p_oid_def[i].
oid
,

94 
s˚p_oid_def
[
i
].
«me1
, s˚p_oid_def[i].
«me2
);

95 i‡(
debug
)

96 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ádded oid %s forÇame %s\n",

97 
__FILE__
, 
__LINE__
, 
s˚p_oid_def
[
i
].
oid
,

98 
s˚p_oid_def
[
i
].
«me1
);

102 i‡(
	`°©
(
TMPPATH
, &
sb
) == 0) {

103 i‡(
	`S_ISDIR
(
sb
.
°_mode
))

104 i‡(
	`ac˚ss
(
TMPPATH
, 
W_OK
) == 0)

105 
tmµ©h
 = 
TMPPATH
;

110 
	}
}

112 
	$s˚p_˛ór
(
s˚p_t
 *
s˚p
) {

114 i‡(
s˚p
)

115 
	`mem£t
(
s˚p
, 0, (
s˚p_t
));

116 
s˚p
->
check_å™sid
 = 1;

117 
s˚p
->
l
.
ld≠ho°
 = "localhost";

118 
s˚p
->
l
.
ld≠p‹t
 = 
LDAP_PORT
;

119 i‡(
debug
)

120 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: scep structure initialized\n",

121 
__FILE__
, 
__LINE__
);

122 
	}
}

124 
	$s˚p_c⁄fig
(
s˚p_t
 *
s˚p
, *
c⁄figfûe
) {

125 *
«me
;

126 
BIO
 *
bio
;

127 
ñöe
;

130 
s˚p
->
c⁄f
 = 
	`CONF_lﬂd
(
NULL
, (
c⁄figfûe
) ? configfile

131 : 
OPENSCEPDIR
 "/›ís˚p.˙f", &
ñöe
);

132 i‡(
s˚p
->
c⁄f
 =
NULL
) {

133 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑead config file %s\n",

134 
__FILE__
, 
__LINE__
, 
c⁄figfûe
);

135 
îr
;

139 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "debug");

140 i‡(
«me
) {

141 i‡(
	`©oi
(
«me
) > 0)

142 
debug
 = 
	`©oi
(
«me
);

143 i‡(
debug
)

144 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: conf sets debugÅo %d\n",

145 
__FILE__
, 
__LINE__
, 
debug
);

149 
s˚p
->
«me
 = 
	`CONF_gë_°rög
(s˚p->
c⁄f
, "scepd", "name");

150 i‡(
debug
)

151 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Çame: %s\n", 
__FILE__
, 
__LINE__
,

152 
s˚p
->
«me
);

155 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "cacert");

156 
«me
 = («meË?Çamê: 
OPENSCEPDIR
 "/cacert.pem";

157 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

158 
	`BIO_ªad_fûíame
(
bio
, 
«me
);

159 
s˚p
->
ˇ˚π
 = 
	`PEM_ªad_bio_X509
(
bio
, 
NULL
, NULL, NULL);

160 i‡(
s˚p
->
ˇ˚π
 =
NULL
) {

161 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑead CA "

162 "˚πifiˇã\n", 
__FILE__
, 
__LINE__
);

163 
îr
;

165 
	`BIO_‰ì
(
bio
);

166 i‡(
debug
)

167 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CA certificate from %sÑead\n",

168 
__FILE__
, 
__LINE__
, 
«me
);

170 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "cakey");

171 
«me
 = («meË?Çamê: 
OPENSCEPDIR
 "/cakey.pem";

172 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

173 
	`BIO_ªad_fûíame
(
bio
, 
«me
);

174 
s˚p
->
ˇpkey
 = 
	`PEM_ªad_bio_Priv©eKey
(
bio
, 
NULL
, NULL, NULL);

175 i‡(
s˚p
->
ˇpkey
 =
NULL
) {

176 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑeadÖrivate key\n",

177 
__FILE__
, 
__LINE__
);

178 
îr
;

180 
	`BIO_‰ì
(
bio
);

181 i‡(
debug
)

182 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CAÖrivate key from %sÑead\n",

183 
__FILE__
, 
__LINE__
, 
«me
);

185 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "crl");

186 
«me
 = («meË?Çamê: 
OPENSCEPDIR
 "/crl.pem";

187 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

188 
	`BIO_ªad_fûíame
(
bio
, 
«me
);

189 
s˚p
->
¸l
 = 
	`PEM_ªad_bio_X509_CRL
(
bio
, 
NULL
, NULL, NULL);

190 i‡(
s˚p
->
¸l
 =
NULL
) {

191 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑead CRL\n",

192 
__FILE__
, 
__LINE__
);

193 
îr
;

195 
	`BIO_‰ì
(
bio
);

196 i‡(
debug
)

197 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CA CRL from %sÑead\n",

198 
__FILE__
, 
__LINE__
, 
«me
);

201 
s˚p
->
l
.
ld≠ho°
 = 
	`CONF_gë_°rög
(s˚p->
c⁄f
, "ldap", "ldaphost");

202 
s˚p
->
l
.
ld≠p‹t
 = 
	`©oi
(
	`CONF_gë_°rög
(s˚p->
c⁄f
, "ldap", "ldapport"));

203 
s˚p
->
l
.
ld≠ba£
 = 
	`CONF_gë_°rög
(s˚p->
c⁄f
, "ldap", "ldapbase");

204 
s˚p
->
l
.
böddn
 = 
	`CONF_gë_°rög
(s˚p->
c⁄f
, "ldap", "binddn");

205 
s˚p
->
l
.
bödpw
 = 
	`CONF_gë_°rög
(s˚p->
c⁄f
, "ldap", "bindpw");

206 i‡(
debug
)

207 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: LDAPÖarametersÜdap://%s:%d, "

208 "ba£ %s, bödá†%s/%s\n", 
__FILE__
, 
__LINE__
,

209 
s˚p
->
l
.
ld≠ho°
, s˚p->l.
ld≠p‹t
,

210 (
s˚p
->
l
.
ld≠ba£
) ? scep->l.ldapbase : "(not set)",

211 (
s˚p
->
l
.
böddn
) ? scep->l.binddn : "(not set)",

212 (
s˚p
->
l
.
bödpw
) ? scep->l.bindpw : "(not set)");

215 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "automatic");

216 i‡(
«me
 !
NULL
) {

217 i‡(
	`°rˇ£cmp
(
«me
, "true") == 0) {

218 
s˚p
->
autom©ic
 = 1;

219 i‡(
debug
)

220 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomatic mode "

221 "íabÀd\n", 
__FILE__
, 
__LINE__
);

226 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "checktransid");

227 i‡(
«me
 !
NULL
) {

228 i‡((
	`°rˇ£cmp
(
«me
, "false") == 0) ||

229 (
	`°rˇ£cmp
(
«me
, "no") == 0)) {

230 
s˚p
->
check_å™sid
 = 0;

231 i‡(
debug
)

232 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: check ofÅransid "

234 
__FILE__
, 
__LINE__
);

239 
«me
 = 
	`CONF_gë_°rög
(
s˚p
->
c⁄f
, "scepd", "proxycommunity");

240 i‡(
«me
 !
NULL
) {

241 
s˚p
->
communôy
 = 
	`°rdup
(
«me
);

242 i‡(
debug
)

243 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öroxy community is '%s'\n",

244 
__FILE__
, 
__LINE__
, 
s˚p
->
communôy
);

249 
îr
:

250 
	`ERR_¥öt_îr‹s
(
bio_îr
);

252 
	}
}

	@rogi/openscep-0.4.2/lib/isasu.c

8 
	~<›ís¶/x509.h
>

9 
	~<›ís¶/a¢1_mac.h
>

10 
	~<›ís¶/îr.h
>

11 
	~<ißsu.h
>

12 
	~<öô.h
>

13 
	~<uni°d.h
>

14 
	~<f˙é.h
>

25 
	$i2d_issuî_™d_subje˘
(
issuî_™d_subje˘_t
 *
a
, **
µ
) {

26 
	`M_ASN1_I2D_v¨s
(
a
);

27 
	`M_ASN1_I2D_Àn
(
a
->
issuî
, 
i2d_X509_NAME
);

28 
	`M_ASN1_I2D_Àn
(
a
->
subje˘
, 
i2d_X509_NAME
);

29 
	`M_ASN1_I2D_£q_tŸÆ
();

30 
	`M_ASN1_I2D_put
(
a
->
issuî
, 
i2d_X509_NAME
);

31 
	`M_ASN1_I2D_put
(
a
->
subje˘
, 
i2d_X509_NAME
);

32 
	`M_ASN1_I2D_föish
();

33 
	}
}

35 
issuî_™d_subje˘_t
 *
	$d2i_issuî_™d_subje˘
(
issuî_™d_subje˘_t
 **
a
,

36 **
µ
, 
Àngth
) {

37 
	`M_ASN1_D2I_v¨s
(
a
, 
issuî_™d_subje˘_t
 *,
issuî_™d_subje˘_√w
);

38 
	`M_ASN1_D2I_Inô
();

39 
	`M_ASN1_D2I_°¨t_£quí˚
();

40 
	`M_ASN1_D2I_gë
(
ªt
->
issuî
, 
d2i_X509_NAME
);

41 
	`M_ASN1_D2I_gë
(
ªt
->
subje˘
, 
d2i_X509_NAME
);

42 
	`M_ASN1_D2I_Föish
(
a
,
issuî_™d_subje˘_‰ì
,

43 
ASN1_F_D2I_PKCS7_ISSUER_AND_SERIAL
);

44 
	}
}

46 
issuî_™d_subje˘_t
 *
	$issuî_™d_subje˘_√w
() {

47 
issuî_™d_subje˘_t
 *
ªt
 = 
NULL
;

48 
ASN1_CTX
 
c
;

49 
	`M_ASN1_New_MÆloc
(
ªt
, 
issuî_™d_subje˘_t
);

50 
	`M_ASN1_New
(
ªt
->
issuî
, 
X509_NAME_√w
);

51 
	`M_ASN1_New
(
ªt
->
subje˘
, 
X509_NAME_√w
);

52  
ªt
;

53 
	`M_ASN1_New_Eº‹
(
ASN1_F_PKCS7_ISSUER_AND_SERIAL_NEW
);

54 
	}
}

56 
	$issuî_™d_subje˘_‰ì
(
issuî_™d_subje˘_t
 *
ißsu
) {

57 i‡(
NULL
 =
ißsu
) ;

58 
	`X509_NAME_‰ì
(
ißsu
->
issuî
);

59 
	`X509_NAME_‰ì
(
ißsu
->
subje˘
);

60 
	`OPENSSL_‰ì
(
ißsu
);

61 
	}
}

	@rogi/openscep-0.4.2/lib/iser.c

8 
	~<c⁄fig.h
>

9 
	~<i£r.h
>

10 
	~<öô.h
>

13 
PKCS7_ISSUER_AND_SERIAL
 *
	$d2i_PKCS7_ISSUER_AND_SERIAL_bio
(

14 
PKCS7_ISSUER_AND_SERIAL
 **
is
, 
BIO
 *
b
) {

15 
buf„r
[2048];

16 *
µ
;

17 
l
;

18 
PKCS7_ISSUER_AND_SERIAL
 *
i
;

21 
l
 = 
	`BIO_ªad
(
b
, 
buf„r
, (buffer));

22 i‡(
l
 <= 0) {

23 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Çÿd©®‰om bio\n", 
__FILE__
,

24 
__LINE__
);

25 
îr
;

29 
µ
 = 
buf„r
;

30 
i
 = 
	`d2i_PKCS7_ISSUER_AND_SERIAL
(
is
, &
µ
, 
l
);

31 i‡(
i
 =
NULL
) {

32 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode issueránd serial\n",

33 
__FILE__
, 
__LINE__
);

34 
îr
;

38  
i
;

41 
îr
:

42 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding of issueránd serial failed\n",

43 
__FILE__
, 
__LINE__
);

44  
NULL
;

45 
	}
}

47 
	$i2d_PKCS7_ISSUER_AND_SERIAL_bio
(
BIO
 *
b
, 
PKCS7_ISSUER_AND_SERIAL
 *
is
) {

48 
l
;

49 *
d©a
, *
µ
;

52 
l
 = 
	`i2d_PKCS7_ISSUER_AND_SERIAL
(
is
, 
NULL
);

53 i‡(
l
 <= 0)

57 
µ
 = 
d©a
 = (*)
	`Æloˇ
(
l
);

60 i‡(0 >
	`i2d_PKCS7_ISSUER_AND_SERIAL
(
is
, &
µ
))

64 
	`BIO_wrôe
(
b
, 
d©a
, 
l
);

65 
	`BIO_Êush
(
b
);

68  
l
;

69 
	}
}

	@rogi/openscep-0.4.2/lib/openscep_vers.c

6 #ifde‡
_OPENSCEP_VERS_C_AS_HEADER_


8 #i‚de‡
_OPENSCEP_VERS_C_


9 
	#_OPENSCEP_VERS_C_


	)

11 
	#OPENSCEP_VERSION
 0x004202

	)

14 c⁄° 
	mv_hex
;

15 c⁄° *
	mv_sh‹t
;

16 c⁄° *
	mv_l⁄g
;

17 c⁄° *
	mv_ãx
;

18 c⁄° *
	mv_gnu
;

19 c⁄° *
	mv_web
;

20 c⁄° *
	mv_sccs
;

21 c⁄° *
	mv_rcs
;

22 } 
	t›ís˚p_vîsi⁄_t
;

24 
›ís˚p_vîsi⁄_t
 
›ís˚p_vîsi⁄
;

30 
	#_OPENSCEP_VERS_C_AS_HEADER_


	)

31 
	~"›ís˚p_vîs.c
"

32 #unde‡
_OPENSCEP_VERS_C_AS_HEADER_


34 
›ís˚p_vîsi⁄_t
 
	g›ís˚p_vîsi⁄
 = {

	@rogi/openscep-0.4.2/lib/payload.c

11 
	~<›ís¶/a¢1_mac.h
>

12 
	~<›ís¶/îr.h
>

13 
	~<›ís¶/x509.h
>

14 
	~<∑ylﬂd.h
>

15 
	~<öô.h
>

16 
	~<mis¶.h
>

17 
	~<s˚∂d≠.h
>

18 
	~<f˙é.h
>

23 
	$∑ylﬂd_buûd_‹igöÆ
(
∑ylﬂd_t
 *
∂
) {

24 *
r
 = 
NULL
, *
r2
;

25 
l
;

27 i‡(
debug
)

28 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: convertingÅype %dÖayload\n",

29 
__FILE__
, 
__LINE__
, 
∂
->
π
);

32 
∂
->
π
) {

34 
l
 = 
	`i2d_X509_REQ
(
∂
->
od
.
ªq
, 
NULL
);

35 
r2
 = 
r
 = (*)
	`mÆloc
(
l
);

36 
l
 = 
	`i2d_X509_REQ
(
∂
->
od
.
ªq
, &
r2
);

37 i‡(
debug
)

38 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖayloadÑequest converted "

39 "tÿDER: %d byãs\n", 
__FILE__
, 
__LINE__
, 
l
);

42 
l
 = 
	`i2d_NETSCAPE_SPKI
(
∂
->
od
.
•ki
, 
NULL
);

43 
r2
 = 
r
 = (*)
	`mÆloc
(
l
);

44 
l
 = 
	`i2d_NETSCAPE_SPKI
(
∂
->
od
.
•ki
, &
r2
);

45 i‡(
debug
)

46 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öayload SPKI converted "

47 "tÿDER: %d byãs\n", 
__FILE__
, 
__LINE__
, 
l
);

53 
	`ASN1_BIT_STRING_£t
(
∂
->
‹igöÆ
, 
r
, 
l
);

54 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: saved %d bytesát %p inÖl->original\n",

55 
__FILE__
, 
__LINE__
, 
l
, 
r
);

56 
	}
}

61 
∑ylﬂd_t
 *
	$∑ylﬂd_√w
() {

62 
∑ylﬂd_t
 *
p
 = 
NULL
;

63 
ASN1_CTX
 
c
;

64 
	`M_ASN1_New_MÆloc
(
p
, 
∑ylﬂd_t
);

65 
	`M_ASN1_New
(
p
->
ªque°ty≥
, 
ASN1_INTEGER_√w
);

66 
	`M_ASN1_New
(
p
->
‹igöÆ
, 
ASN1_BIT_STRING_√w
);

67 
	`M_ASN1_New
(
p
->
©åibuãs
, 
sk_X509_ATTRIBUTE_√w_nuŒ
);

68 
p
->
π
 = -1;

69 
p
->
od
.
ªq
 = 
NULL
;

70  
p
;

71 
	`M_ASN1_New_Eº‹
(
ASN1_F_X509_REQ_INFO_NEW
);

72 
	}
}

74 
	$∑ylﬂd_‰ì
(
∑ylﬂd_t
 *
a
) {

75 i‡(
NULL
 =
a
)

77 
	`ASN1_INTEGER_‰ì
(
a
->
ªque°ty≥
);

78 
	`ASN1_BIT_STRING_‰ì
(
a
->
‹igöÆ
);

79 
	`sk_X509_ATTRIBUTE_p›_‰ì
(
a
->
©åibuãs
, 
X509_ATTRIBUTE_‰ì
);

80 
a
->
π
) {

82 i‡(
a
->
od
.
ªq
) {

83 
	`X509_REQ_‰ì
(
a
->
od
.
ªq
);

84 
a
->
od
.
ªq
 = 
NULL
;

88 i‡(
a
->
od
.
•ki
) {

89 
	`NETSCAPE_SPKI_‰ì
(
a
->
od
.
•ki
);

90 
a
->
od
.
•ki
 = 
NULL
;

97 
	`OPENSSL_‰ì
(
a
);

98 
	}
}

103 
	$i2d_∑ylﬂd
(
∑ylﬂd_t
 *
a
, **
µ
) {

104 
	`M_ASN1_I2D_v¨s
(
a
);

105 i‡(
debug
)

106 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: i2d_payload called\n",

107 
__FILE__
, 
__LINE__
);

108 
	`∑ylﬂd_buûd_‹igöÆ
(
a
);

109 
	`M_ASN1_I2D_Àn
(
a
->
ªque°ty≥
, 
i2d_ASN1_INTEGER
);

110 
	`M_ASN1_I2D_Àn
(
a
->
‹igöÆ
, 
i2d_ASN1_BIT_STRING
);

111 
	`M_ASN1_I2D_Àn_IMP_SET_ty≥
(
X509_ATTRIBUTE
, 
a
->
©åibuãs
,

112 
i2d_X509_ATTRIBUTE
, 1);

113 
	`M_ASN1_I2D_£q_tŸÆ
();

114 
	`M_ASN1_I2D_put
(
a
->
ªque°ty≥
, 
i2d_ASN1_INTEGER
);

115 
	`M_ASN1_I2D_put
(
a
->
‹igöÆ
, 
i2d_ASN1_BIT_STRING
);

116 
	`M_ASN1_I2D_put_IMP_SET_ty≥
(
X509_ATTRIBUTE
, 
a
->
©åibuãs
,

117 
i2d_X509_ATTRIBUTE
, 1);

118 
	`M_ASN1_I2D_föish
();

119 
	}
}

121 
∑ylﬂd_t
 *
	$d2i_∑ylﬂd
(
∑ylﬂd_t
 **
a
, **
µ
, 
Àngth
) {

122 *
u
;

123 
l
;

124 
X509_REQ
 *
r1
;

125 
NETSCAPE_SPKI
 *
r2
;

127 
	`M_ASN1_D2I_v¨s
(
a
, 
∑ylﬂd_t
 *, 
∑ylﬂd_√w
);

128 
	`M_ASN1_D2I_Inô
();

129 
	`M_ASN1_D2I_°¨t_£quí˚
();

130 
	`M_ASN1_D2I_gë
(
ªt
->
ªque°ty≥
, 
d2i_ASN1_INTEGER
);

131 
	`M_ASN1_D2I_gë
(
ªt
->
‹igöÆ
, 
d2i_ASN1_BIT_STRING
);

132 
	`M_ASN1_D2I_gë_IMP_£t_ty≥
(
X509_ATTRIBUTE
, 
ªt
->
©åibuãs
,

133 
d2i_X509_ATTRIBUTE
, 
X509_ATTRIBUTE_‰ì
, 1);

134 
ªt
->
π
 = 
	`ASN1_INTEGER_gë
‘ë->
ªque°ty≥
);

135 i‡(
debug
)

136 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖayloadÅype: %d\n",

137 
__FILE__
, 
__LINE__
, 
ªt
->
π
);

138 
u
 = 
ªt
->
‹igöÆ
->
d©a
;

139 
l
 = 
ªt
->
‹igöÆ
->
Àngth
;

140 i‡(
debug
) {

141 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoding %dÖayload bytes\n",

142 
__FILE__
, 
__LINE__
, 
l
);

143 i‡(
tmµ©h
) {

144 
fûíame
[1024];

145 
fd
;

147 
	`¢¥ötf
(
fûíame
, (filename),

148 "%s/%d.d-4-‹igöÆ.dî", 
tmµ©h
, 
	`gëpid
());

149 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: write original dataÅo "

150 "%s\n", 
__FILE__
, 
__LINE__
, 
fûíame
);

153 i‡(0 <(
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_CREAT


154 | 
O_TRUNC
, 066))) {

155 
	`wrôe
(
fd
, 
u
, 
l
);

156 
	`˛o£
(
fd
);

158 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open file "

159 "%s: %†(%d)\n", 
__FILE__
, 
__LINE__
,

160 
fûíame
, 
	`°ªº‹
(
î∫o
),Érrno);

164 
ªt
->
π
) {

166 
r1
 = 
NULL
;

167 
ªt
->
od
.
ªq
 = 
	`d2i_X509_REQ
(&
r1
, &
u
, 
l
);

170 
r2
 = 
NULL
;

171 
ªt
->
od
.
•ki
 = 
	`d2i_NETSCAPE_SPKI
(&
r2
, &
u
, 
l
);

174 
	`M_ASN1_D2I_Föish
(
a
, 
∑ylﬂd_‰ì
, 
ASN1_F_D2I_X509_REQ_INFO
);

175 
	}
}

180 
X509_REQ
 *
	$∑ylﬂd_gëªq
(
∑ylﬂd_t
 *
∂
) {

182 i‡(
∂
->
π
 != 0) {

183 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Çotá PKCS#10Ñequest\n",

184 
__FILE__
, 
__LINE__
);

185  
NULL
;

188  
∂
->
od
.
ªq
;

189 
	}
}

191 
NETSCAPE_SPKI
 *
	$∑ylﬂd_gë•ki
(
∑ylﬂd_t
 *
∂
) {

193 i‡(
∂
->
π
 != 1) {

194 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÇŸá¿SPKIÑeque°\n", 
__FILE__
,

195 
__LINE__
);

196  
NULL
;

199  
∂
->
od
.
•ki
;

200 
	}
}

202 
	$∑ylﬂd_gë_ªque°ty≥
(
∑ylﬂd_t
 *
∂
) {

203  
∂
->
π
;

204 
	}
}

210 
	$∑ylﬂd_‰ì_od
(
∑ylﬂd_t
 *
∂
) {

211 i‡(
NULL
 =
∂
->
od
.
ªq
)

213 
∂
->
π
) {

215 
	`X509_REQ_‰ì
(
∂
->
od
.
ªq
);

216 
∂
->
od
.
ªq
 = 
NULL
;

219 
	`NETSCAPE_SPKI_‰ì
(
∂
->
od
.
•ki
);

220 
∂
->
od
.
•ki
 = 
NULL
;

223 
	}
}

229 
BIO
 *
	$∑ylﬂd_£t_comm⁄
(
∑ylﬂd_t
 *
∂
, *
fûíame
) {

230 
BIO
 *
öbio
 = 
NULL
;

231 
	`∑ylﬂd_‰ì_od
(
∂
);

232 
öbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

233 
	`BIO_ªad_fûíame
(
öbio
, 
fûíame
);

234  
öbio
;

236 
	}
}

242 
	$∑ylﬂd_£t_ªq
(
∑ylﬂd_t
 *
∂
, 
X509_REQ
 *
ªq
) {

243 i‡(
debug
)

244 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: setting X509Ñeq inÖayload\n",

245 
__FILE__
, 
__LINE__
);

246 
∂
->
π
 = 0;

247 
	`ASN1_INTEGER_£t
(
∂
->
ªque°ty≥
,Öl->
π
);

248 
∂
->
od
.
ªq
 =Ñeq;

249 
	`∑ylﬂd_buûd_‹igöÆ
(
∂
);

251 
	}
}

252 
	$∑ylﬂd_£t_ªq_‰om_fûe
(
∑ylﬂd_t
 *
∂
, *
fûíame
) {

253 
BIO
 *
öbio
;

254 
öbio
 = 
	`∑ylﬂd_£t_comm⁄
(
∂
, 
fûíame
);

255 i‡(
öbio
 =
NULL
)

258 
	`∑ylﬂd_£t_ªq
(
∂
, 
	`d2i_X509_REQ_bio
(
öbio
, 
NULL
));

259 
	`BIO_‰ì
(
öbio
);

261 
	}
}

267 
	$∑ylﬂd_£t_•ki
(
∑ylﬂd_t
 *
∂
, 
NETSCAPE_SPKI
 *
•ki
) {

268 i‡(
debug
)

269 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: setting SPKI inÖayload\n",

270 
__FILE__
, 
__LINE__
);

271 
∂
->
π
 = 1;

272 
	`ASN1_INTEGER_£t
(
∂
->
ªque°ty≥
,Öl->
π
);

273 
∂
->
od
.
•ki
 = spki;

274 
	`∑ylﬂd_buûd_‹igöÆ
(
∂
);

276 
	}
}

277 
	$∑ylﬂd_£t_•ki_‰om_fûe
(
∑ylﬂd_t
 *
∂
, *
fûíame
) {

278 
BIO
 *
öbio
;

279 
öbio
 = 
	`∑ylﬂd_£t_comm⁄
(
∂
, 
fûíame
);

280 i‡(
öbio
 =
NULL
)

283 
	`∑ylﬂd_£t_•ki
(
∂
, 
	`d2i_NETSCAPE_SPKI_bio
(
öbio
, 
NULL
));

284 
	`BIO_‰ì
(
öbio
);

286 
	}
}

292 
EVP_PKEY
 *
	$∑ylﬂd_gë_pubkey
(
∑ylﬂd_t
 *
∂
) {

293 
∂
->
π
) {

295  
	`X509_REQ_gë_pubkey
(
∂
->
od
.
ªq
);

298  
	`NETSCAPE_SPKI_gë_pubkey
(
∂
->
od
.
•ki
);

301  
NULL
;

302 
	}
}

307 
	$∑ylﬂd_dn_to_©ås
(
∑ylﬂd_t
 *
∂
, *
dn
) {

308 
X509_NAME
 *
«me
;

309 
ASN1_OBJECT
 *
us
;

310 
ASN1_STRING
 *
as
;

311 
X509_NAME_ENTRY
 *
√
;

312 
i
, 
n
;

315 
«me
 = 
	`ld≠_to_x509
(
dn
);

316 i‡(
«me
 =
NULL
)

318 i‡(
debug
)

319 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: converted dn '%s'Åo X509_NAME "

320 "@%p\n", 
__FILE__
, 
__LINE__
, 
dn
, 
«me
);

323 
n
 = 
	`X509_NAME_íåy_cou¡
(
«me
);

324 i‡(
debug
)

325 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: X509_NAME has %d components\n",

326 
__FILE__
, 
__LINE__
, 
n
);

327 
i
 = 0; i < 
n
; i++) {

328 
√
 = 
	`X509_NAME_gë_íåy
(
«me
, 
i
);

329 
us
 = 
	`X509_NAME_ENTRY_gë_obje˘
(
√
);

330 
as
 = 
	`X509_NAME_ENTRY_gë_d©a
(
√
);

331 i‡(
debug
)

332 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áddingáttr %s = %*.*s "

333 "—y≥ %d)\n", 
__FILE__
, 
__LINE__
,

334 
	`OBJ_nid2¢
(
	`OBJ_obj2nid
(
us
)),

335 
as
->
Àngth
,ás->length,

336 (
as
->
d©a
) ? (*)as->data : "(null)",

337 
as
->
ty≥
);

338 
	`X509©_add1_©å_by_OBJ
(&
∂
->
©åibuãs
, 
us
,

339 
as
->
ty≥
,ás->
d©a
,ás->
Àngth
);

342 
	}
}

344 
	#nNamóârs
 6

	)

345 *
	g«móârs
[
nNamóârs
] = { "CN", "OU", "O", "L", "ST", "C" };

347 
X509_NAME
 *
x509_«me_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
©ås
) {

348 
	gi
 = 0, 
	gj
;

349 
X509_NAME
 *
	gn
;

350 
X509_ATTRIBUTE
 *
	gxa
;

351 
ASN1_TYPE
 *
	gt
;

353 
	gn
 = 
X509_NAME_√w
();

354 i‡(
	gdebug
)

355 
BIO_¥ötf
(
bio_îr
, "%s:%d: convertingáttributes into "

356 "X509_NAME\n", 
__FILE__
, 
__LINE__
);

359 
	gi
 = 
X509©_gë_©å_by_NID
(
©ås
, 
OBJ_ 2nid
("unstructuredName"), 0);

360 i‡(
	gi
 >= 0) {

361 i‡(
debug
)

362 
BIO_¥ötf
(
bio_îr
, "%s:%d: unstructuredName case\n",

363 
__FILE__
, 
__LINE__
);

364 
	gxa
 = 
X509©_gë_©å
(
©ås
, 
i
);

365 
	gt
 = 
X509_ATTRIBUTE_gë0_ty≥
(
xa
, 0);

366 
X509_NAME_add_íåy_by_txt
(
n
, "unstructuredName",

367 
V_ASN1_PRINTABLESTRING
,

368 
t
->
vÆue
.
a¢1_°rög
->
d©a
,

369 
t
->
vÆue
.
a¢1_°rög
->
Àngth
, 0, 1);

371  
	gn
;

375 i‡(
	gdebug
)

376 
BIO_¥ötf
(
bio_îr
, "%s:%d: com∂exÇamêˇ£\n", 
__FILE__
,

377 
__LINE__
);

378 
	gi
 = 0; i < 
	gnNamóârs
; i++) {

379 
	gj
 = 
X509©_gë_©å_by_NID
(
©ås
, 
OBJ_¢2nid
(
«móârs
[
i
]), -1);

380 i‡(
	gj
 >= 0) {

381 i‡(
debug
)

382 
BIO_¥ötf
(
bio_îr
, "%s:%d:áddingáttribute "

383 "%s\n", 
__FILE__
, 
__LINE__
,

384 
«móârs
[
i
]);

385 
	gxa
 = 
X509©_gë_©å
(
©ås
, 
j
);

386 
	gt
 = 
X509_ATTRIBUTE_gë0_ty≥
(
xa
, 0);

387 
X509_NAME_add_íåy_by_NID
(
n
, 
OBJ_¢2nid
(
«móârs
[
i
]),

388 
V_ASN1_PRINTABLESTRING
,

389 
t
->
vÆue
.
a¢1_°rög
->
d©a
,

390 
t
->
vÆue
.
a¢1_°rög
->
Àngth
, 0, 1);

391 i‡(
	gdebug
)

392 
BIO_¥ötf
(
bio_îr
, "%s:%d: value '%*.*s'\n",

393 
__FILE__
, 
__LINE__
,

394 
t
->
vÆue
.
a¢1_°rög
->
Àngth
,

395 
t
->
vÆue
.
a¢1_°rög
->
Àngth
,

396 
t
->
vÆue
.
a¢1_°rög
->
d©a
);

399  
	gn
;

	@rogi/openscep-0.4.2/lib/pending.c

8 
	~<≥ndög.h
>

9 
	~<öô.h
>

10 
	~<sy¶og.h
>

11 
	~<›ís¶/x509.h
>

12 
	~<›ís¶/bio.h
>

13 
	~<›ís¶/a¢1.h
>

14 
	~<›ís¶/obje˘s.h
>

15 
	~<mis¶.h
>

21 
	$¸óã_≥ndög_pkcs10
(
s˚p_t
 *
s˚p
) {

22 
BIO
 *
outbio
;

23 
fûíame
[1024];

24 
rc
 = -1;

27 
outbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

28 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%s/%s.dî", 
OPENSCEPDIR
,

29 "≥ndög", 
s˚p
->
å™sId
);

30 
	`BIO_wrôe_fûíame
(
outbio
, 
fûíame
);

31 i‡(
	`i2d_X509_REQ_bio
(
outbio
, 
s˚p
->
ªque°‹ªq
) <= 0) {

32 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo writeÑequestÅo "

33 "queuêa†%s\n", 
__FILE__
, 
__LINE__
, 
fûíame
);

34 
	`sy¶og
(
LOG_ERR
, "%s:%d: faûedÅÿwrôêªque°Åÿqueuêa†%s", 
__FILE__
, 
__LINE__
, 
fûíame
);

35 
îr
;

37 
rc
 = 0;

38 i‡(
debug
)

39 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖendingÑequest writtenÅo %s\n",

40 
__FILE__
, 
__LINE__
, 
fûíame
);

41 
îr
:

42 
	`BIO_‰ì
(
outbio
);

43  
rc
;

44 
	}
}

46 
	$¸óã_≥ndög_•ki
(
s˚p_t
 *
s˚p
, 
X509_NAME
 *
«me
) {

47 
fûíame
[1024];

48 
rc
 = -1;

51 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%s/%s.•ki", 
OPENSCEPDIR
,

52 "≥ndög", 
s˚p
->
å™sId
);

53 i‡(
	`•ki2fûe
(
fûíame
, 
«me
,

54 
s˚p
->
ªque°
.
rd
.
∑ylﬂd
->
‹igöÆ
->
d©a
,

55 
s˚p
->
ªque°
.
rd
.
∑ylﬂd
->
‹igöÆ
->
Àngth
) < 0) {

56 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo writeÑequestÅo "

57 "queuêa†%s\n", 
__FILE__
, 
__LINE__
, 
fûíame
);

58 
	`sy¶og
(
LOG_ERR
, "%s:%d: faûedÅÿwrôêªque°Åÿqueuêa†%s", 
__FILE__
, 
__LINE__
, 
fûíame
);

59 
îr
;

61 
rc
 = 0;

62 i‡(
debug
)

63 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖendingÑequest writtenÅo %s\n",

64 
__FILE__
, 
__LINE__
, 
fûíame
);

65 
îr
:

66  
rc
;

67 
	}
}

72 
	$≥ndög_gë_ªque°
(
s˚p_t
 *
s˚p
) {

74 i‡(
	`©oi
(
s˚p
->
ªque°
.
mesßgeTy≥
Ë=
MSG_PKCSREQ
) {

75 
s˚p
->
˛õ¡ªq
 = s˚p->
ªque°
.
rd
.
ªq
;

80 
	`∑ylﬂd_gë_ªque°ty≥
(
s˚p
->
ªque°
.
rd
.
∑ylﬂd
)) {

82 
s˚p
->
ªque°‹ªq
 = 
	`∑ylﬂd_gëªq
(s˚p->
ªque°
.
rd
.
∑ylﬂd
);

85 
s˚p
->
ªque°‹•ki
 = 
	`∑ylﬂd_gë•ki
(s˚p->
ªque°
.
rd
.
∑ylﬂd
);

88 
	}
}

93 
X509_NAME
 *
	$≥ndög_gësubje˘
(
s˚p_t
 *
s˚p
) {

94 
	`STACK_OF
(
X509_ATTRIBUTE
Ë*
©ås
;

97 i‡(
s˚p
->
ªque°‹ªq
 !
NULL
) {

99 i‡(
debug
)

100 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éxtracting DN from "

101 "ªque°\n", 
__FILE__
, 
__LINE__
);

103  
	`X509_REQ_gë_subje˘_«me
(
s˚p
->
ªque°‹ªq
);

106 i‡(
debug
)

107 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éxtracting DN from "

108 "©åibuãs\n", 
__FILE__
, 
__LINE__
);

109 
©ås
 = 
s˚p
->
ªque°
.
rd
.
∑ylﬂd
->
©åibuãs
;

110  
	`x509_«me_‰om_©åibuãs
(
©ås
);

112 
	}
}

118 
	$¸óã_≥ndög
(
s˚p_t
 *
s˚p
) {

119 
X509_NAME
 *
¢
;

120 
subje˘
[1024];

121 
i
;

122 
fûíame
[1024];

123 
BIO
 *
outbio
;

126 
	`≥ndög_gë_ªque°
(
s˚p
);

129 
¢
 = 
	`≥ndög_gësubje˘
(
s˚p
);

130 i‡(
debug
)

131 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: subjectÇame is @%p\n",

132 
__FILE__
, 
__LINE__
, 
¢
);

135 i‡(
s˚p
->
ªque°‹ªq
)

136 
	`¸óã_≥ndög_pkcs10
(
s˚p
);

137 i‡(
s˚p
->
ªque°‹•ki
)

138 
	`¸óã_≥ndög_•ki
(
s˚p
, 
¢
);

142 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%s/%s.öfo", 
OPENSCEPDIR
,

143 "≥ndög", 
s˚p
->
å™sId
);

144 i‡(
debug
)

145 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: creating info file %s\n",

146 
__FILE__
, 
__LINE__
, 
fûíame
);

147 
outbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

148 
	`BIO_wrôe_fûíame
(
outbio
, 
fûíame
);

152 
	`X509_NAME_⁄ñöe
(
¢
, 
subje˘
, (subject));

153 
	`BIO_¥ötf
(
outbio
, "subje˘: %s\n", 
subje˘
);

156 
	`BIO_¥ötf
(
outbio
, "å™sId: %s\n", 
s˚p
->
å™sId
);

157 
	`BIO_¥ötf
(
outbio
, "senderNonce: ");

158 
i
 = 0; i < 
s˚p
->
£ndîN⁄˚Lígth
; i++) {

159 
	`BIO_¥ötf
(
outbio
, "%02X", 
s˚p
->
£ndîN⁄˚
[
i
]);

161 
	`BIO_¥ötf
(
outbio
, "\n");

165 
	`BIO_¥ötf
(
outbio
, "fögî¥öt: %s\n", 
s˚p
->
fögî¥öt
);

166 
	`BIO_¥ötf
(
outbio
, "keyfögî¥öt: %s\n", 
s˚p
->
keyfögî¥t
);

167 
	`BIO_‰ì
(
outbio
);

171 
	}
}

	@rogi/openscep-0.4.2/lib/pkcsreq.c

8 
	~<c⁄fig.h
>

9 
	~<öô.h
>

10 
	~<pkc§eq.h
>

11 
	~<›ís¶/x509.h
>

12 
	~<›ís¶/bio.h
>

13 
	~<fögî¥öt.h
>

14 
	~<sy¶og.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<goodª∂y.h
>

18 
	~<badª∂y.h
>

19 
	~<gø¡.h
>

20 
	~<check.h
>

21 
	~<å™scheck.h
>

22 
	~<≥ndög.h
>

24 
	$pkc§eq
(
s˚p_t
 *
s˚p
) {

25 
BIO
 *
outbio
;

26 
fûíame
[1024];

28 
s˚pmsg_t
 *
msg
;

31 
msg
 = &
s˚p
->
ªque°
;

34 i‡(
debug
)

35 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: handling PKCSreq message\n",

36 
__FILE__
, 
__LINE__
);

40 
s˚p
->
fögî¥öt
 = 
	`fögî¥öt
(
msg
->
d©a
, msg->
Àngth
);

41 i‡(
debug
)

42 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÅheÑequest fingerprint is '%s'\n",

43 
__FILE__
, 
__LINE__
, 
s˚p
->
fögî¥öt
);

46 
s˚p
->
keyfögî¥t
 = 
	`x509_key_fögî¥öt
(
msg
->
rd
.
ªq
);

47 i‡(
debug
)

48 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: key fingerprint is %s\n",

49 
__FILE__
, 
__LINE__
, 
s˚p
->
keyfögî¥t
);

53 i‡(
s˚p
->
check_å™sid
) {

54 i‡(
	`fögî¥öt_cmp
(
s˚p
->
keyfögî¥t
, s˚p->
å™sId
)) {

55 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: key fingerprint != "

56 "å™sId\n", 
__FILE__
, 
__LINE__
);

57 
	`sy¶og
(
LOG_ERR
, "%s:%d: fingerprint doesÇot match "

58 "å™sid", 
__FILE__
, 
__LINE__
);

59 
îr
;

61 i‡(
debug
)

62 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: key fingerprint matches "

63 "å™sId %s\n", 
__FILE__
, 
__LINE__
,

64 
s˚p
->
å™sId
);

69 i‡(
	`å™scheck_gø¡ed
(
s˚p
))

70  
	`goodª∂y
(
s˚p
, 1);

74 i‡(
	`å™scheck_≥ndög
(
s˚p
))

75  
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_PENDING
);

78 
	`¸óã_≥ndög
(
s˚p
);

82 
s˚p
->
˛õ¡ªq
 = s˚p->
ªque°
.
rd
.
ªq
;

83 i‡(
debug
)

84 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: clientÑequest isát %p\n",

85 
__FILE__
, 
__LINE__
, 
s˚p
->
˛õ¡ªq
);

88 
outbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

89 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%s/%s.dî", 
OPENSCEPDIR
,

90 "≥ndög", 
s˚p
->
å™sId
);

91 
	`BIO_wrôe_fûíame
(
outbio
, 
fûíame
);

92 i‡(
	`i2d_X509_REQ_bio
(
outbio
, 
msg
->
rd
.
ªq
) <= 0) {

93 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo writeÑequestÅo "

94 "queuêa†%s\n", 
__FILE__
, 
__LINE__
, 
fûíame
);

95 
	`sy¶og
(
LOG_ERR
, "%s:%d: failedÅo writeÑequestÅo queueás %s",

96 
__FILE__
, 
__LINE__
, 
fûíame
);

97 
îr
;

99 
	`BIO_‰ì
(
outbio
);

100 i‡(
debug
)

101 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖendingÑequest writtenÅo %s\n",

102 
__FILE__
, 
__LINE__
, 
fûíame
);

105 i‡((
s˚p
->
autom©ic
Ë&& (s˚p->
l
.
ld≠
 !
NULL
)) {

106 i‡(
debug
)

107 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomaticÉnrollment in "

108 "ef„˘\n", 
__FILE__
, 
__LINE__
);

111 i‡(
	`check_chÆÀnge
(
s˚p
) == 0) {

113 i‡(
debug
)

114 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomatic grant\n",

115 
__FILE__
, 
__LINE__
);

116 i‡(
	`˚π_gø¡
(
s˚p
) < 0) {

117 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: grant failed\n",

118 
__FILE__
, 
__LINE__
);

119 
msg
->
Áûöfo
 = 
SCEP_FAILURE_BADCERTID
;

120 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_FAILURE
);

123 
	`goodª∂y
(
s˚p
, 1);

127 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomaticÉnrollment disabled\n",

128 
__FILE__
, 
__LINE__
);

131 i‡(
debug
)

132 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomaticÉnrollment "

133 "díõd\n", 
__FILE__
, 
__LINE__
);

134 
	`sy¶og
(
LOG_DEBUG
, "%s:%d:áutomaticÉnrollment denied",

135 
__FILE__
, 
__LINE__
);

138 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_PENDING
);

142 
îr
:

143 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_FAILURE
);

145 
	}
}

	@rogi/openscep-0.4.2/lib/proxy.c

8 
	~<°dlib.h
>

9 
	~<öô.h
>

10 
	~<s˚p.h
>

11 
	~<¥oxy.h
>

12 
	~<›ís¶/evp.h
>

21 
ASN1_OCTET_STRING
 *
	$¥oxy_authítiˇt‹
(
s˚pmsg_t
 *
msg
, *
communôy
) {

22 
MD5_CTX
 
˘x
;

23 
md
[
MD5_DIGEST_LENGTH
];

24 
ASN1_OCTET_STRING
 *
ao
;

27 i‡(
msg
->
d©a
 =
NULL
)

28  
NULL
;

31 i‡(
communôy
 =
NULL
)

32  
NULL
;

35 
	`MD5_Inô
(&
˘x
);

38 
	`MD5_Upd©e
(&
˘x
, 
msg
->
d©a
, msg->
Àngth
);

41 
	`MD5_Upd©e
(&
˘x
, 
communôy
, 
	`°æí
(community));

44 
	`MD5_FöÆ
(
md
, &
˘x
);

47 
ao
 = 
	`ASN1_OCTET_STRING_√w
();

48 
	`ASN1_OCTET_STRING_£t
(
ao
, 
md
, 
MD5_DIGEST_LENGTH
);

49  
ao
;

50 
	}
}

56 
	$¥oxy_check
(
s˚p_t
 *
s˚p
, 
s˚pmsg_t
 *
msg
, 
ASN1_OCTET_STRING
 *
auth
) {

57 
rc
 = 0;

58 
ASN1_OCTET_STRING
 *
a1
;

61 i‡(
NULL
 =
s˚p
->
communôy
) {

62 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: communityÇot set, cannot check "

63 "¥oxy\n", 
__FILE__
, 
__LINE__
);

64 
föish
;

68 
a1
 = 
	`¥oxy_authítiˇt‹
(
msg
, 
s˚p
->
communôy
);

69 i‡(
a1
 =
NULL
) {

70 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot computeáuthenticator\n",

71 
__FILE__
, 
__LINE__
);

72 
föish
;

77 i‡(0 =
	`ASN1_OCTET_STRING_cmp
(
a1
, 
auth
)) {

78 i‡(
debug
)

79 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öroxyáuthenticators match\n",

80 
__FILE__
, 
__LINE__
);

81 
rc
 = 1;

82 
föish
;

87 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öroxyáuthenticators failÅo match\n",

88 
__FILE__
, 
__LINE__
);

89 
föish
:

90  
rc
;

91 
	}
}

	@rogi/openscep-0.4.2/lib/scepldap.c

8 
	~<c⁄fig.h
>

9 
	~<lbî.h
>

10 
	~<ld≠.h
>

11 
	~<s˚p.h
>

12 
	~<s˚∂d≠.h
>

13 
	~<öô.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/bio.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<î∫o.h
>

18 
	~<°rög.h
>

19 
	~<check.h
>

29 *
	$x509_to_ld≠
(
s˚p_t
 *
s˚p
, 
X509_NAME
 *
«me
) {

30 *
dn
 = 
NULL
;

31 
ncomp⁄íts
, 
dl
 = 0, 
∆
, 
i
, 
d∆
;

32 
X509_NAME_ENTRY
 *
√
;

33 
⁄ame
[1024];

34 c⁄° *
¢
;

35 
ASN1_OBJECT
 *
us
;

36 
ASN1_STRING
 *
as
;

38 i‡(
debug
) {

39 
	`X509_NAME_⁄ñöe
(
«me
, 
⁄ame
, (oname));

40 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: LDAP mapping of %sÑequested\n",

41 
__FILE__
, 
__LINE__
, 
⁄ame
);

45 i‡(
NULL
 =(
us
 = 
	`OBJ_nid2obj
(
NID_pkcs9_un°ru˘uªdName
))) {

46 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: unstructuredNameÇot found\n",

47 
__FILE__
, 
__LINE__
);

48 
îr
;

53 
ncomp⁄íts
 = 
	`X509_NAME_íåy_cou¡
(
«me
);

54 
i
 = 0; i < 
ncomp⁄íts
; i++) {

55 
ASN1_OBJECT
 *
o
;

56 
o
 = 
	`X509_NAME_ENTRY_gë_obje˘
(
	`X509_NAME_gë_íåy
(
«me
, 
i
));

57 i‡(
	`OBJ_cmp
(
o
, 
us
) == 0) {

58 
√
 = 
	`X509_NAME_gë_íåy
(
«me
, 
i
);

64 i‡(
√
) {

65 
as
 = 
	`X509_NAME_ENTRY_gë_d©a
(
√
);

66 i‡(
as
 =
NULL
) {

67 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço data for unstruturedName"

68 "áâribuã\n", 
__FILE__
, 
__LINE__
);

69 
îr
;

71 
d∆
 = 
	`°æí
("un°ru˘uªdName=,"Ë+ såÀn(
s˚p
->
l
.
ld≠ba£
)

72 + 
as
->
Àngth
 + 1;

73 
dn
 = (*)
	`mÆloc
(
d∆
);

74 i‡(
debug
)

75 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: unstructuredName hasÅype "

77 " byãs\n", 
__FILE__
,

78 
__LINE__
, 
as
->
ty≥
,ás->
Àngth
,ás->length,

79 
as
->
Àngth
,ás->
d©a
, 
d∆
);

80 
	`¢¥ötf
(
dn
, 
d∆
, "un°ru˘uªdName=%*.*s,%s", 
as
->
Àngth
,

81 
as
->
Àngth
,ás->
d©a
, 
s˚p
->
l
.
ld≠ba£
);

82 
ª∂y
;

86 
i
 = 
	`X509_NAME_íåy_cou¡
(
«me
) - 1; i >= 0; i--) {

87 
us
 = 
	`X509_NAME_ENTRY_gë_obje˘
(
	`X509_NAME_gë_íåy
(
«me
, 
i
));

88 
as
 = 
	`X509_NAME_ENTRY_gë_d©a
(
	`X509_NAME_gë_íåy
(
«me
, 
i
));

89 
¢
 = 
	`OBJ_nid2¢
(
	`OBJ_obj2nid
(
us
));

90 
∆
 = 
	`°æí
(
¢
Ë+ 
as
->
Àngth
 + 1;

91 i‡(
dl
 =0Ë{ 
∆
 += 2; }

92 
dn
 = (*)
	`ªÆloc
(dn, 
dl
 + 
∆
 + 2);

93 
	`¢¥ötf
(
dn
 + 
dl
, 
∆
 + 2, "%s%s=%*.*s",

94 (
dl
 =0Ë? "" : ",", 
us
->
¢
, 
as
->
Àngth
,ás->length,

95 
as
->
d©a
);

96 i‡(
dl
 == 0)

97 
dl
 = 
∆
;

99 
dl
 +
∆
 + 1;

103 
ª∂y
:

104 i‡(
debug
)

105 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: X509_NAME '%s' mappedÅo '%s'\n",

106 
__FILE__
, 
__LINE__
, 
⁄ame
, 
dn
);

107  
dn
;

110 
îr
:

111  
NULL
;

112 
	}
}

121 
X509_NAME
 *
	$ld≠_to_x509
(*
dn
) {

122 *
wdn
, *
comp
, *
«me
, *
vÆue
;

123 
X509_NAME
 *
DN
;

124 
X509_NAME_ENTRY
 *
√
;

125 
i
 = 0, 
ty≥
;

128 
wdn
 = 
	`°rdup
(
dn
);

131 
DN
 = 
	`X509_NAME_√w
();

136 
comp
 = 
	`°ºchr
(
wdn
, ',');

137 i‡(
comp
 =
NULL
) {

138 
comp
 = 
wdn
;

140 *
comp
 = '\0'; comp++;

144 
«me
 = 
comp
;

145 
vÆue
 = 
	`°rchr
(
«me
, '=');

146 i‡(
vÆue
 =
NULL
) {

147 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço = on dn component %s\n",

148 
__FILE__
, 
__LINE__
, 
«me
);

149 
îr
;

151 *
vÆue
 = '\0'; value++;

152 i‡(
debug
)

153 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: foundÇame = '%s', "

154 "vÆuê'%s'\n", 
__FILE__
, 
__LINE__
, 
«me
,

155 
vÆue
);

158 
ty≥
 = 
V_ASN1_PRINTABLESTRING
;

161 
√
 = 
	`X509_NAME_ENTRY_¸óã_by_txt
(
NULL
, 
«me
, 
ty≥
,

162 (*)
vÆue
, 
	`°æí
(value));

163 i‡(
√
 =
NULL
) {

164 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot createÇameÉntry "

165 "%s=%s\n", 
__FILE__
, 
__LINE__
, 
«me
, 
vÆue
);

166 
îr
;

168 
	`X509_NAME_add_íåy
(
DN
, 
√
, 
i
++, 0);

169 } 
wdn
 !
comp
);

172  
DN
;

175 
îr
:

176  
NULL
;

177 
	}
}

182 
	$s˚p_ld≠_öô
(
s˚p_t
 *
s˚p
) {

184 i‡(
NULL
 =(
s˚p
->
l
.
ld≠
 = 
	`ld≠_öô
(s˚p->l.
ld≠ho°
,

185 
s˚p
->
l
.
ld≠p‹t
))) {

186 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot initialize LDAP: %s (%d)\n",

187 
__FILE__
, 
__LINE__
, 
	`°ªº‹
(
î∫o
),Érrno);

188 
îr
;

190 i‡(
debug
)

191 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: LDAP %s:%d initialized\n",

192 
__FILE__
, 
__LINE__
, 
s˚p
->
l
.
ld≠ho°
, s˚p->l.
ld≠p‹t
);

195 i‡((
s˚p
->
l
.
böddn
Ë&& (s˚p->l.
bödpw
)) {

196 i‡(
LDAP_SUCCESS
 !
	`ld≠_sim∂e_böd_s
(
s˚p
->
l
.
ld≠
,

197 
s˚p
->
l
.
böddn
, s˚p->l.
bödpw
)) {

198 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: böd faûed\n", 
__FILE__
,

199 
__LINE__
);

200 
îr
;

202 i‡(
debug
)

203 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: LDAP bind complete\n",

204 
__FILE__
, 
__LINE__
);

206 i‡(
debug
)

207 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: LDAP bindÇotÇecessary, "

208 "ösufficõ¡Ö¨amëîs\n", 
__FILE__
,

209 
__LINE__
);

213 
îr
:

215 i‡(
s˚p
->
l
.
ld≠
 !
NULL
) {

216 
	`ld≠_unböd
(
s˚p
->
l
.
ld≠
);

217 
s˚p
->
l
.
ld≠
 = 
NULL
;

219 
	`ERR_¥öt_îr‹s
(
bio_îr
);

221 
	}
}

230 *
	$a¢1_to_°rög
(
ASN1_INTEGER
 *
i
) {

231 *
˝
, *
p
;

232 
j
;

234 
˝
 = (*)
	`mÆloc
(1 + (3 * 
i
->
Àngth
));

235 
p
 = 
˝
;

236 i‡(
i
->
ty≥
 =
V_ASN1_NEG_INTEGER
) {

237 *(
p
++) = '-';

239 
j
 = 0; j < 
i
->
Àngth
; j++) {

240 i‡(
j
Ë*(
p
++) = ':';

241 
	`¢¥ötf
(
p
, 3, "%02X", 
i
->
d©a
[
j
]);Ö += 2;

243  
˝
;

244 
	}
}

250 
	$ld≠_°‹e_˚π
(
s˚p_t
 *
s˚p
) {

251 
fûíame
[1024];

252 
issuîDN
[1024], 
subje˘DN
[1024];

253 
ASN1_INTEGER
 *
£rülNumbî
;

254 *
dn
, *
£rül
, *
chÆÀnge
;

255 
LDAPMesßge
 *
ªsu…
;

256 *
ocvÆs
[3], *
idnvÆs
[2], *
sdnvÆs
[2], *
£rvÆs
[2],

257 *
upvÆs
[2];

258 
bîvÆ
 *
˚πvÆs
[2];

259 
bîvÆ
 
˚πvÆ
;

260 
LDAPMod
 
ocmod
, 
idnmod
, 
sdnmod
, 
£rmod
, 
˚πmod
, 
upmod
;

261 
LDAPMod
 *
mods
[5];

262 
BIO
 *
bio_mem
;

263 
rc
;

267 i‡(
s˚p
->
l
.
ld≠
 =
NULL
) {

268 i‡(
debug
)

269 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço LDAP, store_cert "

270 "Áked\n", 
__FILE__
, 
__LINE__
);

275 i‡(
s˚p
->
˛õ¡˚π
 !
NULL
) {

276 
BIO
 *
x509_bio
;

277 
	`¢¥ötf
(
fûíame
, (filename), "%s/granted/%s.der",

278 
OPENSCEPDIR
, 
s˚p
->
å™sId
);

279 
x509_bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

280 
	`BIO_ªad_fûíame
(
x509_bio
, 
fûíame
);

281 
s˚p
->
˛õ¡˚π
 = 
	`d2i_X509_bio
(
x509_bio
, 
NULL
);

282 i‡(
s˚p
->
˛õ¡˚π
 =
NULL
) {

283 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot getÅhe client "

284 "˚πifiˇã fromÅhêfûêsy°em\n", 
__FILE__
,

285 
__LINE__
);

286 
îr
;

288 
	`BIO_‰ì
(
x509_bio
);

293 
dn
 = 
	`x509_to_ld≠
(
s˚p
, 
	`X509_gë_subje˘_«me
(s˚p->
˛õ¡˚π
));

294 i‡(
dn
 =
NULL
) {

295 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot convert DNÅo LDAP form\n",

296 
__FILE__
, 
__LINE__
);

297 
îr
;

301 i‡(
LDAP_SUCCESS
 !(
rc
 = 
	`ld≠_£¨ch_s
(
s˚p
->
l
.
ld≠
, 
dn
,

302 
LDAP_SCOPE_BASE
, "(obje˘˛ass=*)", 
NULL
, 1, &
ªsu…
))) {

304 
ocvÆs
[0] = "top";

305 
ocvÆs
[1] = "sCEPClient";

306 
ocvÆs
[2] = 
NULL
;

307 
ocmod
.
mod_›
 = 
LDAP_MOD_ADD
;

308 
ocmod
.
mod_ty≥
 = "objectclass";

309 
ocmod
.
mod_vÆues
 = 
ocvÆs
;

310 
mods
[0] = &
ocmod
;

311 
mods
[1] = 
NULL
;

312 i‡(
	`ld≠_add_s
(
s˚p
->
l
.
ld≠
, 
dn
, 
mods
Ë!
LDAP_SUCCESS
) {

313 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotáddÇewÇode %s\n",

314 
__FILE__
, 
__LINE__
, 
dn
);

315 
îr
;

317 i‡(
debug
)

318 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ádding skeletonÇode for "

319 "%s\n", 
__FILE__
, 
__LINE__
, 
dn
);

323 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
s˚p
->
˛õ¡˚π
),

324 
issuîDN
, (issuerDN));

325 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
s˚p
->
˛õ¡˚π
),

326 
subje˘DN
, (subjectDN));

327 
£rülNumbî
 = 
	`X509_gë_£rülNumbî
(
s˚p
->
˛õ¡˚π
);

328 
£rül
 = 
	`a¢1_to_°rög
(
£rülNumbî
);

329 i‡(
debug
) {

330 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeplacingáttributes in dn = %s:\n",

331 
__FILE__
, 
__LINE__
, 
dn
);

332 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:\tissuîDN=%s\n", 
__FILE__
,

333 
__LINE__
, 
issuîDN
);

334 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:\tsubje˘DN=%s\n", 
__FILE__
,

335 
__LINE__
, 
subje˘DN
);

336 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:\t£rülNumbî=%s\n", 
__FILE__
,

337 
__LINE__
, 
£rül
);

341 
chÆÀnge
 = 
	`gë_chÆÀnge
(
s˚p
);

342 i‡(
debug
)

343 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: got challengeÖassword: %s\n",

344 
__FILE__
, 
__LINE__
, (
chÆÀnge
) ? challenge: "<null>");

349 
£rvÆs
[0] = 
£rül
;

350 
£rvÆs
[1] = 
NULL
;

351 
£rmod
.
mod_›
 = 
LDAP_MOD_REPLACE
;

352 
£rmod
.
mod_ty≥
 = "serialNumber";

353 
£rmod
.
mod_vÆues
 = 
£rvÆs
;

355 
idnvÆs
[0] = 
issuîDN
;

356 
idnvÆs
[1] = 
NULL
;

357 
idnmod
.
mod_›
 = 
LDAP_MOD_REPLACE
;

358 
idnmod
.
mod_ty≥
 = "issuerDN";

359 
idnmod
.
mod_vÆues
 = 
idnvÆs
;

361 
sdnvÆs
[0] = 
subje˘DN
;

362 
sdnvÆs
[1] = 
NULL
;

363 
sdnmod
.
mod_›
 = 
LDAP_MOD_REPLACE
;

364 
sdnmod
.
mod_ty≥
 = "subjectDN";

365 
sdnmod
.
mod_vÆues
 = 
sdnvÆs
;

367 
˚πvÆs
[0] = &
˚πvÆ
;

368 
˚πvÆs
[1] = 
NULL
;

369 
˚πmod
.
mod_›
 = 
LDAP_MOD_REPLACE
 | 
LDAP_MOD_BVALUES
;

370 
˚πmod
.
mod_ty≥
 = "userCertificate;binary";

371 
˚πmod
.
mod_bvÆues
 = 
˚πvÆs
;

373 
bio_mem
 = 
	`BIO_√w
(
	`BIO_s_mem
());

374 i‡(!
	`i2d_X509_bio
(
bio_mem
, 
s˚p
->
˛õ¡˚π
)) {

375 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot write client certás DER\n",

376 
__FILE__
, 
__LINE__
);

377 
îr
;

379 
	`BIO_£t_Êags
(
bio_mem
, 
BIO_FLAGS_MEM_RDONLY
);

380 
˚πvÆ
.
bv_Àn
 = 
	`BIO_gë_mem_d©a
(
bio_mem
, &˚πvÆ.
bv_vÆ
);

381 
	`BIO_‰ì
(
bio_mem
);

383 
mods
[0] = &
£rmod
;

384 
mods
[1] = &
idnmod
;

385 
mods
[2] = &
sdnmod
;

386 
mods
[3] = &
˚πmod
;

387 i‡(
chÆÀnge
) {

388 
upvÆs
[0] = 
chÆÀnge
;

389 
upvÆs
[1] = 
NULL
;

390 
upmod
.
mod_›
 = 
LDAP_MOD_REPLACE
;

391 
upmod
.
mod_ty≥
 = "userPassword";

392 
upmod
.
mod_vÆues
 = 
upvÆs
;

393 
mods
[4] = &
upmod
;

395 
mods
[4] = 
NULL
;

397 
mods
[5] = 
NULL
;

399 i‡(
LDAP_SUCCESS
 !
	`ld≠_modify_s
(
s˚p
->
l
.
ld≠
, 
dn
, 
mods
)) {

400 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot update directory with cert "

401 "™dáâribuãs\n", 
__FILE__
, 
__LINE__
);

402 
îr
;

404 i‡(
debug
)

405 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificateándáttributes for "

406 "%†suc˚ssfuŒyádded\n", 
__FILE__
, 
__LINE__
, 
dn
);

409 
	`‰ì
(
˚πvÆ
.
bv_vÆ
);

410 
	`‰ì
(
£rül
);

411 
	`‰ì
(
dn
);

417 
îr
:

418 
	`ERR_¥öt_îr‹s
(
bio_îr
);

420 
	}
}

430 
	$ld≠_gë_˚π_comm⁄
(
s˚p_t
 *
s˚p
, *
fûãr
) {

431 
LDAPMesßge
 *
ªsu…
, *
e
;

432 
bîvÆ
 **
bv
;

433 
BIO
 *
bio
;

436 i‡(
LDAP_SUCCESS
 !
	`ld≠_£¨ch_s
(
s˚p
->
l
.
ld≠
, s˚p->l.
ld≠ba£
,

437 
LDAP_SCOPE_SUBTREE
, 
fûãr
, 
NULL
, 0, &
ªsu…
)) {

438 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot find certificate\n",

439 
__FILE__
, 
__LINE__
);

440 
îr
;

444 i‡(
	`ld≠_cou¡_íåõs
(
s˚p
->
l
.
ld≠
, 
ªsu…
) != 1) {

445 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: wrongÇumber ofÉntriesÑeturned\n",

446 
__FILE__
, 
__LINE__
);

447 
îr
;

451 
e
 = 
	`ld≠_fú°_íåy
(
s˚p
->
l
.
ld≠
, 
ªsu…
);

452 i‡(
debug
)

453 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñetrieving certificate from %s\n",

454 
__FILE__
, 
__LINE__
, 
	`ld≠_gë_dn
(
s˚p
->
l
.
ld≠
, 
e
));

458 
bv
 = 
	`ld≠_gë_vÆues_Àn
(
s˚p
->
l
.
ld≠
, 
e
, "userCertificate");

459 i‡(
bv
 =
NULL
) {

460 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áâribuãÇŸ found\n", 
__FILE__
,

461 
__LINE__
);

462 
îr
;

467 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

468 
	`BIO_wrôe
(
bio
, 
bv
[0]->
bv_vÆ
, bv[0]->
bv_Àn
);

469 
s˚p
->
˛õ¡˚π
 = 
	`d2i_X509_bio
(
bio
, 
NULL
);

470 i‡(
s˚p
->
˛õ¡˚π
 =
NULL
) {

471 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode certificate "

472 "ªåõved from LDAP dúe˘‹y\n", 
__FILE__
, 
__LINE__
);

473 
îr
;

475 
	`BIO_‰ì
(
bio
);

481 
îr
:

482 
	`ERR_¥öt_îr‹s
(
bio_îr
);

484 
	}
}

486 
	$ld≠_gë_˚π_‰om_issuî_™d_£rül
(
s˚p_t
 *
s˚p
,

487 
PKCS7_ISSUER_AND_SERIAL
 *
üs
) {

488 
issuîDN
[1024], 
fûãr
[2048];

489 *
£rül
 = 
NULL
;

490 
rc
;

493 i‡(
s˚p
->
l
.
ld≠
 =
NULL
)

494 
îr
;

499 
	`X509_NAME_⁄ñöe
(
üs
->
issuî
, 
issuîDN
, (issuerDN));

500 
£rül
 = 
	`a¢1_to_°rög
(
üs
->serial);

501 
	`¢¥ötf
(
fûãr
, (filter), "(&(objectclass=sCEPClient)"

503 
issuîDN
, 
£rül
);

504 i‡(
debug
)

505 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: search filter: %s\n",

506 
__FILE__
, 
__LINE__
, 
fûãr
);

509 
rc
 = 
	`ld≠_gë_˚π_comm⁄
(
s˚p
, 
fûãr
);

510 i‡(
rc
 < 0) {

511 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificateÑetrieval commonÖart "

512 "Áûed\n", 
__FILE__
, 
__LINE__
);

513 
îr
;

517 
	`‰ì
(
£rül
);

521 
îr
:

522 
	`ERR_¥öt_îr‹s
(
bio_îr
);

523 i‡(
£rül
Ë
	`‰ì
(serial);

525 
	}
}

527 
	$ld≠_gë_˚π_‰om_issuî_™d_subje˘
(
s˚p_t
 *
s˚p
,

528 
issuî_™d_subje˘_t
 *
üs
) {

529 
fûãr
[2048];

530 
issuîDN
[1024], 
subje˘DN
[1024];

531 
rc
;

534 i‡(
s˚p
->
l
.
ld≠
 =
NULL
)

535 
îr
;

538 
	`X509_NAME_⁄ñöe
(
üs
->
issuî
, 
issuîDN
, (issuerDN));

539 
	`X509_NAME_⁄ñöe
(
üs
->
subje˘
, 
subje˘DN
, (subjectDN));

540 
	`¢¥ötf
(
fûãr
, (filter), "(&objectClass=sCEPClient)"

542 
issuîDN
, 
subje˘DN
);

543 i‡(
debug
)

544 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: searching for certificate with "

545 "fûã∏'%s'\n", 
__FILE__
, 
__LINE__
, 
fûãr
);

548 
rc
 = 
	`ld≠_gë_˚π_comm⁄
(
s˚p
, 
fûãr
);

549 i‡(
rc
 < 0) {

550 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot get cert common\n",

551 
__FILE__
, 
__LINE__
);

552 
îr
;

557 
îr
:

558 
	`ERR_¥öt_îr‹s
(
bio_îr
);

560 
	}
}

	@rogi/openscep-0.4.2/lib/selfsigned.c

7 
	~<°dlib.h
>

8 
	~<°dio.h
>

9 
	~<c⁄fig.h
>

10 
	~<£lfsig√d.h
>

11 
	~<öô.h
>

12 
	~<s˚p.h
>

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/evp.h
>

15 
	~<›ís¶/≥m.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<›ís¶/x509.h
>

18 
	~<›ís¶/x509v3.h
>

20 
	$£lfsig√d
(
s˚p_t
 *
s˚p
) {

21 
X509
 *
ss
;

22 
X509V3_CTX
 
˘x
;

23 
EVP_PKEY
 *
tmpkey
;

24 
BIO
 *
out
;

25 
£lfsig√d«me
[1024];

26 *
p
;

27 
ASN1_INTEGER
 *
£rül
;

30 
ss
 = 
	`X509_√w
();

33 i‡(
	`X509_£t_vîsi⁄
(
ss
, 3) <= 0) {

34 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot set versionÇumber\n",

35 
__FILE__
, 
__LINE__
);

36 
îr
;

41 
p
 = (*)
s˚p
->
å™sId
;

42 i‡(
p
) {

43 
£rül
 = 
	`c2i_ASN1_INTEGER
(
NULL
, &
p
, 32);

44 i‡(!
£rül
) {

45 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot convertÅransid "

46 "ötÿ£rü»numbî\n", 
__FILE__
, 
__LINE__
);

47 
îr
;

49 i‡(
	`X509_£t_£rülNumbî
(
ss
, 
£rül
) <= 0) {

50 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot set serialÇumber\n",

51 
__FILE__
, 
__LINE__
);

52 
îr
;

54 i‡(
debug
)

55 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: serial setÅoÅrans id\n",

56 
__FILE__
, 
__LINE__
);

58 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: must haveÅrans idás serial\n",

59 
__FILE__
, 
__LINE__
);

60 
îr
;

64 i‡(0 >
	`X509_£t_issuî_«me
(
ss
,

65 
	`X509_REQ_gë_subje˘_«me
(
s˚p
->
˛õ¡ªq
))) {

66 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: së subje˘Çame\n", 
__FILE__
,

67 
__LINE__
);

68 
îr
;

72 i‡(0 =
	`X509_gmtime_adj
(
	`X509_gë_nŸBef‹e
(
ss
), 0)) {

73 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot setÇotBeforeÅime\n",

74 
__FILE__
, 
__LINE__
);

75 
îr
;

80 i‡(0 =
	`X509_gmtime_adj
(
	`X509_gë_nŸA·î
(
ss
), ()3600 * 24 * 30)) {

81 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot setÇotAfterÅime\n",

82 
__FILE__
, 
__LINE__
);

83 
îr
;

87 i‡(0 >
	`X509_£t_subje˘_«me
(
ss
,

88 
	`X509_REQ_gë_subje˘_«me
(
s˚p
->
˛õ¡ªq
))) {

89 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot set subjectÇame\n",

90 
__FILE__
, 
__LINE__
);

91 
îr
;

96 
tmpkey
 = 
	`X509_REQ_gë_pubkey
(
s˚p
->
˛õ¡ªq
);

97 i‡(
tmpkey
 =
NULL
) {

98 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: ownÖublic keyÇot found\n",

99 
__FILE__
, 
__LINE__
);

100 
îr
;

102 i‡(0 >
	`X509_£t_pubkey
(
ss
, 
tmpkey
)) {

103 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot setÖublic key\n",

104 
__FILE__
, 
__LINE__
);

105 
îr
;

109 
	`X509V3_£t_˘x
(&
˘x
, 
ss
, ss, 
NULL
, NULL, 0);

110 i‡(
debug
)

111 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: setting signing context failed\n",

112 
__FILE__
, 
__LINE__
);

117 i‡(0 >
	`X509_sign
(
ss
, 
s˚p
->
˛õ¡pkey
, 
	`EVP_md5
())) {

118 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: signing failed\n",

119 
__FILE__
, 
__LINE__
);

120 
îr
;

124 i‡(
debug
) {

125 
issuîdn
[1024], 
subje˘dn
[1024];

126 
X509_NAME
 *
n
;

127 i‡((
n
 = 
	`X509_gë_issuî_«me
(
ss
)Ë=
NULL
) {

128 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: issuer dnÇot found\n",

129 
__FILE__
, 
__LINE__
);

130 
îr
;

132 
	`X509_NAME_⁄ñöe
(
n
, 
issuîdn
, (issuerdn));

134 i‡((
n
 = 
	`X509_gë_subje˘_«me
(
ss
)Ë=
NULL
) {

135 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: subject dnÇot found\n",

136 
__FILE__
, 
__LINE__
);

137 
îr
;

139 
	`X509_NAME_⁄ñöe
(
n
, 
subje˘dn
, (subjectdn));

141 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: self signed certificate %s/%s "

142 "¥ï¨ed @%p\n", 
__FILE__
, 
__LINE__
,

143 
issuîdn
, 
subje˘dn
, 
ss
);

147 i‡((
debug
Ë&& (
tmµ©h
)) {

148 
out
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

149 
	`¢¥ötf
(
£lfsig√d«me
, (selfsignedname),

150 "%s/%d.£lfsig√d.dî", 
tmµ©h
, 
	`gëpid
());

151 
	`BIO_wrôe_fûíame
(
out
, 
£lfsig√d«me
);

152 
	`i2d_X509_bio
(
out
, 
ss
);

153 
	`BIO_‰ì
(
out
);

154 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: selfsigned certificate written "

155 "tÿ'%s'\n", 
__FILE__
, 
__LINE__
, 
£lfsig√d«me
);

159 
s˚p
->
£lfsig√d˚π
 = 
ss
;

163 
îr
:

164 
	`ERR_¥öt_îr‹s
(
bio_îr
);

166 
	}
}

	@rogi/openscep-0.4.2/lib/sigattr.c

8 
	~<sig©å.h
>

9 
	~<öô.h
>

10 
	~<›ís¶/îr.h
>

15 *
	$sig©å_°rög
(
s˚p_t
 *
s˚p
, *
©å«me
) {

16 
	`STACK_OF
(
X509_ATTRIBUTE
Ë*
sig_©åibs
;

17 
ASN1_OBJECT
 *
a¢1_obj
;

18 
ASN1_TYPE
 *
a¢1_ty≥
;

19 
X509_ATTRIBUTE
 *
©å
;

20 
Àn
, 
i
;

21 *
d©a
 = 
NULL
;

22 
s˚pmsg_t
 *
msg
;

24 i‡(
debug
)

25 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Üooking foráttribute '%s'\n",

26 
__FILE__
, 
__LINE__
, 
©å«me
);

29 i‡(
s˚p
->
˛õ¡
)

30 
msg
 = &
s˚p
->
ª∂y
;

32 
msg
 = &
s˚p
->
ªque°
;

35 
a¢1_obj
 = 
	`OBJ_nid2obj
(
	`OBJ_¢2nid
(
©å«me
));

36 
a¢1_ty≥
 = 
NULL
;

39 i‡(
NULL
 =(
sig_©åibs
 = 
	`PKCS7_gë_sig√d_©åibuãs
(
msg
->
si
))) {

40 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço signedáttributes\n",

41 
__FILE__
, 
__LINE__
);

42  
NULL
;

46 
i
 = 0; i < 
	`sk_X509_ATTRIBUTE_num
(
sig_©åibs
); i++) {

47 
©å
 = 
	`sk_X509_ATTRIBUTE_vÆue
(
sig_©åibs
, 
i
);

48 i‡(
	`OBJ_cmp
(
©å
->
obje˘
, 
a¢1_obj
) == 0) {

49 i‡(
debug
)

50 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: foundáttribute\n",

51 
__FILE__
, 
__LINE__
);

52 
a¢1_ty≥
 = 
	`sk_ASN1_TYPE_vÆue
(
©å
->
vÆue
.
£t
, 0);

58 i‡(
a¢1_ty≥
 =
NULL
) {

59 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot findáttribute\n",

60 
__FILE__
, 
__LINE__
);

61 
îr
;

63 i‡(
	`ASN1_TYPE_gë
(
a¢1_ty≥
Ë!
V_ASN1_PRINTABLESTRING
) {

64 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áttribute has wrongÅype\n",

65 
__FILE__
, 
__LINE__
);

66 
îr
;

69 i‡(
debug
)

70 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: foundáttribute '%s'\n",

71 
__FILE__
, 
__LINE__
, 
©å«me
);

73 
Àn
 = 
	`ASN1_STRING_Àngth
(
a¢1_ty≥
->
vÆue
.
a¢1_°rög
);

74 
d©a
 = (*)
	`mÆloc
(1 + 
Àn
);

75 
	`mem˝y
(
d©a
, 
	`ASN1_STRING_d©a
(
a¢1_ty≥
->
vÆue
.
a¢1_°rög
), 
Àn
);

76 
d©a
[
Àn
] = '\0';

77 i‡(
debug
)

78 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: value of %d bytesÑetrieved\n",

79 
__FILE__
, 
__LINE__
, 
Àn
);

82  
d©a
;

83 
îr
:

84 
	`ERR_¥öt_îr‹s
(
bio_îr
);

85  
NULL
;

86 
	}
}

91 *
	$sig©å_o˘ë
(
s˚p_t
 *
s˚p
, *
©å«me
, *
Àn
) {

92 
ASN1_OCTET_STRING
 *
a¢1
;

93 *
d©a
 = 
NULL
;

96 
a¢1
 = 
	`sig©å_a¢1_o˘ë
(
s˚p
, 
©å«me
);

97 i‡(
a¢1
 =
NULL
)

98  
NULL
;

99 i‡(
debug
)

100 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: goánásn1 string for %s\n",

101 
__FILE__
, 
__LINE__
);

104 *
Àn
 = 
	`ASN1_STRING_Àngth
(
a¢1
);

105 
d©a
 = (*)
	`mÆloc
(*
Àn
);

106 
	`mem˝y
(
d©a
, 
	`ASN1_STRING_d©a
(
a¢1
), *
Àn
);

107 i‡(
debug
)

108 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:állocated %dÇew bytes for value\n",

109 
__FILE__
, 
__LINE__
, *
Àn
);

112  
d©a
;

113 
	}
}

116 
ASN1_OCTET_STRING
 *
	$sig©å_a¢1_o˘ë
(
s˚p_t
 *
s˚p
, *
©å«me
) {

117 
	`STACK_OF
(
X509_ATTRIBUTE
Ë*
sig_©åibs
;

118 
ASN1_OBJECT
 *
a¢1_obj
;

119 
ASN1_TYPE
 *
a¢1_ty≥
;

120 
X509_ATTRIBUTE
 *
©å
;

121 
i
;

122 
s˚pmsg_t
 *
msg
;

124 i‡(
debug
)

125 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Üooking foráttribute '%s'\n",

126 
__FILE__
, 
__LINE__
, 
©å«me
);

129 i‡(
s˚p
->
˛õ¡
)

130 
msg
 = &
s˚p
->
ª∂y
;

132 
msg
 = &
s˚p
->
ªque°
;

135 
a¢1_obj
 = 
	`OBJ_nid2obj
(
	`OBJ_¢2nid
(
©å«me
));

136 
a¢1_ty≥
 = 
NULL
;

139 i‡(
NULL
 =(
sig_©åibs
 = 
	`PKCS7_gë_sig√d_©åibuãs
(
msg
->
si
))) {

140 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: signedáttributesÇot found\n",

141 
__FILE__
, 
__LINE__
);

142  
NULL
;

146 
i
 = 0; i < 
	`sk_X509_ATTRIBUTE_num
(
sig_©åibs
); i++) {

147 
©å
 = 
	`sk_X509_ATTRIBUTE_vÆue
(
sig_©åibs
, 
i
);

148 i‡(
	`OBJ_cmp
(
©å
->
obje˘
, 
a¢1_obj
) == 0) {

149 i‡((!
©å
->
£t
Ë|| (
	`sk_ASN1_TYPE_num
◊âr->
vÆue
.set)

151 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áttr hasÇo val\n",

152 
__FILE__
, 
__LINE__
);

153 
îr
;

155 i‡(
debug
)

156 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: found matching "

157 "©åibuã wôh %d vÆues\n", 
__FILE__
,

158 
__LINE__
,

159 
	`sk_ASN1_TYPE_num
(
©å
->
vÆue
.
£t
));

160 
a¢1_ty≥
 = 
	`sk_ASN1_TYPE_vÆue
(
©å
->
vÆue
.
£t
, 0);

161 i‡(
debug
)

162 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åype found: %p\n",

163 
__FILE__
, 
__LINE__
, 
a¢1_ty≥
);

169 i‡(
debug
)

170 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: checking foráttribute\n",

171 
__FILE__
, 
__LINE__
);

172 i‡(
a¢1_ty≥
 =
NULL
) {

173 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áttribute hasÇoÅype\n",

174 
__FILE__
, 
__LINE__
);

175 
îr
;

177 i‡(
	`ASN1_TYPE_gë
(
a¢1_ty≥
Ë!
V_ASN1_OCTET_STRING
) {

178 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áttribute has wrongÅype\n",

179 
__FILE__
, 
__LINE__
);

180 
îr
;

182 i‡(
debug
)

183 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: foundáttribute '%s'\n",

184 
__FILE__
, 
__LINE__
, 
©å«me
);

188  
a¢1_ty≥
->
vÆue
.
o˘ë_°rög
;

191 
îr
:

192 i‡(
debug
)

193 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áttributeÇot found orÉrror\n",

194 
__FILE__
, 
__LINE__
);

195 
	`ERR_¥öt_îr‹s
(
bio_îr
);

196  
NULL
;

197 
	}
}

	@rogi/openscep-0.4.2/lib/spki2file.c

9 
	~<•ki2fûe.h
>

10 
	~<öô.h
>

11 
	~<hâp.h
>

13 
	$•ki2fûe
(*
fûíame
, 
X509_NAME
 *
«me
,

14 *
•kid©a
, 
•kûígth
) {

15 
BIO
 *
membio
, *
b64
, *
outbio
, *
outfûe
;

16 *
d©a
 = 
NULL
, *
uæd©a
;

17 
Àngth
;

18 
n
, 
i
, 
rc
 = -1;

21 
outfûe
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

22 i‡(
	`BIO_wrôe_fûíame
(
outfûe
, 
fûíame
) < 0) {

23 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open file '%s'\n",

24 
__FILE__
, 
__LINE__
, 
fûíame
);

25 
îr
;

30 
n
 = 
	`X509_NAME_íåy_cou¡
(
«me
);

31 
i
 = 0; i < 
n
; i++) {

32 
X509_NAME_ENTRY
 *
√
;

33 
ASN1_OBJECT
 *
o
;

34 
ASN1_STRING
 *
as
;

35 
√
 = 
	`X509_NAME_gë_íåy
(
«me
, 
i
);

36 
o
 = 
	`X509_NAME_ENTRY_gë_obje˘
(
√
);

37 
as
 = 
	`X509_NAME_ENTRY_gë_d©a
(
√
);

38 
	`BIO_¥ötf
(
outfûe
, "%s=%*.*s\n", 
	`OBJ_nid2 
(
	`OBJ_obj2nid
(
o
)),

39 
as
->
Àngth
,ás->Àngth,ás->
d©a
);

40 i‡(
debug
)

41 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áddingáttribute "

42 "%s=%*.*s\n", 
__FILE__
, 
__LINE__
,

43 
	`OBJ_nid2 
(
	`OBJ_obj2nid
(
o
)),

44 
as
->
Àngth
,ás->Àngth,ás->
d©a
);

48 
membio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

49 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

50 
	`BIO_£t_Êags
(
b64
, 
BIO_FLAGS_BASE64_NO_NL
);

51 
outbio
 = 
	`BIO_push
(
b64
, 
membio
);

52 
	`BIO_wrôe
(
outbio
, 
•kid©a
, 
•kûígth
);

53 
	`BIO_Êush
(
outbio
);

54 
	`BIO_£t_Êags
(
membio
, 
BIO_FLAGS_MEM_RDONLY
);

55 
Àngth
 = 
	`BIO_gë_mem_d©a
(
membio
, &
d©a
);

56 i‡(
debug
)

57 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: written %d base64 bytes\n",

58 
__FILE__
, 
__LINE__
, 
Àngth
);

61 
	`BIO_¥ötf
(
outfûe
, "SPKAC=%s\n", 
d©a
);

62 
	`‰ì
(
d©a
);

65 
rc
 = 0;

68 
îr
:

69 
	`BIO_‰ì
(
outfûe
);

70  
rc
;

71 
	}
}

	@rogi/openscep-0.4.2/lib/transcheck.c

8 
	~<å™scheck.h
>

9 
	~<c⁄fig.h
>

10 
	~<öô.h
>

11 
	~<›ís¶/bio.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

14 
	~<sy¶og.h
>

19 
	$å™scheck_gø¡ed
(
s˚p_t
 *
s˚p
) {

20 
fûíame
[1024];

21 
°©
 
sb
;

25 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/gø¡ed/%s.öfo", 
OPENSCEPDIR
,

26 
s˚p
->
å™sId
);

27 i‡(
	`°©
(
fûíame
, &
sb
) == 0) {

28 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest forÅhisÅransIDálready "

29 "gø¡ed\n", 
__FILE__
, 
__LINE__
);

30 
	`sy¶og
(
LOG_INFO
, "%s:%d:Ñequest forÅhisÅransidálready "

31 "gø¡ed", 
__FILE__
, 
__LINE__
);

35 
	}
}

40 
	$å™scheck_≥ndög
(
s˚p_t
 *
s˚p
) {

41 
fûíame
[1024];

42 
°©
 
sb
;

46 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/≥ndög/%s.öfo", 
OPENSCEPDIR
,

47 
s˚p
->
å™sId
);

48 i‡(
	`°©
(
fûíame
, &
sb
) == 0) {

49 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:álreadyáÑequest with same id: "

50 "'%s'\n", 
__FILE__
, 
__LINE__
, 
s˚p
->
å™sId
);

51 
	`sy¶og
(
LOG_INFO
, "%s:%d: PKCSReq forÖending certificate",

52 
__FILE__
, 
__LINE__
);

57 
	}
}

62 
	$å™scheck_ªje˘ed
(
s˚p_t
 *
s˚p
) {

63 
fûíame
[1024];

64 
°©
 
sb
;

68 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/ªje˘ed/%s.öfo", 
OPENSCEPDIR
,

69 
s˚p
->
å™sId
);

70 i‡(
	`°©
(
fûíame
, &
sb
) == 0) {

71 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:álreadyáÑequest with same id: "

72 "'%s'\n", 
__FILE__
, 
__LINE__
, 
s˚p
->
å™sId
);

73 
	`sy¶og
(
LOG_INFO
, "%s:%d: PKCSReq forÑejectd certificate",

74 
__FILE__
, 
__LINE__
);

79 
	}
}

	@rogi/openscep-0.4.2/lib/v2request.c

8 
	~<v2ªque°.h
>

9 
	~<å™scheck.h
>

10 
	~<≥ndög.h
>

11 
	~<goodª∂y.h
>

12 
	~<badª∂y.h
>

13 
	~<öô.h
>

15 
	$v2ªque°
(
s˚p_t
 *
s˚p
) {

16 i‡(
debug
)

17 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Örocessing v2Ñequest\n",

18 
__FILE__
, 
__LINE__
);

22 i‡(
	`å™scheck_gø¡ed
(
s˚p
)) {

23 i‡(
debug
)

24 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sending CERTÑeply\n",

25 
__FILE__
, 
__LINE__
);

26  
	`goodª∂y
(
s˚p
, 1);

29 i‡(
	`å™scheck_≥ndög
(
s˚p
)) {

30 i‡(
debug
)

31 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sendingÖendingÑeply\n",

32 
__FILE__
, 
__LINE__
);

33  
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_PENDING
);

36 i‡(
	`å™scheck_ªje˘ed
(
s˚p
)) {

37 i‡(
debug
)

38 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sendingÑejectedÑeply\n",

39 
__FILE__
, 
__LINE__
);

40  
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_FAILURE
);

45 i‡(
	`¸óã_≥ndög
(
s˚p
) < 0) {

46 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo createÖending\n",

47 
__FILE__
, 
__LINE__
);

48 
îr
;

52 i‡((
s˚p
->
autom©ic
Ë&& (s˚p->
l
.
ld≠
 !
NULL
)) {

53 i‡(
debug
)

54 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomaticÉnrollment in "

55 "ef„˘\n", 
__FILE__
, 
__LINE__
);

57 i‡(
debug
)

58 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:áutomaticÉnrollment denied\n",

59 
__FILE__
, 
__LINE__
);

62 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_PENDING
);

65 
îr
:

66 
	`badª∂y
(
s˚p
, 
SCEP_PKISTATUS_FAILURE
);

68 
	}
}

	@rogi/openscep-0.4.2/libltdl/acconfig.h

6 #unde‡
HAVE_LIBDL


9 #unde‡
HAVE_DLD


12 #unde‡
HAVE_SHL_LOAD


	@rogi/openscep-0.4.2/libltdl/ltdl.c

27 
	#_LTDL_COMPILE_


	)

29 #i‡
HAVE_CONFIG_H


30 
	~<c⁄fig.h
>

33 #i‡
HAVE_STRING_H


34 
	~<°rög.h
>

37 #i‡
HAVE_STRINGS_H


38 
	~<°rögs.h
>

41 #i‡
HAVE_CTYPE_H


42 
	~<˘y≥.h
>

45 #i‡
HAVE_MALLOC_H


46 
	~<mÆloc.h
>

49 #i‡
HAVE_MEMORY_H


50 
	~<mem‹y.h
>

53 #i‡
HAVE_STDLIB_H


54 
	~<°dlib.h
>

57 #i‡
HAVE_STDIO_H


58 
	~<°dio.h
>

61 
	~"…dl.h
"

64 #i‚de‡
LTDL_FILENAME_MAX


65 
	#LTDL_FILENAME_MAX
 1024

	)

68 #unde‡
LTDL_READTEXT_MODE


70 #ifde‡
_WIN32


71 
	#LTDL_READTEXT_MODE
 "π"

	)

73 
	#LTDL_READTEXT_MODE
 "r"

	)

76 #unde‡
LTDL_SYMBOL_LENGTH


78 
	#LTDL_SYMBOL_LENGTH
 128

	)

80 #unde‡
LTDL_SYMBOL_OVERHEAD


82 
	#LTDL_SYMBOL_OVERHEAD
 5

	)

84 c⁄° 
	gobjdú
[] = 
LTDL_OBJDIR
;

85 #ifdef 
LTDL_SHLIB_EXT


86 c⁄° 
	gshlib_ext
[] = 
LTDL_SHLIB_EXT
;

89 c⁄° 
	gunknown_îr‹
[] = "unknownÉrror";

90 c⁄° 
	gdl›í_nŸ_suµ‹ãd_îr‹
[] = "dlopen supportÇotávailable";

91 c⁄° 
	gfûe_nŸ_found_îr‹
[] = "fileÇot found";

92 c⁄° 
	gno_symbﬁs_îr‹
[] = "no symbols defined";

93 c⁄° 
	gˇ¬Ÿ_›í_îr‹
[] = "can't openÅhe module";

94 c⁄° 
	gˇ¬Ÿ_˛o£_îr‹
[] = "can't closeÅhe module";

95 c⁄° 
	gsymbﬁ_îr‹
[] = "symbolÇot found";

96 c⁄° 
	gmem‹y_îr‹
[] = "notÉnough memory";

97 c⁄° 
	gövÆid_h™dÀ_îr‹
[] = "invalid handle";

98 c⁄° 
	gbuf„r_ovîÊow_îr‹
[] = "internal buffer overflow";

99 c⁄° 
	gshutdown_îr‹
[] = "libraryálready shutdown";

101 #i‚de‡
HAVE_PRELOADED_SYMBOLS


103 c⁄° 
…_dlsymli°
 
	g…_¥ñﬂded_symbﬁs
[1] = { { 0, 0 } };

106 c⁄° *
	gœ°_îr‹
 = 0;

108 
	$…_±r_t
 (*
…_dlmÆloc
Ë
	`LTDL_PARAMS
((
size_t
 
size
)Ë(
	$…_±r_t
(*)
	`LTDL_PARAMS
((
size_t
)))
mÆloc
;

109 (*
…_dl‰ì
Ë
	`LTDL_PARAMS
((
…_±r_t
 
±r
)Ë((*)LTDL_PARAMS(÷t_±r_t)))
‰ì
;

111 
	s…_d…y≥_t
 {

112 
…_d…y≥_t
 *
√xt
;

113 c⁄° *
sym_¥efix
;

114 (*
mod_öô
Ë
	`LTDL_PARAMS
(());

115 (*
mod_exô
Ë
	`LTDL_PARAMS
(());

116 (*
lib_›í
Ë
	`LTDL_PARAMS
((
…_dlh™dÀ
 
h™dÀ
, c⁄° *
fûíame
));

117 (*
lib_˛o£
Ë
	`LTDL_PARAMS
((
…_dlh™dÀ
 
h™dÀ
));

118 
	`…_±r_t
 (*
föd_sym
Ë
	`LTDL_PARAMS
((
…_dlh™dÀ
 
h™dÀ
, c⁄° *
symbﬁ
));

119 } 
	t…_d…y≥_t
;

121 
	#LTDL_TYPE_TOP
 0

	)

123 
	s…_dlh™dÀ_t
 {

124 
…_dlh™dÀ_t
 *
√xt
;

125 
…_d…y≥_t
 *
ty≥
;

126 *
fûíame
;

127 *
«me
;

128 
ußge
;

129 
dïcou¡
;

130 
…_dlh™dÀ
 *
dïlibs
;

131 
…_±r_t
 
h™dÀ
;

132 
…_±r_t
 
sy°em
;

133 } 
	t…_dlh™dÀ_t
;

135 #unde‡
°rdup


136 
	#°rdup
 
x°rdup


	)

138 
ölöe
 *

139 
	$°rdup
(
°r
)

140 c⁄° *
°r
;

142 *
tmp
;

144 i‡(!
°r
)

146 
tmp
 = (*Ë
	`…_dlmÆloc
(
	`°æí
(
°r
)+1);

147 i‡(
tmp
)

148 
	`°r˝y
(
tmp
, 
°r
);

149  
tmp
;

150 
	}
}

152 #i‡! 
HAVE_STRCHR


154 #i‡
HAVE_INDEX


156 
	#°rchr
 
ödex


	)

160 
	#°rchr
 
x°rchr


	)

162 
ölöe
 const *

163 
	$°rchr
(
°r
, 
ch
)

164 c⁄° *
°r
;

165 
ch
;

167 c⁄° *
p
;

169 
p
 = 
°r
; *∞!()
ch
 && *p != '\0';Ö++)

172  (*
p
 =()
ch
) ?Ö : 0;

173 
	}
}

179 #i‡! 
HAVE_STRRCHR


181 #i‡
HAVE_RINDEX


183 
	#°ºchr
 
rödex


	)

187 
	#°ºchr
 
x°ºchr


	)

189 
ölöe
 const *

190 
	$°ºchr
(
°r
, 
ch
)

191 c⁄° *
°r
;

192 
ch
;

194 c⁄° *
p
;

196 
p
 = 
°r
; *p != '\0';Ö++)

199 *
p
 !()
ch
 &&Ö >
°r
)

200 
p
--;

202  (*
p
 =()
ch
) ?Ö : 0;

203 
	}
}

209 #i‡
HAVE_LIBDL


213 #i‡
HAVE_DLFCN_H


214 
	~<dlf˙.h
>

217 #ifde‡
RTLD_GLOBAL


218 
	#LTDL_GLOBAL
 
RTLD_GLOBAL


	)

220 #ifde‡
DL_GLOBAL


221 
	#LTDL_GLOBAL
 
DL_GLOBAL


	)

223 
	#LTDL_GLOBAL
 0

	)

229 #i‚de‡
LTDL_LAZY_OR_NOW


230 #ifde‡
RTLD_LAZY


231 
	#LTDL_LAZY_OR_NOW
 
RTLD_LAZY


	)

233 #ifde‡
DL_LAZY


234 
	#LTDL_LAZY_OR_NOW
 
DL_LAZY


	)

236 #ifde‡
RTLD_NOW


237 
	#LTDL_LAZY_OR_NOW
 
RTLD_NOW


	)

239 #ifde‡
DL_NOW


240 
	#LTDL_LAZY_OR_NOW
 
DL_NOW


	)

242 
	#LTDL_LAZY_OR_NOW
 0

	)

250 
sys_dl_öô
 
LTDL_PARAMS
(())

256 
sys_dl_exô
 
LTDL_PARAMS
(())

262 
	$sys_dl_›í
 (
h™dÀ
, 
fûíame
)

263 
…_dlh™dÀ
 
h™dÀ
;

264 c⁄° *
fûíame
;

266 
h™dÀ
->h™dÀ = 
	`dl›í
(
fûíame
, 
LTDL_GLOBAL
 | 
LTDL_LAZY_OR_NOW
);

267 i‡(!
h™dÀ
->handle) {

268 #i‡
HAVE_DLERROR


269 
œ°_îr‹
 = 
	`dÀº‹
();

271 
œ°_îr‹
 = 
ˇ¬Ÿ_›í_îr‹
;

276 
	}
}

279 
	$sys_dl_˛o£
 (
h™dÀ
)

280 
…_dlh™dÀ
 
h™dÀ
;

282 i‡(
	`dl˛o£
(
h™dÀ
->handle) != 0) {

283 #i‡
HAVE_DLERROR


284 
œ°_îr‹
 = 
	`dÀº‹
();

286 
œ°_îr‹
 = 
ˇ¬Ÿ_˛o£_îr‹
;

291 
	}
}

293 
…_±r_t


294 
	$sys_dl_sym
 (
h™dÀ
, 
symbﬁ
)

295 
…_dlh™dÀ
 
h™dÀ
;

296 c⁄° *
symbﬁ
;

298 
…_±r_t
 
addªss
 = 
	`dlsym
(
h™dÀ
->h™dÀ, 
symbﬁ
);

300 i‡(!
addªss
)

301 #i‡
HAVE_DLERROR


302 
œ°_îr‹
 = 
	`dÀº‹
();

304 
œ°_îr‹
 = 
symbﬁ_îr‹
;

306  
addªss
;

307 
	}
}

310 
	g…_d…y≥_t


311 #ifde‡
NEED_USCORE


312 
	gsys_dl
 = { 
LTDL_TYPE_TOP
, "_", 
sys_dl_öô
, 
sys_dl_exô
,

313 
sys_dl_›í
, 
sys_dl_˛o£
, 
sys_dl_sym
 };

315 
	gsys_dl
 = { 
LTDL_TYPE_TOP
, 0, 
sys_dl_öô
, 
sys_dl_exô
,

316 
sys_dl_›í
, 
sys_dl_˛o£
, 
sys_dl_sym
 };

319 #unde‡
LTDL_TYPE_TOP


320 
	#LTDL_TYPE_TOP
 &
sys_dl


	)

324 #i‡
HAVE_SHL_LOAD


328 #ifde‡
HAVE_DL_H


329 
	~<dl.h
>

358 #i‚def 
DYNAMIC_PATH


359 
	#DYNAMIC_PATH
 0

	)

361 #i‚def 
BIND_RESTRICTED


362 
	#BIND_RESTRICTED
 0

	)

365 
	#LTDL_BIND_FLAGS
 (
BIND_IMMEDIATE
 | 
BIND_NONFATAL
 | 
DYNAMIC_PATH
)

	)

368 
sys_shl_öô
 
LTDL_PARAMS
(())

374 
sys_shl_exô
 
LTDL_PARAMS
(())

380 
	$sys_shl_›í
 (
h™dÀ
, 
fûíame
)

381 
…_dlh™dÀ
 
h™dÀ
;

382 c⁄° *
fûíame
;

384 
h™dÀ
->h™dÀ = 
	`shl_lﬂd
(
fûíame
, 
LTDL_BIND_FLAGS
, 0L);

385 i‡(!
h™dÀ
->handle) {

386 
œ°_îr‹
 = 
ˇ¬Ÿ_›í_îr‹
;

390 
	}
}

393 
	$sys_shl_˛o£
 (
h™dÀ
)

394 
…_dlh™dÀ
 
h™dÀ
;

396 i‡(
	`shl_u∆ﬂd
((
shl_t
Ë(
h™dÀ
->handle)) != 0) {

397 
œ°_îr‹
 = 
ˇ¬Ÿ_˛o£_îr‹
;

401 
	}
}

403 
…_±r_t


404 
	$sys_shl_sym
 (
h™dÀ
, 
symbﬁ
)

405 
…_dlh™dÀ
 
h™dÀ
;

406 c⁄° *
symbﬁ
;

408 
…_±r_t
 
addªss
;

410 i‡(
h™dÀ
->h™dÀ && 
	`shl_födsym
((
shl_t
*) &(handle->handle),

411 
symbﬁ
, 
TYPE_UNDEFINED
, &
addªss
) == 0)

412 i‡(
addªss
)

413  
addªss
;

414 
œ°_îr‹
 = 
symbﬁ_îr‹
;

416 
	}
}

419 
…_d…y≥_t


420 
	gsys_shl
 = { 
LTDL_TYPE_TOP
, 0, 
sys_shl_öô
, 
sys_shl_exô
,

421 
sys_shl_›í
, 
sys_shl_˛o£
, 
sys_shl_sym
 };

423 #unde‡
LTDL_TYPE_TOP


424 
	#LTDL_TYPE_TOP
 &
sys_shl


	)

428 #i‡
HAVE_DLD


432 #i‡
HAVE_DLD_H


433 
	~<dld.h
>

437 
sys_dld_öô
 
LTDL_PARAMS
(())

443 
sys_dld_exô
 
LTDL_PARAMS
(())

449 
	$sys_dld_›í
 (
h™dÀ
, 
fûíame
)

450 
…_dlh™dÀ
 
h™dÀ
;

451 c⁄° *
fûíame
;

453 
h™dÀ
->h™dÀ = 
	`°rdup
(
fûíame
);

454 i‡(!
h™dÀ
->handle) {

455 
œ°_îr‹
 = 
mem‹y_îr‹
;

458 i‡(
	`dld_lök
(
fûíame
) != 0) {

459 
œ°_îr‹
 = 
ˇ¬Ÿ_›í_îr‹
;

460 
	`…_dl‰ì
(
h™dÀ
->handle);

464 
	}
}

467 
	$sys_dld_˛o£
 (
h™dÀ
)

468 
…_dlh™dÀ
 
h™dÀ
;

470 i‡(
	`dld_u∆ök_by_fûe
((*)(
h™dÀ
->handle), 1) != 0) {

471 
œ°_îr‹
 = 
ˇ¬Ÿ_˛o£_îr‹
;

474 
	`…_dl‰ì
(
h™dÀ
->
fûíame
);

476 
	}
}

478 
…_±r_t


479 
	$sys_dld_sym
 (
h™dÀ
, 
symbﬁ
)

480 
…_dlh™dÀ
 
h™dÀ
;

481 c⁄° *
symbﬁ
;

483 
…_±r_t
 
addªss
 = 
	`dld_gë_func
(
symbﬁ
);

485 i‡(!
addªss
)

486 
œ°_îr‹
 = 
symbﬁ_îr‹
;

487  
addªss
;

488 
	}
}

491 
…_d…y≥_t


492 
	gsys_dld
 = { 
LTDL_TYPE_TOP
, 0, 
sys_dld_öô
, 
sys_dld_exô
,

493 
sys_dld_›í
, 
sys_dld_˛o£
, 
sys_dld_sym
 };

495 #unde‡
LTDL_TYPE_TOP


496 
	#LTDL_TYPE_TOP
 &
sys_dld


	)

500 #ifde‡
_WIN32


504 
	~<wödows.h
>

507 
sys_wŒ_öô
 
LTDL_PARAMS
(())

513 
sys_wŒ_exô
 
LTDL_PARAMS
(())

519 
…_dlh™dÀ
 
	gh™dÀs
;

522 
	$sys_wŒ_›í
 (
h™dÀ
, 
fûíame
)

523 
…_dlh™dÀ
 
h™dÀ
;

524 c⁄° *
fûíame
;

526 
…_dlh™dÀ
 
cur
;

527 *
£¨ch«me
 = 
NULL
;

528 *
ext
 = 
	`°ºchr
(
fûíame
, '.');

530 i‡(
ext
) {

532 
£¨ch«me
 = 
	`°rdup
(
fûíame
);

536 
£¨ch«me
 = (*)
	`…_dlmÆloc
(2+ 
	`°æí
(
fûíame
));

537 
	`°r˝y
(
£¨ch«me
, 
fûíame
);

538 
	`°rˇt
(
£¨ch«me
, ".");

541 
h™dÀ
->h™dÀ = 
	`LﬂdLibøry
(
£¨ch«me
);

542 
	`…_dl‰ì
(
£¨ch«me
);

552 
cur
 = 
h™dÀs
;

553 
cur
) {

554 i‡(!
cur
->
h™dÀ
) {

555 
cur
 = 0;

558 i‡(
cur
->
h™dÀ
 == handle->handle)

560 
cur
 = cur->
√xt
;

563 i‡(
cur
 || !
h™dÀ
->handle) {

564 
œ°_îr‹
 = 
ˇ¬Ÿ_›í_îr‹
;

569 
	}
}

572 
	$sys_wŒ_˛o£
 (
h™dÀ
)

573 
…_dlh™dÀ
 
h™dÀ
;

575 i‡(
	`FªeLibøry
(
h™dÀ
->handle) == 0) {

576 
œ°_îr‹
 = 
ˇ¬Ÿ_˛o£_îr‹
;

580 
	}
}

582 
…_±r_t


583 
	$sys_wŒ_sym
 (
h™dÀ
, 
symbﬁ
)

584 
…_dlh™dÀ
 
h™dÀ
;

585 c⁄° *
symbﬁ
;

587 
…_±r_t
 
addªss
 = 
	`GëProcAddªss
(
h™dÀ
->h™dÀ, 
symbﬁ
);

589 i‡(!
addªss
)

590 
œ°_îr‹
 = 
symbﬁ_îr‹
;

591  
addªss
;

592 
	}
}

595 
…_d…y≥_t


596 
	gsys_wŒ
 = { 
LTDL_TYPE_TOP
, 0, 
sys_wŒ_öô
, 
sys_wŒ_exô
,

597 
sys_wŒ_›í
, 
sys_wŒ_˛o£
, 
sys_wŒ_sym
 };

599 #unde‡
LTDL_TYPE_TOP


600 
	#LTDL_TYPE_TOP
 &
sys_wŒ


	)

604 #ifde‡
__BEOS__


608 
	~<kî√l/image.h
>

611 
sys_bedl_öô
 
LTDL_PARAMS
(())

617 
sys_bedl_exô
 
LTDL_PARAMS
(())

623 
	$sys_bedl_›í
 (
h™dÀ
, 
fûíame
)

624 
…_dlh™dÀ
 
h™dÀ
;

625 c⁄° *
fûíame
;

627 
image_id
 
image
 = 0;

629 i‡(
fûíame
) {

630 
image
 = 
	`lﬂd_add_⁄
(
fûíame
);

632 
image_öfo
 
öfo
;

633 
öt32
 
cookõ
 = 0;

634 i‡(
	`gë_√xt_image_öfo
(0, &
cookõ
, &
öfo
Ë=
B_OK
)

635 
image
 = 
	`lﬂd_add_⁄
(
öfo
.
«me
);

637 i‡(
image
 <= 0) {

638 
œ°_îr‹
 = 
ˇ¬Ÿ_›í_îr‹
;

641 
h™dÀ
->h™dÀ = (*Ë
image
;

643 
	}
}

646 
	$sys_bedl_˛o£
 (
h™dÀ
)

647 
…_dlh™dÀ
 
h™dÀ
;

649 i‡(
	`u∆ﬂd_add_⁄
((
image_id
)
h™dÀ
->h™dÀË!
B_OK
) {

650 
œ°_îr‹
 = 
ˇ¬Ÿ_˛o£_îr‹
;

654 
	}
}

656 
…_±r_t


657 
	$sys_bedl_sym
 (
h™dÀ
, 
symbﬁ
)

658 
…_dlh™dÀ
 
h™dÀ
;

659 c⁄° *
symbﬁ
;

661 
…_±r_t
 
addªss
 = 0;

662 
image_id
 
image
 = (image_id)
h™dÀ
->handle;

664 i‡(
	`gë_image_symbﬁ
(
image
, 
symbﬁ
, 
B_SYMBOL_TYPE_ANY
,

665 &
addªss
Ë!
B_OK
) {

666 
œ°_îr‹
 = 
symbﬁ_îr‹
;

669  
addªss
;

670 
	}
}

673 
…_d…y≥_t


674 
	gsys_bedl
 = { 
LTDL_TYPE_TOP
, 0, 
sys_bedl_öô
, 
sys_bedl_exô
,

675 
sys_bedl_›í
, 
sys_bedl_˛o£
, 
sys_bedl_sym
 };

677 #unde‡
LTDL_TYPE_TOP


678 
	#LTDL_TYPE_TOP
 &
sys_bedl


	)

684 
	s…_dlsymli°s_t
 {

685 
…_dlsymli°s_t
 *
	m√xt
;

686 c⁄° 
…_dlsymli°
 *
	msyms
;

687 } 
	t…_dlsymli°s_t
;

689 c⁄° 
…_dlsymli°
 *
	gdeÁu…_¥ñﬂded_symbﬁs
 = 0;

690 
…_dlsymli°s_t
 *
	g¥ñﬂded_symbﬁs
 = 0;

693 
¥esym_öô
 
LTDL_PARAMS
(())

695 
	g¥ñﬂded_symbﬁs
 = 0;

696 i‡(
	gdeÁu…_¥ñﬂded_symbﬁs
)

697  
…_dÕªlﬂd
(
deÁu…_¥ñﬂded_symbﬁs
);

702 
¥esym_‰ì_symli°s
 
LTDL_PARAMS
(())

704 
…_dlsymli°s_t
 *
	gli°s
 = 
¥ñﬂded_symbﬁs
;

706 
	gli°s
) {

707 
…_dlsymli°s_t
 *
	gtmp
 = 
li°s
;

709 
	gli°s
 = 
li°s
->
√xt
;

710 
…_dl‰ì
(
tmp
);

712 
	g¥ñﬂded_symbﬁs
 = 0;

717 
¥esym_exô
 
LTDL_PARAMS
(())

719 
¥esym_‰ì_symli°s
();

724 
	$¥esym_add_symli°
 (
¥ñﬂded
)

725 c⁄° 
…_dlsymli°
 *
¥ñﬂded
;

727 
…_dlsymli°s_t
 *
tmp
;

728 
…_dlsymli°s_t
 *
li°s
 = 
¥ñﬂded_symbﬁs
;

730 
li°s
) {

731 i‡(
li°s
->
syms
 =
¥ñﬂded
)

733 
li°s
 =Üi°s->
√xt
;

736 
tmp
 = (
…_dlsymli°s_t
*Ë
	`…_dlmÆloc
((lt_dlsymlists_t));

737 i‡(!
tmp
) {

738 
œ°_îr‹
 = 
mem‹y_îr‹
;

741 
tmp
->
syms
 = 
¥ñﬂded
;

742 
tmp
->
√xt
 = 0;

743 i‡(!
¥ñﬂded_symbﬁs
)

744 
¥ñﬂded_symbﬁs
 = 
tmp
;

747 
li°s
 = 
¥ñﬂded_symbﬁs
;

748 
li°s
->
√xt
)

749 
li°s
 =Üi°s->
√xt
;

750 
li°s
->
√xt
 = 
tmp
;

753 
	}
}

756 
	$¥esym_›í
 (
h™dÀ
, 
fûíame
)

757 
…_dlh™dÀ
 
h™dÀ
;

758 c⁄° *
fûíame
;

760 
…_dlsymli°s_t
 *
li°s
 = 
¥ñﬂded_symbﬁs
;

762 i‡(!
li°s
) {

763 
œ°_îr‹
 = 
no_symbﬁs_îr‹
;

766 i‡(!
fûíame
)

767 
fûíame
 = "@PROGRAM@";

768 
li°s
) {

769 c⁄° 
…_dlsymli°
 *
syms
 = 
li°s
->syms;

771 
syms
->
«me
) {

772 i‡(!
syms
->
addªss
 &&

773 
	`°rcmp
(
syms
->
«me
, 
fûíame
) == 0) {

774 
h™dÀ
->h™dÀ = (
…_±r_t
Ë
syms
;

777 
syms
++;

779 
li°s
 =Üi°s->
√xt
;

781 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

783 
	}
}

786 
	$¥esym_˛o£
 (
h™dÀ
)

787 
…_dlh™dÀ
 
h™dÀ
;

790 
h™dÀ
 = 0;

792 
	}
}

794 
…_±r_t


795 
	$¥esym_sym
 (
h™dÀ
, 
symbﬁ
)

796 
…_dlh™dÀ
 
h™dÀ
;

797 c⁄° *
symbﬁ
;

799 
…_dlsymli°
 *
syms
 = (…_dlsymli°*)(
h™dÀ
->handle);

801 
syms
++;

802 
syms
->
addªss
) {

803 i‡(
	`°rcmp
(
syms
->
«me
, 
symbﬁ
) == 0)

804  
syms
->
addªss
;

805 
syms
++;

807 
œ°_îr‹
 = 
symbﬁ_îr‹
;

809 
	}
}

812 
…_d…y≥_t


813 
	g¥esym
 = { 
LTDL_TYPE_TOP
, 0, 
¥esym_öô
, 
¥esym_exô
,

814 
¥esym_›í
, 
¥esym_˛o£
, 
¥esym_sym
 };

816 #unde‡
LTDL_TYPE_TOP


817 
	#LTDL_TYPE_TOP
 &
¥esym


	)

819 *
	gu£r_£¨ch_∑th
 = 0;

820 
…_dlh™dÀ
 
	gh™dÀs
 = 0;

821 
	göôülized
 = 0;

823 
…_d…y≥_t
 *
	gty≥s
 = 
LTDL_TYPE_TOP
;

824 #unde‡
LTDL_TYPE_TOP


827 
…_dlöô
 
LTDL_PARAMS
(())

830 
…_d…y≥_t
 **
	gty≥
 = &
ty≥s
;

831 
	gty≥cou¡
 = 0;

833 i‡(
	göôülized
) {

834 
	göôülized
++;

837 
	gh™dÀs
 = 0;

838 
	gu£r_£¨ch_∑th
 = 0;

840 *
	gty≥
) {

841 i‡((*
	gty≥
)->
mod_öô
())

842 *
	gty≥
 = (*
ty≥
)->
√xt
;

844 
	gty≥
 = &(*
ty≥
)->
√xt
;

845 
	gty≥cou¡
++;

848 i‡(
	gty≥cou¡
 == 0) {

849 
œ°_îr‹
 = 
dl›í_nŸ_suµ‹ãd_îr‹
;

852 
	gœ°_îr‹
 = 0;

853 
	göôülized
 = 1;

858 
	$…_dÕªlﬂd
 (
¥ñﬂded
)

859 c⁄° 
…_dlsymli°
 *
¥ñﬂded
;

861 i‡(
¥ñﬂded
)

862  
	`¥esym_add_symli°
(
¥ñﬂded
);

863 
	`¥esym_‰ì_symli°s
();

864 i‡(
deÁu…_¥ñﬂded_symbﬁs
)

865  
	`…_dÕªlﬂd
(
deÁu…_¥ñﬂded_symbﬁs
);

867 
	}
}

870 
	$…_dÕªlﬂd_deÁu…
 (
¥ñﬂded
)

871 c⁄° 
…_dlsymli°
 *
¥ñﬂded
;

873 
deÁu…_¥ñﬂded_symbﬁs
 = 
¥ñﬂded
;

875 
	}
}

878 
…_dÀxô
 
LTDL_PARAMS
(())

881 
…_d…y≥_t
 *
	gty≥
 = 
ty≥s
;

882 
	gîr‹s
;

884 i‡(!
	göôülized
) {

885 
	gœ°_îr‹
 = 
shutdown_îr‹
;

888 i‡(
	göôülized
 != 1) {

889 
öôülized
--;

893 
	gîr‹s
 = 0;

894 
	gh™dÀs
) {

896 i‡(
…_dl˛o£
(
h™dÀs
))

897 
	gîr‹s
++;

899 
	göôülized
 = 0;

900 
	gty≥
) {

901 i‡(
	gty≥
->
mod_exô
())

902 
	gîr‹s
++;

903 
	gty≥
 = 
ty≥
->
√xt
;

905  
	gîr‹s
;

909 
	$åyÆl_dl›í
 (
h™dÀ
, 
fûíame
)

910 
…_dlh™dÀ
 *
h™dÀ
;

911 c⁄° *
fûíame
;

913 
…_dlh™dÀ
 
cur
;

914 
…_d…y≥_t
 *
ty≥
 = 
ty≥s
;

915 c⁄° *
ßved_îr‹
 = 
œ°_îr‹
;

918 
cur
 = 
h™dÀs
;

919 
cur
) {

920 i‡(!
cur
->
fûíame
 && !filename)

922 i‡(
cur
->
fûíame
 && filename &&

923 
	`°rcmp
(
cur
->
fûíame
, filename) == 0)

925 
cur
 = cur->
√xt
;

927 i‡(
cur
) {

928 
cur
->
ußge
++;

929 *
h™dÀ
 = 
cur
;

933 
cur
 = *
h™dÀ
;

934 i‡(
fûíame
) {

935 
cur
->
fûíame
 = 
	`°rdup
(filename);

936 i‡(!
cur
->
fûíame
) {

937 
œ°_îr‹
 = 
mem‹y_îr‹
;

941 
cur
->
fûíame
 = 0;

942 
ty≥
) {

943 i‡(
ty≥
->
	`lib_›í
(
cur
, 
fûíame
) == 0)

945 
ty≥
 =Åy≥->
√xt
;

947 i‡(!
ty≥
) {

948 i‡(
cur
->
fûíame
)

949 
	`…_dl‰ì
(
cur
->
fûíame
);

952 
cur
->
ty≥
 =Åype;

953 
œ°_îr‹
 = 
ßved_îr‹
;

955 
	}
}

958 
	$föd_moduÀ
 (
h™dÀ
, 
dú
, 
libdú
, 
d ame
, 
ﬁd_«me
, 
ö°ÆÀd
)

959 
…_dlh™dÀ
 *
h™dÀ
;

960 c⁄° *
dú
;

961 c⁄° *
libdú
;

962 c⁄° *
d ame
;

963 c⁄° *
ﬁd_«me
;

964 
ö°ÆÀd
;

966 
îr‹
;

967 *
fûíame
;

971 i‡(
ﬁd_«me
 && 
	`åyÆl_dl›í
(
h™dÀ
, old_name) == 0)

974 i‡(
d ame
) {

976 i‡(
ö°ÆÀd
 && 
libdú
) {

977 
fûíame
 = (*)

978 
	`…_dlmÆloc
(
	`°æí
(
libdú
)+1+°æí(
d ame
)+1);

979 i‡(!
fûíame
) {

980 
œ°_îr‹
 = 
mem‹y_îr‹
;

983 
	`°r˝y
(
fûíame
, 
libdú
);

984 
	`°rˇt
(
fûíame
, "/");

985 
	`°rˇt
(
fûíame
, 
d ame
);

986 
îr‹
 = 
	`åyÆl_dl›í
(
h™dÀ
, 
fûíame
) == 0;

987 
	`…_dl‰ì
(
fûíame
);

988 i‡(
îr‹
)

992 i‡(!
ö°ÆÀd
) {

993 
fûíame
 = (*)

994 
	`…_dlmÆloc
((
dú
 ? 
	`°æí
(dir) : 0)

995 + 
	`°æí
(
objdú
Ë+ såÀn(
d ame
) + 1);

996 i‡(!
fûíame
) {

997 
œ°_îr‹
 = 
mem‹y_îr‹
;

1000 i‡(
dú
)

1001 
	`°r˝y
(
fûíame
, 
dú
);

1003 *
fûíame
 = 0;

1004 
	`°rˇt
(
fûíame
, 
objdú
);

1005 
	`°rˇt
(
fûíame
, 
d ame
);

1007 
îr‹
 = 
	`åyÆl_dl›í
(
h™dÀ
, 
fûíame
) == 0;

1008 
	`…_dl‰ì
(
fûíame
);

1009 i‡(
îr‹
)

1014 
fûíame
 = (*)

1015 
	`…_dlmÆloc
((
dú
 ? 
	`°æí
(dir) : 0)

1016 + 
	`°æí
(
d ame
) + 1);

1017 i‡(
dú
)

1018 
	`°r˝y
(
fûíame
, 
dú
);

1020 *
fûíame
 = 0;

1021 
	`°rˇt
(
fûíame
, 
d ame
);

1022 
îr‹
 = 
	`åyÆl_dl›í
(
h™dÀ
, 
fûíame
) == 0;

1023 
	`…_dl‰ì
(
fûíame
);

1024 i‡(
îr‹
)

1028 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

1030 
	}
}

1032 
…_±r_t


1033 
	$föd_fûe
 (
ba£«me
, 
£¨ch_∑th
, 
pdú
, 
h™dÀ
)

1034 c⁄° *
ba£«me
;

1035 c⁄° *
£¨ch_∑th
;

1036 **
pdú
;

1037 
…_dlh™dÀ
 *
h™dÀ
;

1042 *
fûíame
 = 0;

1043 
fûíamesize
 = 0;

1044 c⁄° *
√xt
 = 
£¨ch_∑th
;

1045 
Ànba£
 = 
	`°æí
(
ba£«me
);

1047 i‡(!
√xt
 || !*next) {

1048 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

1051 
√xt
) {

1052 
Àndú
;

1053 c⁄° *
cur
 = 
√xt
;

1055 
√xt
 = 
	`°rchr
(
cur
, ':');

1056 i‡(!
√xt
)

1057 
√xt
 = 
cur
 + 
	`°æí
(cur);

1058 
Àndú
 = 
√xt
 - 
cur
;

1059 i‡(*
√xt
 == ':')

1060 ++
√xt
;

1062 
√xt
 = 0;

1063 i‡(
Àndú
 == 0)

1065 i‡(
Àndú
 + 1 + 
Ànba£
 >
fûíamesize
) {

1066 i‡(
fûíame
)

1067 
	`…_dl‰ì
(
fûíame
);

1068 
fûíamesize
 = 
Àndú
 + 1 + 
Ànba£
 + 1;

1069 
fûíame
 = (*Ë
	`…_dlmÆloc
(
fûíamesize
);

1070 i‡(!
fûíame
) {

1071 
œ°_îr‹
 = 
mem‹y_îr‹
;

1075 
	`°∫˝y
(
fûíame
, 
cur
, 
Àndú
);

1076 i‡(
fûíame
[
Àndú
-1] != '/')

1077 
fûíame
[
Àndú
++] = '/';

1078 
	`°r˝y
(
fûíame
+
Àndú
, 
ba£«me
);

1079 i‡(
h™dÀ
) {

1080 i‡(
	`åyÆl_dl›í
(
h™dÀ
, 
fûíame
) == 0) {

1081 
	`…_dl‰ì
(
fûíame
);

1082  (
…_±r_t
Ë
h™dÀ
;

1085 
FILE
 *
fûe
 = 
	`f›í
(
fûíame
, 
LTDL_READTEXT_MODE
);

1086 i‡(
fûe
) {

1087 i‡(*
pdú
)

1088 
	`…_dl‰ì
(*
pdú
);

1089 
fûíame
[
Àndú
] = '\0';

1090 *
pdú
 = 
	`°rdup
(
fûíame
);

1091 i‡(!*
pdú
) {

1095 *
pdú
 = 
fûíame
;

1097 
	`…_dl‰ì
(
fûíame
);

1098  (
…_±r_t
Ë
fûe
;

1102 i‡(
fûíame
)

1103 
	`…_dl‰ì
(
fûíame
);

1104 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

1106 
	}
}

1109 
	$lﬂd_dïlibs
(
h™dÀ
, 
dïlibs
)

1110 
…_dlh™dÀ
 
h™dÀ
;

1111 c⁄° *
dïlibs
;

1114 
h™dÀ
->
dïcou¡
 = 0;

1115 
h™dÀ
->
dïlibs
 = 0;

1117 
dïlibs
 = 0;

1119 
	}
}

1122 
	$u∆ﬂd_dïlibs
(
h™dÀ
)

1123 
…_dlh™dÀ
 
h™dÀ
;

1127 
h™dÀ
 = 0;

1129 
	}
}

1131 
ölöe
 

1132 
	$åim
 (
de°
, 
°r
)

1133 **
de°
;

1134 c⁄° *
°r
;

1138 *
tmp
;

1139 c⁄° *
íd
 = 
	`°ºchr
(
°r
, '\'');

1140 
Àn
 = 
	`°æí
(
°r
);

1142 i‡(*
de°
)

1143 
	`…_dl‰ì
(*
de°
);

1144 i‡(
Àn
 > 3 && 
°r
[0] == '\'') {

1145 
tmp
 = (*Ë
	`…_dlmÆloc
(
íd
 - 
°r
);

1146 i‡(!
tmp
) {

1147 
œ°_îr‹
 = 
mem‹y_îr‹
;

1150 
	`°∫˝y
(
tmp
, &
°r
[1], (
íd
 - str) - 1);

1151 
tmp
[
Àn
-3] = '\0';

1152 *
de°
 = 
tmp
;

1154 *
de°
 = 0;

1156 
	}
}

1158 
ölöe
 

1159 
	$‰ì_v¨s
(
dú
, 
«me
, 
d ame
, 
ﬁd«me
, 
libdú
, 
dïlibs
)

1160 *
dú
;

1161 *
«me
;

1162 *
d ame
;

1163 *
ﬁd«me
;

1164 *
libdú
;

1165 *
dïlibs
;

1167 i‡(
dú
)

1168 
	`…_dl‰ì
(
dú
);

1169 i‡(
«me
)

1170 
	`…_dl‰ì
(
«me
);

1171 i‡(
d ame
)

1172 
	`…_dl‰ì
(
d ame
);

1173 i‡(
ﬁd«me
)

1174 
	`…_dl‰ì
(
ﬁd«me
);

1175 i‡(
libdú
)

1176 
	`…_dl‰ì
(
libdú
);

1177 i‡(
dïlibs
)

1178 
	`…_dl‰ì
(
dïlibs
);

1180 
	}
}

1182 
…_dlh™dÀ


1183 
	$…_dl›í
 (
fûíame
)

1184 c⁄° *
fûíame
;

1186 
…_dlh™dÀ
 
h™dÀ
, 
√wh™dÀ
;

1187 c⁄° *
ba£«me
, *
ext
;

1188 c⁄° *
ßved_îr‹
 = 
œ°_îr‹
;

1189 *
dú
 = 0, *
«me
 = 0;

1191 i‡(!
fûíame
) {

1192 
h™dÀ
 = (
…_dlh™dÀ
Ë
	`…_dlmÆloc
((
…_dlh™dÀ_t
));

1193 i‡(!
h™dÀ
) {

1194 
œ°_îr‹
 = 
mem‹y_îr‹
;

1197 
h™dÀ
->
ußge
 = 0;

1198 
h™dÀ
->
dïcou¡
 = 0;

1199 
h™dÀ
->
dïlibs
 = 0;

1200 
√wh™dÀ
 = 
h™dÀ
;

1201 i‡(
	`åyÆl_dl›í
(&
√wh™dÀ
, 0) != 0) {

1202 
	`…_dl‰ì
(
h™dÀ
);

1205 
ªgi°î_h™dÀ
;

1207 
ba£«me
 = 
	`°ºchr
(
fûíame
, '/');

1208 i‡(
ba£«me
) {

1209 
ba£«me
++;

1210 
dú
 = (*Ë
	`…_dlmÆloc
(
ba£«me
 - 
fûíame
 + 1);

1211 i‡(!
dú
) {

1212 
œ°_îr‹
 = 
mem‹y_îr‹
;

1215 
	`°∫˝y
(
dú
, 
fûíame
, 
ba£«me
 - filename);

1216 
dú
[
ba£«me
 - 
fûíame
] = '\0';

1218 
ba£«me
 = 
fûíame
;

1220 
ext
 = 
	`°ºchr
(
ba£«me
, '.');

1221 i‡(
ext
 && 
	`°rcmp
(ext, ".la") == 0) {

1223 
FILE
 *
fûe
;

1224 
i
;

1225 *
d ame
 = 0, *
ﬁd_«me
 = 0;

1226 *
libdú
 = 0, *
dïlibs
 = 0;

1227 *
löe
;

1228 
îr‹
 = 0;

1232 
ö°ÆÀd
 = 1;

1235 
«me
 = (*Ë
	`…_dlmÆloc
(
ext
 - 
ba£«me
 + 1);

1236 i‡(!
«me
) {

1237 
œ°_îr‹
 = 
mem‹y_îr‹
;

1238 i‡(
dú
)

1239 
	`…_dl‰ì
(
dú
);

1243 
i
 = 0; i < 
ext
 - 
ba£«me
; i++)

1244 i‡(
	`iß um
(()(
ba£«me
[
i
])))

1245 
«me
[
i
] = 
ba£«me
[i];

1247 
«me
[
i
] = '_';

1248 
«me
[
ext
 - 
ba£«me
] = '\0';

1250 
fûe
 = 
	`f›í
(
fûíame
, 
LTDL_READTEXT_MODE
);

1251 i‡(!
fûe
)

1252 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

1253 i‡(!
fûe
 && !
dú
) {

1255 
fûe
 = (
FILE
*Ë
	`föd_fûe
(
ba£«me
,

1256 
u£r_£¨ch_∑th
,

1257 &
dú
, 0);

1258 i‡(!
fûe
)

1259 
fûe
 = (
FILE
*Ë
	`föd_fûe
(
ba£«me
,

1260 
	`gëív
("LTDL_LIBRARY_PATH"),

1261 &
dú
, 0);

1262 #ifde‡
LTDL_SHLIBPATH_VAR


1263 i‡(!
fûe
)

1264 
fûe
 = (
FILE
*Ë
	`föd_fûe
(
ba£«me
,

1265 
	`gëív
(
LTDL_SHLIBPATH_VAR
),

1266 &
dú
, 0);

1269 i‡(!
fûe
) {

1270 i‡(
«me
)

1271 
	`…_dl‰ì
(
«me
);

1272 i‡(
dú
)

1273 
	`…_dl‰ì
(
dú
);

1276 
löe
 = (*Ë
	`…_dlmÆloc
(
LTDL_FILENAME_MAX
);

1277 i‡(!
löe
) {

1278 
	`f˛o£
(
fûe
);

1279 
œ°_îr‹
 = 
mem‹y_îr‹
;

1283 !
	`„of
(
fûe
)) {

1284 i‡(!
	`fgës
(
löe
, 
LTDL_FILENAME_MAX
, 
fûe
))

1286 i‡(
löe
[0] == '\n' ||Üine[0] == '#')

1288 #unde‡
STR_DLNAME


1289 
	#STR_DLNAME
 "d ame="

	)

1290 i‡(
	`°∫cmp
(
löe
, 
STR_DLNAME
,

1291 (
STR_DLNAME
) - 1) == 0)

1292 
îr‹
 = 
	`åim
(&
d ame
,

1293 &
löe
[(
STR_DLNAME
) - 1]);

1295 #unde‡
STR_OLD_LIBRARY


1296 
	#STR_OLD_LIBRARY
 "ﬁd_libøry="

	)

1297 i‡(
	`°∫cmp
(
löe
, 
STR_OLD_LIBRARY
,

1298 (
STR_OLD_LIBRARY
) - 1) == 0)

1299 
îr‹
 = 
	`åim
(&
ﬁd_«me
,

1300 &
löe
[(
STR_OLD_LIBRARY
) - 1]);

1302 #unde‡
STR_LIBDIR


1303 
	#STR_LIBDIR
 "libdú="

	)

1304 i‡(
	`°∫cmp
(
löe
, 
STR_LIBDIR
,

1305 (
STR_LIBDIR
) - 1) == 0)

1306 
îr‹
 = 
	`åim
(&
libdú
,

1307 &
löe
[(
STR_LIBDIR
) - 1]);

1309 #unde‡
STR_DL_DEPLIBS


1310 
	#STR_DL_DEPLIBS
 "dl_dïídícy_libs="

	)

1311 i‡(
	`°∫cmp
(
löe
, 
STR_DL_DEPLIBS
,

1312 (
STR_DL_DEPLIBS
) - 1) == 0)

1313 
îr‹
 = 
	`åim
(&
dïlibs
,

1314 &
löe
[(
STR_DL_DEPLIBS
) - 1]);

1316 i‡(
	`°rcmp
(
löe
, "installed=yes\n") == 0)

1317 
ö°ÆÀd
 = 1;

1319 i‡(
	`°rcmp
(
löe
, "installed=no\n") == 0)

1320 
ö°ÆÀd
 = 0;

1321 i‡(
îr‹
)

1324 
	`f˛o£
(
fûe
);

1325 
	`…_dl‰ì
(
löe
);

1327 
h™dÀ
 = (
…_dlh™dÀ
Ë
	`…_dlmÆloc
((
…_dlh™dÀ_t
));

1328 i‡(!
h™dÀ
 || 
îr‹
) {

1329 i‡(
h™dÀ
)

1330 
	`…_dl‰ì
(
h™dÀ
);

1331 i‡(!
îr‹
)

1332 
œ°_îr‹
 = 
mem‹y_îr‹
;

1333 
	`‰ì_v¨s
(
«me
, 
dú
, 
d ame
, 
ﬁd_«me
, 
libdú
, 
dïlibs
);

1336 
h™dÀ
->
ußge
 = 0;

1337 i‡(
	`lﬂd_dïlibs
(
h™dÀ
, 
dïlibs
) == 0) {

1338 
√wh™dÀ
 = 
h™dÀ
;

1340 i‡(
	`föd_moduÀ
(&
√wh™dÀ
, 
dú
, 
libdú
,

1341 
d ame
, 
ﬁd_«me
, 
ö°ÆÀd
)) {

1342 
	`u∆ﬂd_dïlibs
(
h™dÀ
);

1343 
îr‹
 = 1;

1346 
îr‹
 = 1;

1347 i‡(
îr‹
) {

1348 
	`…_dl‰ì
(
h™dÀ
);

1349 
	`‰ì_v¨s
(
«me
, 
dú
, 
d ame
, 
ﬁd_«me
, 
libdú
, 
dïlibs
);

1352 i‡(
h™dÀ
 !
√wh™dÀ
) {

1353 
	`u∆ﬂd_dïlibs
(
h™dÀ
);

1357 
h™dÀ
 = (
…_dlh™dÀ
Ë
	`…_dlmÆloc
((
…_dlh™dÀ_t
));

1358 i‡(!
h™dÀ
) {

1359 
œ°_îr‹
 = 
mem‹y_îr‹
;

1360 i‡(
dú
)

1361 
	`…_dl‰ì
(
dú
);

1364 
h™dÀ
->
ußge
 = 0;

1366 
h™dÀ
->
dïcou¡
 = 0;

1367 
h™dÀ
->
dïlibs
 = 0;

1368 
√wh™dÀ
 = 
h™dÀ
;

1369 i‡(
	`åyÆl_dl›í
(&
√wh™dÀ
, 
fûíame
)

1370 && (
dú


1371 || (!
	`föd_fûe
(
ba£«me
, 
u£r_£¨ch_∑th
,

1372 0, &
√wh™dÀ
)

1373 && !
	`föd_fûe
(
ba£«me
,

1374 
	`gëív
("LTDL_LIBRARY_PATH"),

1375 0, &
√wh™dÀ
)

1376 #ifde‡
LTDL_SHLIBPATH_VAR


1377 && !
	`föd_fûe
(
ba£«me
,

1378 
	`gëív
(
LTDL_SHLIBPATH_VAR
),

1379 0, &
√wh™dÀ
)

1382 
	`…_dl‰ì
(
h™dÀ
);

1383 i‡(
dú
)

1384 
	`…_dl‰ì
(
dú
);

1388 
ªgi°î_h™dÀ
:

1389 i‡(
√wh™dÀ
 !
h™dÀ
) {

1390 
	`…_dl‰ì
(
h™dÀ
);

1391 
h™dÀ
 = 
√wh™dÀ
;

1393 i‡(!
h™dÀ
->
ußge
) {

1394 
h™dÀ
->
ußge
 = 1;

1395 
h™dÀ
->
«me
 =Çame;

1396 
h™dÀ
->
√xt
 = 
h™dÀs
;

1397 
h™dÀs
 = 
h™dÀ
;

1398 } i‡(
«me
)

1399 
	`…_dl‰ì
(
«me
);

1400 i‡(
dú
)

1401 
	`…_dl‰ì
(
dú
);

1402 
œ°_îr‹
 = 
ßved_îr‹
;

1403  
h™dÀ
;

1404 
	}
}

1406 
…_dlh™dÀ


1407 
	$…_dl›íext
 (
fûíame
)

1408 c⁄° *
fûíame
;

1410 
…_dlh™dÀ
 
h™dÀ
;

1411 *
tmp
;

1412 
Àn
;

1413 c⁄° *
ßved_îr‹
 = 
œ°_îr‹
;

1415 i‡(!
fûíame
)

1416  
	`…_dl›í
(
fûíame
);

1417 
Àn
 = 
	`°æí
(
fûíame
);

1418 i‡(!
Àn
) {

1419 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

1423 
h™dÀ
 = 
	`…_dl›í
(
fûíame
);

1424 i‡(
h™dÀ
)

1425  
h™dÀ
;

1427 
tmp
 = (*Ë
	`…_dlmÆloc
(
Àn
+4);

1428 i‡(!
tmp
) {

1429 
œ°_îr‹
 = 
mem‹y_îr‹
;

1432 
	`°r˝y
(
tmp
, 
fûíame
);

1433 
	`°rˇt
(
tmp
, ".la");

1434 
h™dÀ
 = 
	`…_dl›í
(
tmp
);

1435 i‡(
h™dÀ
) {

1436 
œ°_îr‹
 = 
ßved_îr‹
;

1437 
	`…_dl‰ì
(
tmp
);

1438  
h™dÀ
;

1440 #ifde‡
LTDL_SHLIB_EXT


1442 i‡(
	`°æí
(
shlib_ext
) > 3) {

1443 
	`…_dl‰ì
(
tmp
);

1444 
tmp
 = (*Ë
	`…_dlmÆloc
(
Àn
 + 
	`°æí
(
shlib_ext
) + 1);

1445 i‡(!
tmp
) {

1446 
œ°_îr‹
 = 
mem‹y_îr‹
;

1449 
	`°r˝y
(
tmp
, 
fûíame
);

1451 
tmp
[
Àn
] = '\0';

1452 
	`°rˇt
(
tmp
, 
shlib_ext
);

1453 
h™dÀ
 = 
	`…_dl›í
(
tmp
);

1454 i‡(
h™dÀ
) {

1455 
œ°_îr‹
 = 
ßved_îr‹
;

1456 
	`…_dl‰ì
(
tmp
);

1457  
h™dÀ
;

1460 
œ°_îr‹
 = 
fûe_nŸ_found_îr‹
;

1461 
	`…_dl‰ì
(
tmp
);

1463 
	}
}

1466 
	$…_dl˛o£
 (
h™dÀ
)

1467 
…_dlh™dÀ
 
h™dÀ
;

1469 
…_dlh™dÀ
 
cur
, 
œ°
;

1472 
œ°
 = 
cur
 = 
h™dÀs
;

1473 
cur
 && 
h™dÀ
 != cur) {

1474 
œ°
 = 
cur
;

1475 
cur
 = cur->
√xt
;

1477 i‡(!
cur
) {

1478 
œ°_îr‹
 = 
övÆid_h™dÀ_îr‹
;

1481 
h™dÀ
->
ußge
--;

1482 i‡(!
h™dÀ
->
ußge
) {

1483 
îr‹
;

1485 i‡(
h™dÀ
 !
h™dÀs
)

1486 
œ°
->
√xt
 = 
h™dÀ
->next;

1488 
h™dÀs
 = 
h™dÀ
->
√xt
;

1489 
îr‹
 = 
h™dÀ
->
ty≥
->
	`lib_˛o£
(handle);

1490 
îr‹
 +
	`u∆ﬂd_dïlibs
(
h™dÀ
);

1491 i‡(
h™dÀ
->
fûíame
)

1492 
	`…_dl‰ì
(
h™dÀ
->
fûíame
);

1493 i‡(
h™dÀ
->
«me
)

1494 
	`…_dl‰ì
(
h™dÀ
->
«me
);

1495 
	`…_dl‰ì
(
h™dÀ
);

1496  
îr‹
;

1499 
	}
}

1501 
…_±r_t


1502 
	$…_dlsym
 (
h™dÀ
, 
symbﬁ
)

1503 
…_dlh™dÀ
 
h™dÀ
;

1504 c⁄° *
symbﬁ
;

1506 
Ànsym
;

1507 
lsym
[
LTDL_SYMBOL_LENGTH
];

1508 *
sym
;

1509 
…_±r_t
 
addªss
;

1511 i‡(!
h™dÀ
) {

1512 
œ°_îr‹
 = 
övÆid_h™dÀ_îr‹
;

1515 i‡(!
symbﬁ
) {

1516 
œ°_îr‹
 = 
symbﬁ_îr‹
;

1519 
Ànsym
 = 
	`°æí
(
symbﬁ
);

1520 i‡(
h™dÀ
->
ty≥
->
sym_¥efix
)

1521 
Ànsym
 +
	`°æí
(
h™dÀ
->
ty≥
->
sym_¥efix
);

1522 i‡(
h™dÀ
->
«me
)

1523 
Ànsym
 +
	`°æí
(
h™dÀ
->
«me
);

1524 i‡(
Ànsym
 + 
LTDL_SYMBOL_OVERHEAD
 < 
LTDL_SYMBOL_LENGTH
)

1525 
sym
 = 
lsym
;

1527 
sym
 = (*Ë
	`…_dlmÆloc
(
Ànsym
 + 
LTDL_SYMBOL_OVERHEAD
 + 1);

1528 i‡(!
sym
) {

1529 
œ°_îr‹
 = 
buf„r_ovîÊow_îr‹
;

1532 i‡(
h™dÀ
->
«me
) {

1533 c⁄° *
ßved_îr‹
 = 
œ°_îr‹
;

1536 i‡(
h™dÀ
->
ty≥
->
sym_¥efix
) {

1537 
	`°r˝y
(
sym
, 
h™dÀ
->
ty≥
->
sym_¥efix
);

1538 
	`°rˇt
(
sym
, 
h™dÀ
->
«me
);

1540 
	`°r˝y
(
sym
, 
h™dÀ
->
«me
);

1541 
	`°rˇt
(
sym
, "_LTX_");

1542 
	`°rˇt
(
sym
, 
symbﬁ
);

1544 
addªss
 = 
h™dÀ
->
ty≥
->
	`föd_sym
(h™dÀ, 
sym
);

1545 i‡(
addªss
) {

1546 i‡(
sym
 !
lsym
)

1547 
	`…_dl‰ì
(
sym
);

1548  
addªss
;

1550 
œ°_îr‹
 = 
ßved_îr‹
;

1553 i‡(
h™dÀ
->
ty≥
->
sym_¥efix
) {

1554 
	`°r˝y
(
sym
, 
h™dÀ
->
ty≥
->
sym_¥efix
);

1555 
	`°rˇt
(
sym
, 
symbﬁ
);

1557 
	`°r˝y
(
sym
, 
symbﬁ
);

1558 
addªss
 = 
h™dÀ
->
ty≥
->
	`föd_sym
(h™dÀ, 
sym
);

1559 i‡(
sym
 !
lsym
)

1560 
	`…_dl‰ì
(
sym
);

1561  
addªss
;

1562 
	}
}

1565 
…_dÀº‹
 
LTDL_PARAMS
(())

1567 c⁄° *
	gîr‹
 = 
œ°_îr‹
;

1569 
	gœ°_îr‹
 = 0;

1570  
	gîr‹
;

1574 
	$…_dœdd£¨chdú
 (
£¨ch_dú
)

1575 c⁄° *
£¨ch_dú
;

1577 i‡(!
£¨ch_dú
 || !
	`°æí
(search_dir))

1579 i‡(!
u£r_£¨ch_∑th
) {

1580 
u£r_£¨ch_∑th
 = 
	`°rdup
(
£¨ch_dú
);

1581 i‡(!
u£r_£¨ch_∑th
) {

1582 
œ°_îr‹
 = 
mem‹y_îr‹
;

1586 *
√w_£¨ch_∑th
 = (*)

1587 
	`…_dlmÆloc
(
	`°æí
(
u£r_£¨ch_∑th
) +

1588 
	`°æí
(
£¨ch_dú
) + 2);

1589 i‡(!
√w_£¨ch_∑th
) {

1590 
œ°_îr‹
 = 
mem‹y_îr‹
;

1593 
	`°r˝y
(
√w_£¨ch_∑th
, 
u£r_£¨ch_∑th
);

1594 
	`°rˇt
(
√w_£¨ch_∑th
, ":");

1595 
	`°rˇt
(
√w_£¨ch_∑th
, 
£¨ch_dú
);

1596 
	`…_dl‰ì
(
u£r_£¨ch_∑th
);

1597 
u£r_£¨ch_∑th
 = 
√w_£¨ch_∑th
;

1600 
	}
}

1603 
	$…_dl£t£¨ch∑th
 (
£¨ch_∑th
)

1604 c⁄° *
£¨ch_∑th
;

1606 i‡(
u£r_£¨ch_∑th
)

1607 
	`…_dl‰ì
(
u£r_£¨ch_∑th
);

1608 
u£r_£¨ch_∑th
 = 0;

1609 i‡(!
£¨ch_∑th
 || !
	`°æí
(search_path))

1611 
u£r_£¨ch_∑th
 = 
	`°rdup
(
£¨ch_∑th
);

1612 i‡(!
u£r_£¨ch_∑th
)

1615 
	}
}

1618 
…_dlgë£¨ch∑th
 
LTDL_PARAMS
(())

1620  
	gu£r_£¨ch_∑th
;

	@rogi/openscep-0.4.2/scep/scep.c

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<c⁄fig.h
>

11 
	~<öô.h
>

12 
	~<›ís¶/bio.h
>

13 
	~<›ís¶/≥m.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/îr.h
>

16 
	~<›ís¶/ønd.h
>

17 
	~<£lfsig√d.h
>

18 
	~<¸óãªq.h
>

19 
	~<uni°d.h
>

20 
	~<fögî¥öt.h
>

21 
	~<hâp.h
>

22 
	~<ícode.h
>

23 
	~<decode.h
>

24 
	~<mis¶.h
>

25 
	~<s˚∂d≠.h
>

27 
›töd
;

28 *
›èrg
;

38 
X509
 *
	$exåa˘_˚π
(
s˚p_t
 *
s˚p
) {

39 
PKCS7
 *
p7
;

40 
	`STACK_OF
(
X509
Ë*
˚πs
;

41 
X509
 *
x
;

42 
i
, 
n˚πs
;

43 
«me_buf„r
[1024];

46 
p7
 = 
s˚p
->
ª∂y
.
rd
.p7;

49 
˚πs
 = 
p7
->
d
.
sign
->
˚π
;

50 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: %d certificates inÅheÖkcs7\n",

51 
__FILE__
, 
__LINE__
, 
n˚πs
 = 
	`sk_X509_num
(
˚πs
));

52 i‡(
n˚πs
 != 2) {

55 
i
 = 0; i < 
	`sk_X509_num
(
˚πs
); i++) {

56 
x
 = 
	`sk_X509_vÆue
(
˚πs
, 
i
);

60 i‡(
	`X509_NAME_cmp
(
	`X509_gë_issuî_«me
(
x
),

61 
	`X509_gë_subje˘_«me
(
s˚p
->
ˇ˚π
))) {

62 
nŸ
;

66 i‡(
	`X509_NAME_cmp
(
	`X509_gë_subje˘_«me
(
x
),

67 
	`X509_gë_subje˘_«me
(
s˚p
->
ˇ˚π
)) == 0) {

68 i‡(
debug
)

69 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: skipping CA cert\n",

70 
__FILE__
, 
__LINE__
);

71 
nŸ
;

76 i‡(
	`ASN1_INTEGER_cmp
(
	`X509_gë_£rülNumbî
(
x
),

77 
	`X509_gë_£rülNumbî
(
s˚p
->
£lfsig√d˚π
)) == 0) {

78 i‡(
debug
)

79 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: skipping self "

80 "sig√d cîtifiˇã\n", 
__FILE__
,

81 
__LINE__
);

82 
nŸ
;

87  
x
;

88 
nŸ
:

89 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificateÉxcluded:\n",

90 
__FILE__
, 
__LINE__
);

91 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
x
),

92 
«me_buf„r
, (name_buffer));

93 
	`BIO_¥ötf
(
bio_îr
, "\t˚π_issuî_«mê %s\n", 
«me_buf„r
);

94 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
x
),

95 
«me_buf„r
, (name_buffer));

96 
	`BIO_¥ötf
(
bio_îr
, "\t˚π_subje˘_«mê%s\n", 
«me_buf„r
);

98  
NULL
;

99 
	}
}

107 
	$ªad_˛õ¡°uff
(
s˚p_t
 *
s˚p
, *
ªque°fûe
, *
keyfûe
) {

108 
BIO
 *
bio
;

111 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

112 i‡(
	`BIO_ªad_fûíame
(
bio
, 
ªque°fûe
) <= 0) {

113 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot openÑequest file\n",

114 
__FILE__
, 
__LINE__
);

115 
îr
;

117 
s˚p
->
˛õ¡ªq
 = 
	`PEM_ªad_bio_X509_REQ
(
bio
, 
NULL
, NULL, NULL);

118 i‡(
s˚p
->
˛õ¡ªq
 =
NULL
) {

119 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: couldn'tÑeadÅheÑequest "

120 "‰om %s\n", 
__FILE__
, 
__LINE__
, 
ªque°fûe
);

121 
îr
;

123 
s˚p
->
˛õ¡pubkey
 = 
	`X509_REQ_gë_pubkey
(s˚p->
˛õ¡ªq
);

124 i‡(
s˚p
->
˛õ¡pubkey
 =
NULL
) {

125 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÇoÖublic keyávailable\n",

126 
__FILE__
, 
__LINE__
);

128 
	`BIO_‰ì
(
bio
);

129 i‡(
debug
)

130 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öublic key decoded\n",

131 
__FILE__
, 
__LINE__
);

134 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

135 i‡(
	`BIO_ªad_fûíame
(
bio
, 
keyfûe
) <= 0) {

136 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot openÖrivate key "

137 "fûê%s\n", 
__FILE__
, 
__LINE__
, 
keyfûe
);

138 
îr
;

140 
s˚p
->
˛õ¡pkey
 = 
	`PEM_ªad_bio_Priv©eKey
(
bio
, 
NULL
, NULL,

141 
NULL
);

142 i‡(
s˚p
->
˛õ¡pkey
 =
NULL
) {

143 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÇoÖrivate keyávailable\n",

144 
__FILE__
, 
__LINE__
);

145 
îr
;

147 
	`BIO_‰ì
(
bio
);

148 i‡(
debug
)

149 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Örivate key decoded @%p\n",

150 
__FILE__
, 
__LINE__
, 
s˚p
->
˛õ¡pkey
);

151 i‡(
debug
 > 1) {

157 
îr
:

159 
	`ERR_¥öt_îr‹s
(
bio_îr
);

161 
	}
}

169 
	$ªad_ªque°‹°uff
(
s˚p_t
 *
s˚p
, 
ty≥
, *
fûíame
) {

170 
BIO
 *
bio
;

171 
NETSCAPE_SPKI
 *
•ki
 = 
NULL
;

172 
X509_REQ
 *
ªq
 = 
NULL
;

173 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

174 i‡(
	`BIO_ªad_fûíame
(
bio
, 
fûíame
) < 0) {

175 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑeadÑequest file '%s'\n",

176 
__FILE__
, 
__LINE__
, 
fûíame
);

177 
îr
;

179 
ty≥
) {

181 
s˚p
->
ªque°‹ªq
 = 
	`d2i_X509_REQ_bio
(
bio
, &
ªq
);

182 i‡(
s˚p
->
ªque°‹ªq
 =
NULL
) {

183 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode X509_REQ\n",

184 
__FILE__
, 
__LINE__
);

185 
îr
;

187 
s˚p
->
ªque°‹pubkey


188 
	`X509_REQ_gë_pubkey
(
s˚p
->
ªque°‹ªq
);

191 
s˚p
->
ªque°‹•ki
 = 
	`d2i_NETSCAPE_SPKI_bio
(
bio
, &
•ki
);

192 i‡(
s˚p
->
ªque°‹•ki
 =
NULL
) {

193 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode SPKI\n",

194 
__FILE__
, 
__LINE__
);

195 
îr
;

197 
s˚p
->
ªque°‹pubkey


198 
	`NETSCAPE_SPKI_gë_pubkey
(
s˚p
->
ªque°‹•ki
);

201 
îr
;

204 
îr
:

205 
	`ERR_¥öt_îr‹s
(
bio_îr
);

207 
	}
}

212 
	$ªad_ˇ°uff
(
s˚p_t
 *
s˚p
, *
ˇ˚πfûe
) {

213 
BIO
 *
bio
;

215 i‡(
ˇ˚πfûe
 !
NULL
) {

216 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

217 i‡(
	`BIO_ªad_fûíame
(
bio
, 
ˇ˚πfûe
) <= 0) {

218 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open CA "

219 "˚πifiˇã fûe\n", 
__FILE__
, 
__LINE__
);

220 
îr
;

222 
s˚p
->
ˇ˚π
 = 
	`PEM_ªad_bio_X509
(
bio
, 
NULL
, NULL, NULL);

223 i‡(
s˚p
->
ˇ˚π
 =
NULL
) {

224 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode CA "

225 "˚πifiˇã\n", 
__FILE__
, 
__LINE__
);

226 
îr
;

228 
	`BIO_‰ì
(
bio
);

229 i‡(
debug
)

230 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CA certificate decoded\n",

231 
__FILE__
, 
__LINE__
);

233 
îr
:

237 
	}
}

255 
	$maö
(
¨gc
, *
¨gv
[]) {

256 
c
, 
pﬁl
 = 0, 
ªqvîsi⁄
 = 0, 
rc
 = -1;

257 *
ˇ˚πfûe
 = 
NULL
, *
keyfûe
 = NULL, *
chÆÀnge
 = NULL,

258 *
ßvedªque°fûe
 = 
NULL
, *
ªque°fûe
 = NULL,

259 *
dn
 = 
NULL
, *
•kacfûe
 = NULL, *
ídªque°
 = NULL;

260 
s˚p_t
 
s˚p
;

261 
BIO
 *
ªpbio
;

262 *
uæ
 = "http://localhost/cgi-bin";

263 
s˚pmsg_t
 *
msg
;

264 *
checkN⁄˚
 = 
NULL
;

267 
	`s˚pöô
();

268 
	`s˚p_˛ór
(&
s˚p
);

271 
s˚p
.
˛õ¡
 = 1;

274 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dc:e:r:s:k:w:pu:2a:q:")))

275 
c
) {

277 
debug
++;

280 
ídªque°
 = 
›èrg
;

283 
ˇ˚πfûe
 = 
›èrg
;

286 
ßvedªque°fûe
 = 
›èrg
;

290 
ªque°fûe
 = 
›èrg
;

293 
keyfûe
 = 
›èrg
;

296 
chÆÀnge
 = 
›èrg
;

299 
pﬁl
 = 1;

302 
s˚p
.
communôy
 = 
›èrg
;

305 
uæ
 = 
›èrg
;

308 
ªqvîsi⁄
 = 1;

311 
•kacfûe
 = 
›èrg
;

318 i‡(
keyfûe
 =
NULL
) {

319 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: key file isÑequiredárgument\n",

320 
__FILE__
, 
__LINE__
);

321 
îr
;

323 i‡(
ªque°fûe
 =
NULL
) {

324 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest file isÑequired "

325 "¨gumít\n", 
__FILE__
, 
__LINE__
);

326 
îr
;

330 
msg
 = &
s˚p
.
ªque°
;

333 i‡(
	`∑r£uæ
(&
s˚p
, 
uæ
) < 0) {

334 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: c™nŸÖ¨£ uæ\n", 
__FILE__
,

335 
__LINE__
);

336 
îr
;

338 i‡(
debug
)

339 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoded URL %s|%d|%s\n", 
__FILE__
,

340 
__LINE__
, 
s˚p
.
h
.
hâpho°
, s˚p.h.
hâµ‹t
,

341 
s˚p
.
h
.
hâµ©h
);

344 i‡(
	`ªad_˛õ¡°uff
(&
s˚p
, 
ªque°fûe
, 
keyfûe
) < 0) {

345 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅoÑead client stuff\n",

346 
__FILE__
, 
__LINE__
);

347 
îr
;

355 
ªqvîsi⁄
) {

359 
s˚p
.
ªque°‹pubkey
 = s˚p.
˛õ¡pubkey
;

360 
s˚p
.
ªque°‹ªq
 = s˚p.
˛õ¡ªq
;

361 i‡(
debug
)

362 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÉndÑequest coincides "

363 "wôh SCEP clõ¡\n", 
__FILE__
, 
__LINE__
);

366 
msg
->
rd
.
∑ylﬂd
 = 
	`∑ylﬂd_√w
();

367 
rc
 = -1;

368 i‡(
•kacfûe
) {

369 i‡(
debug
)

370 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeading spki "

371 "‰om %s\n", 
__FILE__
, 
__LINE__
,

372 
•kacfûe
);

373 
rc
 = 
	`ªad_ªque°‹°uff
(&
s˚p
, 1, 
•kacfûe
);

374 } i‡(
ídªque°
) {

375 i‡(
debug
)

376 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeading X509Ñeq "

377 "‰om %s\n", 
__FILE__
, 
__LINE__
,

378 
ídªque°
);

379 
rc
 = 
	`ªad_ªque°‹°uff
(&
s˚p
, 0, 
ídªque°
);

381 i‡(
rc
 < 0) {

382 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: couldÇotÑeadÉnd "

383 "ªque° d©a\n", 
__FILE__
, 
__LINE__
);

384 
îr
;

386 i‡(
debug
)

387 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÉndÑequestÑead\n",

388 
__FILE__
, 
__LINE__
);

393 
s˚p
.
å™sId
 = 
	`key_fögî¥öt
(s˚p.
ªque°‹pubkey
);

394 i‡(
debug
)

395 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åransaction ID is %s\n",

396 
__FILE__
, 
__LINE__
, 
s˚p
.
å™sId
);

399 i‡(
	`ªad_ˇ°uff
(&
s˚p
, 
ˇ˚πfûe
) < 0) {

400 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñead CA certificate info\n",

401 
__FILE__
, 
__LINE__
);

403 i‡(
debug
)

404 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CA certificateÑead\n",

405 
__FILE__
, 
__LINE__
);

409 i‡(
•kacfûe
) {

410 i‡((
¨gc
 - 
›töd
) != 1) {

411 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: DNárgumentÇeeded\n",

412 
__FILE__
, 
__LINE__
);

413 
îr
;

415 
dn
 = 
¨gv
[
›töd
];

416 i‡(
debug
)

417 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: DNárgument is '%s'\n",

418 
__FILE__
, 
__LINE__
, 
dn
);

422 i‡(
	`∑ylﬂd_dn_to_©ås
(
msg
->
rd
.
∑ylﬂd
, 
dn
) < 0) {

423 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅoádd DNáttrs\n",

424 
__FILE__
, 
__LINE__
);

425 
îr
;

430 i‡(
pﬁl
)

431 
pﬁlögöô
;

434 
ªqvîsi⁄
) {

436 
msg
->
mesßgeTy≥
 = 
SCEP_MESSAGE_TYPE_PKCSREQ
;

437 
msg
->
rd
.
ªq
 = 
s˚p
.
˛õ¡ªq
;

441 i‡(
debug
)

442 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: building version 2 "

443 "∑ylﬂd\n", 
__FILE__
, 
__LINE__
);

444 i‡(
s˚p
.
ªque°‹ªq
)

445 
	`∑ylﬂd_£t_ªq
(
msg
->
rd
.
∑ylﬂd
, 
s˚p
.
ªque°‹ªq
);

446 i‡(
s˚p
.
ªque°‹•ki
)

447 
	`∑ylﬂd_£t_•ki
(
msg
->
rd
.
∑ylﬂd
, 
s˚p
.
ªque°‹•ki
);

450 i‡(
s˚p
.
communôy
) {

453 
msg
->
mesßgeTy≥
 = 
SCEP_MESSAGE_TYPE_V2PROXY
;

455 
msg
->
mesßgeTy≥
 = 
SCEP_MESSAGE_TYPE_V2REQUEST
;

461 i‡(
ßvedªque°fûe
) {

462 
BIO
 *
ªqbio
;

463 
ªqbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

464 
	`BIO_wrôe_fûíame
(
ªqbio
, 
ßvedªque°fûe
);

465 
ªqvîsi⁄
) {

468 
	`PEM_wrôe_bio_X509_REQ
(
ªqbio
, 
msg
->
rd
.
ªq
);

472 
	`i2d_∑ylﬂd_bio
(
ªqbio
, 
msg
->
rd
.
∑ylﬂd
);

475 
	`BIO_‰ì
(
ªqbio
);

478 
comm⁄
;

480 
pﬁlögöô
:

482 
msg
->
mesßgeTy≥
 = 
SCEP_MESSAGE_TYPE_GETCERTINITIAL
;

485 
msg
->
rd
.
is
 = (
issuî_™d_subje˘_t
 *)
	`mÆloc
(

486 (
issuî_™d_subje˘_t
));

487 
msg
->
rd
.
is
->
issuî
 = 
	`X509_gë_subje˘_«me
(
s˚p
.
ˇ˚π
);

488 
msg
->
rd
.
is
->
subje˘
 = 
NULL
;

492 i‡(
debug
)

493 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: getting subject X509_NAME\n",

494 
__FILE__
, 
__LINE__
);

495 
ªqvîsi⁄
) {

497 
msg
->
rd
.
is
->
subje˘
 = 
	`X509_REQ_gë_subje˘_«me
(
s˚p
.
˛õ¡ªq
);

500 i‡(
s˚p
.
ªque°‹ªq
)

501 
msg
->
rd
.
is
->
subje˘


502 
	`X509_REQ_gë_subje˘_«me
(
s˚p
.
ªque°‹ªq
);

503 i‡(
s˚p
.
ªque°‹•ki
) {

504 i‡(
debug
)

505 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: converting DN '%s' "

507 
__FILE__
, 
__LINE__
, 
dn
);

508 
msg
->
rd
.
is
->
subje˘
 = 
	`ld≠_to_x509
(
dn
);

512 i‡(
msg
->
rd
.
is
->
subje˘
 =
NULL
) {

513 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço subject found\n",

514 
__FILE__
, 
__LINE__
);

515 
îr
;

517 i‡(
debug
)

518 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: issueránd subject found\n",

519 
__FILE__
, 
__LINE__
);

521 
comm⁄
:

523 i‡(
	`£lfsig√d
(&
s˚p
) < 0) {

524 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo create self signed "

525 "˚πifiˇã\n", 
__FILE__
, 
__LINE__
);

526 
îr
;

528 i‡(
debug
)

529 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: self signed certificate created\n",

530 
__FILE__
, 
__LINE__
);

533 
s˚p
.
£ndîN⁄˚Lígth
 = 16;

534 
s˚p
.
£ndîN⁄˚
 = (*)
	`mÆloc
(s˚p.
£ndîN⁄˚Lígth
);

535 
	`RAND_byãs
(
s˚p
.
£ndîN⁄˚
, s˚p.
£ndîN⁄˚Lígth
);

536 i‡(
debug
)

537 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sídîN⁄˚ së\n", 
__FILE__
,

538 
__LINE__
);

539 
checkN⁄˚
 = 
s˚p
.
£ndîN⁄˚
;

542 
msg
->
ba£64
 = 1;

545 i‡(
	`ícode
(&
s˚p
) < 0) {

546 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÉncodingÅheÑequest failed\n",

547 
__FILE__
, 
__LINE__
);

548 
îr
;

550 i‡(
debug
)

551 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éncoded bytes: %d\n",

552 
__FILE__
, 
__LINE__
, 
s˚p
.
ªque°
.
Àngth
);

555 
ªpbio
 = 
	`gëªque°
(&
s˚p
);

556 i‡(
ªpbio
 =
NULL
) {

557 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅoÑead correctÑeply\n",

558 
__FILE__
, 
__LINE__
);

559 
îr
;

563 i‡(
	`decode
(&
s˚p
, 
ªpbio
) < 0) {

564 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decodingÅheÑeply failed\n",

565 
__FILE__
, 
__LINE__
);

566 
îr
;

570 
	`¥ötf
("å™ß˘i⁄ id: %s\n", 
s˚p
.
å™sId
);

571 
	`¥ötf
("PKI°©us: %s\n", (
s˚p
.
ª∂y
.
pkiSètus
)

572 ? 
s˚p
.
ª∂y
.
pkiSètus
 : "(null)");

573 
	`¥ötf
("ª∂y mesßgêty≥: %s\n", 
s˚p
.
ª∂y
.
mesßgeTy≥
);

574 i‡(
s˚p
.
ª∂y
.
Áûöfo
) {

575 
	`¥ötf
("Áûöfo: %s\n", 
s˚p
.
ª∂y
.
Áûöfo
);

579 i‡(
	`°rcmp
(
s˚p
.
ª∂y
.
mesßgeTy≥
, 
SCEP_MESSAGE_TYPE_CERTREP
)) {

580 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: only CertRep messageácceptable "

582 
__FILE__
, 
__LINE__
);

583 
îr
;

587 i‡(
	`memcmp
(
checkN⁄˚
, 
s˚p
.
ªcùõ¡N⁄˚
, 16)) {

588 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÑecipientNonce != sent "

589 "£ndîN⁄˚\n", 
__FILE__
, 
__LINE__
);

590 
îr
;

592 i‡(
debug
)

593 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: N⁄˚ check OK\n", 
__FILE__
,

594 
__LINE__
);

596 i‡(
s˚p
.
ª∂y
.
pkiSètus
 =
NULL
) {

597 
	`BIO_¥ötf
(
bio_îr
, "noÖkiStatusÑeturned\n");

598 
	`exô
(1);

601 
	`©oi
(
s˚p
.
ª∂y
.
pkiSètus
)) {

602 
PKI_SUCCESS
:

604 
s˚p
.
˛õ¡˚π
 = 
	`exåa˘_˚π
(&scep);

605 i‡(
debug
)

606 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificateÑeturned %p\n",

607 
__FILE__
, 
__LINE__
, 
s˚p
.
˛õ¡˚π
);

608 i‡(
s˚p
.
˛õ¡˚π
) {

609 
BIO
 *
cb
;

610 
cb
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

611 
	`BIO_£t_Â
(
cb
, 
°dout
, 
BIO_NOCLOSE
);

612 
	`PEM_wrôe_bio_X509
(
cb
, 
s˚p
.
˛õ¡˚π
);

613 
	`BIO_‰ì
(
cb
);

615 
	`exô
(
EXIT_SUCCESS
);

617 
PKI_FAILURE
:

618 i‡(
debug
)

619 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest failed: %s\n",

620 
__FILE__
, 
__LINE__
, 
s˚p
.
ª∂y
.
Áûöfo
);

621 
	`exô
(1);

623 
PKI_PENDING
:

624 i‡(
debug
)

625 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest stillÖending\n",

626 
__FILE__
, 
__LINE__
);

627 
	`exô
(2);

632 
îr
:

633 
	`ERR_¥öt_îr‹s
(
bio_îr
);

634 
	`exô
(
EXIT_FAILURE
);

635 
	}
}

	@rogi/openscep-0.4.2/scep/scepxid.c

9 
	~<c⁄fig.h
>

10 
	~<öô.h
>

11 
	~<s˚p.h
>

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/evp.h
>

16 
	~<›ís¶/rß.h
>

17 
	~<›ís¶/îr.h
>

18 
	~<›ís¶/≥m.h
>

19 
	~<fögî¥öt.h
>

20 
	~<mis¶.h
>

22 
›töd
;

23 *
›èrg
;

25 
	$maö
(
¨gc
, *
¨gv
[]) {

26 
c
;

27 *
ªqfûe
 = 
NULL
, *
Â
;

28 
BIO
 *
bio
;

29 
X509_REQ
 *
ªq
;

30 
EVP_PKEY
 *
pkey
;

31 
√tsˇ≥
 = 0;

32 
NETSCAPE_SPKI
 *
•ki
 = 
NULL
;

35 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dn")))

36 
c
) {

38 
debug
++;

41 
√tsˇ≥
 = 1;

46 i‡((
¨gc
 - 
›töd
) != 1) {

47 
	`Ârötf
(
°dîr
, "%s:%d:Éxactly oneárgumentÉxpected: "

48 "ªqfûe\n", 
__FILE__
, 
__LINE__
);

49 
	`exô
(
EXIT_FAILURE
);

51 
ªqfûe
 = 
¨gv
[
›töd
];

52 i‡(
debug
)

53 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: key fûêi†%s\n", 
__FILE__
,

54 
__LINE__
, 
ªqfûe
);

57 
	`s˚pöô
();

60 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

61 
	`BIO_ªad_fûíame
(
bio
, 
ªqfûe
);

62 
√tsˇ≥
) {

64 
ªq
 = 
	`PEM_ªad_bio_X509_REQ
(
bio
, 
NULL
, NULL, NULL);

65 
pkey
 = 
	`X509_REQ_gë_pubkey
(
ªq
);

68 
	`d2i_NETSCAPE_SPKI_bio
(
bio
, &
•ki
);

69 i‡(
•ki
 =
NULL
) {

70 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑead spki\n",

71 
__FILE__
, 
__LINE__
);

72 
îr
;

74 
pkey
 = 
	`NETSCAPE_SPKI_gë_pubkey
(
•ki
);

77 i‡(
pkey
 =
NULL
) {

78 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑeadÑequest\n",

79 
__FILE__
, 
__LINE__
);

80 
îr
;

84 
Â
 = 
	`key_fögî¥öt
(
pkey
);

85 i‡(
Â
 =
NULL
) {

86 
	`BIO_¥ötf
(
bio_îr
, "%s:%s:Ço key fingerprint obtained\n",

87 
__FILE__
, 
__LINE__
);

88 
îr
;

92 
	`¥ötf
("publi¯key fögî¥öt: %s\n", 
Â
);

95 
	`exô
(
EXIT_SUCCESS
);

98 
îr
:

99 
	`ERR_¥öt_îr‹s
(
bio_îr
);

100 
	`exô
(
EXIT_FAILURE
);

101 
	}
}

	@rogi/openscep-0.4.2/scepd/cafingerprint.c

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<öô.h
>

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/x509v3.h
>

16 
	~<›ís¶/îr.h
>

18 
›töd
;

19 *
›èrg
;

21 
	$maö
(
¨gc
, *
¨gv
[]) {

22 
BIO
 *
öbio
, *
out
;

23 
c
, 
i
, 
nid
;

24 *
fûíame
 = 
NULL
;

25 
X509
 *
x509
;

26 
X509_EXTENSION
 *
ex
;

29 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "")Ë!
EOF
)

30 
c
) {

36 
	`s˚pöô
();

37 
out
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

38 
	`BIO_£t_Â
(
out
, 
°dout
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

41 
fûíame
 = 
¨gv
[
›töd
];

45 
öbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

46 i‡(0 >
	`BIO_ªad_fûíame
(
öbio
, 
fûíame
)) {

47 
	`ERR_¥öt_îr‹s
(
bio_îr
);

48 
	`exô
(
EXIT_FAILURE
);

50 i‡(
NULL
 =(
x509
 = 
	`d2i_X509_bio
(
öbio
, NULL))) {

51 
	`ERR_¥öt_îr‹s
(
bio_îr
);

52 
	`exô
(
EXIT_FAILURE
);

56 
nid
 = 
	`OBJ_¢2nid
("subjectKeyIdentifier");

57 i‡(
nid
 < 0) {

58 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: object identifier for "

59 "subje˘KeyIdítifõ∏found\n", 
__FILE__
, 
__LINE__
);

60 
	`ERR_¥öt_îr‹s
(
bio_îr
);

61 
	`exô
(
EXIT_FAILURE
);

65 
i
 = 
	`X509v3_gë_ext_by_NID
(
x509
->
˚π_öfo
->
exãnsi⁄s
, 
nid
, -1);

66 i‡(
i
 < 0) {

67 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço matchingÉxtension found\n",

68 
__FILE__
, 
__LINE__
);

69 
	`ERR_¥öt_îr‹s
(
bio_îr
);

70 
	`exô
(
EXIT_FAILURE
);

72 
ex
 = 
	`X509_gë_ext
(
x509
, 
i
);

75 
	`X509V3_EXT_¥öt
(
out
, 
ex
, 0, 0);

76 
	`BIO_¥ötf
(
out
, "\n");

79 
	`exô
(
EXIT_SUCCESS
);

80 
	}
}

	@rogi/openscep-0.4.2/scepd/crl2ldap.c

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<lbî.h
>

13 
	~<ld≠.h
>

15 
›töd
;

16 *
›èrg
;

18 *
	gld≠ho°
 = "localhost";

19 
	gld≠p‹t
 = 
LDAP_PORT
;

20 *
	gböddn
 = 
NULL
;

21 *
	gbödpw
 = 
NULL
;

22 
	gdebug
 = 0;

24 
	$maö
(
¨gc
, *
¨gv
[]) {

25 
c
, 
u£d
, 
byãs
;

26 
LDAP
 *
ld≠
;

27 
LDAPMod
 
¸lmod
, *
mods
[2];

28 
bîvÆ
 
¸lvÆ
;

29 
bîvÆ
 *
¸lvÆs
[2];

30 *
buf„r
;

31 *
dn
;

34 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "D:w:b:h:p:d")))

35 
c
) {

37 
debug
++;

40 
böddn
 = 
›èrg
;

43 
bödpw
 = 
›èrg
;

46 
ld≠ho°
 = 
›èrg
;

49 
ld≠p‹t
 = 
	`©oi
(
›èrg
);

50 i‡((
ld≠p‹t
 <= 0) || (ldapport > 65535))

51 
ld≠p‹t
 = 
LDAP_PORT
;

57 i‡((
¨gc
 - 
›töd
) != 1) {

58 
	`Ârötf
(
°dîr
, "%s:%d:ÉxpectingÉxaclty oneárgument: CA "

59 "di°öguishedÇame\n", 
__FILE__
, 
__LINE__
);

60 
	`exô
(
EXIT_FAILURE
);

62 
dn
 = 
¨gv
[
›töd
];

65 
u£d
 = 0;

66 
buf„r
 = (*)
	`mÆloc
(1024);

67 0 < (
byãs
 = 
	`ªad
(0, &
buf„r
[
u£d
], 1024))) {

68 
u£d
 +
byãs
;

69 
buf„r
 = (*)
	`ªÆloc
(buf„r, 
u£d
 + 1024);

73 
ld≠
 = 
	`ld≠_öô
(
ld≠ho°
, 
ld≠p‹t
);

74 i‡(
ld≠
 =
NULL
) {

75 
	`Ârötf
(
°dîr
, "%s:%d: cannot create LDAP structure\n",

76 
__FILE__
, 
__LINE__
);

77 
	`exô
(
EXIT_FAILURE
);

79 i‡(
LDAP_SUCCESS
 !
	`ld≠_sim∂e_böd_s
(
ld≠
, 
böddn
, 
bödpw
)) {

80 
	`Ârötf
(
°dîr
, "%s:%d: cannot bindÅoÅhe directory\n",

81 
__FILE__
, 
__LINE__
);

82 
	`exô
(
EXIT_FAILURE
);

86 
¸lvÆ
.
bv_Àn
 = 
u£d
;

87 
¸lvÆ
.
bv_vÆ
 = 
buf„r
;

88 
¸lvÆs
[0] = &
¸lvÆ
;

89 
¸lvÆs
[1] = 
NULL
;

90 
¸lmod
.
mod_›
 = 
LDAP_MOD_REPLACE
 | 
LDAP_MOD_BVALUES
;

91 
¸lmod
.
mod_ty≥
 = "certificateRevocationList;binary";

92 
¸lmod
.
mod_bvÆues
 = 
¸lvÆs
;

93 
mods
[0] = &
¸lmod
;

94 
mods
[1] = 
NULL
;

96 i‡(
LDAP_SUCCESS
 !
	`ld≠_modify_s
(
ld≠
, 
dn
, 
mods
)) {

97 
	`Ârötf
(
°dîr
, "%s:%d:Öushing CRLÅo LDAP failed\n",

98 
__FILE__
, 
__LINE__
);

99 
	`exô
(
EXIT_FAILURE
);

103 
	`ld≠_unböd
(
ld≠
);

104 
	`exô
(
EXIT_SUCCESS
);

105 
	}
}

	@rogi/openscep-0.4.2/scepd/derdump.c

8 
	~<›ís¶/a¢1.h
>

9 
	~<›ís¶/îr.h
>

10 
	~<›ís¶/≥m.h
>

11 
	~<öô.h
>

12 
	~<›ís˚p_vîs.h
>

14 
›töd
;

15 *
›èrg
;

17 
	gba£64
 = 0;

19 
	$ußge
() {

20 
	`¥ötf
("usage: derdump [ -i ] [ -b ] [ file ]\n");

21 
	`¥ötf
("read data from file (or stdin)ánd dump ASN.1 structure\n");

22 
	`¥ötf
("options: -i indent ASN.1 structure for betterÑeadability\n");

23 
	`¥ötf
(" -b input data is base64Éncoded\n");

24 
	`¥ötf
(" -h displayÅhis messageándÉxit\n");

25 
	`¥ötf
(" -p strip PEM headers\n");

26 
	`¥ötf
(" -V display version\n");

27 
	}
}

29 
	$maö
(
¨gc
, *
¨gv
[]) {

30 
BIO
 *
öbio
, *
outbio
, *
b64
 = 
NULL
, *
ªadbio
, *
membio
;

31 
byãs
 = 0, 
ödít
 = 1, 
c
;

32 
Àngth
;

33 *
d©a
 = 
NULL
;

34 *
«me
 = 
NULL
, *
hódî
 = NULL;

35 *
fûíame
 = 
NULL
;

36 
≥m
 = 0;

39 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "bdhùV")Ë!
EOF
)

40 
c
) {

42 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

45 
debug
++;

48 
	`ußge
();

49 
	`exô
(
EXIT_SUCCESS
);

52 
ödít
 = 0;

55 
≥m
 = 1;

58 
	`¥ötf
("This is derdump from %s\n",

59 
›ís˚p_vîsi⁄
.
v_gnu
);

64 
	`s˚pöô
();

67 i‡(
¨gc
 - 
›töd
 > 0)

68 
fûíame
 = 
¨gv
[
›töd
];

71 
öbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

72 i‡(
fûíame
) {

73 i‡(0 >
	`BIO_ªad_fûíame
(
öbio
, 
fûíame
)) {

74 
	`ERR_¥öt_îr‹s
(
bio_îr
);

75 
	`exô
(
EXIT_FAILURE
);

78 
	`BIO_£t_Â
(
öbio
, 
°dö
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

82 
outbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

83 
	`BIO_£t_Â
(
outbio
, 
°dout
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

86 i‡(
≥m
) {

87 i‡(!
	`PEM_ªad_bio
(
öbio
, &
«me
, &
hódî
, &
d©a
, &
Àngth
)) {

88 
	`Ârötf
(
°dîr
, "%s:%d: it seemsÅhis wasn't PEM "

89 "a·îáŒ\n", 
__FILE__
, 
__LINE__
);

90 
	`exô
(
EXIT_FAILURE
);

92 i‡(
debug
) {

93 
	`Ârötf
(
°dîr
, "%s:%d: found PEM structure '%s' of "

94 "Àngth %ld\n", 
__FILE__
, 
__LINE__
,

95 
«me
, 
Àngth
);

97 i‡(
«me
)

98 
	`¥ötf
("PEMÇamed '%s' containsÅhe following DER:\n",

99 
«me
);

100 
	`OPENSSL_‰ì
(
«me
); OPENSSL_‰ì(
hódî
);

101 
d©a
;

105 i‡(
b64
 !
NULL
) {

106 
ªadbio
 = 
	`BIO_push
(
öbio
, 
b64
);

108 
ªadbio
 = 
öbio
;

112 
membio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

114 
buf„r
[1024];

115 
byãs
 = 
	`BIO_ªad
(
öbio
, 
buf„r
, (buffer));

116 i‡(
byãs
 > 0)

117 
	`BIO_wrôe
(
membio
, 
buf„r
, 
byãs
);

118 } 
byãs
 > 0);

119 
	`BIO_Êush
(
membio
);

122 
Àngth
 = 
	`BIO_gë_mem_d©a
(
membio
, &
d©a
);

125 
	`BIO_£t_Êags
(
membio
, 
BIO_FLAGS_MEM_RDONLY
);

127 
d©a
:

129 
	`ASN1_∑r£_dump
(
outbio
, 
d©a
, 
Àngth
, 
ödít
, 1);

132 
	`exô
(
EXIT_SUCCESS
);

133 
	}
}

	@rogi/openscep-0.4.2/scepd/dn2xid.c

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<lbî.h
>

11 
	~<ld≠.h
>

12 
	~<uni°d.h
>

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/îr.h
>

16 
	~<fögî¥öt.h
>

17 
	~<˘y≥.h
>

18 
	~<°rög.h
>

20 
	gdebug
 = 0;

22 
›töd
;

23 *
›èrg
;

25 *
	gld≠ho°
 = "localhost";

26 
	gld≠p‹t
 = 
LDAP_PORT
;

27 *
	gböddn
 = 
NULL
;

28 *
	gbödpw
 = 
NULL
;

30 
BIO
 *
	gbio_îr
;

32 
	$maö
(
¨gc
, *
¨gv
[]) {

33 
c
, 
Àngth
, 
l
;

34 *
dn
, *
Â
, *
p
;

35 
LDAP
 *
ld≠
;

36 
LDAPMesßge
 *
ªsu…
, *
e
;

37 
bîvÆ
 **
bs
;

38 
BIO
 *
bio
;

39 
X509
 *
x509
;

40 *
d©a
;

43 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dD:w:h:p:")))

44 
c
) {

46 
debug
++;

49 
böddn
 = 
›èrg
;

52 
bödpw
 = 
›èrg
;

55 
ld≠ho°
 = 
›èrg
;

58 
ld≠p‹t
 = 
	`©oi
(
›èrg
);

59 i‡((
ld≠p‹t
 < 0) || (ldapport > 65535))

60 
ld≠p‹t
 = 
LDAP_PORT
;

66 i‡((
¨gc
 - 
›töd
) != 1) {

67 
	`Ârötf
(
°dîr
, "%s:%d: wrongÇumber ofárguments\n",

68 
__FILE__
, 
__LINE__
);

69 
	`exô
(
EXIT_FAILURE
);

71 
dn
 = 
¨gv
[
›töd
];

74 
ld≠
 = 
	`ld≠_öô
(
ld≠ho°
, 
ld≠p‹t
);

75 i‡(
ld≠
 =
NULL
) {

76 
	`Ârötf
(
°dîr
, "%s:%d: c™nŸ c⁄√˘ÅÿLDAP\n", 
__FILE__
,

77 
__LINE__
);

78 
	`exô
(
EXIT_FAILURE
);

80 i‡(
LDAP_SUCCESS
 !
	`ld≠_sim∂e_böd_s
(
ld≠
, 
böddn
, 
bödpw
)) {

81 
	`Ârötf
(
°dîr
, "%s:%d: cannot bindÅoÅhe directory\n",

82 
__FILE__
, 
__LINE__
);

83 
	`exô
(
EXIT_FAILURE
);

87 i‡(
LDAP_SUCCESS
 !
	`ld≠_£¨ch_s
(
ld≠
, 
dn
, 
LDAP_SCOPE_BASE
,

88 "(u£rCîtifiˇã=*)", 
NULL
, 0, &
ªsu…
)) {

89 
	`Ârötf
(
°dîr
, "%s:%d: sórch f‹ '%s' faûed: %s\n", 
__FILE__
,

90 
__LINE__
, 
dn
,

91 
	`ld≠_îr2°rög
(
	`ld≠_ªsu…2îr‹
(
ld≠
, 
ªsu…
, 0)));

92 
	`exô
(
EXIT_FAILURE
);

94 i‡(
	`ld≠_cou¡_íåõs
(
ld≠
, 
ªsu…
) != 1) {

95 
	`Ârötf
(
°dîr
, "%s:%d:ÇotÉxactly oneÉntry found\n",

96 
__FILE__
, 
__LINE__
);

97 
	`exô
(
EXIT_FAILURE
);

99 
e
 = 
	`ld≠_fú°_íåy
(
ld≠
, 
ªsu…
);

102 
bs
 = 
	`ld≠_gë_vÆues_Àn
(
ld≠
, 
e
, "userCertificate;binary");

103 i‡(
bs
 == 0) {

104 
	`Ârötf
(
°dîr
, "%s:%d: userCertificateÇot found\n",

105 
__FILE__
, 
__LINE__
);

106 
	`exô
(
EXIT_FAILURE
);

108 i‡(
bs
[1] !
NULL
) {

109 
	`Ârötf
(
°dîr
, "%s:%d: cannot handle moreÅhan one "

110 "˚πifiˇã\n", 
__FILE__
, 
__LINE__
);

111 
	`exô
(
EXIT_FAILURE
);

115 
	`ERR_lﬂd_¸y±o_°rögs
();

116 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

117 
bio_îr
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

118 
	`BIO_£t_Â
(
bio_îr
, 
°dîr
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

121 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

122 i‡(
bs
[0]->
bv_Àn
 !
	`BIO_wrôe
(
bio
, bs[0]->
bv_vÆ
, bs[0]->bv_len)) {

123 
	`Ârötf
(
°dîr
, "%s:%d: writing certÅo bio failed\n",

124 
__FILE__
, 
__LINE__
);

125 
	`exô
(
EXIT_FAILURE
);

129 
x509
 = 
	`d2i_X509_bio
(
bio
, 
NULL
);

130 
	`BIO_‰ì
(
bio
);

133 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

134 
	`i2d_PUBKEY_bio
(
bio
, 
	`X509_gë_pubkey
(
x509
));

137 
Àngth
 = 
	`BIO_gë_mem_d©a
(
bio
, &
d©a
);

138 
	`BIO_£t_Êags
(
bio
, 
BIO_FLAGS_MEM_RDONLY
);

139 
	`BIO_‰ì
(
bio
);

142 
Â
 = 
	`fögî¥öt
(
d©a
, 
Àngth
);

145 
p
 = 
Â
;

146 
p
 = 
Â
; *p;Ö++) {

147 (*
p
Ë&& (
	`is•a˚
(*p))) {

148 
l
 = 
	`°æí
(
p
 + 1);

149 
	`memmove
(
p
,Ö + 1, 
	`°æí
(p + 1));

150 *(
p
 + 
l
) = '\0';

155 
	`¥ötf
("%s\n", 
Â
);

158 
	`ld≠_unböd
(
ld≠
);

159 
	`exô
(
EXIT_SUCCESS
);

160 
	}
}

	@rogi/openscep-0.4.2/scepd/scepconf.c

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<c⁄fig.h
>

12 
	~<uni°d.h
>

13 
	~<›ís¶/c⁄f.h
>

14 
	~<›ís¶/îr.h
>

16 *
	gc⁄ffûe
 = 
OPENSCEPDIR
 "/openscep.cnf";

18 *
›èrg
;

19 
›töd
;

20 
	gdebug
 = 0;

22 
	$maö
(
¨gc
, *
¨gv
[]) {

23 
LHASH
 *
c⁄f
;

24 
ñöe
;

25 *
£˘i⁄
 = 
NULL
, *
v¨übÀ
 = NULL, *
vÆue
;

26 
c
, 
n
;

29 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "df:")))

30 
c
) {

32 
debug
++;

35 
c⁄ffûe
 = 
›èrg
;

39 i‡(
debug
)

40 
	`Ârötf
(
°dîr
, "%s:%d: configuration file is '%s'\n",

41 
__FILE__
, 
__LINE__
, 
c⁄ffûe
);

44 
n
 = 
¨gc
 - 
›töd
;

45 i‡((
n
 < 1) || (n > 2)) {

46 
	`Ârötf
(
°dîr
, "%s:%d: wrongÇumber ofárguments\n",

47 
__FILE__
, 
__LINE__
);

48 
	`exô
(
EXIT_FAILURE
);

50 
n
) {

52 
£˘i⁄
 = 
¨gv
[
›töd
++];

54 
v¨übÀ
 = 
¨gv
[
›töd
];

59 
c⁄f
 = 
	`CONF_lﬂd
(
NULL
, 
c⁄ffûe
, &
ñöe
);

60 i‡(
c⁄f
 =
NULL
) {

61 
	`ERR_lﬂd_¸y±o_°rögs
();

62 
	`Ârötf
(
°dîr
, "unableÅoÜoad configuration,Üine %ld\n",

63 
ñöe
);

64 
	`ERR_¥öt_îr‹s_Â
(
°dîr
);

65 
	`exô
(
EXIT_FAILURE
);

69 i‡(
debug
)

70 
	`Ârötf
(
°dîr
, "%s:%d:Üooking for '%s' in section '%s'\n",

71 
__FILE__
, 
__LINE__
, 
v¨übÀ
,

72 (
£˘i⁄
) ? section : "(null)");

73 
vÆue
 = 
	`CONF_gë_°rög
(
c⁄f
, 
£˘i⁄
, 
v¨übÀ
);

74 i‡(
vÆue
 =
NULL
) {

75 i‡(
debug
)

76 
	`Ârötf
(
°dîr
, "%s:%d:ÇÿvÆuêfound\n", 
__FILE__
,

77 
__LINE__
);

78 
	`exô
(
EXIT_FAILURE
);

80 i‡(
debug
)

81 
	`Ârötf
(
°dîr
, "%s:%d [%s]%†%s\n", 
__FILE__
, 
__LINE__
,

82 (
£˘i⁄
Ë? se˘i⁄ : "-", 
v¨übÀ
, 
vÆue
);

83 
	`¥ötf
("%s\n", 
vÆue
);

84 
	`exô
(
EXIT_SUCCESS
);

85 
	}
}

	@rogi/openscep-0.4.2/scepd/scepd.c

8 
	~<c⁄fig.h
>

9 
	~<s˚p.h
>

10 
	~<öô.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/°©.h
>

13 
	~<f˙é.h
>

14 
	~<uni°d.h
>

15 
	~<ld≠.h
>

16 
	~<î∫o.h
>

17 
	~<°rög.h
>

18 
	~<sy¶og.h
>

19 
	~<sys/times.h
>

20 
	~<s˚∂d≠.h
>

21 
	~<decode.h
>

22 
	~<ícode.h
>

23 
	~<gë˚π.h
>

24 
	~<gë¸l.h
>

25 
	~<gë˚πöôül.h
>

26 
	~<pkc§eq.h
>

27 
	~<˚πªp.h
>

28 
	~<¥oxy.h
>

29 
	~<v2ªque°.h
>

30 
	~<›ís¶/ønd.h
>

31 
	~<›ís¶/îr.h
>

53 
	$logtimes
(
tms
 *
°¨t
) {

54 
tms
 
íd
;

55 
ticks
;

58 i‡((
ticks
 = 
	`sysc⁄f
(
_SC_CLK_TCK
)) < 0) {

59 i‡(
debug
)

60 
	`Ârötf
(
°dîr
, "%s:%d: cannot determine clockÅicks\n",

61 
__FILE__
, 
__LINE__
);

62 
ticks
 = 100;

66 
	`times
(&
íd
);

69 
	`sy¶og
(
LOG_INFO
, "times scepd: %.2f user %.2f system, "

71 (
íd
.
tms_utime
 - 
°¨t
->tms_utime)/()
ticks
,

72 (
íd
.
tms_°ime
 - 
°¨t
->tms_°ime)/()
ticks
,

73 (
íd
.
tms_cutime
 - 
°¨t
->tms_cutime)/()
ticks
,

74 (
íd
.
tms_c°ime
 - 
°¨t
->tms_c°ime)/()
ticks
);

75 
	}
}

77 
	$maö
(
¨gc
, *
¨gv
[]) {

78 
s˚p_t
 
s˚p
;

79 
c
, 
rc
, 
byãs
, 
fd
;

80 
fûíame
[1024];

81 
BIO
 *
öbio
 = 
NULL
, *
outbio
, *
membio
;

82 *
c⁄ffûe
;

83 
tms
 
°¨t
;

86 
	`times
(&
°¨t
);

90 
	`s˚p_˛ór
(&
s˚p
);

91 i‡(
debug
)

92 
	`Ârötf
(
°dîr
, "%s:%d: cleared scep structure\n",

93 
__FILE__
, 
__LINE__
);

96 
	`s˚pöô
();

97 i‡(
debug
)

98 
	`Ârötf
(
°dîr
, "%s:%d: initializedÜibraries\n",

99 
__FILE__
, 
__LINE__
);

102 
	`umask
(022);

105 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "df:")))

106 
c
) {

108 
debug
++;

111 
c⁄ffûe
 = 
›èrg
;

112 i‡(
debug
)

113 
	`Ârötf
(
°dîr
, "%s:%d: config file is %s\n",

114 
__FILE__
, 
__LINE__
, 
c⁄ffûe
);

119 
	`s˚p_c⁄fig
(&
s˚p
, (
c⁄ffûe
Ë? c⁄ffûê: 
OPENSCEPDIR
 "/openscep.cnf");

122 
	`s˚p_ld≠_öô
(&
s˚p
);

126 
öbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

127 
	`BIO_£t_Â
(
öbio
, 
°dö
, 
BIO_NOCLOSE
);

128 
membio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

130 
buf„r
[1024];

131 
byãs
 = 
	`BIO_ªad
(
öbio
, 
buf„r
, (buffer));

132 i‡(
byãs
 > 0) {

133 
	`BIO_wrôe
(
membio
, 
buf„r
, 
byãs
);

134 i‡(
debug
)

135 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: writing chunk of"

136 "sizê%d\n", 
__FILE__
, 
__LINE__
, 
byãs
);

138 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço more data from inbio\n",

139 
__FILE__
, 
__LINE__
);

141 } 
byãs
 > 0);

142 
	`BIO_Êush
(
membio
);

148 
s˚p
.
ªque°
.
ba£64
 = 1;

149 i‡(
	`decode
(&
s˚p
, 
membio
) < 0) {

150 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decodêÁûed\n", 
__FILE__
,

151 
__LINE__
);

152 
	`sy¶og
(
LOG_ERR
, "%s:%d: scepd failedÅo decodeÑequest",

153 
__FILE__
, 
__LINE__
);

154 
îr
;

156 
	`BIO_‰ì
(
membio
);

159 i‡(
debug
) {

160 
«me
[1024];

161 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: message withÅransaction id %s\n",

162 
__FILE__
, 
__LINE__
, 
s˚p
.
å™sId
);

163 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
((
s˚p
.
£lfsig√d˚π
)

164 ? 
s˚p
.
£lfsig√d˚π
 : s˚p.
˛õ¡˚π
), 
«me
, 1024);

165 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sídî i†%s\n", 
__FILE__
, 
__LINE__
,

166 
«me
);

170 i‡(
s˚p
.
ªcùõ¡N⁄˚
) {

171 
	`‰ì
(
s˚p
.
ªcùõ¡N⁄˚
);

173 
s˚p
.
ªcùõ¡N⁄˚
 = s˚p.
£ndîN⁄˚
;

174 
s˚p
.
ªcùõ¡N⁄˚Lígth
 = s˚p.
£ndîN⁄˚Lígth
;

175 
s˚p
.
£ndîN⁄˚Lígth
 = 16;

176 
s˚p
.
£ndîN⁄˚
 = (*)
	`mÆloc
(s˚p.
£ndîN⁄˚Lígth
);

177 
	`RAND_byãs
(
s˚p
.
£ndîN⁄˚
, s˚p.
£ndîN⁄˚Lígth
);

180 i‡(
s˚p
.
ªque°
.
mesßgeTy≥
 =
NULL
) {

181 
	`sy¶og
(
LOG_ERR
, "%s:%d: message of undefinedÅypeÑeceived",

182 
__FILE__
, 
__LINE__
);

183 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: undefined messageÅype\n",

184 
__FILE__
, 
__LINE__
);

185 
îr
;

187 
s˚p
.
ª∂y
.
mesßgeTy≥
 = 
SCEP_MESSAGE_TYPE_CERTREP
;

188 
	`©oi
(
s˚p
.
ªque°
.
mesßgeTy≥
)) {

189 
MSG_CERTREP
:

190 
	`sy¶og
(
LOG_WARNING
, "%s:%d: CertRep message, shouldÇot happen",

191 
__FILE__
, 
__LINE__
);

192 i‡(
debug
)

193 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CertRep messageÑeceived\n",

194 
__FILE__
, 
__LINE__
);

195 
rc
 = 
	`˚πªp
(&
s˚p
);

197 
MSG_V2PROXY
:

201 
MSG_V2REQUEST
:

203 
rc
 = 
	`v2ªque°
(&
s˚p
);

205 
MSG_PKCSREQ
:

206 
	`sy¶og
(
LOG_INFO
, "%s:%d: PKCSReq mesßgêª˚ived", 
__FILE__
,

207 
__LINE__
);

208 i‡(
debug
)

209 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: PKCSReq messageÑeceived\n",

210 
__FILE__
, 
__LINE__
);

211 
rc
 = 
	`pkc§eq
(&
s˚p
);

213 
MSG_GETCERTINITIAL
:

214 
	`sy¶og
(
LOG_INFO
, "%s:%d: GetCertInitial messageÑeceived",

215 
__FILE__
, 
__LINE__
);

216 i‡(
debug
)

217 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: GetCertInitial message "

218 "ª˚ived\n", 
__FILE__
, 
__LINE__
);

219 
rc
 = 
	`gë˚πöôül
(&
s˚p
);

221 
MSG_GETCERT
:

222 
	`sy¶og
(
LOG_INFO
, "%s:%d: GetCert messageÑeceived",

223 
__FILE__
, 
__LINE__
);

224 i‡(
debug
)

225 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: GetCert messageÑeceived\n",

226 
__FILE__
, 
__LINE__
);

227 
rc
 = 
	`gë˚π
(&
s˚p
);

229 
MSG_GETCRL
:

230 
	`sy¶og
(
LOG_INFO
, "%s:%d: GëCRL mesßgêª˚ived", 
__FILE__
,

231 
__LINE__
);

232 i‡(
debug
)

233 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: GetCRL messageÑeceived\n",

234 
__FILE__
, 
__LINE__
);

235 
rc
 = 
	`gë¸l
(&
s˚p
);

238 
	`sy¶og
(
LOG_WARNING
, "%s:%d: message of unknownÅype: %s",

239 
__FILE__
, 
__LINE__
, 
s˚p
.
ªque°
.
mesßgeTy≥
);

240 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: unknown messageÅype: %s\n",

241 
__FILE__
, 
__LINE__
, 
s˚p
.
ªque°
.
mesßgeTy≥
);

242 
s˚p
.
ª∂y
.
Áûöfo
 = 
SCEP_FAILURE_BADREQUEST
;

245 
¥ïª∂y
:

246 i‡(
debug
)

247 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÑeplyÖrepared,Éncoding follows\n",

248 
__FILE__
, 
__LINE__
);

250 i‡(
rc
 < 0) {

252 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: badÑeturn code from handler\n",

253 
__FILE__
, 
__LINE__
);

254 
s˚p
.
ª∂y
.
Áûöfo
 = 
SCEP_FAILURE_BADREQUEST
;

258 i‡(
	`ícode
(&
s˚p
) < 0) {

259 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éncodög faûed\n", 
__FILE__
,

260 
__LINE__
);

261 
	`sy¶og
(
LOG_ERR
, "%s:%d: scepd failedÅoÉncodeÅheÑeply",

262 
__FILE__
, 
__LINE__
);

263 
îr
;

267 i‡(
debug
)

268 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖreparingÑeply headers\n",

269 
__FILE__
, 
__LINE__
);

270 
	`¥ötf
("Content-Transfer-Encoding: 8bit\r\n");

271 
	`¥ötf
("Content-Type:ápplication/x-pki-message\r\n");

272 
	`¥ötf
("C⁄ã¡-Lígth: %d\r\n\r\n", 
s˚p
.
ª∂y
.
Àngth
);

273 
	`fÊush
(
°dout
);

274 i‡(
debug
)

275 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: hódî†£¡\n", 
__FILE__
,

276 
__LINE__
);

279 i‡(
s˚p
.
ª∂y
.
Àngth
 !(
byãs
 = 
	`wrôe
(
	`fûío
(
°dout
), s˚p.ª∂y.
d©a
,

280 
s˚p
.
ª∂y
.
Àngth
))) {

281 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: message write incomplete "

282 "%d !%d\n", 
__FILE__
, 
__LINE__
, 
s˚p
.
ª∂y
.
d©a
,

283 
byãs
);

285 
	`¥ötf
("\r\n");

286 i‡(
debug
)

287 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: %d bytes of content sent\n",

288 
__FILE__
, 
__LINE__
, 
byãs
);

291 i‡(
debug
) {

292 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.pkireply.der",

293 
tmµ©h
, 
	`gëpid
());

294 
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

295 
	`wrôe
(
fd
, 
s˚p
.
ª∂y
.
d©a
, s˚p.ª∂y.
Àngth
);

296 
	`˛o£
(
fd
);

297 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeply writtenÅo file %s\n",

298 
__FILE__
, 
__LINE__
, 
fûíame
);

300 
	`BIO_‰ì
(
outbio
);

303 
	`ERR_¥öt_îr‹s
(
bio_îr
);

304 
	`sy¶og
(
LOG_DEBUG
, "%s:%d: scepd successfully completed",

305 
__FILE__
, 
__LINE__
);

306 
	`logtimes
(&
°¨t
);

307 
	`exô
(
EXIT_SUCCESS
);

310 
îr
:

311 
	`ERR_¥öt_îr‹s
(
bio_îr
);

312 
	`sy¶og
(
LOG_DEBUG
, "%s:%d: s˚pd faûed", 
__FILE__
, 
__LINE__
);

313 
	`logtimes
(&
°¨t
);

314 
	`exô
(
EXIT_FAILURE
);

315 
	}
}

	@rogi/openscep-0.4.2/scepd/sceplist.c

8 
	~<c⁄fig.h
>

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<s˚p.h
>

12 
	~<öô.h
>

13 
	~<°rög.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/îr.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<dúít.h
>

18 
	~<î∫o.h
>

19 
	~<time.h
>

21 
	#SORT_TRANSID
 1

	)

22 
	#SORT_NAME
 2

	)

23 
	#SORT_NOTBEFORE
 3

	)

24 
	#SORT_NOTAFTER
 4

	)

25 
	#SORT_SERIAL
 5

	)

27 
	#SELECT_PENDING
 0

	)

28 
	#SELECT_GRANTED
 1

	)

29 
	#SELECT_REJECTED
 2

	)

30 
	#SELECT_REVOKED
 3

	)

32 
	gs‹t‹dî
 = 
SORT_NAME
;

33 
	gôem£À˘
 = 
SELECT_PENDING
;

34 
	ghtml
 = 0;

35 
	gªvî£
 = 1;

36 
	g˘imef‹m©
 = 0;

38 
›töd
;

39 *
›èrg
;

41 
	#ITEM_TYPE_CERT
 1

	)

42 
	#ITEM_TYPE_REQ
 2

	)

44 *
	g£À˘«me
[4] = {

48 
	ss˚pôem
 {

49 
	mty≥
;

50 *
	mkey
;

51 *
	må™sid
;

53 
X509
 *
	mx509
;

54 
X509_REQ
 *
	mªq
;

55 *
	m™y
;

56 } 
	md©a
;

57 } 
	ts˚pôem_t
;

63 *
a¢1_time_to_°rög
(
ASN1_TIME
 *
tm
);

64 
s˚pôem_t
 *
ªadôem
(*
å™sid
);

65 
di•œy_ôem
(
s˚pôem_t
 *
ù
);

66 
di•œy_˚π
(
s˚pôem_t
 *
ù
);

67 
di•œy_ªq
(
s˚pôem_t
 *
ù
);

69 
cmp_°rög
(
s˚pôem_t
 **, scepitem_t **);

70 
cmp_a¢1_öãgî
(
s˚pôem_t
 **, scepitem_t **);

72 
	$cmp_°rög
(
s˚pôem_t
 **
a
, s˚pôem_à**
b
) {

73  
ªvî£
 * 
	`°rcmp
((*)(*
a
)->
key
, (*)(*
b
)->key);

74 
	}
}

76 
	$cmp_a¢1_öãgî
(
s˚pôem_t
 **
a
, s˚pôem_à**
b
) {

77  
ªvî£
 * 
	`ASN1_INTEGER_cmp
((
ASN1_INTEGER
 *)(*
a
)->
key
,

78 (
ASN1_INTEGER
 *)(*
b
)->
key
);

79 
	}
}

81 (*
com∑ª
)(
s˚pôem_t
 **, s˚pôem_à**Ë
cmp_°rög
;

86 *
	$a¢1_time_to_°rög
(
ASN1_TIME
 *
tm
) {

87 *
ªsu…
;

90 
ªsu…
 = (*)
	`mÆloc
(
tm
->
Àngth
 + 1);

91 
ªsu…
[
tm
->
Àngth
] = '\0';

92 
	`mem˝y
(
ªsu…
, 
tm
->
d©a
,Åm->
Àngth
);

93  
ªsu…
;

94 
	}
}

99 
time_t
 
timez⁄e
;

100 #ifde‡
HAVE_ALTZONE


101 
time_t
 
Ætz⁄e
;

103 
time_t
 
	$a¢1_time_to_time
(
ASN1_TIME
 *
tm
) {

104 
tm
 
πm
;

105 
w‹k
[3];

106 
time_t
 
π
;

109 
	`mem£t
(
w‹k
, '\0', (work));

110 
	`mem£t
(&
πm
, 0, (
tm
));

113 
	`mem˝y
(
w‹k
, 
tm
->
d©a
 + 10, 2);

114 
πm
.
tm_£c
 = 
	`©oi
(
w‹k
);

115 
	`mem˝y
(
w‹k
, 
tm
->
d©a
 + 8, 2);

116 
πm
.
tm_mö
 = 
	`©oi
(
w‹k
);

117 
	`mem˝y
(
w‹k
, 
tm
->
d©a
 + 6, 2);

118 
πm
.
tm_hour
 = 
	`©oi
(
w‹k
);

119 
	`mem˝y
(
w‹k
, 
tm
->
d©a
 + 4, 2);

120 
πm
.
tm_mday
 = 
	`©oi
(
w‹k
);

121 
	`mem˝y
(
w‹k
, 
tm
->
d©a
 + 2, 2);

122 
πm
.
tm_m⁄
 = 
	`©oi
(
w‹k
);

123 
	`mem˝y
(
w‹k
, 
tm
->
d©a
, 2);

124 
πm
.
tm_yór
 = 
	`©oi
(
w‹k
);

125 i‡(
πm
.
tm_yór
 < 70)

126 
πm
.
tm_yór
 += 100;

129 
timez⁄e
 = 0;

130 #ifde‡
HAVE_ALTZONE


131 
Ætz⁄e
 = 0;

136 
π
 = 
	`mktime
(&
πm
);

139 
	`tz£t
();

141  
π
;

142 
	}
}

147 *
	$a¢1_time_to_˘ime
(
ASN1_TIME
 *
tm
) {

148 *
˘imîesu…
, *
a
;

149 
time_t
 
t
;

151 
t
 = 
	`a¢1_time_to_time
(
tm
);

152 
a
 = 
	`˘ime
(&
t
);

153 
˘imîesu…
 = (*)
	`mÆloc
(
	`°æí
(
a
) + 1);

154 
	`mem˝y
(
˘imîesu…
, 
a
, 
	`°æí
(a) + 1);

155  
˘imîesu…
;

156 
	}
}

158 
s˚pôem_t
 *
	$ªadôem
(*
å™sid
) {

159 
s˚pôem_t
 *
si
;

160 
BIO
 *
bio
;

161 
fûíame
[1024];

162 
⁄ñöe
[1024];

163 
X509_NAME
 *
«me
;

166 
si
 = (
s˚pôem_t
 *)
	`mÆloc
((scepitem_t));

169 
si
->
å™sid
 = 
	`°rdup
(transid);

172 
si
->
å™sid
[32] = '\0';

175 
ôem£À˘
) {

176 
SELECT_PENDING
:

177 
SELECT_REJECTED
:

178 
si
->
ty≥
 = 
ITEM_TYPE_REQ
;

180 
SELECT_GRANTED
:

181 
SELECT_REVOKED
:

182 
si
->
ty≥
 = 
ITEM_TYPE_CERT
;

187 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%s/%s.dî", 
OPENSCEPDIR
,

188 
£À˘«me
[
ôem£À˘
], 
si
->
å™sid
);

189 i‡(
debug
)

190 
	`Ârötf
(
°dîr
, "%s:%d:Åryög fûê'%s'\n", 
__FILE__
, 
__LINE__
,

191 
fûíame
);

194 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

195 i‡(
	`BIO_ªad_fûíame
(
bio
, 
fûíame
) < 0) {

196 
	`Ârötf
(
°dîr
, "%s:%d: c™nŸ o≥¿fûê%s\n", 
__FILE__
,

197 
__LINE__
, 
fûíame
);

198  
NULL
;

200 
si
->
ty≥
) {

201 
ITEM_TYPE_REQ
:

202 
si
->
d©a
.
ªq
 = 
	`d2i_X509_REQ_bio
(
bio
, 
NULL
);

204 
ITEM_TYPE_CERT
:

205 
si
->
d©a
.
x509
 = 
	`d2i_X509_bio
(
bio
, 
NULL
);

208 i‡(
si
->
d©a
.
™y
 =
NULL
) {

209 
	`Ârötf
(
°dîr
, "%s:%d: cannot decode item,Årans id %s\n",

210 
__FILE__
, 
__LINE__
, 
si
->
å™sid
);

211 
	`ERR_¥öt_îr‹s
(
bio_îr
);

212  
NULL
;

214 i‡(
debug
)

215 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: gŸÇew iãm\n", 
__FILE__
,

216 
__LINE__
);

220 
s‹t‹dî
) {

221 
SORT_TRANSID
:

222 
si
->
key
 = 
	`°rdup
(si->
å™sid
);

224 
SORT_NAME
:

225 
«me
 = (
si
->
ty≥
 =
ITEM_TYPE_REQ
)

226 ? 
	`X509_REQ_gë_subje˘_«me
(
si
->
d©a
.
ªq
)

227 : 
	`X509_gë_subje˘_«me
(
si
->
d©a
.
x509
);

228 
	`X509_NAME_⁄ñöe
(
«me
, 
⁄ñöe
, (oneline));

229 
si
->
key
 = 
	`°rdup
(
⁄ñöe
);

231 
SORT_NOTBEFORE
:

232 
si
->
key
 = 
	`a¢1_time_to_°rög
(
	`X509_gë_nŸBef‹e
(

233 
si
->
d©a
.
x509
));

235 
SORT_NOTAFTER
:

236 
si
->
key
 = 
	`a¢1_time_to_°rög
(
	`X509_gë_nŸA·î
(si->
d©a
.
x509
));

238 
SORT_SERIAL
:

239 
si
->
key
 = 
	`X509_gë_£rülNumbî
(si->
d©a
.
x509
);

244  
si
;

245 
	}
}

247 
	$di•œy_˚π
(
s˚pôem_t
 *
ù
) {

248 
subje˘
[1024], 
issuî
[1024];

249 *
nŸbef‹e
, *
nŸa·î
;

250 *
£rül
, *
n
;

251 
l
;

252 
BIO
 *
a
;

254 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
ù
->
d©a
.
x509
), 
subje˘
,

255 (
subje˘
));

256 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
ù
->
d©a
.
x509
), 
issuî
,

257 (
issuî
));

258 
a
 = 
	`BIO_√w
(
	`BIO_s_mem
());

259 
	`i2a_ASN1_INTEGER
(
a
, 
	`X509_gë_£rülNumbî
(
ù
->
d©a
.
x509
));

260 
l
 = 
	`BIO_gë_mem_d©a
(
a
, &
n
);

261 
£rül
 = (*)
	`mÆloc
(
l
 + 1);

262 
£rül
[
l
] = '\0';

263 
	`mem˝y
(
£rül
, 
n
, 
l
);

264 
	`BIO_‰ì
(
a
);

265 i‡(
˘imef‹m©
) {

266 
nŸbef‹e
 = 
	`a¢1_time_to_˘ime
(
	`X509_gë_nŸBef‹e
(

267 
ù
->
d©a
.
x509
));

268 
nŸa·î
 = 
	`a¢1_time_to_˘ime
(
	`X509_gë_nŸA·î
(

269 
ù
->
d©a
.
x509
));

271 
nŸbef‹e
 = 
	`a¢1_time_to_°rög
(
	`X509_gë_nŸBef‹e
(

272 
ù
->
d©a
.
x509
));

273 
nŸa·î
 = 
	`a¢1_time_to_°rög
(
	`X509_gë_nŸA·î
(

274 
ù
->
d©a
.
x509
));

277 i‡(
html
) {

278 
	`¥ötf
("<tr>\n"

284 
subje˘
, 
£rül
, 
nŸbef‹e
, 
nŸa·î


287 
	`¥ötf
("%s\t%s\t%s\t%s\n", 
nŸbef‹e
, 
nŸa·î
, 
£rül
,

288 
subje˘
);

291 
	`‰ì
(
nŸbef‹e
); fªe(
nŸa·î
);

292 
	}
}

294 
	$di•œy_ªq
(
s˚pôem_t
 *
ù
) {

295 
subje˘
[1024];

296 *
fögî¥öt
 = "";

297 
	`X509_NAME_⁄ñöe
(
	`X509_REQ_gë_subje˘_«me
(
ù
->
d©a
.
ªq
), 
subje˘
,

298 (
subje˘
));

299 i‡(
html
) {

300 
	`¥ötf
("<tr>\n"

303 "</å>\n", 
subje˘
, 
fögî¥öt
);

305 
	`¥ötf
("%s\t%s\n", 
subje˘
, 
fögî¥öt
);

307 
	}
}

309 
	$di•œy_ôem
(
s˚pôem_t
 *
ù
) {

310 
ù
->
ty≥
) {

311 
ITEM_TYPE_CERT
:

312 
	`di•œy_˚π
(
ù
);

314 
ITEM_TYPE_REQ
:

315 
	`di•œy_ªq
(
ù
);

318 
	}
}

320 
	$maö
(
¨gc
, *
¨gv
[]) {

321 
c
;

322 
s˚p_t
 
s˚p
;

323 *
nŸbef‹e
 = 
NULL
, *
nŸa·î
 = NULL;

324 
w‹kdú
[1024];

325 
ôems
 = 0;

326 
s˚pôem_t
 **
ôemli°
 = 
NULL
;

327 
s˚pôem_t
 **
ù
;

328 
DIR
 *
dú
;

329 
dúít
 *
d
;

332 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "abcdghnprstvx")))

333 
c
) {

335 
s‹t‹dî
 = 
SORT_NOTAFTER
;

336 
com∑ª
 = 
cmp_°rög
;

339 
s‹t‹dî
 = 
SORT_NOTBEFORE
;

340 
com∑ª
 = 
cmp_°rög
;

343 
˘imef‹m©
 = 1;

346 
debug
++;

349 
ôem£À˘
 = 
SELECT_GRANTED
;

352 
html
 = 1;

355 
s‹t‹dî
 = 
SORT_NAME
;

356 
com∑ª
 = 
cmp_°rög
;

359 
ôem£À˘
 = 
SELECT_PENDING
;

362 
ôem£À˘
 = 
SELECT_REJECTED
;

365 
s‹t‹dî
 = 
SORT_SERIAL
;

366 
com∑ª
 = 
cmp_a¢1_öãgî
;

369 
s‹t‹dî
 = 
SORT_TRANSID
;

370 
com∑ª
 = 
cmp_°rög
;

373 
ôem£À˘
 = 
SELECT_REVOKED
;

376 
ªvî£
 *= -1;

381 i‡(
¨gc
 > 
›töd
) {

382 
nŸbef‹e
 = 
¨gv
[
›töd
++];

384 i‡(
¨gc
 > 
›töd
) {

385 
nŸa·î
 = 
¨gv
[
›töd
];

389 
	`s˚pöô
();

390 
	`s˚p_c⁄fig
(&
s˚p
, 
OPENSCEPDIR
 "/openscep.cnf");

393 
	`¢¥ötf
(
w‹kdú
, (w‹kdú), 
OPENSCEPDIR
 "/%s",

394 
£À˘«me
[
ôem£À˘
]);

399 
	`¢¥ötf
(
w‹kdú
, (w‹kdú), "%s/%s", 
OPENSCEPDIR
,

400 
£À˘«me
[
ôem£À˘
]);

401 i‡(
NULL
 =(
dú
 = 
	`›ídú
(
w‹kdú
))) {

402 
	`Ârötf
(
°dîr
, "%s:%d: cannot open directory %s: %s (%d)\n",

403 
__FILE__
, 
__LINE__
, 
w‹kdú
, 
	`°ªº‹
(
î∫o
),Érrno);

404 
	`exô
(
EXIT_FAILURE
);

406 (
d
 = 
	`ªaddú
(
dú
))) {

408 i‡(0 =
	`°rcmp
(
d
->
d_«me
 + 32, ".der")) {

409 
ôems
++;

410 
ôemli°
 = (
s˚pôem_t
 **)
	`ªÆloc
(itemlist,

411 (
s˚pôem_t
 *Ë* (
ôems
 + 1));

412 
ôemli°
[
ôems
 - 1] = 
	`ªadôem
(
d
->
d_«me
);

413 
ôemli°
[
ôems
] = 
NULL
;

418 i‡(
debug
) {

419 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sorting %d items inárrayát %p\n",

420 
__FILE__
, 
__LINE__
, 
ôems
, 
ôemli°
);

422 
	`qs‹t
(
ôemli°
, 
ôems
, (
s˚pôem_t
 *),

423 ((*)(c⁄° *, c⁄° *))
com∑ª
);

426 i‡(
ôemli°
)

427 
ù
 = 
ôemli°
; *ip; ip++) {

429 
	`di•œy_ôem
(*
ù
);

433 
	`exô
(
EXIT_SUCCESS
);

434 
	}
}

	@scep/scep.c

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<c⁄fig.h
>

11 
	~<öô.h
>

12 
	~<›ís¶/bio.h
>

13 
	~<›ís¶/≥m.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/îr.h
>

16 
	~<›ís¶/ønd.h
>

17 
	~<£lfsig√d.h
>

18 
	~<¸óãªq.h
>

19 
	~<uni°d.h
>

20 
	~<fögî¥öt.h
>

21 
	~<hâp.h
>

22 
	~<ícode.h
>

23 
	~<decode.h
>

24 
	~<mis¶.h
>

25 
	~<s˚∂d≠.h
>

27 
›töd
;

28 *
›èrg
;

38 
X509
 *
	$exåa˘_˚π
(
s˚p_t
 *
s˚p
) {

39 
PKCS7
 *
p7
;

40 
	`STACK_OF
(
X509
Ë*
˚πs
;

41 
X509
 *
x
;

42 
i
, 
n˚πs
;

43 
«me_buf„r
[1024];

46 
p7
 = 
s˚p
->
ª∂y
.
rd
.p7;

49 
˚πs
 = 
p7
->
d
.
sign
->
˚π
;

50 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: %d certificates inÅheÖkcs7\n",

51 
__FILE__
, 
__LINE__
, 
n˚πs
 = 
	`sk_X509_num
(
˚πs
));

52 i‡(
n˚πs
 != 2) {

55 
i
 = 0; i < 
	`sk_X509_num
(
˚πs
); i++) {

56 
x
 = 
	`sk_X509_vÆue
(
˚πs
, 
i
);

60 i‡(
	`X509_NAME_cmp
(
	`X509_gë_issuî_«me
(
x
),

61 
	`X509_gë_subje˘_«me
(
s˚p
->
ˇ˚π
))) {

62 
nŸ
;

66 i‡(
	`X509_NAME_cmp
(
	`X509_gë_subje˘_«me
(
x
),

67 
	`X509_gë_subje˘_«me
(
s˚p
->
ˇ˚π
)) == 0) {

68 i‡(
debug
)

69 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: skipping CA cert\n",

70 
__FILE__
, 
__LINE__
);

71 
nŸ
;

76 i‡(
	`ASN1_INTEGER_cmp
(
	`X509_gë_£rülNumbî
(
x
),

77 
	`X509_gë_£rülNumbî
(
s˚p
->
£lfsig√d˚π
)) == 0) {

78 i‡(
debug
)

79 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: skipping self "

80 "sig√d cîtifiˇã\n", 
__FILE__
,

81 
__LINE__
);

82 
nŸ
;

87  
x
;

88 
nŸ
:

89 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificateÉxcluded:\n",

90 
__FILE__
, 
__LINE__
);

91 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
x
),

92 
«me_buf„r
, (name_buffer));

93 
	`BIO_¥ötf
(
bio_îr
, "\t˚π_issuî_«mê %s\n", 
«me_buf„r
);

94 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
x
),

95 
«me_buf„r
, (name_buffer));

96 
	`BIO_¥ötf
(
bio_îr
, "\t˚π_subje˘_«mê%s\n", 
«me_buf„r
);

98  
NULL
;

99 
	}
}

107 
	$ªad_˛õ¡°uff
(
s˚p_t
 *
s˚p
, *
ªque°fûe
, *
keyfûe
) {

108 
BIO
 *
bio
;

111 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

112 i‡(
	`BIO_ªad_fûíame
(
bio
, 
ªque°fûe
) <= 0) {

113 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot openÑequest file\n",

114 
__FILE__
, 
__LINE__
);

115 
îr
;

117 
s˚p
->
˛õ¡ªq
 = 
	`PEM_ªad_bio_X509_REQ
(
bio
, 
NULL
, NULL, NULL);

118 i‡(
s˚p
->
˛õ¡ªq
 =
NULL
) {

119 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: couldn'tÑeadÅheÑequest "

120 "‰om %s\n", 
__FILE__
, 
__LINE__
, 
ªque°fûe
);

121 
îr
;

123 
s˚p
->
˛õ¡pubkey
 = 
	`X509_REQ_gë_pubkey
(s˚p->
˛õ¡ªq
);

124 i‡(
s˚p
->
˛õ¡pubkey
 =
NULL
) {

125 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÇoÖublic keyávailable\n",

126 
__FILE__
, 
__LINE__
);

128 
	`BIO_‰ì
(
bio
);

129 i‡(
debug
)

130 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Öublic key decoded\n",

131 
__FILE__
, 
__LINE__
);

134 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

135 i‡(
	`BIO_ªad_fûíame
(
bio
, 
keyfûe
) <= 0) {

136 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot openÖrivate key "

137 "fûê%s\n", 
__FILE__
, 
__LINE__
, 
keyfûe
);

138 
îr
;

140 
s˚p
->
˛õ¡pkey
 = 
	`PEM_ªad_bio_Priv©eKey
(
bio
, 
NULL
, NULL,

141 
NULL
);

142 i‡(
s˚p
->
˛õ¡pkey
 =
NULL
) {

143 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÇoÖrivate keyávailable\n",

144 
__FILE__
, 
__LINE__
);

145 
îr
;

147 
	`BIO_‰ì
(
bio
);

148 i‡(
debug
)

149 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Örivate key decoded @%p\n",

150 
__FILE__
, 
__LINE__
, 
s˚p
->
˛õ¡pkey
);

151 i‡(
debug
 > 1) {

157 
îr
:

159 
	`ERR_¥öt_îr‹s
(
bio_îr
);

161 
	}
}

169 
	$ªad_ªque°‹°uff
(
s˚p_t
 *
s˚p
, 
ty≥
, *
fûíame
) {

170 
BIO
 *
bio
;

171 
NETSCAPE_SPKI
 *
•ki
 = 
NULL
;

172 
X509_REQ
 *
ªq
 = 
NULL
;

173 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

174 i‡(
	`BIO_ªad_fûíame
(
bio
, 
fûíame
) < 0) {

175 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑeadÑequest file '%s'\n",

176 
__FILE__
, 
__LINE__
, 
fûíame
);

177 
îr
;

179 
ty≥
) {

181 
s˚p
->
ªque°‹ªq
 = 
	`d2i_X509_REQ_bio
(
bio
, &
ªq
);

182 i‡(
s˚p
->
ªque°‹ªq
 =
NULL
) {

183 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode X509_REQ\n",

184 
__FILE__
, 
__LINE__
);

185 
îr
;

187 
s˚p
->
ªque°‹pubkey


188 
	`X509_REQ_gë_pubkey
(
s˚p
->
ªque°‹ªq
);

191 
s˚p
->
ªque°‹•ki
 = 
	`d2i_NETSCAPE_SPKI_bio
(
bio
, &
•ki
);

192 i‡(
s˚p
->
ªque°‹•ki
 =
NULL
) {

193 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode SPKI\n",

194 
__FILE__
, 
__LINE__
);

195 
îr
;

197 
s˚p
->
ªque°‹pubkey


198 
	`NETSCAPE_SPKI_gë_pubkey
(
s˚p
->
ªque°‹•ki
);

201 
îr
;

204 
îr
:

205 
	`ERR_¥öt_îr‹s
(
bio_îr
);

207 
	}
}

212 
	$ªad_ˇ°uff
(
s˚p_t
 *
s˚p
, *
ˇ˚πfûe
) {

213 
BIO
 *
bio
;

215 i‡(
ˇ˚πfûe
 !
NULL
) {

216 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

217 i‡(
	`BIO_ªad_fûíame
(
bio
, 
ˇ˚πfûe
) <= 0) {

218 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot open CA "

219 "˚πifiˇã fûe\n", 
__FILE__
, 
__LINE__
);

220 
îr
;

222 
s˚p
->
ˇ˚π
 = 
	`PEM_ªad_bio_X509
(
bio
, 
NULL
, NULL, NULL);

223 i‡(
s˚p
->
ˇ˚π
 =
NULL
) {

224 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannot decode CA "

225 "˚πifiˇã\n", 
__FILE__
, 
__LINE__
);

226 
îr
;

228 
	`BIO_‰ì
(
bio
);

229 i‡(
debug
)

230 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CA certificate decoded\n",

231 
__FILE__
, 
__LINE__
);

233 
îr
:

237 
	}
}

255 
	$maö
(
¨gc
, *
¨gv
[]) {

256 
c
, 
pﬁl
 = 0, 
ªqvîsi⁄
 = 0, 
rc
 = -1;

257 *
ˇ˚πfûe
 = 
NULL
, *
keyfûe
 = NULL, *
chÆÀnge
 = NULL,

258 *
ßvedªque°fûe
 = 
NULL
, *
ªque°fûe
 = NULL,

259 *
dn
 = 
NULL
, *
•kacfûe
 = NULL, *
ídªque°
 = NULL;

260 
s˚p_t
 
s˚p
;

261 
BIO
 *
ªpbio
;

262 *
uæ
 = "http://localhost/cgi-bin";

263 
s˚pmsg_t
 *
msg
;

264 *
checkN⁄˚
 = 
NULL
;

267 
	`s˚pöô
();

268 
	`s˚p_˛ór
(&
s˚p
);

271 
s˚p
.
˛õ¡
 = 1;

274 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dc:e:r:s:k:w:pu:2a:q:")))

275 
c
) {

277 
debug
++;

280 
ídªque°
 = 
›èrg
;

283 
ˇ˚πfûe
 = 
›èrg
;

286 
ßvedªque°fûe
 = 
›èrg
;

290 
ªque°fûe
 = 
›èrg
;

293 
keyfûe
 = 
›èrg
;

296 
chÆÀnge
 = 
›èrg
;

299 
pﬁl
 = 1;

302 
s˚p
.
communôy
 = 
›èrg
;

305 
uæ
 = 
›èrg
;

308 
ªqvîsi⁄
 = 1;

311 
•kacfûe
 = 
›èrg
;

318 i‡(
keyfûe
 =
NULL
) {

319 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: key file isÑequiredárgument\n",

320 
__FILE__
, 
__LINE__
);

321 
îr
;

323 i‡(
ªque°fûe
 =
NULL
) {

324 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest file isÑequired "

325 "¨gumít\n", 
__FILE__
, 
__LINE__
);

326 
îr
;

330 
msg
 = &
s˚p
.
ªque°
;

333 i‡(
	`∑r£uæ
(&
s˚p
, 
uæ
) < 0) {

334 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: c™nŸÖ¨£ uæ\n", 
__FILE__
,

335 
__LINE__
);

336 
îr
;

338 i‡(
debug
)

339 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decoded URL %s|%d|%s\n", 
__FILE__
,

340 
__LINE__
, 
s˚p
.
h
.
hâpho°
, s˚p.h.
hâµ‹t
,

341 
s˚p
.
h
.
hâµ©h
);

344 i‡(
	`ªad_˛õ¡°uff
(&
s˚p
, 
ªque°fûe
, 
keyfûe
) < 0) {

345 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅoÑead client stuff\n",

346 
__FILE__
, 
__LINE__
);

347 
îr
;

355 
ªqvîsi⁄
) {

359 
s˚p
.
ªque°‹pubkey
 = s˚p.
˛õ¡pubkey
;

360 
s˚p
.
ªque°‹ªq
 = s˚p.
˛õ¡ªq
;

361 i‡(
debug
)

362 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÉndÑequest coincides "

363 "wôh SCEP clõ¡\n", 
__FILE__
, 
__LINE__
);

366 
msg
->
rd
.
∑ylﬂd
 = 
	`∑ylﬂd_√w
();

367 
rc
 = -1;

368 i‡(
•kacfûe
) {

369 i‡(
debug
)

370 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeading spki "

371 "‰om %s\n", 
__FILE__
, 
__LINE__
,

372 
•kacfûe
);

373 
rc
 = 
	`ªad_ªque°‹°uff
(&
s˚p
, 1, 
•kacfûe
);

374 } i‡(
ídªque°
) {

375 i‡(
debug
)

376 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeading X509Ñeq "

377 "‰om %s\n", 
__FILE__
, 
__LINE__
,

378 
ídªque°
);

379 
rc
 = 
	`ªad_ªque°‹°uff
(&
s˚p
, 0, 
ídªque°
);

381 i‡(
rc
 < 0) {

382 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: couldÇotÑeadÉnd "

383 "ªque° d©a\n", 
__FILE__
, 
__LINE__
);

384 
îr
;

386 i‡(
debug
)

387 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÉndÑequestÑead\n",

388 
__FILE__
, 
__LINE__
);

393 
s˚p
.
å™sId
 = 
	`key_fögî¥öt
(s˚p.
ªque°‹pubkey
);

394 i‡(
debug
)

395 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Åransaction ID is %s\n",

396 
__FILE__
, 
__LINE__
, 
s˚p
.
å™sId
);

399 i‡(
	`ªad_ˇ°uff
(&
s˚p
, 
ˇ˚πfûe
) < 0) {

400 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñead CA certificate info\n",

401 
__FILE__
, 
__LINE__
);

403 i‡(
debug
)

404 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CA certificateÑead\n",

405 
__FILE__
, 
__LINE__
);

409 i‡(
•kacfûe
) {

410 i‡((
¨gc
 - 
›töd
) != 1) {

411 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: DNárgumentÇeeded\n",

412 
__FILE__
, 
__LINE__
);

413 
îr
;

415 
dn
 = 
¨gv
[
›töd
];

416 i‡(
debug
)

417 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: DNárgument is '%s'\n",

418 
__FILE__
, 
__LINE__
, 
dn
);

422 i‡(
	`∑ylﬂd_dn_to_©ås
(
msg
->
rd
.
∑ylﬂd
, 
dn
) < 0) {

423 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅoádd DNáttrs\n",

424 
__FILE__
, 
__LINE__
);

425 
îr
;

430 i‡(
pﬁl
)

431 
pﬁlögöô
;

434 
ªqvîsi⁄
) {

436 
msg
->
mesßgeTy≥
 = 
SCEP_MESSAGE_TYPE_PKCSREQ
;

437 
msg
->
rd
.
ªq
 = 
s˚p
.
˛õ¡ªq
;

441 i‡(
debug
)

442 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: building version 2 "

443 "∑ylﬂd\n", 
__FILE__
, 
__LINE__
);

444 i‡(
s˚p
.
ªque°‹ªq
)

445 
	`∑ylﬂd_£t_ªq
(
msg
->
rd
.
∑ylﬂd
, 
s˚p
.
ªque°‹ªq
);

446 i‡(
s˚p
.
ªque°‹•ki
)

447 
	`∑ylﬂd_£t_•ki
(
msg
->
rd
.
∑ylﬂd
, 
s˚p
.
ªque°‹•ki
);

450 i‡(
s˚p
.
communôy
) {

453 
msg
->
mesßgeTy≥
 = 
SCEP_MESSAGE_TYPE_V2PROXY
;

455 
msg
->
mesßgeTy≥
 = 
SCEP_MESSAGE_TYPE_V2REQUEST
;

461 i‡(
ßvedªque°fûe
) {

462 
BIO
 *
ªqbio
;

463 
ªqbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

464 
	`BIO_wrôe_fûíame
(
ªqbio
, 
ßvedªque°fûe
);

465 
ªqvîsi⁄
) {

468 
	`PEM_wrôe_bio_X509_REQ
(
ªqbio
, 
msg
->
rd
.
ªq
);

472 
	`i2d_∑ylﬂd_bio
(
ªqbio
, 
msg
->
rd
.
∑ylﬂd
);

475 
	`BIO_‰ì
(
ªqbio
);

478 
comm⁄
;

480 
pﬁlögöô
:

482 
msg
->
mesßgeTy≥
 = 
SCEP_MESSAGE_TYPE_GETCERTINITIAL
;

485 
msg
->
rd
.
is
 = (
issuî_™d_subje˘_t
 *)
	`mÆloc
(

486 (
issuî_™d_subje˘_t
));

487 
msg
->
rd
.
is
->
issuî
 = 
	`X509_gë_subje˘_«me
(
s˚p
.
ˇ˚π
);

488 
msg
->
rd
.
is
->
subje˘
 = 
NULL
;

492 i‡(
debug
)

493 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: getting subject X509_NAME\n",

494 
__FILE__
, 
__LINE__
);

495 
ªqvîsi⁄
) {

497 
msg
->
rd
.
is
->
subje˘
 = 
	`X509_REQ_gë_subje˘_«me
(
s˚p
.
˛õ¡ªq
);

500 i‡(
s˚p
.
ªque°‹ªq
)

501 
msg
->
rd
.
is
->
subje˘


502 
	`X509_REQ_gë_subje˘_«me
(
s˚p
.
ªque°‹ªq
);

503 i‡(
s˚p
.
ªque°‹•ki
) {

504 i‡(
debug
)

505 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: converting DN '%s' "

507 
__FILE__
, 
__LINE__
, 
dn
);

508 
msg
->
rd
.
is
->
subje˘
 = 
	`ld≠_to_x509
(
dn
);

512 i‡(
msg
->
rd
.
is
->
subje˘
 =
NULL
) {

513 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço subject found\n",

514 
__FILE__
, 
__LINE__
);

515 
îr
;

517 i‡(
debug
)

518 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: issueránd subject found\n",

519 
__FILE__
, 
__LINE__
);

521 
comm⁄
:

523 i‡(
	`£lfsig√d
(&
s˚p
) < 0) {

524 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅo create self signed "

525 "˚πifiˇã\n", 
__FILE__
, 
__LINE__
);

526 
îr
;

528 i‡(
debug
)

529 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: self signed certificate created\n",

530 
__FILE__
, 
__LINE__
);

533 
s˚p
.
£ndîN⁄˚Lígth
 = 16;

534 
s˚p
.
£ndîN⁄˚
 = (*)
	`mÆloc
(s˚p.
£ndîN⁄˚Lígth
);

535 
	`RAND_byãs
(
s˚p
.
£ndîN⁄˚
, s˚p.
£ndîN⁄˚Lígth
);

536 i‡(
debug
)

537 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sídîN⁄˚ së\n", 
__FILE__
,

538 
__LINE__
);

539 
checkN⁄˚
 = 
s˚p
.
£ndîN⁄˚
;

542 
msg
->
ba£64
 = 1;

545 i‡(
	`ícode
(&
s˚p
) < 0) {

546 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÉncodingÅheÑequest failed\n",

547 
__FILE__
, 
__LINE__
);

548 
îr
;

550 i‡(
debug
)

551 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éncoded bytes: %d\n",

552 
__FILE__
, 
__LINE__
, 
s˚p
.
ªque°
.
Àngth
);

555 
ªpbio
 = 
	`gëªque°
(&
s˚p
);

556 i‡(
ªpbio
 =
NULL
) {

557 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: failedÅoÑead correctÑeply\n",

558 
__FILE__
, 
__LINE__
);

559 
îr
;

563 i‡(
	`decode
(&
s˚p
, 
ªpbio
) < 0) {

564 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decodingÅheÑeply failed\n",

565 
__FILE__
, 
__LINE__
);

566 
îr
;

570 
	`¥ötf
("å™ß˘i⁄ id: %s\n", 
s˚p
.
å™sId
);

571 
	`¥ötf
("PKI°©us: %s\n", (
s˚p
.
ª∂y
.
pkiSètus
)

572 ? 
s˚p
.
ª∂y
.
pkiSètus
 : "(null)");

573 
	`¥ötf
("ª∂y mesßgêty≥: %s\n", 
s˚p
.
ª∂y
.
mesßgeTy≥
);

574 i‡(
s˚p
.
ª∂y
.
Áûöfo
) {

575 
	`¥ötf
("Áûöfo: %s\n", 
s˚p
.
ª∂y
.
Áûöfo
);

579 i‡(
	`°rcmp
(
s˚p
.
ª∂y
.
mesßgeTy≥
, 
SCEP_MESSAGE_TYPE_CERTREP
)) {

580 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: only CertRep messageácceptable "

582 
__FILE__
, 
__LINE__
);

583 
îr
;

587 i‡(
	`memcmp
(
checkN⁄˚
, 
s˚p
.
ªcùõ¡N⁄˚
, 16)) {

588 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÑecipientNonce != sent "

589 "£ndîN⁄˚\n", 
__FILE__
, 
__LINE__
);

590 
îr
;

592 i‡(
debug
)

593 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: N⁄˚ check OK\n", 
__FILE__
,

594 
__LINE__
);

596 i‡(
s˚p
.
ª∂y
.
pkiSètus
 =
NULL
) {

597 
	`BIO_¥ötf
(
bio_îr
, "noÖkiStatusÑeturned\n");

598 
	`exô
(1);

601 
	`©oi
(
s˚p
.
ª∂y
.
pkiSètus
)) {

602 
PKI_SUCCESS
:

604 
s˚p
.
˛õ¡˚π
 = 
	`exåa˘_˚π
(&scep);

605 i‡(
debug
)

606 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: certificateÑeturned %p\n",

607 
__FILE__
, 
__LINE__
, 
s˚p
.
˛õ¡˚π
);

608 i‡(
s˚p
.
˛õ¡˚π
) {

609 
BIO
 *
cb
;

610 
cb
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

611 
	`BIO_£t_Â
(
cb
, 
°dout
, 
BIO_NOCLOSE
);

612 
	`PEM_wrôe_bio_X509
(
cb
, 
s˚p
.
˛õ¡˚π
);

613 
	`BIO_‰ì
(
cb
);

615 
	`exô
(
EXIT_SUCCESS
);

617 
PKI_FAILURE
:

618 i‡(
debug
)

619 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest failed: %s\n",

620 
__FILE__
, 
__LINE__
, 
s˚p
.
ª∂y
.
Áûöfo
);

621 
	`exô
(1);

623 
PKI_PENDING
:

624 i‡(
debug
)

625 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñequest stillÖending\n",

626 
__FILE__
, 
__LINE__
);

627 
	`exô
(2);

632 
îr
:

633 
	`ERR_¥öt_îr‹s
(
bio_îr
);

634 
	`exô
(
EXIT_FAILURE
);

635 
	}
}

	@scep/scepxid.c

9 
	~<c⁄fig.h
>

10 
	~<öô.h
>

11 
	~<s˚p.h
>

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/evp.h
>

16 
	~<›ís¶/rß.h
>

17 
	~<›ís¶/îr.h
>

18 
	~<›ís¶/≥m.h
>

19 
	~<fögî¥öt.h
>

20 
	~<mis¶.h
>

22 
›töd
;

23 *
›èrg
;

25 
	$maö
(
¨gc
, *
¨gv
[]) {

26 
c
;

27 *
ªqfûe
 = 
NULL
, *
Â
;

28 
BIO
 *
bio
;

29 
X509_REQ
 *
ªq
;

30 
EVP_PKEY
 *
pkey
;

31 
√tsˇ≥
 = 0;

32 
NETSCAPE_SPKI
 *
•ki
 = 
NULL
;

35 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dn")))

36 
c
) {

38 
debug
++;

41 
√tsˇ≥
 = 1;

46 i‡((
¨gc
 - 
›töd
) != 1) {

47 
	`Ârötf
(
°dîr
, "%s:%d:Éxactly oneárgumentÉxpected: "

48 "ªqfûe\n", 
__FILE__
, 
__LINE__
);

49 
	`exô
(
EXIT_FAILURE
);

51 
ªqfûe
 = 
¨gv
[
›töd
];

52 i‡(
debug
)

53 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: key fûêi†%s\n", 
__FILE__
,

54 
__LINE__
, 
ªqfûe
);

57 
	`s˚pöô
();

60 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

61 
	`BIO_ªad_fûíame
(
bio
, 
ªqfûe
);

62 
√tsˇ≥
) {

64 
ªq
 = 
	`PEM_ªad_bio_X509_REQ
(
bio
, 
NULL
, NULL, NULL);

65 
pkey
 = 
	`X509_REQ_gë_pubkey
(
ªq
);

68 
	`d2i_NETSCAPE_SPKI_bio
(
bio
, &
•ki
);

69 i‡(
•ki
 =
NULL
) {

70 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑead spki\n",

71 
__FILE__
, 
__LINE__
);

72 
îr
;

74 
pkey
 = 
	`NETSCAPE_SPKI_gë_pubkey
(
•ki
);

77 i‡(
pkey
 =
NULL
) {

78 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: cannotÑeadÑequest\n",

79 
__FILE__
, 
__LINE__
);

80 
îr
;

84 
Â
 = 
	`key_fögî¥öt
(
pkey
);

85 i‡(
Â
 =
NULL
) {

86 
	`BIO_¥ötf
(
bio_îr
, "%s:%s:Ço key fingerprint obtained\n",

87 
__FILE__
, 
__LINE__
);

88 
îr
;

92 
	`¥ötf
("publi¯key fögî¥öt: %s\n", 
Â
);

95 
	`exô
(
EXIT_SUCCESS
);

98 
îr
:

99 
	`ERR_¥öt_îr‹s
(
bio_îr
);

100 
	`exô
(
EXIT_FAILURE
);

101 
	}
}

	@scepd/cafingerprint.c

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<öô.h
>

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/x509.h
>

15 
	~<›ís¶/x509v3.h
>

16 
	~<›ís¶/îr.h
>

18 
›töd
;

19 *
›èrg
;

21 
	$maö
(
¨gc
, *
¨gv
[]) {

22 
BIO
 *
öbio
, *
out
;

23 
c
, 
i
, 
nid
;

24 *
fûíame
 = 
NULL
;

25 
X509
 *
x509
;

26 
X509_EXTENSION
 *
ex
;

29 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "")Ë!
EOF
)

30 
c
) {

36 
	`s˚pöô
();

37 
out
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

38 
	`BIO_£t_Â
(
out
, 
°dout
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

41 
fûíame
 = 
¨gv
[
›töd
];

45 
öbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

46 i‡(0 >
	`BIO_ªad_fûíame
(
öbio
, 
fûíame
)) {

47 
	`ERR_¥öt_îr‹s
(
bio_îr
);

48 
	`exô
(
EXIT_FAILURE
);

50 i‡(
NULL
 =(
x509
 = 
	`d2i_X509_bio
(
öbio
, NULL))) {

51 
	`ERR_¥öt_îr‹s
(
bio_îr
);

52 
	`exô
(
EXIT_FAILURE
);

56 
nid
 = 
	`OBJ_¢2nid
("subjectKeyIdentifier");

57 i‡(
nid
 < 0) {

58 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: object identifier for "

59 "subje˘KeyIdítifõ∏found\n", 
__FILE__
, 
__LINE__
);

60 
	`ERR_¥öt_îr‹s
(
bio_îr
);

61 
	`exô
(
EXIT_FAILURE
);

65 
i
 = 
	`X509v3_gë_ext_by_NID
(
x509
->
˚π_öfo
->
exãnsi⁄s
, 
nid
, -1);

66 i‡(
i
 < 0) {

67 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço matchingÉxtension found\n",

68 
__FILE__
, 
__LINE__
);

69 
	`ERR_¥öt_îr‹s
(
bio_îr
);

70 
	`exô
(
EXIT_FAILURE
);

72 
ex
 = 
	`X509_gë_ext
(
x509
, 
i
);

75 
	`X509V3_EXT_¥öt
(
out
, 
ex
, 0, 0);

76 
	`BIO_¥ötf
(
out
, "\n");

79 
	`exô
(
EXIT_SUCCESS
);

80 
	}
}

	@scepd/crl2ldap.c

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<lbî.h
>

13 
	~<ld≠.h
>

15 
›töd
;

16 *
›èrg
;

18 *
	gld≠ho°
 = "localhost";

19 
	gld≠p‹t
 = 
LDAP_PORT
;

20 *
	gböddn
 = 
NULL
;

21 *
	gbödpw
 = 
NULL
;

22 
	gdebug
 = 0;

24 
	$maö
(
¨gc
, *
¨gv
[]) {

25 
c
, 
u£d
, 
byãs
;

26 
LDAP
 *
ld≠
;

27 
LDAPMod
 
¸lmod
, *
mods
[2];

28 
bîvÆ
 
¸lvÆ
;

29 
bîvÆ
 *
¸lvÆs
[2];

30 *
buf„r
;

31 *
dn
;

34 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "D:w:b:h:p:d")))

35 
c
) {

37 
debug
++;

40 
böddn
 = 
›èrg
;

43 
bödpw
 = 
›èrg
;

46 
ld≠ho°
 = 
›èrg
;

49 
ld≠p‹t
 = 
	`©oi
(
›èrg
);

50 i‡((
ld≠p‹t
 <= 0) || (ldapport > 65535))

51 
ld≠p‹t
 = 
LDAP_PORT
;

57 i‡((
¨gc
 - 
›töd
) != 1) {

58 
	`Ârötf
(
°dîr
, "%s:%d:ÉxpectingÉxaclty oneárgument: CA "

59 "di°öguishedÇame\n", 
__FILE__
, 
__LINE__
);

60 
	`exô
(
EXIT_FAILURE
);

62 
dn
 = 
¨gv
[
›töd
];

65 
u£d
 = 0;

66 
buf„r
 = (*)
	`mÆloc
(1024);

67 0 < (
byãs
 = 
	`ªad
(0, &
buf„r
[
u£d
], 1024))) {

68 
u£d
 +
byãs
;

69 
buf„r
 = (*)
	`ªÆloc
(buf„r, 
u£d
 + 1024);

73 
ld≠
 = 
	`ld≠_öô
(
ld≠ho°
, 
ld≠p‹t
);

74 i‡(
ld≠
 =
NULL
) {

75 
	`Ârötf
(
°dîr
, "%s:%d: cannot create LDAP structure\n",

76 
__FILE__
, 
__LINE__
);

77 
	`exô
(
EXIT_FAILURE
);

79 i‡(
LDAP_SUCCESS
 !
	`ld≠_sim∂e_böd_s
(
ld≠
, 
böddn
, 
bödpw
)) {

80 
	`Ârötf
(
°dîr
, "%s:%d: cannot bindÅoÅhe directory\n",

81 
__FILE__
, 
__LINE__
);

82 
	`exô
(
EXIT_FAILURE
);

86 
¸lvÆ
.
bv_Àn
 = 
u£d
;

87 
¸lvÆ
.
bv_vÆ
 = 
buf„r
;

88 
¸lvÆs
[0] = &
¸lvÆ
;

89 
¸lvÆs
[1] = 
NULL
;

90 
¸lmod
.
mod_›
 = 
LDAP_MOD_REPLACE
 | 
LDAP_MOD_BVALUES
;

91 
¸lmod
.
mod_ty≥
 = "certificateRevocationList;binary";

92 
¸lmod
.
mod_bvÆues
 = 
¸lvÆs
;

93 
mods
[0] = &
¸lmod
;

94 
mods
[1] = 
NULL
;

96 i‡(
LDAP_SUCCESS
 !
	`ld≠_modify_s
(
ld≠
, 
dn
, 
mods
)) {

97 
	`Ârötf
(
°dîr
, "%s:%d:Öushing CRLÅo LDAP failed\n",

98 
__FILE__
, 
__LINE__
);

99 
	`exô
(
EXIT_FAILURE
);

103 
	`ld≠_unböd
(
ld≠
);

104 
	`exô
(
EXIT_SUCCESS
);

105 
	}
}

	@scepd/derdump.c

8 
	~<›ís¶/a¢1.h
>

9 
	~<›ís¶/îr.h
>

10 
	~<›ís¶/≥m.h
>

11 
	~<öô.h
>

12 
	~<›ís˚p_vîs.h
>

14 
›töd
;

15 *
›èrg
;

17 
	gba£64
 = 0;

19 
	$ußge
() {

20 
	`¥ötf
("usage: derdump [ -i ] [ -b ] [ file ]\n");

21 
	`¥ötf
("read data from file (or stdin)ánd dump ASN.1 structure\n");

22 
	`¥ötf
("options: -i indent ASN.1 structure for betterÑeadability\n");

23 
	`¥ötf
(" -b input data is base64Éncoded\n");

24 
	`¥ötf
(" -h displayÅhis messageándÉxit\n");

25 
	`¥ötf
(" -p strip PEM headers\n");

26 
	`¥ötf
(" -V display version\n");

27 
	}
}

29 
	$maö
(
¨gc
, *
¨gv
[]) {

30 
BIO
 *
öbio
, *
outbio
, *
b64
 = 
NULL
, *
ªadbio
, *
membio
;

31 
byãs
 = 0, 
ödít
 = 1, 
c
;

32 
Àngth
;

33 *
d©a
 = 
NULL
;

34 *
«me
 = 
NULL
, *
hódî
 = NULL;

35 *
fûíame
 = 
NULL
;

36 
≥m
 = 0;

39 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "bdhùV")Ë!
EOF
)

40 
c
) {

42 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

45 
debug
++;

48 
	`ußge
();

49 
	`exô
(
EXIT_SUCCESS
);

52 
ödít
 = 0;

55 
≥m
 = 1;

58 
	`¥ötf
("This is derdump from %s\n",

59 
›ís˚p_vîsi⁄
.
v_gnu
);

64 
	`s˚pöô
();

67 i‡(
¨gc
 - 
›töd
 > 0)

68 
fûíame
 = 
¨gv
[
›töd
];

71 
öbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

72 i‡(
fûíame
) {

73 i‡(0 >
	`BIO_ªad_fûíame
(
öbio
, 
fûíame
)) {

74 
	`ERR_¥öt_îr‹s
(
bio_îr
);

75 
	`exô
(
EXIT_FAILURE
);

78 
	`BIO_£t_Â
(
öbio
, 
°dö
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

82 
outbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

83 
	`BIO_£t_Â
(
outbio
, 
°dout
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

86 i‡(
≥m
) {

87 i‡(!
	`PEM_ªad_bio
(
öbio
, &
«me
, &
hódî
, &
d©a
, &
Àngth
)) {

88 
	`Ârötf
(
°dîr
, "%s:%d: it seemsÅhis wasn't PEM "

89 "a·îáŒ\n", 
__FILE__
, 
__LINE__
);

90 
	`exô
(
EXIT_FAILURE
);

92 i‡(
debug
) {

93 
	`Ârötf
(
°dîr
, "%s:%d: found PEM structure '%s' of "

94 "Àngth %ld\n", 
__FILE__
, 
__LINE__
,

95 
«me
, 
Àngth
);

97 i‡(
«me
)

98 
	`¥ötf
("PEMÇamed '%s' containsÅhe following DER:\n",

99 
«me
);

100 
	`OPENSSL_‰ì
(
«me
); OPENSSL_‰ì(
hódî
);

101 
d©a
;

105 i‡(
b64
 !
NULL
) {

106 
ªadbio
 = 
	`BIO_push
(
öbio
, 
b64
);

108 
ªadbio
 = 
öbio
;

112 
membio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

114 
buf„r
[1024];

115 
byãs
 = 
	`BIO_ªad
(
öbio
, 
buf„r
, (buffer));

116 i‡(
byãs
 > 0)

117 
	`BIO_wrôe
(
membio
, 
buf„r
, 
byãs
);

118 } 
byãs
 > 0);

119 
	`BIO_Êush
(
membio
);

122 
Àngth
 = 
	`BIO_gë_mem_d©a
(
membio
, &
d©a
);

125 
	`BIO_£t_Êags
(
membio
, 
BIO_FLAGS_MEM_RDONLY
);

127 
d©a
:

129 
	`ASN1_∑r£_dump
(
outbio
, 
d©a
, 
Àngth
, 
ödít
, 1);

132 
	`exô
(
EXIT_SUCCESS
);

133 
	}
}

	@scepd/dn2xid.c

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<lbî.h
>

11 
	~<ld≠.h
>

12 
	~<uni°d.h
>

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/evp.h
>

15 
	~<›ís¶/x509.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<fögî¥öt.h
>

18 
	~<˘y≥.h
>

19 
	~<°rög.h
>

21 
	gdebug
 = 0;

23 
›töd
;

24 *
›èrg
;

26 *
	gld≠ho°
 = "localhost";

27 
	gld≠p‹t
 = 
LDAP_PORT
;

28 *
	gböddn
 = 
NULL
;

29 *
	gbödpw
 = 
NULL
;

31 
BIO
 *
	gbio_îr
;

33 
	$maö
(
¨gc
, *
¨gv
[]) {

34 
c
, 
Àngth
, 
l
;

35 *
dn
, *
Â
, *
p
;

36 
LDAP
 *
ld≠
;

37 
LDAPMesßge
 *
ªsu…
, *
e
;

38 
bîvÆ
 **
bs
;

39 
BIO
 *
bio
;

40 
X509
 *
x509
;

41 *
d©a
;

44 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dD:w:h:p:")))

45 
c
) {

47 
debug
++;

50 
böddn
 = 
›èrg
;

53 
bödpw
 = 
›èrg
;

56 
ld≠ho°
 = 
›èrg
;

59 
ld≠p‹t
 = 
	`©oi
(
›èrg
);

60 i‡((
ld≠p‹t
 < 0) || (ldapport > 65535))

61 
ld≠p‹t
 = 
LDAP_PORT
;

67 i‡((
¨gc
 - 
›töd
) != 1) {

68 
	`Ârötf
(
°dîr
, "%s:%d: wrongÇumber ofárguments\n",

69 
__FILE__
, 
__LINE__
);

70 
	`exô
(
EXIT_FAILURE
);

72 
dn
 = 
¨gv
[
›töd
];

75 
ld≠
 = 
	`ld≠_öô
(
ld≠ho°
, 
ld≠p‹t
);

76 i‡(
ld≠
 =
NULL
) {

77 
	`Ârötf
(
°dîr
, "%s:%d: c™nŸ c⁄√˘ÅÿLDAP\n", 
__FILE__
,

78 
__LINE__
);

79 
	`exô
(
EXIT_FAILURE
);

81 i‡(
LDAP_SUCCESS
 !
	`ld≠_sim∂e_böd_s
(
ld≠
, 
böddn
, 
bödpw
)) {

82 
	`Ârötf
(
°dîr
, "%s:%d: cannot bindÅoÅhe directory\n",

83 
__FILE__
, 
__LINE__
);

84 
	`exô
(
EXIT_FAILURE
);

88 i‡(
LDAP_SUCCESS
 !
	`ld≠_£¨ch_s
(
ld≠
, 
dn
, 
LDAP_SCOPE_BASE
,

89 "(u£rCîtifiˇã=*)", 
NULL
, 0, &
ªsu…
)) {

90 
	`Ârötf
(
°dîr
, "%s:%d: sórch f‹ '%s' faûed: %s\n", 
__FILE__
,

91 
__LINE__
, 
dn
,

92 
	`ld≠_îr2°rög
(
	`ld≠_ªsu…2îr‹
(
ld≠
, 
ªsu…
, 0)));

93 
	`exô
(
EXIT_FAILURE
);

95 i‡(
	`ld≠_cou¡_íåõs
(
ld≠
, 
ªsu…
) != 1) {

96 
	`Ârötf
(
°dîr
, "%s:%d:ÇotÉxactly oneÉntry found\n",

97 
__FILE__
, 
__LINE__
);

98 
	`exô
(
EXIT_FAILURE
);

100 
e
 = 
	`ld≠_fú°_íåy
(
ld≠
, 
ªsu…
);

103 
bs
 = 
	`ld≠_gë_vÆues_Àn
(
ld≠
, 
e
, "userCertificate;binary");

104 i‡(
bs
 == 0) {

105 
	`Ârötf
(
°dîr
, "%s:%d: userCertificateÇot found\n",

106 
__FILE__
, 
__LINE__
);

107 
	`exô
(
EXIT_FAILURE
);

109 i‡(
bs
[1] !
NULL
) {

110 
	`Ârötf
(
°dîr
, "%s:%d: cannot handle moreÅhan one "

111 "˚πifiˇã\n", 
__FILE__
, 
__LINE__
);

112 
	`exô
(
EXIT_FAILURE
);

116 
	`ERR_lﬂd_¸y±o_°rögs
();

117 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

118 
bio_îr
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

119 
	`BIO_£t_Â
(
bio_îr
, 
°dîr
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

122 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

123 i‡(
bs
[0]->
bv_Àn
 !
	`BIO_wrôe
(
bio
, bs[0]->
bv_vÆ
, bs[0]->bv_len)) {

124 
	`Ârötf
(
°dîr
, "%s:%d: writing certÅo bio failed\n",

125 
__FILE__
, 
__LINE__
);

126 
	`exô
(
EXIT_FAILURE
);

130 
x509
 = 
	`d2i_X509_bio
(
bio
, 
NULL
);

131 
	`BIO_‰ì
(
bio
);

134 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

135 
	`i2d_PUBKEY_bio
(
bio
, 
	`X509_gë_pubkey
(
x509
));

138 
Àngth
 = 
	`BIO_gë_mem_d©a
(
bio
, &
d©a
);

139 
	`BIO_£t_Êags
(
bio
, 
BIO_FLAGS_MEM_RDONLY
);

140 
	`BIO_‰ì
(
bio
);

143 
Â
 = 
	`fögî¥öt
(
d©a
, 
Àngth
);

146 
p
 = 
Â
;

147 
p
 = 
Â
; *p;Ö++) {

148 (*
p
Ë&& (
	`is•a˚
(*p))) {

149 
l
 = 
	`°æí
(
p
 + 1);

150 
	`memmove
(
p
,Ö + 1, 
	`°æí
(p + 1));

151 *(
p
 + 
l
) = '\0';

156 
	`¥ötf
("%s\n", 
Â
);

159 
	`ld≠_unböd
(
ld≠
);

160 
	`exô
(
EXIT_SUCCESS
);

161 
	}
}

	@scepd/scepconf.c

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<c⁄fig.h
>

12 
	~<uni°d.h
>

13 
	~<›ís¶/c⁄f.h
>

14 
	~<›ís¶/îr.h
>

16 *
	gc⁄ffûe
 = 
OPENSCEPDIR
 "/openscep.cnf";

18 *
›èrg
;

19 
›töd
;

20 
	gdebug
 = 0;

22 
	$maö
(
¨gc
, *
¨gv
[]) {

23 
LHASH
 *
c⁄f
;

24 
ñöe
;

25 *
£˘i⁄
 = 
NULL
, *
v¨übÀ
 = NULL, *
vÆue
;

26 
c
, 
n
;

29 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "df:")))

30 
c
) {

32 
debug
++;

35 
c⁄ffûe
 = 
›èrg
;

39 i‡(
debug
)

40 
	`Ârötf
(
°dîr
, "%s:%d: configuration file is '%s'\n",

41 
__FILE__
, 
__LINE__
, 
c⁄ffûe
);

44 
n
 = 
¨gc
 - 
›töd
;

45 i‡((
n
 < 1) || (n > 2)) {

46 
	`Ârötf
(
°dîr
, "%s:%d: wrongÇumber ofárguments\n",

47 
__FILE__
, 
__LINE__
);

48 
	`exô
(
EXIT_FAILURE
);

50 
n
) {

52 
£˘i⁄
 = 
¨gv
[
›töd
++];

54 
v¨übÀ
 = 
¨gv
[
›töd
];

59 
c⁄f
 = 
	`CONF_lﬂd
(
NULL
, 
c⁄ffûe
, &
ñöe
);

60 i‡(
c⁄f
 =
NULL
) {

61 
	`ERR_lﬂd_¸y±o_°rögs
();

62 
	`Ârötf
(
°dîr
, "unableÅoÜoad configuration,Üine %ld\n",

63 
ñöe
);

64 
	`ERR_¥öt_îr‹s_Â
(
°dîr
);

65 
	`exô
(
EXIT_FAILURE
);

69 i‡(
debug
)

70 
	`Ârötf
(
°dîr
, "%s:%d:Üooking for '%s' in section '%s'\n",

71 
__FILE__
, 
__LINE__
, 
v¨übÀ
,

72 (
£˘i⁄
) ? section : "(null)");

73 
vÆue
 = 
	`CONF_gë_°rög
(
c⁄f
, 
£˘i⁄
, 
v¨übÀ
);

74 i‡(
vÆue
 =
NULL
) {

75 i‡(
debug
)

76 
	`Ârötf
(
°dîr
, "%s:%d:ÇÿvÆuêfound\n", 
__FILE__
,

77 
__LINE__
);

78 
	`exô
(
EXIT_FAILURE
);

80 i‡(
debug
)

81 
	`Ârötf
(
°dîr
, "%s:%d [%s]%†%s\n", 
__FILE__
, 
__LINE__
,

82 (
£˘i⁄
Ë? se˘i⁄ : "-", 
v¨übÀ
, 
vÆue
);

83 
	`¥ötf
("%s\n", 
vÆue
);

84 
	`exô
(
EXIT_SUCCESS
);

85 
	}
}

	@scepd/scepd.c

8 
	~<c⁄fig.h
>

9 
	~<s˚p.h
>

10 
	~<öô.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/°©.h
>

13 
	~<f˙é.h
>

14 
	~<uni°d.h
>

15 
	~<ld≠.h
>

16 
	~<î∫o.h
>

17 
	~<°rög.h
>

18 
	~<sy¶og.h
>

19 
	~<sys/times.h
>

20 
	~<s˚∂d≠.h
>

21 
	~<decode.h
>

22 
	~<ícode.h
>

23 
	~<gë˚π.h
>

24 
	~<gë¸l.h
>

25 
	~<gë˚πöôül.h
>

26 
	~<pkc§eq.h
>

27 
	~<˚πªp.h
>

28 
	~<¥oxy.h
>

29 
	~<v2ªque°.h
>

30 
	~<›ís¶/ønd.h
>

31 
	~<›ís¶/îr.h
>

53 
	$logtimes
(
tms
 *
°¨t
) {

54 
tms
 
íd
;

55 
ticks
;

58 i‡((
ticks
 = 
	`sysc⁄f
(
_SC_CLK_TCK
)) < 0) {

59 i‡(
debug
)

60 
	`Ârötf
(
°dîr
, "%s:%d: cannot determine clockÅicks\n",

61 
__FILE__
, 
__LINE__
);

62 
ticks
 = 100;

66 
	`times
(&
íd
);

69 
	`sy¶og
(
LOG_INFO
, "times scepd: %.2f user %.2f system, "

71 (
íd
.
tms_utime
 - 
°¨t
->tms_utime)/()
ticks
,

72 (
íd
.
tms_°ime
 - 
°¨t
->tms_°ime)/()
ticks
,

73 (
íd
.
tms_cutime
 - 
°¨t
->tms_cutime)/()
ticks
,

74 (
íd
.
tms_c°ime
 - 
°¨t
->tms_c°ime)/()
ticks
);

75 
	}
}

77 
	$maö
(
¨gc
, *
¨gv
[]) {

78 
s˚p_t
 
s˚p
;

79 
c
, 
rc
, 
byãs
, 
fd
;

80 
fûíame
[1024];

81 
BIO
 *
öbio
 = 
NULL
, *
outbio
, *
membio
;

82 *
c⁄ffûe
;

83 
tms
 
°¨t
;

86 
	`times
(&
°¨t
);

90 
	`s˚p_˛ór
(&
s˚p
);

91 i‡(
debug
)

92 
	`Ârötf
(
°dîr
, "%s:%d: cleared scep structure\n",

93 
__FILE__
, 
__LINE__
);

96 
	`s˚pöô
();

97 i‡(
debug
)

98 
	`Ârötf
(
°dîr
, "%s:%d: initializedÜibraries\n",

99 
__FILE__
, 
__LINE__
);

102 
	`umask
(022);

105 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "df:")))

106 
c
) {

108 
debug
++;

111 
c⁄ffûe
 = 
›èrg
;

112 i‡(
debug
)

113 
	`Ârötf
(
°dîr
, "%s:%d: config file is %s\n",

114 
__FILE__
, 
__LINE__
, 
c⁄ffûe
);

119 
	`s˚p_c⁄fig
(&
s˚p
, (
c⁄ffûe
Ë? c⁄ffûê: 
OPENSCEPDIR
 "/openscep.cnf");

122 
	`s˚p_ld≠_öô
(&
s˚p
);

126 
öbio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

127 
	`BIO_£t_Â
(
öbio
, 
°dö
, 
BIO_NOCLOSE
);

128 
membio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

130 
buf„r
[1024];

131 
byãs
 = 
	`BIO_ªad
(
öbio
, 
buf„r
, (buffer));

132 i‡(
byãs
 > 0) {

133 
	`BIO_wrôe
(
membio
, 
buf„r
, 
byãs
);

134 i‡(
debug
)

135 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: writing chunk of"

136 "sizê%d\n", 
__FILE__
, 
__LINE__
, 
byãs
);

138 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ço more data from inbio\n",

139 
__FILE__
, 
__LINE__
);

141 } 
byãs
 > 0);

142 
	`BIO_Êush
(
membio
);

148 
s˚p
.
ªque°
.
ba£64
 = 1;

149 i‡(
	`decode
(&
s˚p
, 
membio
) < 0) {

150 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: decodêÁûed\n", 
__FILE__
,

151 
__LINE__
);

152 
	`sy¶og
(
LOG_ERR
, "%s:%d: scepd failedÅo decodeÑequest",

153 
__FILE__
, 
__LINE__
);

154 
îr
;

156 
	`BIO_‰ì
(
membio
);

159 i‡(
debug
) {

160 
«me
[1024];

161 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: message withÅransaction id %s\n",

162 
__FILE__
, 
__LINE__
, 
s˚p
.
å™sId
);

163 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
((
s˚p
.
£lfsig√d˚π
)

164 ? 
s˚p
.
£lfsig√d˚π
 : s˚p.
˛õ¡˚π
), 
«me
, 1024);

165 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sídî i†%s\n", 
__FILE__
, 
__LINE__
,

166 
«me
);

170 i‡(
s˚p
.
ªcùõ¡N⁄˚
) {

171 
	`‰ì
(
s˚p
.
ªcùõ¡N⁄˚
);

173 
s˚p
.
ªcùõ¡N⁄˚
 = s˚p.
£ndîN⁄˚
;

174 
s˚p
.
ªcùõ¡N⁄˚Lígth
 = s˚p.
£ndîN⁄˚Lígth
;

175 
s˚p
.
£ndîN⁄˚Lígth
 = 16;

176 
s˚p
.
£ndîN⁄˚
 = (*)
	`mÆloc
(s˚p.
£ndîN⁄˚Lígth
);

177 
	`RAND_byãs
(
s˚p
.
£ndîN⁄˚
, s˚p.
£ndîN⁄˚Lígth
);

180 i‡(
s˚p
.
ªque°
.
mesßgeTy≥
 =
NULL
) {

181 
	`sy¶og
(
LOG_ERR
, "%s:%d: message of undefinedÅypeÑeceived",

182 
__FILE__
, 
__LINE__
);

183 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: undefined messageÅype\n",

184 
__FILE__
, 
__LINE__
);

185 
îr
;

187 
s˚p
.
ª∂y
.
mesßgeTy≥
 = 
SCEP_MESSAGE_TYPE_CERTREP
;

188 
	`©oi
(
s˚p
.
ªque°
.
mesßgeTy≥
)) {

189 
MSG_CERTREP
:

190 
	`sy¶og
(
LOG_WARNING
, "%s:%d: CertRep message, shouldÇot happen",

191 
__FILE__
, 
__LINE__
);

192 i‡(
debug
)

193 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: CertRep messageÑeceived\n",

194 
__FILE__
, 
__LINE__
);

195 
rc
 = 
	`˚πªp
(&
s˚p
);

197 
MSG_V2PROXY
:

201 
MSG_V2REQUEST
:

203 
rc
 = 
	`v2ªque°
(&
s˚p
);

205 
MSG_PKCSREQ
:

206 
	`sy¶og
(
LOG_INFO
, "%s:%d: PKCSReq mesßgêª˚ived", 
__FILE__
,

207 
__LINE__
);

208 i‡(
debug
)

209 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: PKCSReq messageÑeceived\n",

210 
__FILE__
, 
__LINE__
);

211 
rc
 = 
	`pkc§eq
(&
s˚p
);

213 
MSG_GETCERTINITIAL
:

214 
	`sy¶og
(
LOG_INFO
, "%s:%d: GetCertInitial messageÑeceived",

215 
__FILE__
, 
__LINE__
);

216 i‡(
debug
)

217 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: GetCertInitial message "

218 "ª˚ived\n", 
__FILE__
, 
__LINE__
);

219 
rc
 = 
	`gë˚πöôül
(&
s˚p
);

221 
MSG_GETCERT
:

222 
	`sy¶og
(
LOG_INFO
, "%s:%d: GetCert messageÑeceived",

223 
__FILE__
, 
__LINE__
);

224 i‡(
debug
)

225 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: GetCert messageÑeceived\n",

226 
__FILE__
, 
__LINE__
);

227 
rc
 = 
	`gë˚π
(&
s˚p
);

229 
MSG_GETCRL
:

230 
	`sy¶og
(
LOG_INFO
, "%s:%d: GëCRL mesßgêª˚ived", 
__FILE__
,

231 
__LINE__
);

232 i‡(
debug
)

233 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: GetCRL messageÑeceived\n",

234 
__FILE__
, 
__LINE__
);

235 
rc
 = 
	`gë¸l
(&
s˚p
);

238 
	`sy¶og
(
LOG_WARNING
, "%s:%d: message of unknownÅype: %s",

239 
__FILE__
, 
__LINE__
, 
s˚p
.
ªque°
.
mesßgeTy≥
);

240 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: unknown messageÅype: %s\n",

241 
__FILE__
, 
__LINE__
, 
s˚p
.
ªque°
.
mesßgeTy≥
);

242 
s˚p
.
ª∂y
.
Áûöfo
 = 
SCEP_FAILURE_BADREQUEST
;

245 
¥ïª∂y
:

246 i‡(
debug
)

247 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÑeplyÖrepared,Éncoding follows\n",

248 
__FILE__
, 
__LINE__
);

250 i‡(
rc
 < 0) {

252 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: badÑeturn code from handler\n",

253 
__FILE__
, 
__LINE__
);

254 
s˚p
.
ª∂y
.
Áûöfo
 = 
SCEP_FAILURE_BADREQUEST
;

258 i‡(
	`ícode
(&
s˚p
) < 0) {

259 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Éncodög faûed\n", 
__FILE__
,

260 
__LINE__
);

261 
	`sy¶og
(
LOG_ERR
, "%s:%d: scepd failedÅoÉncodeÅheÑeply",

262 
__FILE__
, 
__LINE__
);

263 
îr
;

267 i‡(
debug
)

268 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:ÖreparingÑeply headers\n",

269 
__FILE__
, 
__LINE__
);

270 
	`¥ötf
("Content-Transfer-Encoding: 8bit\r\n");

271 
	`¥ötf
("Content-Type:ápplication/x-pki-message\r\n");

272 
	`¥ötf
("C⁄ã¡-Lígth: %d\r\n\r\n", 
s˚p
.
ª∂y
.
Àngth
);

273 
	`fÊush
(
°dout
);

274 i‡(
debug
)

275 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: hódî†£¡\n", 
__FILE__
,

276 
__LINE__
);

279 i‡(
s˚p
.
ª∂y
.
Àngth
 !(
byãs
 = 
	`wrôe
(
	`fûío
(
°dout
), s˚p.ª∂y.
d©a
,

280 
s˚p
.
ª∂y
.
Àngth
))) {

281 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: message write incomplete "

282 "%d !%d\n", 
__FILE__
, 
__LINE__
, 
s˚p
.
ª∂y
.
d©a
,

283 
byãs
);

285 
	`¥ötf
("\r\n");

286 i‡(
debug
)

287 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: %d bytes of content sent\n",

288 
__FILE__
, 
__LINE__
, 
byãs
);

291 i‡(
debug
) {

292 
	`¢¥ötf
(
fûíame
, (filename), "%s/%d.pkireply.der",

293 
tmµ©h
, 
	`gëpid
());

294 
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

295 
	`wrôe
(
fd
, 
s˚p
.
ª∂y
.
d©a
, s˚p.ª∂y.
Àngth
);

296 
	`˛o£
(
fd
);

297 
	`BIO_¥ötf
(
bio_îr
, "%s:%d:Ñeply writtenÅo file %s\n",

298 
__FILE__
, 
__LINE__
, 
fûíame
);

302 
	`ERR_¥öt_îr‹s
(
bio_îr
);

303 
	`sy¶og
(
LOG_DEBUG
, "%s:%d: scepd successfully completed",

304 
__FILE__
, 
__LINE__
);

305 
	`logtimes
(&
°¨t
);

306 
	`exô
(
EXIT_SUCCESS
);

309 
îr
:

310 
	`ERR_¥öt_îr‹s
(
bio_îr
);

311 
	`sy¶og
(
LOG_DEBUG
, "%s:%d: s˚pd faûed", 
__FILE__
, 
__LINE__
);

312 
	`logtimes
(&
°¨t
);

313 
	`exô
(
EXIT_FAILURE
);

314 
	}
}

	@scepd/sceplist.c

8 
	~<c⁄fig.h
>

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<s˚p.h
>

12 
	~<öô.h
>

13 
	~<°rög.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/îr.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<dúít.h
>

18 
	~<î∫o.h
>

19 
	~<time.h
>

21 
	#SORT_TRANSID
 1

	)

22 
	#SORT_NAME
 2

	)

23 
	#SORT_NOTBEFORE
 3

	)

24 
	#SORT_NOTAFTER
 4

	)

25 
	#SORT_SERIAL
 5

	)

27 
	#SELECT_PENDING
 0

	)

28 
	#SELECT_GRANTED
 1

	)

29 
	#SELECT_REJECTED
 2

	)

30 
	#SELECT_REVOKED
 3

	)

32 
	gs‹t‹dî
 = 
SORT_NAME
;

33 
	gôem£À˘
 = 
SELECT_PENDING
;

34 
	ghtml
 = 0;

35 
	gªvî£
 = 1;

36 
	g˘imef‹m©
 = 0;

38 
›töd
;

39 *
›èrg
;

41 
	#ITEM_TYPE_CERT
 1

	)

42 
	#ITEM_TYPE_REQ
 2

	)

44 *
	g£À˘«me
[4] = {

48 
	ss˚pôem
 {

49 
	mty≥
;

50 *
	mkey
;

51 *
	må™sid
;

53 
X509
 *
	mx509
;

54 
X509_REQ
 *
	mªq
;

55 *
	m™y
;

56 } 
	md©a
;

57 } 
	ts˚pôem_t
;

63 *
a¢1_time_to_°rög
(
ASN1_TIME
 *
tm
);

64 
s˚pôem_t
 *
ªadôem
(*
å™sid
);

65 
di•œy_ôem
(
s˚pôem_t
 *
ù
);

66 
di•œy_˚π
(
s˚pôem_t
 *
ù
);

67 
di•œy_ªq
(
s˚pôem_t
 *
ù
);

69 
cmp_°rög
(
s˚pôem_t
 **, scepitem_t **);

70 
cmp_a¢1_öãgî
(
s˚pôem_t
 **, scepitem_t **);

72 
	$cmp_°rög
(
s˚pôem_t
 **
a
, s˚pôem_à**
b
) {

73  
ªvî£
 * 
	`°rcmp
((*)(*
a
)->
key
, (*)(*
b
)->key);

74 
	}
}

76 
	$cmp_a¢1_öãgî
(
s˚pôem_t
 **
a
, s˚pôem_à**
b
) {

77  
ªvî£
 * 
	`ASN1_INTEGER_cmp
((
ASN1_INTEGER
 *)(*
a
)->
key
,

78 (
ASN1_INTEGER
 *)(*
b
)->
key
);

79 
	}
}

81 (*
com∑ª
)(
s˚pôem_t
 **, s˚pôem_à**Ë
cmp_°rög
;

86 *
	$a¢1_time_to_°rög
(
ASN1_TIME
 *
tm
) {

87 *
ªsu…
;

90 
ªsu…
 = (*)
	`mÆloc
(
tm
->
Àngth
 + 1);

91 
ªsu…
[
tm
->
Àngth
] = '\0';

92 
	`mem˝y
(
ªsu…
, 
tm
->
d©a
,Åm->
Àngth
);

93  
ªsu…
;

94 
	}
}

99 
time_t
 
timez⁄e
;

100 #ifde‡
HAVE_ALTZONE


101 
time_t
 
Ætz⁄e
;

103 
time_t
 
	$a¢1_time_to_time
(
ASN1_TIME
 *
tm
) {

104 
tm
 
πm
;

105 
w‹k
[3];

106 
time_t
 
π
;

109 
	`mem£t
(
w‹k
, '\0', (work));

110 
	`mem£t
(&
πm
, 0, (
tm
));

113 
	`mem˝y
(
w‹k
, 
tm
->
d©a
 + 10, 2);

114 
πm
.
tm_£c
 = 
	`©oi
(
w‹k
);

115 
	`mem˝y
(
w‹k
, 
tm
->
d©a
 + 8, 2);

116 
πm
.
tm_mö
 = 
	`©oi
(
w‹k
);

117 
	`mem˝y
(
w‹k
, 
tm
->
d©a
 + 6, 2);

118 
πm
.
tm_hour
 = 
	`©oi
(
w‹k
);

119 
	`mem˝y
(
w‹k
, 
tm
->
d©a
 + 4, 2);

120 
πm
.
tm_mday
 = 
	`©oi
(
w‹k
);

121 
	`mem˝y
(
w‹k
, 
tm
->
d©a
 + 2, 2);

122 
πm
.
tm_m⁄
 = 
	`©oi
(
w‹k
);

123 
	`mem˝y
(
w‹k
, 
tm
->
d©a
, 2);

124 
πm
.
tm_yór
 = 
	`©oi
(
w‹k
);

125 i‡(
πm
.
tm_yór
 < 70)

126 
πm
.
tm_yór
 += 100;

129 
timez⁄e
 = 0;

130 #ifde‡
HAVE_ALTZONE


131 
Ætz⁄e
 = 0;

136 
π
 = 
	`mktime
(&
πm
);

139 
	`tz£t
();

141  
π
;

142 
	}
}

147 *
	$a¢1_time_to_˘ime
(
ASN1_TIME
 *
tm
) {

148 *
˘imîesu…
, *
a
;

149 
time_t
 
t
;

151 
t
 = 
	`a¢1_time_to_time
(
tm
);

152 
a
 = 
	`˘ime
(&
t
);

153 
˘imîesu…
 = (*)
	`mÆloc
(
	`°æí
(
a
) + 1);

154 
	`mem˝y
(
˘imîesu…
, 
a
, 
	`°æí
(a) + 1);

155  
˘imîesu…
;

156 
	}
}

158 
s˚pôem_t
 *
	$ªadôem
(*
å™sid
) {

159 
s˚pôem_t
 *
si
;

160 
BIO
 *
bio
;

161 
fûíame
[1024];

162 
⁄ñöe
[1024];

163 
X509_NAME
 *
«me
;

166 
si
 = (
s˚pôem_t
 *)
	`mÆloc
((scepitem_t));

169 
si
->
å™sid
 = 
	`°rdup
(transid);

172 
si
->
å™sid
[32] = '\0';

175 
ôem£À˘
) {

176 
SELECT_PENDING
:

177 
SELECT_REJECTED
:

178 
si
->
ty≥
 = 
ITEM_TYPE_REQ
;

180 
SELECT_GRANTED
:

181 
SELECT_REVOKED
:

182 
si
->
ty≥
 = 
ITEM_TYPE_CERT
;

187 
	`¢¥ötf
(
fûíame
, (fûíame), "%s/%s/%s.dî", 
OPENSCEPDIR
,

188 
£À˘«me
[
ôem£À˘
], 
si
->
å™sid
);

189 i‡(
debug
)

190 
	`Ârötf
(
°dîr
, "%s:%d:Åryög fûê'%s'\n", 
__FILE__
, 
__LINE__
,

191 
fûíame
);

194 
bio
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

195 i‡(
	`BIO_ªad_fûíame
(
bio
, 
fûíame
) < 0) {

196 
	`Ârötf
(
°dîr
, "%s:%d: c™nŸ o≥¿fûê%s\n", 
__FILE__
,

197 
__LINE__
, 
fûíame
);

198  
NULL
;

200 
si
->
ty≥
) {

201 
ITEM_TYPE_REQ
:

202 
si
->
d©a
.
ªq
 = 
	`d2i_X509_REQ_bio
(
bio
, 
NULL
);

204 
ITEM_TYPE_CERT
:

205 
si
->
d©a
.
x509
 = 
	`d2i_X509_bio
(
bio
, 
NULL
);

208 i‡(
si
->
d©a
.
™y
 =
NULL
) {

209 
	`Ârötf
(
°dîr
, "%s:%d: cannot decode item,Årans id %s\n",

210 
__FILE__
, 
__LINE__
, 
si
->
å™sid
);

211 
	`ERR_¥öt_îr‹s
(
bio_îr
);

212  
NULL
;

214 i‡(
debug
)

215 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: gŸÇew iãm\n", 
__FILE__
,

216 
__LINE__
);

220 
s‹t‹dî
) {

221 
SORT_TRANSID
:

222 
si
->
key
 = 
	`°rdup
(si->
å™sid
);

224 
SORT_NAME
:

225 
«me
 = (
si
->
ty≥
 =
ITEM_TYPE_REQ
)

226 ? 
	`X509_REQ_gë_subje˘_«me
(
si
->
d©a
.
ªq
)

227 : 
	`X509_gë_subje˘_«me
(
si
->
d©a
.
x509
);

228 
	`X509_NAME_⁄ñöe
(
«me
, 
⁄ñöe
, (oneline));

229 
si
->
key
 = 
	`°rdup
(
⁄ñöe
);

231 
SORT_NOTBEFORE
:

232 
si
->
key
 = 
	`a¢1_time_to_°rög
(
	`X509_gë_nŸBef‹e
(

233 
si
->
d©a
.
x509
));

235 
SORT_NOTAFTER
:

236 
si
->
key
 = 
	`a¢1_time_to_°rög
(
	`X509_gë_nŸA·î
(si->
d©a
.
x509
));

238 
SORT_SERIAL
:

239 
si
->
key
 = 
	`X509_gë_£rülNumbî
(si->
d©a
.
x509
);

244  
si
;

245 
	}
}

247 
	$di•œy_˚π
(
s˚pôem_t
 *
ù
) {

248 
subje˘
[1024], 
issuî
[1024];

249 *
nŸbef‹e
, *
nŸa·î
;

250 *
£rül
, *
n
;

251 
l
;

252 
BIO
 *
a
;

254 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
ù
->
d©a
.
x509
), 
subje˘
,

255 (
subje˘
));

256 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
ù
->
d©a
.
x509
), 
issuî
,

257 (
issuî
));

258 
a
 = 
	`BIO_√w
(
	`BIO_s_mem
());

259 
	`i2a_ASN1_INTEGER
(
a
, 
	`X509_gë_£rülNumbî
(
ù
->
d©a
.
x509
));

260 
l
 = 
	`BIO_gë_mem_d©a
(
a
, &
n
);

261 
£rül
 = (*)
	`mÆloc
(
l
 + 1);

262 
£rül
[
l
] = '\0';

263 
	`mem˝y
(
£rül
, 
n
, 
l
);

264 
	`BIO_‰ì
(
a
);

265 i‡(
˘imef‹m©
) {

266 
nŸbef‹e
 = 
	`a¢1_time_to_˘ime
(
	`X509_gë_nŸBef‹e
(

267 
ù
->
d©a
.
x509
));

268 
nŸa·î
 = 
	`a¢1_time_to_˘ime
(
	`X509_gë_nŸA·î
(

269 
ù
->
d©a
.
x509
));

271 
nŸbef‹e
 = 
	`a¢1_time_to_°rög
(
	`X509_gë_nŸBef‹e
(

272 
ù
->
d©a
.
x509
));

273 
nŸa·î
 = 
	`a¢1_time_to_°rög
(
	`X509_gë_nŸA·î
(

274 
ù
->
d©a
.
x509
));

277 i‡(
html
) {

278 
	`¥ötf
("<tr>\n"

284 
subje˘
, 
£rül
, 
nŸbef‹e
, 
nŸa·î


287 
	`¥ötf
("%s\t%s\t%s\t%s\n", 
nŸbef‹e
, 
nŸa·î
, 
£rül
,

288 
subje˘
);

291 
	`‰ì
(
nŸbef‹e
); fªe(
nŸa·î
);

292 
	}
}

294 
	$di•œy_ªq
(
s˚pôem_t
 *
ù
) {

295 
subje˘
[1024];

296 *
fögî¥öt
 = "";

297 
	`X509_NAME_⁄ñöe
(
	`X509_REQ_gë_subje˘_«me
(
ù
->
d©a
.
ªq
), 
subje˘
,

298 (
subje˘
));

299 i‡(
html
) {

300 
	`¥ötf
("<tr>\n"

303 "</å>\n", 
subje˘
, 
fögî¥öt
);

305 
	`¥ötf
("%s\t%s\n", 
subje˘
, 
fögî¥öt
);

307 
	}
}

309 
	$di•œy_ôem
(
s˚pôem_t
 *
ù
) {

310 
ù
->
ty≥
) {

311 
ITEM_TYPE_CERT
:

312 
	`di•œy_˚π
(
ù
);

314 
ITEM_TYPE_REQ
:

315 
	`di•œy_ªq
(
ù
);

318 
	}
}

320 
	$maö
(
¨gc
, *
¨gv
[]) {

321 
c
;

322 
s˚p_t
 
s˚p
;

323 *
nŸbef‹e
 = 
NULL
, *
nŸa·î
 = NULL;

324 
w‹kdú
[1024];

325 
ôems
 = 0;

326 
s˚pôem_t
 **
ôemli°
 = 
NULL
;

327 
s˚pôem_t
 **
ù
;

328 
DIR
 *
dú
;

329 
dúít
 *
d
;

332 
EOF
 !(
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "abcdghnprstvx")))

333 
c
) {

335 
s‹t‹dî
 = 
SORT_NOTAFTER
;

336 
com∑ª
 = 
cmp_°rög
;

339 
s‹t‹dî
 = 
SORT_NOTBEFORE
;

340 
com∑ª
 = 
cmp_°rög
;

343 
˘imef‹m©
 = 1;

346 
debug
++;

349 
ôem£À˘
 = 
SELECT_GRANTED
;

352 
html
 = 1;

355 
s‹t‹dî
 = 
SORT_NAME
;

356 
com∑ª
 = 
cmp_°rög
;

359 
ôem£À˘
 = 
SELECT_PENDING
;

362 
ôem£À˘
 = 
SELECT_REJECTED
;

365 
s‹t‹dî
 = 
SORT_SERIAL
;

366 
com∑ª
 = 
cmp_a¢1_öãgî
;

369 
s‹t‹dî
 = 
SORT_TRANSID
;

370 
com∑ª
 = 
cmp_°rög
;

373 
ôem£À˘
 = 
SELECT_REVOKED
;

376 
ªvî£
 *= -1;

381 i‡(
¨gc
 > 
›töd
) {

382 
nŸbef‹e
 = 
¨gv
[
›töd
++];

384 i‡(
¨gc
 > 
›töd
) {

385 
nŸa·î
 = 
¨gv
[
›töd
];

389 
	`s˚pöô
();

390 
	`s˚p_c⁄fig
(&
s˚p
, 
OPENSCEPDIR
 "/openscep.cnf");

393 
	`¢¥ötf
(
w‹kdú
, (w‹kdú), 
OPENSCEPDIR
 "/%s",

394 
£À˘«me
[
ôem£À˘
]);

399 
	`¢¥ötf
(
w‹kdú
, (w‹kdú), "%s/%s", 
OPENSCEPDIR
,

400 
£À˘«me
[
ôem£À˘
]);

401 i‡(
NULL
 =(
dú
 = 
	`›ídú
(
w‹kdú
))) {

402 
	`Ârötf
(
°dîr
, "%s:%d: cannot open directory %s: %s (%d)\n",

403 
__FILE__
, 
__LINE__
, 
w‹kdú
, 
	`°ªº‹
(
î∫o
),Érrno);

404 
	`exô
(
EXIT_FAILURE
);

406 (
d
 = 
	`ªaddú
(
dú
))) {

408 i‡(0 =
	`°rcmp
(
d
->
d_«me
 + 32, ".der")) {

409 
ôems
++;

410 
ôemli°
 = (
s˚pôem_t
 **)
	`ªÆloc
(itemlist,

411 (
s˚pôem_t
 *Ë* (
ôems
 + 1));

412 
ôemli°
[
ôems
 - 1] = 
	`ªadôem
(
d
->
d_«me
);

413 
ôemli°
[
ôems
] = 
NULL
;

418 i‡(
debug
) {

419 
	`BIO_¥ötf
(
bio_îr
, "%s:%d: sorting %d items inárrayát %p\n",

420 
__FILE__
, 
__LINE__
, 
ôems
, 
ôemli°
);

422 
	`qs‹t
(
ôemli°
, 
ôems
, (
s˚pôem_t
 *),

423 ((*)(c⁄° *, c⁄° *))
com∑ª
);

426 i‡(
ôemli°
)

427 
ù
 = 
ôemli°
; *ip; ip++) {

429 
	`di•œy_ôem
(*
ù
);

433 
	`exô
(
EXIT_SUCCESS
);

434 
	}
}

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_GNU


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_GNU


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

242 
	#__√ed_size_t


	)

243 
	~<°ddef.h
>

249 #i‚de‡
__USE_FILE_OFFSET64


250 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

251 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

252 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

253 (*
__cmp
Ë(
__c⁄°
 *, __const *))

254 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__REDIRECT


257 
	`__REDIRECT
 (
sˇndú
,

258 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

259 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

260 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

261 (*
__cmp
Ë(
__c⁄°
 *, __const *)),

262 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

264 
	#sˇndú
 
sˇndú64


	)

268 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


271 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

272 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

273 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

274 (*
__cmp
Ë(
__c⁄°
 *, __const *))

275 
	`__n⁄nuŒ
 ((1, 2));

279 #i‚de‡
__USE_FILE_OFFSET64


280 
	$Æphas‹t
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

283 #ifde‡
__REDIRECT


284 
	`__REDIRECT_NTH
 (
Æphas‹t
,

285 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
),

286 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
	#Æphas‹t
 
Æphas‹t64


	)

292 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


293 
	$Æphas‹t64
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__USE_GNU


299 #i‚de‡
__USE_FILE_OFFSET64


300 
	$vîsi⁄s‹t
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

301 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

303 #ifde‡
__REDIRECT


304 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

305 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
),

306 
vîsi⁄s‹t64
)

307 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

309 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

313 #ifde‡
__USE_LARGEFILE64


314 
	$vîsi⁄s‹t64
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

325 
size_t
 
__nbyãs
,

326 
__off_t
 *
__ª°ri˘
 
__ba£p
)

327 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

329 #ifde‡
__REDIRECT


330 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

331 (
__fd
, *
__ª°ri˘
 
__buf
,

332 
size_t
 
__nbyãs
,

333 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

334 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

336 
	#gëdúíåõs
 
gëdúíåõs64


	)

340 #ifde‡
__USE_LARGEFILE64


341 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

342 
size_t
 
__nbyãs
,

343 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

349 
__END_DECLS


	@/usr/include/dlfcn.h

21 #i‚def 
_DLFCN_H


22 
	#_DLFCN_H
 1

	)

24 
	~<„©uªs.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

29 
	~<bôs/dlf˙.h
>

32 #ifde‡
__USE_GNU


37 
	#RTLD_NEXT
 ((*Ë-1l)

	)

42 
	#RTLD_DEFAULT
 ((*Ë0)

	)

46 
	tLmid_t
;

49 
	#LM_ID_BASE
 0

	)

50 
	#LM_ID_NEWLM
 -1

	)

54 
__BEGIN_DECLS


58 *
	$dl›í
 (
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

62 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

66 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

67 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

69 #ifde‡
__USE_GNU


71 *
	$dlm›í
 (
Lmid_t
 
__nsid
, 
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

75 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

76 
__c⁄°
 *
__ª°ri˘
 
__«me
,

77 
__c⁄°
 *
__ª°ri˘
 
__vîsi⁄
)

78 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

84 *
	$dÀº‹
 (Ë
__THROW
;

87 #ifde‡
__USE_GNU


92 
__c⁄°
 *
dli_‚ame
;

93 *
dli_fba£
;

94 
__c⁄°
 *
dli_¢ame
;

95 *
dli_ßddr
;

96 } 
	tDl_öfo
;

100 
	$dœddr
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
)

101 
__THROW
 
	`__n⁄nuŒ
 ((2));

104 
	$dœddr1
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
,

105 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

113 
RTLD_DL_SYMENT
 = 1,

116 
RTLD_DL_LINKMAP
 = 2

125 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

126 
__ªque°
, *
__ª°ri˘
 
__¨g
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

133 
RTLD_DI_LMID
 = 1,

137 
RTLD_DI_LINKMAP
 = 2,

139 
RTLD_DI_CONFIGADDR
 = 3,

146 
RTLD_DI_SERINFO
 = 4,

147 
RTLD_DI_SERINFOSIZE
 = 5,

151 
RTLD_DI_ORIGIN
 = 6,

153 
RTLD_DI_PROFILENAME
 = 7,

154 
RTLD_DI_PROFILEOUT
 = 8,

159 
RTLD_DI_TLS_MODID
 = 9,

165 
RTLD_DI_TLS_DATA
 = 10,

167 
RTLD_DI_MAX
 = 10

175 *
dls_«me
;

176 
dls_Êags
;

177 } 
	tDl_£Ω©h
;

183 
size_t
 
dls_size
;

184 
dls_˙t
;

185 
Dl_£Ω©h
 
dls_£Ω©h
[1];

186 } 
	tDl_£röfo
;

190 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

59 #ifde‡
__USE_ATFILE


60 
	#AT_FDCWD
 -100

	)

63 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

64 
	#AT_REMOVEDIR
 0x200

	)

66 
	#AT_SYMLINK_FOLLOW
 0x400

	)

67 
	#AT_EACCESS
 0x200

	)

76 
f˙é
 (
__fd
, 
__cmd
, ...);

84 #i‚de‡
__USE_FILE_OFFSET64


85 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

87 #ifde‡
__REDIRECT


88 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

89 
	`__n⁄nuŒ
 ((1));

91 
	#›í
 
›í64


	)

94 #ifde‡
__USE_LARGEFILE64


95 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

98 #ifde‡
__USE_ATFILE


108 #i‚de‡
__USE_FILE_OFFSET64


109 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

110 
	`__n⁄nuŒ
 ((2));

112 #ifde‡
__REDIRECT


113 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

114 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

116 
	#›í©
 
›í©64


	)

120 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

121 
	`__n⁄nuŒ
 ((2));

129 #i‚de‡
__USE_FILE_OFFSET64


130 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__REDIRECT


133 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

134 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

136 
	#¸ót
 
¸ót64


	)

139 #ifde‡
__USE_LARGEFILE64


140 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

143 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

144 && !
deföed
 
__USE_POSIX
))

153 
	#F_ULOCK
 0

	)

154 
	#F_LOCK
 1

	)

155 
	#F_TLOCK
 2

	)

156 
	#F_TEST
 3

	)

158 #i‚de‡
__USE_FILE_OFFSET64


159 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

161 #ifde‡
__REDIRECT


162 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

164 
	#lockf
 
lockf64


	)

167 #ifde‡
__USE_LARGEFILE64


168 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

172 #ifde‡
__USE_XOPEN2K


175 #i‚de‡
__USE_FILE_OFFSET64


176 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

177 
__advi£
Ë
__THROW
;

179 #ifde‡
__REDIRECT_NTH


180 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

181 
__off64_t
 
__Àn
, 
__advi£
),

182 
posix_Ádvi£64
);

184 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

187 #ifde‡
__USE_LARGEFILE64


188 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

189 
__advi£
Ë
__THROW
;

197 #i‚de‡
__USE_FILE_OFFSET64


198 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

200 #ifde‡
__REDIRECT


201 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

202 
__off64_t
 
__Àn
),

203 
posix_ÁŒoˇã64
);

205 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

208 #ifde‡
__USE_LARGEFILE64


209 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

213 
__END_DECLS


	@/usr/include/lber.h

26 #i‚de‡
_LBER_H


27 
	#_LBER_H


	)

29 
	~<lbî_ty≥s.h
>

30 
	~<°rög.h
>

32 
	gLDAP_BEGIN_DECL


52 
	#LBER_CLASS_UNIVERSAL
 ((
bî_èg_t
Ë0x00U)

	)

53 
	#LBER_CLASS_APPLICATION
 ((
bî_èg_t
Ë0x40U)

	)

54 
	#LBER_CLASS_CONTEXT
 ((
bî_èg_t
Ë0x80U)

	)

55 
	#LBER_CLASS_PRIVATE
 ((
bî_èg_t
Ë0xc0U)

	)

56 
	#LBER_CLASS_MASK
 ((
bî_èg_t
Ë0xc0U)

	)

59 
	#LBER_PRIMITIVE
 ((
bî_èg_t
Ë0x00U)

	)

60 
	#LBER_CONSTRUCTED
 ((
bî_èg_t
Ë0x20U)

	)

61 
	#LBER_ENCODING_MASK
 ((
bî_èg_t
Ë0x20U)

	)

63 
	#LBER_BIG_TAG_MASK
 ((
bî_èg_t
Ë0x1fU)

	)

64 
	#LBER_MORE_TAG_MASK
 ((
bî_èg_t
Ë0x80U)

	)

71 
	#LBER_INVALID
(
t
Ë((—Ë& (
bî_èg_t
) 0x080UL) \

72 && (((
t
Ë& (
bî_èg_t
Ë~ 0x0FF))

	)

74 
	#LBER_ERROR
 ((
bî_èg_t
Ë-1)

	)

75 
	#LBER_DEFAULT
 ((
bî_èg_t
Ë-1)

	)

78 
	#LBER_BOOLEAN
 ((
bî_èg_t
Ë0x01UL)

	)

79 
	#LBER_INTEGER
 ((
bî_èg_t
Ë0x02UL)

	)

80 
	#LBER_BITSTRING
 ((
bî_èg_t
Ë0x03UL)

	)

81 
	#LBER_OCTETSTRING
 ((
bî_èg_t
Ë0x04UL)

	)

82 
	#LBER_NULL
 ((
bî_èg_t
Ë0x05UL)

	)

83 
	#LBER_ENUMERATED
 ((
bî_èg_t
Ë0x0aUL)

	)

84 
	#LBER_SEQUENCE
 ((
bî_èg_t
Ë0x30ULË

	)

85 
	#LBER_SET
 ((
bî_èg_t
Ë0x31ULË

	)

88 
	#LBER_USE_DER
 0x01

	)

91 
	#LBER_OPT_BER_OPTIONS
 0x01

	)

92 
	#LBER_OPT_BER_DEBUG
 0x02

	)

93 
	#LBER_OPT_BER_REMAINING_BYTES
 0x03

	)

94 
	#LBER_OPT_BER_TOTAL_BYTES
 0x04

	)

95 
	#LBER_OPT_BER_BYTES_TO_WRITE
 0x05

	)

96 
	#LBER_OPT_BER_MEMCTX
 0x06

	)

98 
	#LBER_OPT_DEBUG_LEVEL
 
LBER_OPT_BER_DEBUG


	)

99 
	#LBER_OPT_REMAINING_BYTES
 
LBER_OPT_BER_REMAINING_BYTES


	)

100 
	#LBER_OPT_TOTAL_BYTES
 
LBER_OPT_BER_TOTAL_BYTES


	)

101 
	#LBER_OPT_BYTES_TO_WRITE
 
LBER_OPT_BER_BYTES_TO_WRITE


	)

103 
	#LBER_OPT_LOG_PRINT_FN
 0x8001

	)

104 
	#LBER_OPT_MEMORY_FNS
 0x8002

	)

105 
	#LBER_OPT_ERROR_FN
 0x8003

	)

106 
	#LBER_OPT_LOG_PRINT_FILE
 0x8004

	)

109 
	#LBER_OPT_MEMORY_INUSE
 0x8005

	)

110 
	#LBER_OPT_LOG_PROC
 0x8006

	)

112 * (*
	tBER_ERRNO_FN
Ë
	tLDAP_P
(( ));

114 (*
	tBER_LOG_PRINT_FN
Ë
	tLDAP_P
(–
	tLDAP_CONST
 *
	tbuf
 ));

116 * (
	tBER_MEMALLOC_FN
Ë
	tLDAP_P
(–
	tbî_Àn_t
 
	tsize
, *
	t˘x
 ));

117 * (
	tBER_MEMCALLOC_FN
Ë
	tLDAP_P
(–
	tbî_Àn_t
 
	tn
, bî_Àn_à
	tsize
, *
	t˘x
 ));

118 * (
	tBER_MEMREALLOC_FN
Ë
	tLDAP_P
(–*
	tp
, 
	tbî_Àn_t
 
	tsize
, *
	t˘x
 ));

119 (
	tBER_MEMFREE_FN
Ë
	tLDAP_P
(–*
	tp
, *
	t˘x
 ));

121 
	slbî_mem‹y_‚s
 {

122 
BER_MEMALLOC_FN
 *
bmf_mÆloc
;

123 
BER_MEMCALLOC_FN
 *
bmf_ˇŒoc
;

124 
BER_MEMREALLOC_FN
 *
bmf_ªÆloc
;

125 
BER_MEMFREE_FN
 *
bmf_‰ì
;

126 } 
	tBîMem‹yFun˘i⁄s
;

129 
	#LBER_SB_OPT_GET_FD
 1

	)

130 
	#LBER_SB_OPT_SET_FD
 2

	)

131 
	#LBER_SB_OPT_HAS_IO
 3

	)

132 
	#LBER_SB_OPT_SET_NONBLOCK
 4

	)

133 
	#LBER_SB_OPT_GET_SSL
 7

	)

134 
	#LBER_SB_OPT_DATA_READY
 8

	)

135 
	#LBER_SB_OPT_SET_READAHEAD
 9

	)

136 
	#LBER_SB_OPT_DRAIN
 10

	)

137 
	#LBER_SB_OPT_NEEDS_READ
 11

	)

138 
	#LBER_SB_OPT_NEEDS_WRITE
 12

	)

139 
	#LBER_SB_OPT_GET_MAX_INCOMING
 13

	)

140 
	#LBER_SB_OPT_SET_MAX_INCOMING
 14

	)

142 
	#LBER_SB_OPT_OPT_MAX
 14

	)

145 
	#LBER_SBIOD_LEVEL_PROVIDER
 10

	)

146 
	#LBER_SBIOD_LEVEL_TRANSPORT
 20

	)

147 
	#LBER_SBIOD_LEVEL_APPLICATION
 30

	)

150 
	#LBER_OPT_SOCKBUF_DESC
 0x1000

	)

151 
	#LBER_OPT_SOCKBUF_OPTIONS
 0x1001

	)

152 
	#LBER_OPT_SOCKBUF_DEBUG
 0x1002

	)

155 
	$LBER_V
–Ë
bî_pvt_›t_⁄
;

156 
	#LBER_OPT_ON
 ((*Ë&
bî_pvt_›t_⁄
)

	)

157 
	#LBER_OPT_OFF
 ((*Ë0)

	)

159 
	#LBER_OPT_SUCCESS
 (0)

	)

160 
	#LBER_OPT_ERROR
 (-1)

	)

162 
bîñemít
 
	tBîEÀmít
;

163 
sockbuf
 
	tSockbuf
;

164 
£q‹£t
 
	tSeq‹£t
;

166 
sockbuf_io
 
	tSockbuf_IO
;

169 
	ssockbuf_io_desc
 {

170 
sbiod_Àvñ
;

171 
Sockbuf
 *
sbiod_sb
;

172 
Sockbuf_IO
 *
sbiod_io
;

173 *
sbiod_pvt
;

174 
sockbuf_io_desc
 *
sbiod_√xt
;

175 } 
	tSockbuf_IO_Desc
;

178 
	ssockbuf_io
 {

179 (*
sbi_£tup
)–
Sockbuf_IO_Desc
 *
sbiod
, *
¨g
 );

180 (*
sbi_ªmove
)–
Sockbuf_IO_Desc
 *
sbiod
 );

181 (*
sbi_˘æ
)–
Sockbuf_IO_Desc
 *
sbiod
, 
›t
, *
¨g
);

183 
	`bî_¶í_t
 (*
sbi_ªad
)–
Sockbuf_IO_Desc
 *
sbiod
, *
buf
,

184 
bî_Àn_t
 
Àn
 );

185 
	`bî_¶í_t
 (*
sbi_wrôe
)–
Sockbuf_IO_Desc
 *
sbiod
, *
buf
,

186 
bî_Àn_t
 
Àn
 );

188 (*
sbi_˛o£
)–
Sockbuf_IO_Desc
 *
sbiod
 );

192 
	#LBER_SBIOD_READ_NEXT
–
sbiod
, 
buf
, 
Àn
 ) \

193 –(
sbiod
)->
sbiod_√xt
->
sbiod_io
->
	`sbi_ªad
( (sbiod)->sbiod_next, \

194 
buf
, 
Àn
 ) )

	)

195 
	#LBER_SBIOD_WRITE_NEXT
–
sbiod
, 
buf
, 
Àn
 ) \

196 –(
sbiod
)->
sbiod_√xt
->
sbiod_io
->
	`sbi_wrôe
( (sbiod)->sbiod_next, \

197 
buf
, 
Àn
 ) )

	)

198 
	#LBER_SBIOD_CTRL_NEXT
–
sbiod
, 
›t
, 
¨g
 ) \

199 –(
sbiod
)->
sbiod_√xt
 ? \

200 –(
sbiod
)->
sbiod_√xt
->
sbiod_io
->
	`sbi_˘æ
( \

201 (
sbiod
)->
sbiod_√xt
, 
›t
, 
¨g
 ) ) : 0 )

	)

204 
	sbîvÆ
 {

205 
bî_Àn_t
 
bv_Àn
;

206 *
bv_vÆ
;

207 } 
	tBîVÆue
;

209 
BîVÆue
 *
	tBîV¨øy
;

216 
	$LBER_F
( )

217 
bî_îr‹_¥öt
 
	`LDAP_P
((

218 
LDAP_CONST
 *
d©a
 ));

220 
	$LBER_F
( )

221 
bî_b¥öt
 
	`LDAP_P
((

222 
LDAP_CONST
 *
d©a
, 
bî_Àn_t
 
Àn
 ));

224 
	$LBER_F
( )

225 
bî_dump
 
	`LDAP_P
((

226 
BîEÀmít
 *
bî
, 
öout
 ));

228 
	$LBER_F
( )

229 
bî_sos_dump
 
	`LDAP_P
((

230 
Seq‹£t
 *
sos
 ));

235 (*
	tBERDecodeCÆlback
Ë
	tLDAP_P
((

236 
	tBîEÀmít
 *
	tbî
,

237 *
	td©a
,

238 
	tmode
 ));

240 
	$LBER_F
–
bî_èg_t
 )

241 
bî_gë_èg
 
	`LDAP_P
((

242 
BîEÀmít
 *
bî
 ));

244 
	$LBER_F
–
bî_èg_t
 )

245 
bî_skù_èg
 
	`LDAP_P
((

246 
BîEÀmít
 *
bî
,

247 
bî_Àn_t
 *
Àn
 ));

249 
	$LBER_F
–
bî_èg_t
 )

250 
bî_≥ek_èg
 
	`LDAP_P
((

251 
BîEÀmít
 *
bî
,

252 
bî_Àn_t
 *
Àn
 ));

254 
	$LBER_F
–
bî_èg_t
 )

255 
bî_gë_öt
 
	`LDAP_P
((

256 
BîEÀmít
 *
bî
,

257 
bî_öt_t
 *
num
 ));

259 
	$LBER_F
–
bî_èg_t
 )

260 
bî_gë_íum
 
	`LDAP_P
((

261 
BîEÀmít
 *
bî
,

262 
bî_öt_t
 *
num
 ));

264 
	$LBER_F
–
bî_èg_t
 )

265 
bî_gë_°rögb
 
	`LDAP_P
((

266 
BîEÀmít
 *
bî
,

267 *
buf
,

268 
bî_Àn_t
 *
Àn
 ));

270 
	$LBER_F
–
bî_èg_t
 )

271 
bî_gë_°rögbv
 
	`LDAP_P
((

272 
BîEÀmít
 *
bî
,

273 
bîvÆ
 *
bv
,

274 
Æloc
 ));

276 
	$LBER_F
–
bî_èg_t
 )

277 
bî_gë_°röga
 
	`LDAP_P
((

278 
BîEÀmít
 *
bî
,

279 **
buf
 ));

281 
	$LBER_F
–
bî_èg_t
 )

282 
bî_gë_°rögÆ
 
	`LDAP_P
((

283 
BîEÀmít
 *
bî
,

284 
bîvÆ
 **
bv
 ));

286 
	$LBER_F
–
bî_èg_t
 )

287 
bî_gë_bô°röga
 
	`LDAP_P
((

288 
BîEÀmít
 *
bî
,

289 **
buf
,

290 
bî_Àn_t
 *
Àn
 ));

292 
	$LBER_F
–
bî_èg_t
 )

293 
bî_gë_nuŒ
 
	`LDAP_P
((

294 
BîEÀmít
 *
bî
 ));

296 
	$LBER_F
–
bî_èg_t
 )

297 
bî_gë_boﬁón
 
	`LDAP_P
((

298 
BîEÀmít
 *
bî
,

299 
bî_öt_t
 *
boﬁvÆ
 ));

301 
	$LBER_F
–
bî_èg_t
 )

302 
bî_fú°_ñemít
 
	`LDAP_P
((

303 
BîEÀmít
 *
bî
,

304 
bî_Àn_t
 *
Àn
,

305 **
œ°
 ));

307 
	$LBER_F
–
bî_èg_t
 )

308 
bî_√xt_ñemít
 
	`LDAP_P
((

309 
BîEÀmít
 *
bî
,

310 
bî_Àn_t
 *
Àn
,

311 
LDAP_CONST
 *
œ°
 ));

313 
	$LBER_F
–
bî_èg_t
 )

314 
bî_sˇnf
 
	`LDAP_P
((

315 
BîEÀmít
 *
bî
,

316 
LDAP_CONST
 *
fmt
,

322 (*
	tBEREncodeCÆlback
Ë
	tLDAP_P
((

323 
	tBîEÀmít
 *
	tbî
,

324 *
	td©a
 ));

326 
	$LBER_F
( )

327 
bî_put_íum
 
	`LDAP_P
((

328 
BîEÀmít
 *
bî
,

329 
bî_öt_t
 
num
,

330 
bî_èg_t
 
èg
 ));

332 
	$LBER_F
( )

333 
bî_put_öt
 
	`LDAP_P
((

334 
BîEÀmít
 *
bî
,

335 
bî_öt_t
 
num
,

336 
bî_èg_t
 
èg
 ));

338 
	$LBER_F
( )

339 
bî_put_o°rög
 
	`LDAP_P
((

340 
BîEÀmít
 *
bî
,

341 
LDAP_CONST
 *
°r
,

342 
bî_Àn_t
 
Àn
,

343 
bî_èg_t
 
èg
 ));

345 
	$LBER_F
( )

346 
bî_put_bîvÆ
 
	`LDAP_P
((

347 
BîEÀmít
 *
bî
,

348 
bîvÆ
 *
bv
,

349 
bî_èg_t
 
èg
 ));

351 
	$LBER_F
( )

352 
bî_put_°rög
 
	`LDAP_P
((

353 
BîEÀmít
 *
bî
,

354 
LDAP_CONST
 *
°r
,

355 
bî_èg_t
 
èg
 ));

357 
	$LBER_F
( )

358 
bî_put_bô°rög
 
	`LDAP_P
((

359 
BîEÀmít
 *
bî
,

360 
LDAP_CONST
 *
°r
,

361 
bî_Àn_t
 
bôÀn
,

362 
bî_èg_t
 
èg
 ));

364 
	$LBER_F
( )

365 
bî_put_nuŒ
 
	`LDAP_P
((

366 
BîEÀmít
 *
bî
,

367 
bî_èg_t
 
èg
 ));

369 
	$LBER_F
( )

370 
bî_put_boﬁón
 
	`LDAP_P
((

371 
BîEÀmít
 *
bî
,

372 
bî_öt_t
 
boﬁvÆ
,

373 
bî_èg_t
 
èg
 ));

375 
	$LBER_F
( )

376 
bî_°¨t_£q
 
	`LDAP_P
((

377 
BîEÀmít
 *
bî
,

378 
bî_èg_t
 
èg
 ));

380 
	$LBER_F
( )

381 
bî_°¨t_£t
 
	`LDAP_P
((

382 
BîEÀmít
 *
bî
,

383 
bî_èg_t
 
èg
 ));

385 
	$LBER_F
( )

386 
bî_put_£q
 
	`LDAP_P
((

387 
BîEÀmít
 *
bî
 ));

389 
	$LBER_F
( )

390 
bî_put_£t
 
	`LDAP_P
((

391 
BîEÀmít
 *
bî
 ));

393 
	$LBER_F
( )

394 
bî_¥ötf
 
	`LDAP_P
((

395 
BîEÀmít
 *
bî
,

396 
LDAP_CONST
 *
fmt
,

404 
	$LBER_F
–
bî_¶í_t
 )

405 
bî_ªad
 
	`LDAP_P
((

406 
BîEÀmít
 *
bî
,

407 *
buf
,

408 
bî_Àn_t
 
Àn
 ));

410 
	$LBER_F
–
bî_¶í_t
 )

411 
bî_wrôe
 
	`LDAP_P
((

412 
BîEÀmít
 *
bî
,

413 
LDAP_CONST
 *
buf
,

414 
bî_Àn_t
 
Àn
,

415 
nosos
 ));

417 
	$LBER_F
( )

418 
bî_‰ì
 
	`LDAP_P
((

419 
BîEÀmít
 *
bî
,

420 
‰ìbuf
 ));

422 
	$LBER_F
( )

423 
bî_‰ì_buf
 
	`LDAP_P
(–
BîEÀmít
 *
bî
 ));

425 
	$LBER_F
( )

426 
bî_Êush
 
	`LDAP_P
((

427 
Sockbuf
 *
sb
,

428 
BîEÀmít
 *
bî
,

429 
‰ìô
 ));

431 
	$LBER_F
–
BîEÀmít
 * )

432 
bî_Æloc
 
	`LDAP_P
(( ));

434 
	$LBER_F
–
BîEÀmít
 * )

435 
dî_Æloc
 
	`LDAP_P
(( ));

437 
	$LBER_F
–
BîEÀmít
 * )

438 
bî_Æloc_t
 
	`LDAP_P
((

439 
bî›ti⁄s
 ));

441 
	$LBER_F
–
BîEÀmít
 * )

442 
bî_dup
 
	`LDAP_P
((

443 
BîEÀmít
 *
bî
 ));

445 
	$LBER_F
–
bî_èg_t
 )

446 
bî_gë_√xt
 
	`LDAP_P
((

447 
Sockbuf
 *
sb
,

448 
bî_Àn_t
 *
Àn
,

449 
BîEÀmít
 *
bî
 ));

451 
	$LBER_F
( )

452 
bî_öô2
 
	`LDAP_P
((

453 
BîEÀmít
 *
bî
,

454 
bîvÆ
 *
bv
,

455 
›ti⁄s
 ));

457 
	$LBER_F
( )

458 
bî_öô_w_nuŒc
 
	`LDAP_P
((

459 
BîEÀmít
 *
bî
,

460 
›ti⁄s
 ));

462 
	$LBER_F
( )

463 
bî_ª£t
 
	`LDAP_P
((

464 
BîEÀmít
 *
bî
,

465 
was_wrôög
 ));

467 
	$LBER_F
–
BîEÀmít
 * )

468 
bî_öô
 
	`LDAP_P
((

469 
bîvÆ
 *
bv
 ));

471 
	$LBER_F
( )

472 
bî_Ê©ãn
 
	`LDAP_P
((

473 
BîEÀmít
 *
bî
,

474 
bîvÆ
 **
bvPå
 ));

476 
	$LBER_F
( )

477 
bî_Ê©ãn2
 
	`LDAP_P
((

478 
BîEÀmít
 *
bî
,

479 
bîvÆ
 *
bv
,

480 
Æloc
 ));

482 
	$LBER_F
( )

483 
bî_ªmaöög
 
	`LDAP_P
((

484 
BîEÀmít
 *
bî
 ));

490 
	$LBER_F
( )

491 
bî_gë_›ti⁄
 
	`LDAP_P
((

492 *
ôem
,

493 
›ti⁄
,

494 *
outvÆue
));

496 
	$LBER_F
( )

497 
bî_£t_›ti⁄
 
	`LDAP_P
((

498 *
ôem
,

499 
›ti⁄
,

500 
LDAP_CONST
 *
övÆue
));

506 
	$LBER_F
–
Sockbuf
 * )

507 
bî_sockbuf_Æloc
 
	`LDAP_P
((

510 
	$LBER_F
( )

511 
bî_sockbuf_‰ì
 
	`LDAP_P
((

512 
Sockbuf
 *
sb
 ));

514 
	$LBER_F
( )

515 
bî_sockbuf_add_io
 
	`LDAP_P
((

516 
Sockbuf
 *
sb
,

517 
Sockbuf_IO
 *
sbio
,

518 
œyî
,

519 *
¨g
 ));

521 
	$LBER_F
( )

522 
bî_sockbuf_ªmove_io
 
	`LDAP_P
((

523 
Sockbuf
 *
sb
,

524 
Sockbuf_IO
 *
sbio
,

525 
œyî
 ));

527 
	$LBER_F
( )

528 
bî_sockbuf_˘æ
 
	`LDAP_P
((

529 
Sockbuf
 *
sb
,

530 
›t
,

531 *
¨g
 ));

533 
	$LBER_V
–
Sockbuf_IO
 ) 
bî_sockbuf_io_t˝
;

534 
	$LBER_V
–
Sockbuf_IO
 ) 
bî_sockbuf_io_ªadahód
;

535 
	$LBER_V
–
Sockbuf_IO
 ) 
bî_sockbuf_io_fd
;

536 
	$LBER_V
–
Sockbuf_IO
 ) 
bî_sockbuf_io_debug
;

537 
	$LBER_V
–
Sockbuf_IO
 ) 
bî_sockbuf_io_udp
;

542 
	$LBER_F
( * )

543 
bî_memÆloc
 
	`LDAP_P
((

544 
bî_Àn_t
 
s
 ));

546 
	$LBER_F
( * )

547 
bî_memªÆloc
 
	`LDAP_P
((

548 * 
p
,

549 
bî_Àn_t
 
s
 ));

551 
	$LBER_F
( * )

552 
bî_memˇŒoc
 
	`LDAP_P
((

553 
bî_Àn_t
 
n
,

554 
bî_Àn_t
 
s
 ));

556 
	$LBER_F
( )

557 
bî_mem‰ì
 
	`LDAP_P
((

558 * 
p
 ));

560 
	$LBER_F
( )

561 
bî_memv‰ì
 
	`LDAP_P
((

562 ** 
ve˘‹
 ));

564 
	$LBER_F
( )

565 
bî_bv‰ì
 
	`LDAP_P
((

566 
bîvÆ
 *
bv
 ));

568 
	$LBER_F
( )

569 
bî_bvec‰ì
 
	`LDAP_P
((

570 
bîvÆ
 **
bv
 ));

572 
	$LBER_F
( )

573 
bî_bveˇdd
 
	`LDAP_P
((

574 
bîvÆ
 ***
bvec
,

575 
bîvÆ
 *
bv
 ));

577 
	$LBER_F
–
bîvÆ
 * )

578 
bî_dupbv
 
	`LDAP_P
((

579 
bîvÆ
 *
d°
, bîvÆ *
§c
 ));

581 
	$LBER_F
–
bîvÆ
 * )

582 
bî_bvdup
 
	`LDAP_P
((

583 
bîvÆ
 *
§c
 ));

585 
	$LBER_F
–
bîvÆ
 * )

586 
bî_mem2bv
 
	`LDAP_P
((

587 
LDAP_CONST
 *, 
bî_Àn_t
 
Àn
, 
du∂iˇã
, 
bîvÆ
 *
bv
));

589 
	$LBER_F
–
bîvÆ
 * )

590 
bî_°r2bv
 
	`LDAP_P
((

591 
LDAP_CONST
 *, 
bî_Àn_t
 
Àn
, 
du∂iˇã
, 
bîvÆ
 *
bv
));

593 
	#bî_bv°r
(
a
Ë((
bî_°r2bv
)(◊), 0, 0, 
NULL
))

	)

594 
	#bî_bv°rdup
(
a
Ë((
bî_°r2bv
)(◊), 0, 1, 
NULL
))

	)

596 
	$LBER_F
( * )

597 
bî_°rdup
 
	`LDAP_P
((

598 
LDAP_CONST
 * ));

600 
	$LBER_F
–
bîvÆ
 * )

601 
bî_bvª∂a˚
 
	`LDAP_P
((

602 
bîvÆ
 *
d°
, 
LDAP_CONST
 bîvÆ *
§c
 ));

604 
	$LBER_F
( )

605 
bî_bv¨øy_‰ì
 
	`LDAP_P
(–
BîV¨øy
 
p
 ));

607 
	$LBER_F
( )

608 
bî_bv¨øy_add
 
	`LDAP_P
(–
BîV¨øy
 *
p
, 
BîVÆue
 *
bv
 ));

610 
	#bî_bvcmp
(
v1
,
v2
) \

611 ((
v1
)->
bv_Àn
 < (
v2
)->bv_len \

612 ? -1 : ((
v1
)->
bv_Àn
 > (
v2
)->bv_len \

613 ? 1 : 
	`memcmp
((
v1
)->
bv_vÆ
, (
v2
)->bv_vÆ, (v1)->
bv_Àn
Ë))

	)

618 
	$LBER_F
–* ) 
bî_î∫o_addr
 
	`LDAP_P
(());

619 
	#bî_î∫o
 (*(
bî_î∫o_addr
)())

	)

621 
	#LBER_ERROR_NONE
 0

	)

622 
	#LBER_ERROR_PARAM
 0x1

	)

623 
	#LBER_ERROR_MEMORY
 0x2

	)

625 #ifde‡
LDAP_DEVEL


626 
	#LDAP_NULL_IS_NULL


	)

629 
LDAP_END_DECL


	@/usr/include/ldap.h

26 #i‚de‡
_LDAP_H


27 
	#_LDAP_H


	)

30 
	~<lbî.h
>

33 
	~<ld≠_„©uªs.h
>

35 
	gLDAP_BEGIN_DECL


37 
	#LDAP_VERSION1
 1

	)

38 
	#LDAP_VERSION2
 2

	)

39 
	#LDAP_VERSION3
 3

	)

41 
	#LDAP_VERSION_MIN
 
LDAP_VERSION2


	)

42 
	#LDAP_VERSION
 
LDAP_VERSION2


	)

43 
	#LDAP_VERSION_MAX
 
LDAP_VERSION3


	)

51 
	#LDAP_API_VERSION
 3001

	)

52 
	#LDAP_VENDOR_NAME
 "O≥nLDAP"

	)

55 
	#LDAP_API_FEATURE_X_OPENLDAP
 
LDAP_VENDOR_VERSION


	)

57 #i‡
deföed
–
LDAP_API_FEATURE_X_OPENLDAP_REENTRANT
 ) || \

58 –
deföed
–
LDAP_THREAD_SAFE
 ) && \

59 
	$deföed
–
LDAP_API_FEATURE_X_OPENLDAP_THREAD_SAFE
 ) )

62 
	#LDAP_API_FEATURE_THREAD_SAFE
 1

	)

64 #i‡
	`deföed
–
LDAP_THREAD_SAFE
 ) && \

65 
	$deföed
–
LDAP_API_FEATURE_X_OPENLDAP_THREAD_SAFE
 )

71 
	#LDAP_PORT
 389

	)

72 
	#LDAPS_PORT
 636

	)

74 
	#LDAP_ROOT_DSE
 ""

	)

75 
	#LDAP_NO_ATTRS
 "1.1"

	)

76 
	#LDAP_ALL_USER_ATTRIBUTES
 "*"

	)

77 
	#LDAP_ALL_OPERATIONAL_ATTRIBUTES
 "+"

	)

80 
	#LDAP_MAXINT
 (2147483647)

	)

89 
	#LDAP_OPT_API_INFO
 0x0000

	)

90 
	#LDAP_OPT_DESC
 0x0001

	)

91 
	#LDAP_OPT_DEREF
 0x0002

	)

92 
	#LDAP_OPT_SIZELIMIT
 0x0003

	)

93 
	#LDAP_OPT_TIMELIMIT
 0x0004

	)

95 
	#LDAP_OPT_REFERRALS
 0x0008

	)

96 
	#LDAP_OPT_RESTART
 0x0009

	)

98 
	#LDAP_OPT_PROTOCOL_VERSION
 0x0011

	)

99 
	#LDAP_OPT_SERVER_CONTROLS
 0x0012

	)

100 
	#LDAP_OPT_CLIENT_CONTROLS
 0x0013

	)

102 
	#LDAP_OPT_API_FEATURE_INFO
 0x0015

	)

104 
	#LDAP_OPT_HOST_NAME
 0x0030

	)

105 
	#LDAP_OPT_RESULT_CODE
 0x0031

	)

106 
	#LDAP_OPT_ERROR_NUMBER
 
LDAP_OPT_RESULT_CODE


	)

107 
	#LDAP_OPT_ERROR_STRING
 0x0032

	)

108 
	#LDAP_OPT_MATCHED_DN
 0x0033

	)

112 
	#LDAP_OPT_API_EXTENSION_BASE
 0x4000

	)

116 
	#LDAP_OPT_DEBUG_LEVEL
 0x5001

	)

117 
	#LDAP_OPT_TIMEOUT
 0x5002

	)

118 
	#LDAP_OPT_REFHOPLIMIT
 0x5003

	)

119 
	#LDAP_OPT_NETWORK_TIMEOUT
 0x5005

	)

120 
	#LDAP_OPT_URI
 0x5006

	)

121 
	#LDAP_OPT_REFERRAL_URLS
 0x5007

	)

122 
	#LDAP_OPT_SOCKBUF
 0x5008

	)

125 
	#LDAP_OPT_X_TLS
 0x6000

	)

126 
	#LDAP_OPT_X_TLS_CTX
 0x6001

	)

127 
	#LDAP_OPT_X_TLS_CACERTFILE
 0x6002

	)

128 
	#LDAP_OPT_X_TLS_CACERTDIR
 0x6003

	)

129 
	#LDAP_OPT_X_TLS_CERTFILE
 0x6004

	)

130 
	#LDAP_OPT_X_TLS_KEYFILE
 0x6005

	)

131 
	#LDAP_OPT_X_TLS_REQUIRE_CERT
 0x6006

	)

133 
	#LDAP_OPT_X_TLS_CIPHER_SUITE
 0x6008

	)

134 
	#LDAP_OPT_X_TLS_RANDOM_FILE
 0x6009

	)

135 
	#LDAP_OPT_X_TLS_SSL_CTX
 0x600a

	)

136 
	#LDAP_OPT_X_TLS_CRLCHECK
 0x600b

	)

137 
	#LDAP_OPT_X_TLS_CONNECT_CB
 0x600c

	)

138 
	#LDAP_OPT_X_TLS_CONNECT_ARG
 0x600d

	)

139 
	#LDAP_OPT_X_TLS_DHFILE
 0x600e

	)

141 
	#LDAP_OPT_X_TLS_NEVER
 0

	)

142 
	#LDAP_OPT_X_TLS_HARD
 1

	)

143 
	#LDAP_OPT_X_TLS_DEMAND
 2

	)

144 
	#LDAP_OPT_X_TLS_ALLOW
 3

	)

145 
	#LDAP_OPT_X_TLS_TRY
 4

	)

147 
	#LDAP_OPT_X_TLS_CRL_NONE
 0

	)

148 
	#LDAP_OPT_X_TLS_CRL_PEER
 1

	)

149 
	#LDAP_OPT_X_TLS_CRL_ALL
 2

	)

152 
	#LDAP_OPT_X_SASL_MECH
 0x6100

	)

153 
	#LDAP_OPT_X_SASL_REALM
 0x6101

	)

154 
	#LDAP_OPT_X_SASL_AUTHCID
 0x6102

	)

155 
	#LDAP_OPT_X_SASL_AUTHZID
 0x6103

	)

156 
	#LDAP_OPT_X_SASL_SSF
 0x6104

	)

157 
	#LDAP_OPT_X_SASL_SSF_EXTERNAL
 0x6105

	)

158 
	#LDAP_OPT_X_SASL_SECPROPS
 0x6106

	)

159 
	#LDAP_OPT_X_SASL_SSF_MIN
 0x6107

	)

160 
	#LDAP_OPT_X_SASL_SSF_MAX
 0x6108

	)

161 
	#LDAP_OPT_X_SASL_MAXBUFSIZE
 0x6109

	)

164 
	#LDAP_OPT_PRIVATE_EXTENSION_BASE
 0x7000

	)

172 
	#LDAP_OPT_SUCCESS
 0

	)

173 
	#LDAP_OPT_ERROR
 (-1)

	)

176 
	#LDAP_OPT_ON
 ((*Ë&
bî_pvt_›t_⁄
)

	)

177 
	#LDAP_OPT_OFF
 ((*Ë0)

	)

179 
	sld≠≠iöfo
 {

180 
ld≠ai_öfo_vîsi⁄
;

181 
	#LDAP_API_INFO_VERSION
 (1)

	)

182 
ld≠ai_≠i_vîsi⁄
;

183 
ld≠ai_¥Ÿocﬁ_vîsi⁄
;

184 **
ld≠ai_exãnsi⁄s
;

185 *
ld≠ai_víd‹_«me
;

186 
ld≠ai_víd‹_vîsi⁄
;

187 } 
	tLDAPAPIInfo
;

189 
	sld≠_≠i„©uª_öfo
 {

190 
ld≠aif_öfo_vîsi⁄
;

191 
	#LDAP_FEATURE_INFO_VERSION
 (1Ë

	)

192 * 
ld≠aif_«me
;

193 
ld≠aif_vîsi⁄
;

194 } 
	tLDAPAPIFótuªInfo
;

199 
	sld≠c⁄åﬁ
 {

200 * 
ld˘l_oid
;

201 
bîvÆ
 
ld˘l_vÆue
;

202 
ld˘l_is¸ôiˇl
;

203 } 
	tLDAPC⁄åﬁ
;

207 
	#LDAP_CONTROL_MANAGEDSAIT
 "2.16.840.1.113730.3.4.2"

	)

208 
	#LDAP_CONTROL_PROXY_AUTHZ
 "2.16.840.1.113730.3.4.18"

	)

209 
	#LDAP_CONTROL_SUBENTRIES
 "1.3.6.1.4.1.4203.1.10.1"

	)

211 
	#LDAP_CONTROL_VALUESRETURNFILTER
 "1.2.826.0.1.3344810.2.3"

	)

212 
	#LDAP_CONTROL_X_VALUESRETURNFILTER
 "1.2.826.0.1.334810.2.3"

	)

214 
	#LDAP_CONTROL_ASSERT
 "1.3.6.1.1.12"

	)

215 
	#LDAP_CONTROL_PRE_READ
 "1.3.6.1.1.13.1"

	)

216 
	#LDAP_CONTROL_POST_READ
 "1.3.6.1.1.13.2"

	)

219 
	#LDAP_CONTROL_SORTREQUEST
 "1.2.840.113556.1.4.473"

	)

220 
	#LDAP_CONTROL_SORTRESPONSE
 "1.2.840.113556.1.4.474"

	)

223 
	#LDAP_CONTROL_PAGEDRESULTS
 "1.2.840.113556.1.4.319"

	)

227 
	#LDAP_CONTROL_PASSWORDPOLICYREQUEST
 "1.3.6.1.4.1.42.2.27.8.5.1"

	)

228 
	#LDAP_CONTROL_PASSWORDPOLICYRESPONSE
 "1.3.6.1.4.1.42.2.27.8.5.1"

	)

231 
	#LDAP_CONTROL_NOOP
 "1.3.6.1.4.1.4203.666.5.2"

	)

232 
	#LDAP_CONTROL_NO_SUBORDINATES
 "1.3.6.1.4.1.4203.666.5.11"

	)

233 
	#LDAP_CONTROL_MANAGEDIT
 "1.3.6.1.4.1.4203.666.5.12"

	)

234 
	#LDAP_CONTROL_SLURP
 "1.3.6.1.4.1.4203.666.5.13"

	)

235 
	#LDAP_CONTROL_VALSORT
 "1.3.6.1.4.1.4203.666.5.14"

	)

238 
	#LDAP_SYNC_OID
 "1.3.6.1.4.1.4203.1.9.1"

	)

239 
	#LDAP_CONTROL_SYNC
 
LDAP_SYNC_OID
 ".1"

	)

240 
	#LDAP_CONTROL_SYNC_STATE
 
LDAP_SYNC_OID
 ".2"

	)

241 
	#LDAP_CONTROL_SYNC_DONE
 
LDAP_SYNC_OID
 ".3"

	)

242 
	#LDAP_SYNC_INFO
 
LDAP_SYNC_OID
 ".4"

	)

244 
	#LDAP_SYNC_NONE
 0x00

	)

245 
	#LDAP_SYNC_REFRESH_ONLY
 0x01

	)

246 
	#LDAP_SYNC_RESERVED
 0x02

	)

247 
	#LDAP_SYNC_REFRESH_AND_PERSIST
 0x03

	)

249 
	#LDAP_SYNC_REFRESH_PRESENTS
 0

	)

250 
	#LDAP_SYNC_REFRESH_DELETES
 1

	)

252 
	#LDAP_TAG_SYNC_NEW_COOKIE
 ((
bî_èg_t
Ë0x80U)

	)

253 
	#LDAP_TAG_SYNC_REFRESH_DELETE
 ((
bî_èg_t
Ë0xa1U)

	)

254 
	#LDAP_TAG_SYNC_REFRESH_PRESENT
 ((
bî_èg_t
Ë0xa2U)

	)

255 
	#LDAP_TAG_SYNC_ID_SET
 ((
bî_èg_t
Ë0xa3U)

	)

257 
	#LDAP_TAG_SYNC_COOKIE
 ((
bî_èg_t
Ë0x04U)

	)

258 
	#LDAP_TAG_REFRESHDELETES
 ((
bî_èg_t
Ë0x01U)

	)

259 
	#LDAP_TAG_REFRESHDONE
 ((
bî_èg_t
Ë0x01U)

	)

260 
	#LDAP_TAG_RELOAD_HINT
 ((
bî_èg_t
Ë0x01U)

	)

262 
	#LDAP_SYNC_PRESENT
 0

	)

263 
	#LDAP_SYNC_ADD
 1

	)

264 
	#LDAP_SYNC_MODIFY
 2

	)

265 
	#LDAP_SYNC_DELETE
 3

	)

270 #ifde‡
LDAP_DEVEL


271 
	#LDAP_CONTROL_X_CHAINING_BEHAVIOR
 "1.3.6.1.4.1.4203.666.11.3"

	)

273 
	#LDAP_CHAINING_PREFERRED
 0

	)

274 
	#LDAP_CHAINING_REQUIRED
 1

	)

275 
	#LDAP_REFERRALS_PREFERRED
 2

	)

276 
	#LDAP_REFERRALS_REQUIRED
 3

	)

280 
	#LDAP_CONTROL_X_INCREMENTAL_VALUES
 "1.2.840.113556.1.4.802"

	)

281 
	#LDAP_CONTROL_X_DOMAIN_SCOPE
 "1.2.840.113556.1.4.1339"

	)

282 
	#LDAP_CONTROL_X_PERMISSIVE_MODIFY
 "1.2.840.113556.1.4.1413"

	)

283 
	#LDAP_CONTROL_X_SEARCH_OPTIONS
 "1.2.840.113556.1.4.1340"

	)

284 
	#LDAP_SEARCH_FLAG_DOMAIN_SCOPE
 1

	)

285 
	#LDAP_SEARCH_FLAG_PHANTOM_ROOT
 2

	)

288 
	#LDAP_CONTROL_X_TREE_DELETE
 "1.2.840.113556.1.4.805"

	)

289 
	#LDAP_CONTROL_X_EXTENDED_DN
 "1.2.840.113556.1.4.529"

	)

293 
	#LDAP_CONTROL_DUPENT_REQUEST
 "2.16.840.1.113719.1.27.101.1"

	)

294 
	#LDAP_CONTROL_DUPENT_RESPONSE
 "2.16.840.1.113719.1.27.101.2"

	)

295 
	#LDAP_CONTROL_DUPENT_ENTRY
 "2.16.840.1.113719.1.27.101.3"

	)

296 
	#LDAP_CONTROL_DUPENT
 
LDAP_CONTROL_DUPENT_REQUEST


	)

299 
	#LDAP_CONTROL_PERSIST_REQUEST
 "2.16.840.1.113730.3.4.3"

	)

300 
	#LDAP_CONTROL_PERSIST_ENTRY_CHANGE_NOTICE
 "2.16.840.1.113730.3.4.7"

	)

301 
	#LDAP_CONTROL_PERSSIT_ENTRY_CHANGE_ADD
 0x1

	)

302 
	#LDAP_CONTROL_PERSSIT_ENTRY_CHANGE_DELETE
 0x2

	)

303 
	#LDAP_CONTROL_PERSSIT_ENTRY_CHANGE_MODIFY
 0x4

	)

304 
	#LDAP_CONTROL_PERSSIT_ENTRY_CHANGE_RENAME
 0x8

	)

307 
	#LDAP_CONTROL_VLVREQUEST
 "2.16.840.1.113730.3.4.9"

	)

308 
	#LDAP_CONTROL_VLVRESPONSE
 "2.16.840.1.113730.3.4.10"

	)

312 
	#LDAP_NOTICE_OF_DISCONNECTION
 "1.3.6.1.4.1.1466.20036"

	)

313 
	#LDAP_NOTICE_DISCONNECT
 
LDAP_NOTICE_OF_DISCONNECTION


	)

316 
	#LDAP_EXOP_START_TLS
 "1.3.6.1.4.1.1466.20037"

	)

318 
	#LDAP_EXOP_MODIFY_PASSWD
 "1.3.6.1.4.1.4203.1.11.1"

	)

319 
	#LDAP_TAG_EXOP_MODIFY_PASSWD_ID
 ((
bî_èg_t
Ë0x80U)

	)

320 
	#LDAP_TAG_EXOP_MODIFY_PASSWD_OLD
 ((
bî_èg_t
Ë0x81U)

	)

321 
	#LDAP_TAG_EXOP_MODIFY_PASSWD_NEW
 ((
bî_èg_t
Ë0x82U)

	)

322 
	#LDAP_TAG_EXOP_MODIFY_PASSWD_GEN
 ((
bî_èg_t
Ë0x80U)

	)

324 
	#LDAP_EXOP_CANCEL
 "1.3.6.1.1.8"

	)

325 
	#LDAP_EXOP_X_CANCEL
 
LDAP_EXOP_CANCEL


	)

328 
	#LDAP_EXOP_WHO_AM_I
 "1.3.6.1.4.1.4203.1.11.3"

	)

329 
	#LDAP_EXOP_X_WHO_AM_I
 
LDAP_EXOP_WHO_AM_I


	)

331 
	#LDAP_EXOP_X_TURN
 "1.3.6.1.4.1.4203.666.6.4"

	)

334 #ifde‡
LDAP_DEVEL


335 
	#LDAP_X_GROUPING_BASE
 "1.3.6.1.4.1.4203.666.10.3"

	)

336 
	#LDAP_EXOP_GROUPING_CREATE
 
LDAP_X_GROUPING_BASE
 ".1"

	)

337 
	#LDAP_EXOP_GROUPING_END
 
LDAP_X_GROUPING_BASE
 ".2"

	)

338 
	#LDAP_NOTICE_GROUPING_END
 
LDAP_X_GROUPING_BASE
 ".3"

	)

339 
	#LDAP_EXOP_GROUPING_ACTION
 
LDAP_X_GROUPING_BASE
 ".4"

	)

340 
	#LDAP_NOTICE_GROUPING_INFO
 
LDAP_X_GROUPING_BASE
 ".5"

	)

341 
	#LDAP_CONTROL_GROUPING
 
LDAP_X_GROUPING_BASE
 ".6"

	)

345 #ifde‡
LDAP_DEVEL


346 
	#LDAP_GROUP_TRANSACTION
 "1.3.6.1.4.1.4203.666.10.4"

	)

350 
	#LDAP_FEATURE_ALL_OP_ATTRS
 "1.3.6.1.4.1.4203.1.5.1"

	)

351 
	#LDAP_FEATURE_OBJECTCLASS_ATTRS
 \

352 "1.3.6.1.4.1.4203.1.5.2"

	)

353 
	#LDAP_FEATURE_ABSOLUTE_FILTERS
 "1.3.6.1.4.1.4203.1.5.3"

	)

354 
	#LDAP_FEATURE_LANGUAGE_TAG_OPTIONS
 "1.3.6.1.4.1.4203.1.5.4"

	)

355 
	#LDAP_FEATURE_LANGUAGE_RANGE_OPTIONS
 "1.3.6.1.4.1.4203.1.5.5"

	)

356 
	#LDAP_FEATURE_MODIFY_INCREMENT
 "1.3.6.1.1.14"

	)

358 #ifde‡
LDAP_DEVEL


360 
	#LDAP_FEATURE_SUBORDINATE_SCOPE
 \

361 "1.3.6.1.4.1.4203.666.8.1"

	)

362 
	#LDAP_FEATURE_CHILDREN_SCOPE
 
LDAP_FEATURE_SUBORDINATE_SCOPE


	)

387 
	#LDAP_TAG_MESSAGE
 ((
bî_èg_t
Ë0x30UË

	)

388 
	#LDAP_TAG_MSGID
 ((
bî_èg_t
Ë0x02UË

	)

390 
	#LDAP_TAG_LDAPDN
 ((
bî_èg_t
Ë0x04UË

	)

391 
	#LDAP_TAG_LDAPCRED
 ((
bî_èg_t
Ë0x04UË

	)

393 
	#LDAP_TAG_CONTROLS
 ((
bî_èg_t
Ë0xa0UË

	)

394 
	#LDAP_TAG_REFERRAL
 ((
bî_èg_t
Ë0xa3UË

	)

396 
	#LDAP_TAG_NEWSUPERIOR
 ((
bî_èg_t
Ë0x80UË

	)

398 
	#LDAP_TAG_EXOP_REQ_OID
 ((
bî_èg_t
Ë0x80UË

	)

399 
	#LDAP_TAG_EXOP_REQ_VALUE
 ((
bî_èg_t
Ë0x81UË

	)

400 
	#LDAP_TAG_EXOP_RES_OID
 ((
bî_èg_t
Ë0x8aUË

	)

401 
	#LDAP_TAG_EXOP_RES_VALUE
 ((
bî_èg_t
Ë0x8bUË

	)

403 
	#LDAP_TAG_IM_RES_OID
 ((
bî_èg_t
Ë0x80UË

	)

404 
	#LDAP_TAG_IM_RES_VALUE
 ((
bî_èg_t
Ë0x81UË

	)

406 
	#LDAP_TAG_SASL_RES_CREDS
 ((
bî_èg_t
Ë0x87UË

	)

409 
	#LDAP_REQ_BIND
 ((
bî_èg_t
Ë0x60UË

	)

410 
	#LDAP_REQ_UNBIND
 ((
bî_èg_t
Ë0x42UË

	)

411 
	#LDAP_REQ_SEARCH
 ((
bî_èg_t
Ë0x63UË

	)

412 
	#LDAP_REQ_MODIFY
 ((
bî_èg_t
Ë0x66UË

	)

413 
	#LDAP_REQ_ADD
 ((
bî_èg_t
Ë0x68UË

	)

414 
	#LDAP_REQ_DELETE
 ((
bî_èg_t
Ë0x4aUË

	)

415 
	#LDAP_REQ_MODDN
 ((
bî_èg_t
Ë0x6cUË

	)

416 
	#LDAP_REQ_MODRDN
 
LDAP_REQ_MODDN


	)

417 
	#LDAP_REQ_RENAME
 
LDAP_REQ_MODDN


	)

418 
	#LDAP_REQ_COMPARE
 ((
bî_èg_t
Ë0x6eUË

	)

419 
	#LDAP_REQ_ABANDON
 ((
bî_èg_t
Ë0x50UË

	)

420 
	#LDAP_REQ_EXTENDED
 ((
bî_èg_t
Ë0x77UË

	)

423 
	#LDAP_RES_BIND
 ((
bî_èg_t
Ë0x61UË

	)

424 
	#LDAP_RES_SEARCH_ENTRY
 ((
bî_èg_t
Ë0x64UË

	)

425 
	#LDAP_RES_SEARCH_REFERENCE
 ((
bî_èg_t
Ë0x73UË

	)

426 
	#LDAP_RES_SEARCH_RESULT
 ((
bî_èg_t
Ë0x65UË

	)

427 
	#LDAP_RES_MODIFY
 ((
bî_èg_t
Ë0x67UË

	)

428 
	#LDAP_RES_ADD
 ((
bî_èg_t
Ë0x69UË

	)

429 
	#LDAP_RES_DELETE
 ((
bî_èg_t
Ë0x6bUË

	)

430 
	#LDAP_RES_MODDN
 ((
bî_èg_t
Ë0x6dUË

	)

431 
	#LDAP_RES_MODRDN
 
LDAP_RES_MODDN


	)

432 
	#LDAP_RES_RENAME
 
LDAP_RES_MODDN


	)

433 
	#LDAP_RES_COMPARE
 ((
bî_èg_t
Ë0x6fUË

	)

434 
	#LDAP_RES_EXTENDED
 ((
bî_èg_t
Ë0x78UË

	)

435 
	#LDAP_RES_INTERMEDIATE
 ((
bî_èg_t
Ë0x79UË

	)

437 
	#LDAP_RES_ANY
 (-1)

	)

438 
	#LDAP_RES_UNSOLICITED
 (0)

	)

442 
	#LDAP_SASL_SIMPLE
 ((*)0)

	)

443 
	#LDAP_SASL_NULL
 ("")

	)

447 
	#LDAP_AUTH_NONE
 ((
bî_èg_t
Ë0x00UË

	)

448 
	#LDAP_AUTH_SIMPLE
 ((
bî_èg_t
Ë0x80UË

	)

449 
	#LDAP_AUTH_SASL
 ((
bî_èg_t
Ë0xa3UË

	)

450 
	#LDAP_AUTH_KRBV4
 ((
bî_èg_t
Ë0xffUË

	)

451 
	#LDAP_AUTH_KRBV41
 ((
bî_èg_t
Ë0x81UË

	)

452 
	#LDAP_AUTH_KRBV42
 ((
bî_èg_t
Ë0x82UË

	)

456 
	#LDAP_FILTER_AND
 ((
bî_èg_t
Ë0xa0UË

	)

457 
	#LDAP_FILTER_OR
 ((
bî_èg_t
Ë0xa1UË

	)

458 
	#LDAP_FILTER_NOT
 ((
bî_èg_t
Ë0xa2UË

	)

459 
	#LDAP_FILTER_EQUALITY
 ((
bî_èg_t
Ë0xa3UË

	)

460 
	#LDAP_FILTER_SUBSTRINGS
 ((
bî_èg_t
Ë0xa4UË

	)

461 
	#LDAP_FILTER_GE
 ((
bî_èg_t
Ë0xa5UË

	)

462 
	#LDAP_FILTER_LE
 ((
bî_èg_t
Ë0xa6UË

	)

463 
	#LDAP_FILTER_PRESENT
 ((
bî_èg_t
Ë0x87UË

	)

464 
	#LDAP_FILTER_APPROX
 ((
bî_èg_t
Ë0xa8UË

	)

465 
	#LDAP_FILTER_EXT
 ((
bî_èg_t
Ë0xa9UË

	)

468 
	#LDAP_FILTER_EXT_OID
 ((
bî_èg_t
Ë0x81UË

	)

469 
	#LDAP_FILTER_EXT_TYPE
 ((
bî_èg_t
Ë0x82UË

	)

470 
	#LDAP_FILTER_EXT_VALUE
 ((
bî_èg_t
Ë0x83UË

	)

471 
	#LDAP_FILTER_EXT_DNATTRS
 ((
bî_èg_t
Ë0x84UË

	)

474 
	#LDAP_SUBSTRING_INITIAL
 ((
bî_èg_t
Ë0x80UË

	)

475 
	#LDAP_SUBSTRING_ANY
 ((
bî_èg_t
Ë0x81UË

	)

476 
	#LDAP_SUBSTRING_FINAL
 ((
bî_èg_t
Ë0x82UË

	)

479 
	#LDAP_SCOPE_BASE
 ((
bî_öt_t
Ë0x0000)

	)

480 
	#LDAP_SCOPE_BASEOBJECT
 
LDAP_SCOPE_BASE


	)

481 
	#LDAP_SCOPE_ONELEVEL
 ((
bî_öt_t
Ë0x0001)

	)

482 
	#LDAP_SCOPE_ONE
 
LDAP_SCOPE_ONELEVEL


	)

483 
	#LDAP_SCOPE_SUBTREE
 ((
bî_öt_t
Ë0x0002)

	)

484 
	#LDAP_SCOPE_SUB
 
LDAP_SCOPE_SUBTREE


	)

485 
	#LDAP_SCOPE_SUBORDINATE
 ((
bî_öt_t
Ë0x0003Ë

	)

486 
	#LDAP_SCOPE_CHILDREN
 
LDAP_SCOPE_SUBORDINATE


	)

487 
	#LDAP_SCOPE_DEFAULT
 ((
bî_öt_t
Ë-1Ë

	)

490 
	#LDAP_SUBSTRING_INITIAL
 ((
bî_èg_t
Ë0x80UË

	)

491 
	#LDAP_SUBSTRING_ANY
 ((
bî_èg_t
Ë0x81UË

	)

492 
	#LDAP_SUBSTRING_FINAL
 ((
bî_èg_t
Ë0x82UË

	)

497 
	#LDAP_SUCCESS
 0x00

	)

499 
	#LDAP_RANGE
(
n
,
x
,
y
Ë(((xË<“)Ë&& (“Ë<(y)))

	)

501 
	#LDAP_OPERATIONS_ERROR
 0x01

	)

502 
	#LDAP_PROTOCOL_ERROR
 0x02

	)

503 
	#LDAP_TIMELIMIT_EXCEEDED
 0x03

	)

504 
	#LDAP_SIZELIMIT_EXCEEDED
 0x04

	)

505 
	#LDAP_COMPARE_FALSE
 0x05

	)

506 
	#LDAP_COMPARE_TRUE
 0x06

	)

507 
	#LDAP_AUTH_METHOD_NOT_SUPPORTED
 0x07

	)

508 
	#LDAP_STRONG_AUTH_NOT_SUPPORTED
 
LDAP_AUTH_METHOD_NOT_SUPPORTED


	)

509 
	#LDAP_STRONG_AUTH_REQUIRED
 0x08

	)

510 
	#LDAP_STRONGER_AUTH_REQUIRED
 
LDAP_STRONG_AUTH_REQUIRED


	)

511 
	#LDAP_PARTIAL_RESULTS
 0x09

	)

513 
	#LDAP_REFERRAL
 0x0®

	)

514 
	#LDAP_ADMINLIMIT_EXCEEDED
 0x0b

	)

515 
	#LDAP_UNAVAILABLE_CRITICAL_EXTENSION
 0x0¯

	)

516 
	#LDAP_CONFIDENTIALITY_REQUIRED
 0x0d

	)

517 
	#LDAP_SASL_BIND_IN_PROGRESS
 0x0ê

	)

519 
	#LDAP_ATTR_ERROR
(
n
Ë
	`LDAP_RANGE
(“),0x10,0x15Ë

	)

521 
	#LDAP_NO_SUCH_ATTRIBUTE
 0x10

	)

522 
	#LDAP_UNDEFINED_TYPE
 0x11

	)

523 
	#LDAP_INAPPROPRIATE_MATCHING
 0x12

	)

524 
	#LDAP_CONSTRAINT_VIOLATION
 0x13

	)

525 
	#LDAP_TYPE_OR_VALUE_EXISTS
 0x14

	)

526 
	#LDAP_INVALID_SYNTAX
 0x15

	)

528 
	#LDAP_NAME_ERROR
(
n
Ë
	`LDAP_RANGE
(“),0x20,0x24Ë

	)

530 
	#LDAP_NO_SUCH_OBJECT
 0x20

	)

531 
	#LDAP_ALIAS_PROBLEM
 0x21

	)

532 
	#LDAP_INVALID_DN_SYNTAX
 0x22

	)

533 
	#LDAP_IS_LEAF
 0x23

	)

534 
	#LDAP_ALIAS_DEREF_PROBLEM
 0x24

	)

536 
	#LDAP_SECURITY_ERROR
(
n
Ë
	`LDAP_RANGE
(“),0x2F,0x32Ë

	)

538 
	#LDAP_PROXY_AUTHZ_FAILURE
 0x2F

	)

539 
	#LDAP_INAPPROPRIATE_AUTH
 0x30

	)

540 
	#LDAP_INVALID_CREDENTIALS
 0x31

	)

541 
	#LDAP_INSUFFICIENT_ACCESS
 0x32

	)

543 
	#LDAP_SERVICE_ERROR
(
n
Ë
	`LDAP_RANGE
(“),0x33,0x36Ë

	)

545 
	#LDAP_BUSY
 0x33

	)

546 
	#LDAP_UNAVAILABLE
 0x34

	)

547 
	#LDAP_UNWILLING_TO_PERFORM
 0x35

	)

548 
	#LDAP_LOOP_DETECT
 0x36

	)

550 
	#LDAP_UPDATE_ERROR
(
n
Ë
	`LDAP_RANGE
(“),0x40,0x47Ë

	)

552 
	#LDAP_NAMING_VIOLATION
 0x40

	)

553 
	#LDAP_OBJECT_CLASS_VIOLATION
 0x41

	)

554 
	#LDAP_NOT_ALLOWED_ON_NONLEAF
 0x42

	)

555 
	#LDAP_NOT_ALLOWED_ON_RDN
 0x43

	)

556 
	#LDAP_ALREADY_EXISTS
 0x44

	)

557 
	#LDAP_NO_OBJECT_CLASS_MODS
 0x45

	)

558 
	#LDAP_RESULTS_TOO_LARGE
 0x46

	)

559 
	#LDAP_AFFECTS_MULTIPLE_DSAS
 0x47

	)

561 
	#LDAP_OTHER
 0x50

	)

564 
	#LDAP_CUP_RESOURCES_EXHAUSTED
 0x71

	)

565 
	#LDAP_CUP_SECURITY_VIOLATION
 0x72

	)

566 
	#LDAP_CUP_INVALID_DATA
 0x73

	)

567 
	#LDAP_CUP_UNSUPPORTED_SCHEME
 0x74

	)

568 
	#LDAP_CUP_RELOAD_REQUIRED
 0x75

	)

571 
	#LDAP_CANCELLED
 0x76

	)

572 
	#LDAP_NO_SUCH_OPERATION
 0x77

	)

573 
	#LDAP_TOO_LATE
 0x78

	)

574 
	#LDAP_CANNOT_CANCEL
 0x79

	)

577 
	#LDAP_ASSERTION_FAILED
 0x7A

	)

581 
	#LDAP_E_ERROR
(
n
Ë
	`LDAP_RANGE
(“),0x1000,0x3FFF)

	)

584 
	#LDAP_SYNC_REFRESH_REQUIRED
 0x1000

	)

588 
	#LDAP_X_ERROR
(
n
Ë
	`LDAP_RANGE
(“),0x4000,0xFFFF)

	)

590 
	#LDAP_X_SYNC_REFRESH_REQUIRED
 0x4100

	)

591 
	#LDAP_X_ASSERTION_FAILED
 0x410‡

	)

594 
	#LDAP_X_NO_OPERATION
 0x410e

	)

598 #ifde‡
LDAP_CONTROL_X_CHAINING_BEHAVIOR


599 
	#LDAP_X_NO_REFERRALS_FOUND
 0x4110

	)

600 
	#LDAP_X_CANNOT_CHAIN
 0x4111

	)

609 
	#LDAP_API_ERROR
(
n
Ë(“)<0)

	)

610 
	#LDAP_API_RESULT
(
n
Ë(“)<=0)

	)

612 
	#LDAP_SERVER_DOWN
 (-1)

	)

613 
	#LDAP_LOCAL_ERROR
 (-2)

	)

614 
	#LDAP_ENCODING_ERROR
 (-3)

	)

615 
	#LDAP_DECODING_ERROR
 (-4)

	)

616 
	#LDAP_TIMEOUT
 (-5)

	)

617 
	#LDAP_AUTH_UNKNOWN
 (-6)

	)

618 
	#LDAP_FILTER_ERROR
 (-7)

	)

619 
	#LDAP_USER_CANCELLED
 (-8)

	)

620 
	#LDAP_PARAM_ERROR
 (-9)

	)

621 
	#LDAP_NO_MEMORY
 (-10)

	)

622 
	#LDAP_CONNECT_ERROR
 (-11)

	)

623 
	#LDAP_NOT_SUPPORTED
 (-12)

	)

624 
	#LDAP_CONTROL_NOT_FOUND
 (-13)

	)

625 
	#LDAP_NO_RESULTS_RETURNED
 (-14)

	)

626 
	#LDAP_MORE_RESULTS_TO_RETURN
 (-15Ë

	)

627 
	#LDAP_CLIENT_LOOP
 (-16)

	)

628 
	#LDAP_REFERRAL_LIMIT_EXCEEDED
 (-17)

	)

637 
ld≠msg
 
	tLDAPMesßge
;

640 
	sld≠mod
 {

641 
mod_›
;

643 
	#LDAP_MOD_OP
 (0x0007)

	)

644 
	#LDAP_MOD_ADD
 (0x0000)

	)

645 
	#LDAP_MOD_DELETE
 (0x0001)

	)

646 
	#LDAP_MOD_REPLACE
 (0x0002)

	)

647 
	#LDAP_MOD_INCREMENT
 (0x0003Ë

	)

648 
	#LDAP_MOD_BVALUES
 (0x0080)

	)

654 *
mod_ty≥
;

655 
	umod_vÆs_u
 {

656 **
modv_°rvÆs
;

657 
bîvÆ
 **
modv_bvÆs
;

658 } 
mod_vÆs
;

659 
	#mod_vÆues
 
mod_vÆs
.
modv_°rvÆs


	)

660 
	#mod_bvÆues
 
mod_vÆs
.
modv_bvÆs


	)

661 } 
	tLDAPMod
;

668 
ld≠
 
	tLDAP
;

670 
	#LDAP_DEREF_NEVER
 0x00

	)

671 
	#LDAP_DEREF_SEARCHING
 0x01

	)

672 
	#LDAP_DEREF_FINDING
 0x02

	)

673 
	#LDAP_DEREF_ALWAYS
 0x03

	)

675 
	#LDAP_NO_LIMIT
 0

	)

678 
	#LDAP_MSG_ONE
 0x00

	)

679 
	#LDAP_MSG_ALL
 0x01

	)

680 
	#LDAP_MSG_RECEIVED
 0x02

	)

685 
	sld≠_uæ_desc
 {

686 
ld≠_uæ_desc
 *
lud_√xt
;

687 *
lud_scheme
;

688 *
lud_ho°
;

689 
lud_p‹t
;

690 *
lud_dn
;

691 **
lud_©ås
;

692 
lud_sc›e
;

693 *
lud_fûãr
;

694 **
lud_exts
;

695 
lud_¸ô_exts
;

696 } 
	tLDAPURLDesc
;

698 
	#LDAP_URL_SUCCESS
 0x00

	)

699 
	#LDAP_URL_ERR_MEM
 0x01

	)

700 
	#LDAP_URL_ERR_PARAM
 0x02

	)

702 
	#LDAP_URL_ERR_BADSCHEME
 0x03

	)

703 
	#LDAP_URL_ERR_BADENCLOSURE
 0x04

	)

704 
	#LDAP_URL_ERR_BADURL
 0x05

	)

705 
	#LDAP_URL_ERR_BADHOST
 0x06

	)

706 
	#LDAP_URL_ERR_BADATTRS
 0x07

	)

707 
	#LDAP_URL_ERR_BADSCOPE
 0x08

	)

708 
	#LDAP_URL_ERR_BADFILTER
 0x09

	)

709 
	#LDAP_URL_ERR_BADEXTS
 0x0®

	)

715 
timevÆ
;

720 
	$LDAP_F
( )

721 
ld≠_gë_›ti⁄
 
	`LDAP_P
((

722 
LDAP
 *
ld
,

723 
›ti⁄
,

724 *
outvÆue
));

726 
	$LDAP_F
( )

727 
ld≠_£t_›ti⁄
 
	`LDAP_P
((

728 
LDAP
 *
ld
,

729 
›ti⁄
,

730 
LDAP_CONST
 *
övÆue
));

733 (
	tLDAP_REBIND_PROC
Ë
	tLDAP_P
((

734 
	tLDAP
 *
	tld
, 
	tLDAP_CONST
 *
	tuæ
,

735 
	tbî_èg_t
 
	tªque°
, 
	tbî_öt_t
 
	tmsgid
,

736 *
	t∑øms
 ));

738 
	$LDAP_F
( )

739 
ld≠_£t_ªböd_¥oc
 
	`LDAP_P
((

740 
LDAP
 *
ld
,

741 
LDAP_REBIND_PROC
 *
ªböd_¥oc
,

742 *
∑øms
 ));

745 (
	tLDAP_NEXTREF_PROC
Ë
	tLDAP_P
((

746 
	tLDAP
 *
	tld
, ***
	tªf•
, *
	t˙ç
,

747 *
	t∑øms
 ));

749 
	$LDAP_F
( )

750 
ld≠_£t_√xåef_¥oc
 
	`LDAP_P
((

751 
LDAP
 *
ld
,

752 
LDAP_NEXTREF_PROC
 *
√xåef_¥oc
,

753 *
∑øms
 ));

758 
	$LDAP_F
( )

759 
ld≠_¸óã_c⁄åﬁ
 
	`LDAP_P
((

760 
LDAP_CONST
 *
ªque°OID
,

761 
BîEÀmít
 *
bî
,

762 
is¸ôiˇl
,

763 
LDAPC⁄åﬁ
 **
˘æp
 ));

765 
	$LDAP_F
–
LDAPC⁄åﬁ
 * )

766 
ld≠_föd_c⁄åﬁ
 
	`LDAP_P
((

767 
LDAP_CONST
 *
oid
,

768 
LDAPC⁄åﬁ
 **
˘æs
 ));

770 
	$LDAP_F
( )

771 
ld≠_c⁄åﬁ_‰ì
 
	`LDAP_P
((

772 
LDAPC⁄åﬁ
 *
˘æ
 ));

774 
	$LDAP_F
( )

775 
ld≠_c⁄åﬁs_‰ì
 
	`LDAP_P
((

776 
LDAPC⁄åﬁ
 **
˘æs
 ));

781 
	$LDAP_F
( )

782 
ld≠_domaö2dn
 
	`LDAP_P
((

783 
LDAP_CONST
 * 
domaö
,

784 ** 
dn
 ));

786 
	$LDAP_F
( )

787 
ld≠_dn2domaö
 
	`LDAP_P
((

788 
LDAP_CONST
 * 
dn
,

789 ** 
domaö
 ));

791 
	$LDAP_F
( )

792 
ld≠_domaö2ho°li°
 
	`LDAP_P
((

793 
LDAP_CONST
 *
domaö
,

794 ** 
ho°li°
 ));

799 
	$LDAP_F
( )

800 
ld≠_exãnded_›î©i⁄
 
	`LDAP_P
((

801 
LDAP
 *
ld
,

802 
LDAP_CONST
 *
ªqoid
,

803 
bîvÆ
 *
ªqd©a
,

804 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

805 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

806 *
msgidp
 ));

808 
	$LDAP_F
( )

809 
ld≠_exãnded_›î©i⁄_s
 
	`LDAP_P
((

810 
LDAP
 *
ld
,

811 
LDAP_CONST
 *
ªqoid
,

812 
bîvÆ
 *
ªqd©a
,

813 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

814 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

815 **
ªtoidp
,

816 
bîvÆ
 **
ªtd©≠
 ));

818 
	$LDAP_F
( )

819 
ld≠_∑r£_exãnded_ªsu…
 
	`LDAP_P
((

820 
LDAP
 *
ld
,

821 
LDAPMesßge
 *
ªs
,

822 **
ªtoidp
,

823 
bîvÆ
 **
ªtd©≠
,

824 
‰ìô
 ));

826 
	$LDAP_F
( )

827 
ld≠_∑r£_öãrmedüã
 
	`LDAP_P
((

828 
LDAP
 *
ld
,

829 
LDAPMesßge
 *
ªs
,

830 **
ªtoidp
,

831 
bîvÆ
 **
ªtd©≠
,

832 
LDAPC⁄åﬁ
 ***
£rvî˘æs
,

833 
‰ìô
 ));

838 #ifde‡
LDAP_EXOP_GROUPING_CREATE


840 
	$LDAP_F
( )

841 
ld≠_groupög_¸óã
 
	`LDAP_P
((

842 
LDAP
 *
ld
,

843 
LDAP_CONST
 *
gΩoid
,

844 
bîvÆ
 *
gΩd©a
,

845 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

846 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

847 *
msgidp
 ));

849 
	$LDAP_F
( )

850 
ld≠_groupög_¸óã_s
 
	`LDAP_P
((

851 
LDAP
 *
ld
,

852 
LDAP_CONST
 *
gΩoid
,

853 
bîvÆ
 *
gΩd©a
,

854 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

855 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

856 
bîvÆ
 **
ªtgΩcookõp
,

857 
bîvÆ
 **
ªtgΩd©≠
 ));

859 
	$LDAP_F
( )

860 
ld≠_∑r£_groupög_¸óã_ªsu…
 
	`LDAP_P
((

861 
LDAP
 *
ld
,

862 
LDAPMesßge
 *
ªs
,

863 
bîvÆ
 **
ªtgΩcookõp
,

864 
bîvÆ
 **
ªtgΩd©≠
,

865 
LDAPC⁄åﬁ
 ***
£rvî˘æs
,

866 
‰ìô
 ));

868 
	$LDAP_F
( )

869 
ld≠_groupög_íd
 
	`LDAP_P
((

870 
LDAP
 *
ld
,

871 
LDAP_CONST
 *
gΩoid
,

872 
bîvÆ
 *
gΩd©a
,

873 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

874 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

875 *
msgidp
 ));

877 
	$LDAP_F
( )

878 
ld≠_groupög_íd_s
 
	`LDAP_P
((

879 
LDAP
 *
ld
,

880 
LDAP_CONST
 *
gΩoid
,

881 
bîvÆ
 *
gΩd©a
,

882 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

883 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

884 
bîvÆ
 **
ªtgΩd©≠
 ));

886 
	$LDAP_F
( )

887 
ld≠_∑r£_groupög_íd_ªsu…
 
	`LDAP_P
((

888 
LDAP
 *
ld
,

889 
LDAPMesßge
 *
ªs
,

890 
bîvÆ
 **
ªtgΩd©≠
,

891 
LDAPC⁄åﬁ
 ***
£rvî˘æs
,

892 
‰ìô
 ));

894 
	$LDAP_F
( )

895 
ld≠_groupög_a˘i⁄_›î©i⁄
 
	`LDAP_P
((

896 
LDAP
 *
ld
,

897 
LDAP_CONST
 *
gΩoid
,

898 
bîvÆ
 *
gΩd©a
,

899 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

900 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

901 *
msgidp
 ));

903 
	$LDAP_F
( )

904 
ld≠_groupög_a˘i⁄_›î©i⁄_s
 
	`LDAP_P
((

905 
LDAP
 *
ld
,

906 
LDAP_CONST
 *
gΩoid
,

907 
bîvÆ
 *
gΩd©a
,

908 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

909 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

910 
bîvÆ
 **
ªtgΩcookõp
,

911 
bîvÆ
 **
ªtgΩd©≠
 ));

913 
	$LDAP_F
( )

914 
ld≠_∑r£_groupög_a˘i⁄_ªsu…
 
	`LDAP_P
((

915 
LDAP
 *
ld
,

916 
LDAPMesßge
 *
ªs
,

917 
bîvÆ
 **
ªtgΩcookõp
,

918 
bîvÆ
 **
ªtgΩd©≠
,

919 
LDAPC⁄åﬁ
 ***
£rvî˘æs
,

920 
‰ìô
 ));

922 
	$LDAP_F
( )

923 
ld≠_∑r£_groupög_íd_nŸi˚
 
	`LDAP_P
((

924 
LDAP
 *
ld
,

925 
LDAPMesßge
 *
ªs
,

926 
bîvÆ
 **
ªtd©≠
,

927 
bîvÆ
 **
ªtgΩcookõp
,

928 
bîvÆ
 **
ªtgΩd©≠
,

929 
‰ìô
 ));

931 
	$LDAP_F
( )

932 
ld≠_∑r£_groupög_öfo_nŸi˚
 
	`LDAP_P
((

933 
LDAP
 *
ld
,

934 
LDAPMesßge
 *
ªs
,

935 
bîvÆ
 **
ªtd©≠
,

936 
bîvÆ
 **
ªtgΩcookõp
,

937 
bîvÆ
 **
ªtgΩd©≠
,

938 
‰ìô
 ));

944 
	$LDAP_F
( )

945 
ld≠_ab™d⁄_ext
 
	`LDAP_P
((

946 
LDAP
 *
ld
,

947 
msgid
,

948 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

949 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
 ));

951 #i‡
LDAP_DEPRECATED


952 
	$LDAP_F
( )

953 
ld≠_ab™d⁄
 
	`LDAP_P
((

954 
LDAP
 *
ld
,

955 
msgid
 ));

962 
	$LDAP_F
( )

963 
ld≠_add_ext
 
	`LDAP_P
((

964 
LDAP
 *
ld
,

965 
LDAP_CONST
 *
dn
,

966 
LDAPMod
 **
©ås
,

967 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

968 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

969 *
msgidp
 ));

971 
	$LDAP_F
( )

972 
ld≠_add_ext_s
 
	`LDAP_P
((

973 
LDAP
 *
ld
,

974 
LDAP_CONST
 *
dn
,

975 
LDAPMod
 **
©ås
,

976 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

977 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
 ));

979 #i‡
LDAP_DEPRECATED


980 
	$LDAP_F
( )

981 
ld≠_add
 
	`LDAP_P
((

982 
LDAP
 *
ld
,

983 
LDAP_CONST
 *
dn
,

984 
LDAPMod
 **
©ås
 ));

986 
	$LDAP_F
( )

987 
ld≠_add_s
 
	`LDAP_P
((

988 
LDAP
 *
ld
,

989 
LDAP_CONST
 *
dn
,

990 
LDAPMod
 **
©ås
 ));

997 
	$LDAP_F
( )

998 
ld≠_ß¶_böd
 
	`LDAP_P
((

999 
LDAP
 *
ld
,

1000 
LDAP_CONST
 *
dn
,

1001 
LDAP_CONST
 *
mech™ism
,

1002 
bîvÆ
 *
¸ed
,

1003 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1004 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

1005 *
msgidp
 ));

1012 
	#LDAP_SASL_AUTOMATIC
 0U

	)

1013 
	#LDAP_SASL_INTERACTIVE
 1U

	)

1014 
	#LDAP_SASL_QUIET
 2U

	)

1021 (
	tLDAP_SASL_INTERACT_PROC
Ë
	tLDAP_P
((

1022 
	tLDAP
 *
	tld
, 
	tÊags
, * 
	tdeÁu…s
, *
	töãø˘
 ));

1024 
	$LDAP_F
( )

1025 
ld≠_ß¶_öãø˘ive_böd_s
 
	`LDAP_P
((

1026 
LDAP
 *
ld
,

1027 
LDAP_CONST
 *
dn
,

1028 
LDAP_CONST
 *
ß¶Mech™ism
,

1029 
LDAPC⁄åﬁ
 **
£rvîC⁄åﬁs
,

1030 
LDAPC⁄åﬁ
 **
˛õ¡C⁄åﬁs
,

1033 
Êags
,

1034 
LDAP_SASL_INTERACT_PROC
 *
¥oc
,

1035 *
deÁu…s
 ));

1037 
	$LDAP_F
( )

1038 
ld≠_ß¶_böd_s
 
	`LDAP_P
((

1039 
LDAP
 *
ld
,

1040 
LDAP_CONST
 *
dn
,

1041 
LDAP_CONST
 *
mech™ism
,

1042 
bîvÆ
 *
¸ed
,

1043 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1044 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

1045 
bîvÆ
 **
£rvî¸edp
 ));

1047 
	$LDAP_F
( )

1048 
ld≠_∑r£_ß¶_böd_ªsu…
 
	`LDAP_P
((

1049 
LDAP
 *
ld
,

1050 
LDAPMesßge
 *
ªs
,

1051 
bîvÆ
 **
£rvî¸edp
,

1052 
‰ìô
 ));

1054 #i‡
LDAP_DEPRECATED


1059 
	$LDAP_F
( )

1060 
ld≠_böd
 
	`LDAP_P
((

1061 
LDAP
 *
ld
,

1062 
LDAP_CONST
 *
who
,

1063 
LDAP_CONST
 *
∑sswd
,

1064 
authmëhod
 ));

1066 
	$LDAP_F
( )

1067 
ld≠_böd_s
 
	`LDAP_P
((

1068 
LDAP
 *
ld
,

1069 
LDAP_CONST
 *
who
,

1070 
LDAP_CONST
 *
¸ed
,

1071 
authmëhod
 ));

1076 
	$LDAP_F
( )

1077 
ld≠_sim∂e_böd
 
	`LDAP_P
((

1078 
LDAP
 *
ld
,

1079 
LDAP_CONST
 *
who
,

1080 
LDAP_CONST
 *
∑sswd
 ));

1082 
	$LDAP_F
( )

1083 
ld≠_sim∂e_böd_s
 
	`LDAP_P
((

1084 
LDAP
 *
ld
,

1085 
LDAP_CONST
 *
who
,

1086 
LDAP_CONST
 *
∑sswd
 ));

1093 
	$LDAP_F
( )

1094 
ld≠_kîbîos_böd_s
 
	`LDAP_P
((

1095 
LDAP
 *
ld
,

1096 
LDAP_CONST
 *
who
 ));

1098 
	$LDAP_F
( )

1099 
ld≠_kîbîos_böd1
 
	`LDAP_P
((

1100 
LDAP
 *
ld
,

1101 
LDAP_CONST
 *
who
 ));

1103 
	$LDAP_F
( )

1104 
ld≠_kîbîos_böd1_s
 
	`LDAP_P
((

1105 
LDAP
 *
ld
,

1106 
LDAP_CONST
 *
who
 ));

1108 
	$LDAP_F
( )

1109 
ld≠_kîbîos_böd2
 
	`LDAP_P
((

1110 
LDAP
 *
ld
,

1111 
LDAP_CONST
 *
who
 ));

1113 
	$LDAP_F
( )

1114 
ld≠_kîbîos_böd2_s
 
	`LDAP_P
((

1115 
LDAP
 *
ld
,

1116 
LDAP_CONST
 *
who
 ));

1123 
	$LDAP_F
( )

1124 
ld≠_com∑ª_ext
 
	`LDAP_P
((

1125 
LDAP
 *
ld
,

1126 
LDAP_CONST
 *
dn
,

1127 
LDAP_CONST
 *
©å
,

1128 
bîvÆ
 *
bvÆue
,

1129 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1130 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

1131 *
msgidp
 ));

1133 
	$LDAP_F
( )

1134 
ld≠_com∑ª_ext_s
 
	`LDAP_P
((

1135 
LDAP
 *
ld
,

1136 
LDAP_CONST
 *
dn
,

1137 
LDAP_CONST
 *
©å
,

1138 
bîvÆ
 *
bvÆue
,

1139 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1140 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
 ));

1142 #i‡
LDAP_DEPRECATED


1143 
	$LDAP_F
( )

1144 
ld≠_com∑ª
 
	`LDAP_P
((

1145 
LDAP
 *
ld
,

1146 
LDAP_CONST
 *
dn
,

1147 
LDAP_CONST
 *
©å
,

1148 
LDAP_CONST
 *
vÆue
 ));

1150 
	$LDAP_F
( )

1151 
ld≠_com∑ª_s
 
	`LDAP_P
((

1152 
LDAP
 *
ld
,

1153 
LDAP_CONST
 *
dn
,

1154 
LDAP_CONST
 *
©å
,

1155 
LDAP_CONST
 *
vÆue
 ));

1162 
	$LDAP_F
( )

1163 
ld≠_dñëe_ext
 
	`LDAP_P
((

1164 
LDAP
 *
ld
,

1165 
LDAP_CONST
 *
dn
,

1166 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1167 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

1168 *
msgidp
 ));

1170 
	$LDAP_F
( )

1171 
ld≠_dñëe_ext_s
 
	`LDAP_P
((

1172 
LDAP
 *
ld
,

1173 
LDAP_CONST
 *
dn
,

1174 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1175 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
 ));

1177 #i‡
LDAP_DEPRECATED


1178 
	$LDAP_F
( )

1179 
ld≠_dñëe
 
	`LDAP_P
((

1180 
LDAP
 *
ld
,

1181 
LDAP_CONST
 *
dn
 ));

1183 
	$LDAP_F
( )

1184 
ld≠_dñëe_s
 
	`LDAP_P
((

1185 
LDAP
 *
ld
,

1186 
LDAP_CONST
 *
dn
 ));

1193 
	$LDAP_F
( )

1194 
ld≠_∑r£_ªsu…
 
	`LDAP_P
((

1195 
LDAP
 *
ld
,

1196 
LDAPMesßge
 *
ªs
,

1197 *
îrcodï
,

1198 **
m©chedd≈
,

1199 **
îrmsgp
,

1200 ***
ª„ºÆ•
,

1201 
LDAPC⁄åﬁ
 ***
£rvî˘æs
,

1202 
‰ìô
 ));

1204 
	$LDAP_F
( * )

1205 
ld≠_îr2°rög
 
	`LDAP_P
((

1206 
îr
 ));

1208 #i‡
LDAP_DEPRECATED


1209 
	$LDAP_F
( )

1210 
ld≠_ªsu…2îr‹
 
	`LDAP_P
((

1211 
LDAP
 *
ld
,

1212 
LDAPMesßge
 *
r
,

1213 
‰ìô
 ));

1215 
	$LDAP_F
( )

1216 
ld≠_≥º‹
 
	`LDAP_P
((

1217 
LDAP
 *
ld
,

1218 
LDAP_CONST
 *
s
 ));

1225 
	$LDAP_F
( )

1226 
ld≠_modify_ext
 
	`LDAP_P
((

1227 
LDAP
 *
ld
,

1228 
LDAP_CONST
 *
dn
,

1229 
LDAPMod
 **
mods
,

1230 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1231 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

1232 *
msgidp
 ));

1234 
	$LDAP_F
( )

1235 
ld≠_modify_ext_s
 
	`LDAP_P
((

1236 
LDAP
 *
ld
,

1237 
LDAP_CONST
 *
dn
,

1238 
LDAPMod
 **
mods
,

1239 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1240 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
 ));

1242 #i‡
LDAP_DEPRECATED


1243 
	$LDAP_F
( )

1244 
ld≠_modify
 
	`LDAP_P
((

1245 
LDAP
 *
ld
,

1246 
LDAP_CONST
 *
dn
,

1247 
LDAPMod
 **
mods
 ));

1249 
	$LDAP_F
( )

1250 
ld≠_modify_s
 
	`LDAP_P
((

1251 
LDAP
 *
ld
,

1252 
LDAP_CONST
 *
dn
,

1253 
LDAPMod
 **
mods
 ));

1260 
	$LDAP_F
( )

1261 
ld≠_ª«me
 
	`LDAP_P
((

1262 
LDAP
 *
ld
,

1263 
LDAP_CONST
 *
dn
,

1264 
LDAP_CONST
 *
√wrdn
,

1265 
LDAP_CONST
 *
√wSu≥ri‹
,

1266 
dñëeﬁdrdn
,

1267 
LDAPC⁄åﬁ
 **
s˘æs
,

1268 
LDAPC⁄åﬁ
 **
c˘æs
,

1269 *
msgidp
 ));

1271 
	$LDAP_F
( )

1272 
ld≠_ª«me_s
 
	`LDAP_P
((

1273 
LDAP
 *
ld
,

1274 
LDAP_CONST
 *
dn
,

1275 
LDAP_CONST
 *
√wrdn
,

1276 
LDAP_CONST
 *
√wSu≥ri‹
,

1277 
dñëeﬁdrdn
,

1278 
LDAPC⁄åﬁ
 **
s˘æs
,

1279 
LDAPC⁄åﬁ
 **
c˘æs
 ));

1281 #i‡
LDAP_DEPRECATED


1282 
	$LDAP_F
( )

1283 
ld≠_ª«me2
 
	`LDAP_P
((

1284 
LDAP
 *
ld
,

1285 
LDAP_CONST
 *
dn
,

1286 
LDAP_CONST
 *
√wrdn
,

1287 
LDAP_CONST
 *
√wSu≥ri‹
,

1288 
dñëeﬁdrdn
 ));

1290 
	$LDAP_F
( )

1291 
ld≠_ª«me2_s
 
	`LDAP_P
((

1292 
LDAP
 *
ld
,

1293 
LDAP_CONST
 *
dn
,

1294 
LDAP_CONST
 *
√wrdn
,

1295 
LDAP_CONST
 *
√wSu≥ri‹
,

1296 
dñëeﬁdrdn
 ));

1298 
	$LDAP_F
( )

1299 
ld≠_modrdn
 
	`LDAP_P
((

1300 
LDAP
 *
ld
,

1301 
LDAP_CONST
 *
dn
,

1302 
LDAP_CONST
 *
√wrdn
 ));

1304 
	$LDAP_F
( )

1305 
ld≠_modrdn_s
 
	`LDAP_P
((

1306 
LDAP
 *
ld
,

1307 
LDAP_CONST
 *
dn
,

1308 
LDAP_CONST
 *
√wrdn
 ));

1310 
	$LDAP_F
( )

1311 
ld≠_modrdn2
 
	`LDAP_P
((

1312 
LDAP
 *
ld
,

1313 
LDAP_CONST
 *
dn
,

1314 
LDAP_CONST
 *
√wrdn
,

1315 
dñëeﬁdrdn
 ));

1317 
	$LDAP_F
( )

1318 
ld≠_modrdn2_s
 
	`LDAP_P
((

1319 
LDAP
 *
ld
,

1320 
LDAP_CONST
 *
dn
,

1321 
LDAP_CONST
 *
√wrdn
,

1322 
dñëeﬁdrdn
));

1329 #i‡
LDAP_DEPRECATED


1330 
	$LDAP_F
–
LDAP
 * )

1331 
ld≠_öô
 
	`LDAP_P
((

1332 
LDAP_CONST
 *
ho°
,

1333 
p‹t
 ));

1335 
	$LDAP_F
–
LDAP
 * )

1336 
ld≠_›í
 
	`LDAP_P
((

1337 
LDAP_CONST
 *
ho°
,

1338 
p‹t
 ));

1341 
	$LDAP_F
( )

1342 
ld≠_¸óã
 
	`LDAP_P
((

1343 
LDAP
 **
ldp
 ));

1345 
	$LDAP_F
( )

1346 
ld≠_öôülize
 
	`LDAP_P
((

1347 
LDAP
 **
ldp
,

1348 
LDAP_CONST
 *
uæ
 ));

1354 
	$LDAP_F
( )

1355 
ld≠_és_ö∂a˚
 
	`LDAP_P
((

1356 
LDAP
 *
ld
 ));

1358 
	$LDAP_F
( )

1359 
ld≠_°¨t_és
 
	`LDAP_P
((

1360 
LDAP
 *
ld
,

1361 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1362 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

1363 *
msgidp
 ));

1365 
	$LDAP_F
( )

1366 
ld≠_ö°Æl_és
 
	`LDAP_P
((

1367 
LDAP
 *
ld
 ));

1369 
	$LDAP_F
( )

1370 
ld≠_°¨t_és_s
 
	`LDAP_P
((

1371 
LDAP
 *
ld
,

1372 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1373 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
 ));

1378 
	$LDAP_F
–
LDAPMesßge
 * )

1379 
ld≠_fú°_mesßge
 
	`LDAP_P
((

1380 
LDAP
 *
ld
,

1381 
LDAPMesßge
 *
chaö
 ));

1383 
	$LDAP_F
–
LDAPMesßge
 * )

1384 
ld≠_√xt_mesßge
 
	`LDAP_P
((

1385 
LDAP
 *
ld
,

1386 
LDAPMesßge
 *
msg
 ));

1388 
	$LDAP_F
( )

1389 
ld≠_cou¡_mesßges
 
	`LDAP_P
((

1390 
LDAP
 *
ld
,

1391 
LDAPMesßge
 *
chaö
 ));

1396 
	$LDAP_F
–
LDAPMesßge
 * )

1397 
ld≠_fú°_ª„ªn˚
 
	`LDAP_P
((

1398 
LDAP
 *
ld
,

1399 
LDAPMesßge
 *
chaö
 ));

1401 
	$LDAP_F
–
LDAPMesßge
 * )

1402 
ld≠_√xt_ª„ªn˚
 
	`LDAP_P
((

1403 
LDAP
 *
ld
,

1404 
LDAPMesßge
 *
ªf
 ));

1406 
	$LDAP_F
( )

1407 
ld≠_cou¡_ª„ªn˚s
 
	`LDAP_P
((

1408 
LDAP
 *
ld
,

1409 
LDAPMesßge
 *
chaö
 ));

1411 
	$LDAP_F
( )

1412 
ld≠_∑r£_ª„ªn˚
 
	`LDAP_P
((

1413 
LDAP
 *
ld
,

1414 
LDAPMesßge
 *
ªf
,

1415 ***
ª„ºÆ•
,

1416 
LDAPC⁄åﬁ
 ***
£rvî˘æs
,

1417 
‰ìô
));

1423 
	$LDAP_F
–
LDAPMesßge
 * )

1424 
ld≠_fú°_íåy
 
	`LDAP_P
((

1425 
LDAP
 *
ld
,

1426 
LDAPMesßge
 *
chaö
 ));

1428 
	$LDAP_F
–
LDAPMesßge
 * )

1429 
ld≠_√xt_íåy
 
	`LDAP_P
((

1430 
LDAP
 *
ld
,

1431 
LDAPMesßge
 *
íåy
 ));

1433 
	$LDAP_F
( )

1434 
ld≠_cou¡_íåõs
 
	`LDAP_P
((

1435 
LDAP
 *
ld
,

1436 
LDAPMesßge
 *
chaö
 ));

1438 
	$LDAP_F
( )

1439 
ld≠_gë_íåy_c⁄åﬁs
 
	`LDAP_P
((

1440 
LDAP
 *
ld
,

1441 
LDAPMesßge
 *
íåy
,

1442 
LDAPC⁄åﬁ
 ***
£rvî˘æs
));

1448 
	$LDAP_F
–
LDAPMesßge
 * )

1449 
ld≠_dñëe_ªsu…_íåy
 
	`LDAP_P
((

1450 
LDAPMesßge
 **
li°
,

1451 
LDAPMesßge
 *
e
 ));

1453 
	$LDAP_F
( )

1454 
ld≠_add_ªsu…_íåy
 
	`LDAP_P
((

1455 
LDAPMesßge
 **
li°
,

1456 
LDAPMesßge
 *
e
 ));

1462 
	$LDAP_F
( * )

1463 
ld≠_gë_dn
 
	`LDAP_P
((

1464 
LDAP
 *
ld
,

1465 
LDAPMesßge
 *
íåy
 ));

1467 
	sld≠_ava
 {

1468 
bîvÆ
 
œ_©å
;

1469 
bîvÆ
 
œ_vÆue
;

1470 
œ_Êags
;

1471 
	#LDAP_AVA_NULL
 0x0000U

	)

1472 
	#LDAP_AVA_STRING
 0x0001U

	)

1473 
	#LDAP_AVA_BINARY
 0x0002U

	)

1474 
	#LDAP_AVA_NONPRINTABLE
 0x0004U

	)

1475 
	#LDAP_AVA_FREE_ATTR
 0x0010U

	)

1476 
	#LDAP_AVA_FREE_VALUE
 0x0020U

	)

1478 *
œ_¥iv©e
;

1479 } 
	tLDAPAVA
;

1481 
LDAPAVA
** 
	tLDAPRDN
;

1482 
LDAPRDN
* 
	tLDAPDN
;

1485 
	#LDAP_DN_FORMAT_LDAP
 0x0000U

	)

1486 
	#LDAP_DN_FORMAT_LDAPV3
 0x0010U

	)

1487 
	#LDAP_DN_FORMAT_LDAPV2
 0x0020U

	)

1488 
	#LDAP_DN_FORMAT_DCE
 0x0030U

	)

1489 
	#LDAP_DN_FORMAT_UFN
 0x0040U

	)

1490 
	#LDAP_DN_FORMAT_AD_CANONICAL
 0x0050U

	)

1491 
	#LDAP_DN_FORMAT_LBER
 0x00F0U

	)

1492 
	#LDAP_DN_FORMAT_MASK
 0x00F0U

	)

1495 
	#LDAP_DN_PRETTY
 0x0100U

	)

1496 
	#LDAP_DN_SKIP
 0x0200U

	)

1497 
	#LDAP_DN_P_NOLEADTRAILSPACES
 0x1000U

	)

1498 
	#LDAP_DN_P_NOSPACEAFTERRDN
 0x2000U

	)

1499 
	#LDAP_DN_PEDANTIC
 0xF000U

	)

1501 
	$LDAP_F
–Ë
ld≠_rdn‰ì
 
	`LDAP_P
(–
LDAPRDN
 
rdn
 ));

1502 
	$LDAP_F
–Ë
ld≠_dn‰ì
 
	`LDAP_P
(–
LDAPDN
 
dn
 ));

1504 
	$LDAP_F
( )

1505 
ld≠_bv2dn
 
	`LDAP_P
((

1506 
bîvÆ
 *
bv
,

1507 
LDAPDN
 *
dn
,

1508 
Êags
 ));

1510 
	$LDAP_F
( )

1511 
ld≠_°r2dn
 
	`LDAP_P
((

1512 
LDAP_CONST
 *
°r
,

1513 
LDAPDN
 *
dn
,

1514 
Êags
 ));

1516 
	$LDAP_F
( )

1517 
ld≠_dn2bv
 
	`LDAP_P
((

1518 
LDAPDN
 
dn
,

1519 
bîvÆ
 *
bv
,

1520 
Êags
 ));

1522 
	$LDAP_F
( )

1523 
ld≠_dn2°r
 
	`LDAP_P
((

1524 
LDAPDN
 
dn
,

1525 **
°r
,

1526 
Êags
 ));

1528 
	$LDAP_F
( )

1529 
ld≠_bv2rdn
 
	`LDAP_P
((

1530 
bîvÆ
 *
bv
,

1531 
LDAPRDN
 *
rdn
,

1532 **
√xt
,

1533 
Êags
 ));

1535 
	$LDAP_F
( )

1536 
ld≠_°r2rdn
 
	`LDAP_P
((

1537 
LDAP_CONST
 *
°r
,

1538 
LDAPRDN
 *
rdn
,

1539 **
√xt
,

1540 
Êags
 ));

1542 
	$LDAP_F
( )

1543 
ld≠_rdn2bv
 
	`LDAP_P
((

1544 
LDAPRDN
 
rdn
,

1545 
bîvÆ
 *
bv
,

1546 
Êags
 ));

1548 
	$LDAP_F
( )

1549 
ld≠_rdn2°r
 
	`LDAP_P
((

1550 
LDAPRDN
 
rdn
,

1551 **
°r
,

1552 
Êags
 ));

1554 
	$LDAP_F
( )

1555 
ld≠_dn_n‹mÆize
 
	`LDAP_P
((

1556 
LDAP_CONST
 *
ö
, 
iÊags
,

1557 **
out
, 
oÊags
 ));

1559 
	$LDAP_F
( * )

1560 
ld≠_dn2u‚
 
	`LDAP_P
((

1561 
LDAP_CONST
 *
dn
 ));

1563 
	$LDAP_F
( ** )

1564 
ld≠_ex∂ode_dn
 
	`LDAP_P
((

1565 
LDAP_CONST
 *
dn
,

1566 
nŸy≥s
 ));

1568 
	$LDAP_F
( ** )

1569 
ld≠_ex∂ode_rdn
 
	`LDAP_P
((

1570 
LDAP_CONST
 *
rdn
,

1571 
nŸy≥s
 ));

1573 
	tLDAPDN_ªwrôe_func


1574 
	tLDAP_P
(–
	tLDAPDN
 
	tdn
, 
	tÊags
, *
	t˘x
 ));

1576 
	$LDAP_F
( )

1577 
ld≠_X509dn2bv
 
	`LDAP_P
(–*
x509_«me
, 
bîvÆ
 *
dn
,

1578 
LDAPDN_ªwrôe_func
 *
func
, 
Êags
 ));

1580 
	$LDAP_F
( * )

1581 
ld≠_dn2d˚dn
 
	`LDAP_P
((

1582 
LDAP_CONST
 *
dn
 ));

1584 
	$LDAP_F
( * )

1585 
ld≠_d˚dn2dn
 
	`LDAP_P
((

1586 
LDAP_CONST
 *
d˚
 ));

1588 
	$LDAP_F
( * )

1589 
ld≠_dn2ad_ˇn⁄iˇl
 
	`LDAP_P
((

1590 
LDAP_CONST
 *
dn
 ));

1592 
	$LDAP_F
( )

1593 
ld≠_gë_dn_bî
 
	`LDAP_P
((

1594 
LDAP
 *
ld
, 
LDAPMesßge
 *
e
, 
BîEÀmít
 **
bîout
, 
bîvÆ
 *
dn
 ));

1596 
	$LDAP_F
( )

1597 
ld≠_gë_©åibuã_bî
 
	`LDAP_P
((

1598 
LDAP
 *
ld
, 
LDAPMesßge
 *
e
, 
BîEÀmít
 *
bî
, 
bîvÆ
 *
©å
,

1599 
bîvÆ
 **
vÆs
 ));

1604 
	$LDAP_F
( * )

1605 
ld≠_fú°_©åibuã
 
	`LDAP_P
((

1606 
LDAP
 *
ld
,

1607 
LDAPMesßge
 *
íåy
,

1608 
BîEÀmít
 **
bî
 ));

1610 
	$LDAP_F
( * )

1611 
ld≠_√xt_©åibuã
 
	`LDAP_P
((

1612 
LDAP
 *
ld
,

1613 
LDAPMesßge
 *
íåy
,

1614 
BîEÀmít
 *
bî
 ));

1620 
	$LDAP_F
–
bîvÆ
 ** )

1621 
ld≠_gë_vÆues_Àn
 
	`LDAP_P
((

1622 
LDAP
 *
ld
,

1623 
LDAPMesßge
 *
íåy
,

1624 
LDAP_CONST
 *
èrgë
 ));

1626 
	$LDAP_F
( )

1627 
ld≠_cou¡_vÆues_Àn
 
	`LDAP_P
((

1628 
bîvÆ
 **
vÆs
 ));

1630 
	$LDAP_F
( )

1631 
ld≠_vÆue_‰ì_Àn
 
	`LDAP_P
((

1632 
bîvÆ
 **
vÆs
 ));

1634 #i‡
LDAP_DEPRECATED


1635 
	$LDAP_F
( ** )

1636 
ld≠_gë_vÆues
 
	`LDAP_P
((

1637 
LDAP
 *
ld
,

1638 
LDAPMesßge
 *
íåy
,

1639 
LDAP_CONST
 *
èrgë
 ));

1641 
	$LDAP_F
( )

1642 
ld≠_cou¡_vÆues
 
	`LDAP_P
((

1643 **
vÆs
 ));

1645 
	$LDAP_F
( )

1646 
ld≠_vÆue_‰ì
 
	`LDAP_P
((

1647 **
vÆs
 ));

1653 
	$LDAP_F
( )

1654 
ld≠_ªsu…
 
	`LDAP_P
((

1655 
LDAP
 *
ld
,

1656 
msgid
,

1657 
Æl
,

1658 
timevÆ
 *
timeout
,

1659 
LDAPMesßge
 **
ªsu…
 ));

1661 
	$LDAP_F
( )

1662 
ld≠_msgty≥
 
	`LDAP_P
((

1663 
LDAPMesßge
 *
lm
 ));

1665 
	$LDAP_F
( )

1666 
ld≠_msgid
 
	`LDAP_P
((

1667 
LDAPMesßge
 *
lm
 ));

1669 
	$LDAP_F
( )

1670 
ld≠_msg‰ì
 
	`LDAP_P
((

1671 
LDAPMesßge
 *
lm
 ));

1673 
	$LDAP_F
( )

1674 
ld≠_msgdñëe
 
	`LDAP_P
((

1675 
LDAP
 *
ld
,

1676 
msgid
 ));

1682 
	$LDAP_F
( )

1683 
ld≠_bv2esˇ≥d_fûãr_vÆue
 
	`LDAP_P
((

1684 
bîvÆ
 *
ö
,

1685 
bîvÆ
 *
out
 ));

1687 
	$LDAP_F
( )

1688 
ld≠_£¨ch_ext
 
	`LDAP_P
((

1689 
LDAP
 *
ld
,

1690 
LDAP_CONST
 *
ba£
,

1691 
sc›e
,

1692 
LDAP_CONST
 *
fûãr
,

1693 **
©ås
,

1694 
©ås⁄ly
,

1695 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1696 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

1697 
timevÆ
 *
timeout
,

1698 
sizñimô
,

1699 *
msgidp
 ));

1701 
	$LDAP_F
( )

1702 
ld≠_£¨ch_ext_s
 
	`LDAP_P
((

1703 
LDAP
 *
ld
,

1704 
LDAP_CONST
 *
ba£
,

1705 
sc›e
,

1706 
LDAP_CONST
 *
fûãr
,

1707 **
©ås
,

1708 
©ås⁄ly
,

1709 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1710 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
,

1711 
timevÆ
 *
timeout
,

1712 
sizñimô
,

1713 
LDAPMesßge
 **
ªs
 ));

1715 #i‡
LDAP_DEPRECATED


1716 
	$LDAP_F
( )

1717 
ld≠_£¨ch
 
	`LDAP_P
((

1718 
LDAP
 *
ld
,

1719 
LDAP_CONST
 *
ba£
,

1720 
sc›e
,

1721 
LDAP_CONST
 *
fûãr
,

1722 **
©ås
,

1723 
©ås⁄ly
 ));

1725 
	$LDAP_F
( )

1726 
ld≠_£¨ch_s
 
	`LDAP_P
((

1727 
LDAP
 *
ld
,

1728 
LDAP_CONST
 *
ba£
,

1729 
sc›e
,

1730 
LDAP_CONST
 *
fûãr
,

1731 **
©ås
,

1732 
©ås⁄ly
,

1733 
LDAPMesßge
 **
ªs
 ));

1735 
	$LDAP_F
( )

1736 
ld≠_£¨ch_°
 
	`LDAP_P
((

1737 
LDAP
 *
ld
,

1738 
LDAP_CONST
 *
ba£
,

1739 
sc›e
,

1740 
LDAP_CONST
 *
fûãr
,

1741 **
©ås
,

1742 
©ås⁄ly
,

1743 
timevÆ
 *
timeout
,

1744 
LDAPMesßge
 **
ªs
 ));

1750 
	$LDAP_F
( )

1751 
ld≠_unböd_ext
 
	`LDAP_P
((

1752 
LDAP
 *
ld
,

1753 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1754 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
));

1756 
	$LDAP_F
( )

1757 
ld≠_unböd_ext_s
 
	`LDAP_P
((

1758 
LDAP
 *
ld
,

1759 
LDAPC⁄åﬁ
 **
£rvî˘æs
,

1760 
LDAPC⁄åﬁ
 **
˛õ¡˘æs
));

1762 #i‡
LDAP_DEPRECATED


1763 
	$LDAP_F
( )

1764 
ld≠_unböd
 
	`LDAP_P
((

1765 
LDAP
 *
ld
 ));

1767 
	$LDAP_F
( )

1768 
ld≠_unböd_s
 
	`LDAP_P
((

1769 
LDAP
 *
ld
 ));

1775 
	$LDAP_F
( )

1776 
ld≠_put_vrFûãr
 
	`LDAP_P
((

1777 
BîEÀmít
 *
bî
,

1778 c⁄° *
vrf
 ));

1784 
	$LDAP_F
( * )

1785 
ld≠_memÆloc
 
	`LDAP_P
((

1786 
bî_Àn_t
 
s
 ));

1788 
	$LDAP_F
( * )

1789 
ld≠_memªÆloc
 
	`LDAP_P
((

1790 * 
p
,

1791 
bî_Àn_t
 
s
 ));

1793 
	$LDAP_F
( * )

1794 
ld≠_memˇŒoc
 
	`LDAP_P
((

1795 
bî_Àn_t
 
n
,

1796 
bî_Àn_t
 
s
 ));

1798 
	$LDAP_F
( )

1799 
ld≠_mem‰ì
 
	`LDAP_P
((

1800 * 
p
 ));

1802 
	$LDAP_F
( )

1803 
ld≠_memv‰ì
 
	`LDAP_P
((

1804 ** 
v
 ));

1806 
	$LDAP_F
( * )

1807 
ld≠_°rdup
 
	`LDAP_P
((

1808 
LDAP_CONST
 * ));

1810 
	$LDAP_F
( )

1811 
ld≠_mods_‰ì
 
	`LDAP_P
((

1812 
LDAPMod
 **
mods
,

1813 
‰ìmods
 ));

1816 #i‡
LDAP_DEPRECATED


1820 (
	tLDAP_SORT_AD_CMP_PROC
Ë
	tLDAP_P
((

1821 
	tLDAP_CONST
 *
	tÀ·
,

1822 
	tLDAP_CONST
 *
	tright
 ));

1824 (
	tLDAP_SORT_AV_CMP_PROC
Ë
	tLDAP_P
((

1825 
	tLDAP_CONST
 *
	tÀ·
,

1826 
	tLDAP_CONST
 *
	tright
 ));

1828 
	$LDAP_F
( )

1829 
ld≠_s‹t_íåõs
 
	`LDAP_P
(–
LDAP
 *
ld
,

1830 
LDAPMesßge
 **
chaö
,

1831 
LDAP_CONST
 *
©å
,

1832 
LDAP_SORT_AD_CMP_PROC
 *
cmp
 ));

1834 
	$LDAP_F
( )

1835 
ld≠_s‹t_vÆues
 
	`LDAP_P
((

1836 
LDAP
 *
ld
,

1837 **
vÆs
,

1838 
LDAP_SORT_AV_CMP_PROC
 *
cmp
 ));

1840 
	$LDAP_F
( )

1841 
ld≠_s‹t_°rˇ£cmp
 
	`LDAP_P
((

1842 
LDAP_CONST
 *
a
,

1843 
LDAP_CONST
 *
b
 ));

1849 
	$LDAP_F
( )

1850 
ld≠_is_ld≠_uæ
 
	`LDAP_P
((

1851 
LDAP_CONST
 *
uæ
 ));

1853 
	$LDAP_F
( )

1854 
ld≠_is_ld≠s_uæ
 
	`LDAP_P
((

1855 
LDAP_CONST
 *
uæ
 ));

1857 
	$LDAP_F
( )

1858 
ld≠_is_ld≠i_uæ
 
	`LDAP_P
((

1859 
LDAP_CONST
 *
uæ
 ));

1861 
	$LDAP_F
( )

1862 
ld≠_uæ_∑r£
 
	`LDAP_P
((

1863 
LDAP_CONST
 *
uæ
,

1864 
LDAPURLDesc
 **
ludµ
 ));

1866 
	$LDAP_F
( * )

1867 
ld≠_uæ_desc2°r
 
	`LDAP_P
((

1868 
LDAPURLDesc
 *
ludp
 ));

1870 
	$LDAP_F
( )

1871 
ld≠_‰ì_uædesc
 
	`LDAP_P
((

1872 
LDAPURLDesc
 *
ludp
 ));

1879 
	#LDAP_API_FEATURE_CANCEL
 1000

	)

1881 
	$LDAP_F
( )

1882 
ld≠_ˇn˚l
 
	`LDAP_P
(–
LDAP
 *
ld
,

1883 
ˇn˚lid
,

1884 
LDAPC⁄åﬁ
 **
s˘æs
,

1885 
LDAPC⁄åﬁ
 **
c˘æs
,

1886 *
msgidp
 ));

1888 
	$LDAP_F
( )

1889 
ld≠_ˇn˚l_s
 
	`LDAP_P
(–
LDAP
 *
ld
,

1890 
ˇn˚lid
,

1891 
LDAPC⁄åﬁ
 **
s˘æ
,

1892 
LDAPC⁄åﬁ
 **
c˘æ
 ));

1898 
	#LDAP_API_FEATURE_TURN
 1000

	)

1900 
	$LDAP_F
( )

1901 
ld≠_tu∫
 
	`LDAP_P
(–
LDAP
 *
ld
,

1902 
mutuÆ
,

1903 
LDAP_CONST
 * 
idítifõr
,

1904 
LDAPC⁄åﬁ
 **
s˘æs
,

1905 
LDAPC⁄åﬁ
 **
c˘æs
,

1906 *
msgidp
 ));

1908 
	$LDAP_F
( )

1909 
ld≠_tu∫_s
 
	`LDAP_P
(–
LDAP
 *
ld
,

1910 
mutuÆ
,

1911 
LDAP_CONST
 * 
idítifõr
,

1912 
LDAPC⁄åﬁ
 **
s˘æ
,

1913 
LDAPC⁄åﬁ
 **
c˘æ
 ));

1919 
	#LDAP_API_FEATURE_SERVER_SIDE_SORT
 1000

	)

1922 
	sld≠s‹tkey
 {

1923 * 
©åibuãTy≥
;

1924 * 
‹dîögRuÀ
;

1925 
ªvî£Ordî
;

1926 } 
	tLDAPS‹tKey
;

1928 
	$LDAP_F
( )

1929 
ld≠_¸óã_s‹t_keyli°
 
	`LDAP_P
((

1930 
LDAPS‹tKey
 ***
s‹tKeyLi°
,

1931 *
keySåög
 ));

1933 
	$LDAP_F
( )

1934 
ld≠_‰ì_s‹t_keyli°
 
	`LDAP_P
((

1935 
LDAPS‹tKey
 **
s‹tkeyli°
 ));

1937 
	$LDAP_F
( )

1938 
ld≠_¸óã_s‹t_c⁄åﬁ
 
	`LDAP_P
((

1939 
LDAP
 *
ld
,

1940 
LDAPS‹tKey
 **
keyLi°
,

1941 
˘l_is¸ôiˇl
,

1942 
LDAPC⁄åﬁ
 **
˘æp
 ));

1944 
	$LDAP_F
( )

1945 
ld≠_∑r£_s‹t_c⁄åﬁ
 
	`LDAP_P
((

1946 
LDAP
 *
ld
,

1947 
LDAPC⁄åﬁ
 **
˘æp
,

1948 *
ªsu…
,

1949 **
©åibuã
 ));

1956 
	#LDAP_API_FEATURE_VIRTUAL_LIST_VIEW
 1000

	)

1959 
	sld≠vlvöfo
 {

1960 
ldvlv_vîsi⁄
;

1961 
ldvlv_bef‹e_cou¡
;

1962 
ldvlv_a·î_cou¡
;

1963 
ldvlv_off£t
;

1964 
ldvlv_cou¡
;

1965 
bîvÆ
 * 
ldvlv_©åvÆue
;

1966 
bîvÆ
 * 
ldvlv_c⁄ãxt
;

1967 * 
ldvlv_exåad©a
;

1968 } 
	tLDAPVLVInfo
;

1970 
	$LDAP_F
( )

1971 
ld≠_¸óã_vlv_c⁄åﬁ
 
	`LDAP_P
((

1972 
LDAP
 *
ld
,

1973 
LDAPVLVInfo
 *
ldvli°p
,

1974 
LDAPC⁄åﬁ
 **
˘æp
 ));

1976 
	$LDAP_F
( )

1977 
ld≠_∑r£_vlv_c⁄åﬁ
 
	`LDAP_P
((

1978 
LDAP
 *
ld
,

1979 
LDAPC⁄åﬁ
 **
˘æs
,

1980 *
èrgë_po•
,

1981 *
li°_cou¡p
,

1982 
bîvÆ
 **
c⁄ãxç
,

1983 *
îrcodï
 ));

1989 #ifde‡
LDAP_GROUP_TRANSACTION


1990 
	$LDAP_F
( )

1991 
ld≠_∑r£_txn_¸óã
 
	`LDAP_P
((

1992 
LDAP
 *
ld
,

1993 
LDAPMesßge
 *
ªs
,

1994 
bîvÆ
 **
cookõ
 ));

1996 
	$LDAP_F
( )

1997 
ld≠_txn_¸óã
 
	`LDAP_P
((

1998 
LDAP
 *
ld
,

1999 
LDAPC⁄åﬁ
 **
s˘æs
,

2000 
LDAPC⁄åﬁ
 **
c˘æs
,

2001 *
msgidp
 ));

2003 
	$LDAP_F
( )

2004 
ld≠_txn_¸óã_s
 
	`LDAP_P
((

2005 
LDAP
 *
ld
,

2006 
bîvÆ
 **
cookõ
,

2007 
LDAPC⁄åﬁ
 **
s˘æs
,

2008 
LDAPC⁄åﬁ
 **
c˘æs
 ));

2010 
	$LDAP_F
( )

2011 
ld≠_txn_íd
 
	`LDAP_P
((

2012 
LDAP
 *
ld
,

2013 
bîvÆ
 *
cookõ
,

2014 
commô
,

2015 
LDAPC⁄åﬁ
 **
s˘æs
,

2016 
LDAPC⁄åﬁ
 **
c˘æs
,

2017 *
msgidp
 ));

2019 
	$LDAP_F
( )

2020 
ld≠_txn_íd_s
 
	`LDAP_P
((

2021 
LDAP
 *
ld
,

2022 
bîvÆ
 *
cookõ
,

2023 
commô
,

2024 
LDAPC⁄åﬁ
 **
s˘æs
,

2025 
LDAPC⁄åﬁ
 **
c˘æs
 ));

2032 
	#LDAP_API_FEATURE_WHOAMI
 1000

	)

2034 
	$LDAP_F
( )

2035 
ld≠_∑r£_whﬂmi
 
	`LDAP_P
((

2036 
LDAP
 *
ld
,

2037 
LDAPMesßge
 *
ªs
,

2038 
bîvÆ
 **
authzid
 ));

2040 
	$LDAP_F
( )

2041 
ld≠_whﬂmi
 
	`LDAP_P
(–
LDAP
 *
ld
,

2042 
LDAPC⁄åﬁ
 **
s˘æs
,

2043 
LDAPC⁄åﬁ
 **
c˘æs
,

2044 *
msgidp
 ));

2046 
	$LDAP_F
( )

2047 
ld≠_whﬂmi_s
 
	`LDAP_P
((

2048 
LDAP
 *
ld
,

2049 
bîvÆ
 **
authzid
,

2050 
LDAPC⁄åﬁ
 **
s˘æs
,

2051 
LDAPC⁄åﬁ
 **
c˘æs
 ));

2057 
	#LDAP_API_FEATURE_PASSWD_MODIFY
 1000

	)

2059 
	$LDAP_F
( )

2060 
ld≠_∑r£_∑sswd
 
	`LDAP_P
((

2061 
LDAP
 *
ld
,

2062 
LDAPMesßge
 *
ªs
,

2063 
bîvÆ
 *
√w∑sswd
 ));

2065 
	$LDAP_F
( )

2066 
ld≠_∑sswd
 
	`LDAP_P
(–
LDAP
 *
ld
,

2067 
bîvÆ
 *
u£r
,

2068 
bîvÆ
 *
ﬁdpw
,

2069 
bîvÆ
 *
√wpw
,

2070 
LDAPC⁄åﬁ
 **
s˘æs
,

2071 
LDAPC⁄åﬁ
 **
c˘æs
,

2072 *
msgidp
 ));

2074 
	$LDAP_F
( )

2075 
ld≠_∑sswd_s
 
	`LDAP_P
((

2076 
LDAP
 *
ld
,

2077 
bîvÆ
 *
u£r
,

2078 
bîvÆ
 *
ﬁdpw
,

2079 
bîvÆ
 *
√wpw
,

2080 
bîvÆ
 *
√w∑sswd
,

2081 
LDAPC⁄åﬁ
 **
s˘æs
,

2082 
LDAPC⁄åﬁ
 **
c˘æs
 ));

2084 #ifde‡
LDAP_CONTROL_PASSWORDPOLICYREQUEST


2089 
	#LDAP_API_FEATURE_PASSWORD_POLICY
 1000

	)

2091 
	e∑s•ﬁicyîr‹_íum
 {

2092 
PP_∑ssw‹dExpúed
 = 0,

2093 
PP_accou¡Locked
 = 1,

2094 
PP_ch™geA·îRe£t
 = 2,

2095 
PP_∑ssw‹dModNŸAŒowed
 = 3,

2096 
PP_mu°SuµlyOldPassw‹d
 = 4,

2097 
PP_ösufficõ¡Passw‹dQuÆôy
 = 5,

2098 
PP_∑ssw‹dTooSh‹t
 = 6,

2099 
PP_∑ssw‹dTooYoung
 = 7,

2100 
PP_∑ssw‹dInHi°‹y
 = 8,

2101 
PP_noEº‹
 = 65535

2102 } 
	tLDAPPassw‹dPﬁicyEº‹
;

2104 
	$LDAP_F
( )

2105 
ld≠_¸óã_∑ssw‹dpﬁicy_c⁄åﬁ
 
	`LDAP_P
((

2106 
LDAP
 *
ld
,

2107 
LDAPC⁄åﬁ
 **
˘æp
 ));

2109 
	$LDAP_F
( )

2110 
ld≠_∑r£_∑ssw‹dpﬁicy_c⁄åﬁ
 
	`LDAP_P
((

2111 
LDAP
 *
ld
,

2112 
LDAPC⁄åﬁ
 *
˘æ
,

2113 *
expúï
,

2114 *
gø˚p
,

2115 
LDAPPassw‹dPﬁicyEº‹
 *
îr‹p
 ));

2117 
	$LDAP_F
( const * )

2118 
ld≠_∑ssw‹dpﬁicy_îr2txt
 
	`LDAP_P
(–
LDAPPassw‹dPﬁicyEº‹
 ));

2121 
LDAP_END_DECL


	@/usr/include/malloc.h

20 #i‚de‡
_MALLOC_H


21 
	#_MALLOC_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°ddef.h
>

25 
	#__mÆloc_±r_t
 *

	)

28 
	#__mÆloc_size_t
 
size_t


	)

29 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

31 #ifde‡
__GNUC__


33 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

36 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

40 
	#__MALLOC_P
(
¨gs
Ë
	)
args

41 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

46 
__BEGIN_DECLS


49 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

52 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

53 
__©åibuã_mÆloc__
 
__wur
;

57 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

58 
__©åibuã_mÆloc__
 
__©åibuã_w¨n_unu£d_ªsu…__
;

61 
‰ì
 
__MALLOC_P
 ((*
__±r
));

64 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

67 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

68 
__©åibuã_mÆloc__
 
__wur
;

71 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

72 
__©åibuã_mÆloc__
 
__wur
;

76 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

84 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

85 
__©åibuã_mÆloc__
;

89 
	smÆlöfo
 {

90 
	m¨ía
;

91 
	m‹dblks
;

92 
	msmblks
;

93 
	mhblks
;

94 
	mhblkhd
;

95 
	musmblks
;

96 
	mfsmblks
;

97 
	mu‹dblks
;

98 
	mf‹dblks
;

99 
	mkìpco°
;

103 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

106 #i‚de‡
M_MXFAST


107 
	#M_MXFAST
 1

	)

109 #i‚de‡
M_NLBLKS


110 
	#M_NLBLKS
 2

	)

112 #i‚de‡
M_GRAIN


113 
	#M_GRAIN
 3

	)

115 #i‚de‡
M_KEEP


116 
	#M_KEEP
 4

	)

120 
	#M_TRIM_THRESHOLD
 -1

	)

121 
	#M_TOP_PAD
 -2

	)

122 
	#M_MMAP_THRESHOLD
 -3

	)

123 
	#M_MMAP_MAX
 -4

	)

124 
	#M_CHECK_ACTION
 -5

	)

125 
	#M_PERTURB
 -6

	)

126 
	#M_ARENA_TEST
 -7

	)

127 
	#M_ARENA_MAX
 -8

	)

130 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

134 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

138 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

141 
mÆloc_°©s
 
__MALLOC_P
 (());

144 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

148 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

153 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

155 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

156 
__c⁄°
 
__mÆloc_±r_t
));

157 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

158 
__c⁄°
 
__mÆloc_±r_t
));

159 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

160 
__c⁄°
 
__mÆloc_±r_t
));

161 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

162 
size_t
 
__size
,

163 
__c⁄°
 
__mÆloc_±r_t
));

164 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

167 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

170 
__END_DECLS


	@/usr/include/memory.h

23 #i‚def 
_MEMORY_H


24 
	#_MEMORY_H
 1

	)

26 
	~<„©uªs.h
>

29 #i‚def 
_STRING_H


30 
	~<°rög.h
>

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#NETDB_INTERNAL
 -1

	)

66 
	#NETDB_SUCCESS
 0

	)

67 
	#HOST_NOT_FOUND
 1

	)

68 
	#TRY_AGAIN
 2

	)

70 
	#NO_RECOVERY
 3

	)

72 
	#NO_DATA
 4

	)

74 
	#NO_ADDRESS
 
NO_DATA


	)

76 #ifde‡
__USE_XOPEN2K


78 
	#IPPORT_RESERVED
 1024

	)

81 #ifde‡
__USE_GNU


83 
	#SCOPE_DELIMITER
 '%'

	)

88 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

91 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

96 
	sho°ít


98 *
h_«me
;

99 **
h_Æü£s
;

100 
h_addπy≥
;

101 
h_Àngth
;

102 **
h_addr_li°
;

103 
	#h_addr
 
h_addr_li°
[0]

	)

111 
	`£tho°ít
 (
__°ay_›í
);

117 
	`ídho°ít
 ();

124 
ho°ít
 *
	`gëho°ít
 ();

131 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

132 
__ty≥
);

138 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

140 #ifde‡
__USE_MISC


149 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

161 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

163 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

164 *
__ª°ri˘
 
__h_î∫›
);

166 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

167 
__ty≥
,

168 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

192 
	`£äëít
 (
__°ay_›í
);

198 
	`íd√ã¡
 ();

205 
√ã¡
 *
	`gë√ã¡
 ();

212 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

218 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

220 #ifdef 
__USE_MISC


231 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

232 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

233 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

234 *
__ª°ri˘
 
__h_î∫›
);

236 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

237 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

251 
	s£rvít


253 *
s_«me
;

254 **
s_Æü£s
;

255 
s_p‹t
;

256 *
s_¥Ÿo
;

264 
	`£t£rvít
 (
__°ay_›í
);

270 
	`íd£rvít
 ();

277 
£rvít
 *
	`gë£rvít
 ();

284 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

285 
__c⁄°
 *
__¥Ÿo
);

292 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

295 #ifdef 
__USE_MISC


303 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

304 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

305 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

307 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

308 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

309 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

310 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

311 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

313 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

321 
	s¥Ÿ€¡


323 *
p_«me
;

324 **
p_Æü£s
;

325 
p_¥Ÿo
;

333 
	`£çrŸ€¡
 (
__°ay_›í
);

339 
	`íd¥Ÿ€¡
 ();

346 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

352 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

358 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

361 #ifdef 
__USE_MISC


369 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

370 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

371 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

373 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

374 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

390 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

398 
	`íd√tgª¡
 ();

407 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

408 **
__ª°ri˘
 
__u£Ω
,

409 **
__ª°ri˘
 
__domaöp
);

418 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

419 
__c⁄°
 *
__u£r
, __c⁄° *
domaö
);

427 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

428 **
__ª°ri˘
 
__u£Ω
,

429 **
__ª°ri˘
 
__domaöp
,

430 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

434 #ifde‡
__USE_BSD


446 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

447 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

448 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

449 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

458 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

459 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

460 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

461 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

462 
ß_Ámûy_t
 
__af
);

474 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

475 
__c⁄°
 *
__ª°ri˘
 
__«me
,

476 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

477 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

486 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

487 
__c⁄°
 *
__ª°ri˘
 
__«me
,

488 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

489 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

490 
ß_Ámûy_t
 
__af
);

500 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

501 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

510 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

511 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

512 
ß_Ámûy_t
 
__af
);

522 
	`ºesvp‹t
 (*
__Æp‹t
);

531 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

536 #ifdef 
__USE_POSIX


538 
	saddröfo


540 
ai_Êags
;

541 
ai_Ámûy
;

542 
ai_sockty≥
;

543 
ai_¥Ÿocﬁ
;

544 
sockÀn_t
 
ai_addæí
;

545 
sockaddr
 *
ai_addr
;

546 *
ai_ˇn⁄«me
;

547 
addröfo
 *
ai_√xt
;

550 #ifde‡
__USE_GNU


552 
	sgaicb


554 c⁄° *
¨_«me
;

555 c⁄° *
¨_£rvi˚
;

556 c⁄° 
addröfo
 *
¨_ªque°
;

557 
addröfo
 *
¨_ªsu…
;

559 
__ªtu∫
;

560 
__unu£d
[5];

564 
	#GAI_WAIT
 0

	)

565 
	#GAI_NOWAIT
 1

	)

569 
	#AI_PASSIVE
 0x0001

	)

570 
	#AI_CANONNAME
 0x0002

	)

571 
	#AI_NUMERICHOST
 0x0004

	)

572 
	#AI_V4MAPPED
 0x0008

	)

573 
	#AI_ALL
 0x0010

	)

574 
	#AI_ADDRCONFIG
 0x0020

	)

576 #ifde‡
__USE_GNU


577 
	#AI_IDN
 0x0040

	)

580 
	#AI_CANONIDN
 0x0080

	)

581 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

583 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

586 
	#AI_NUMERICSERV
 0x0400

	)

589 
	#EAI_BADFLAGS
 -1

	)

590 
	#EAI_NONAME
 -2

	)

591 
	#EAI_AGAIN
 -3

	)

592 
	#EAI_FAIL
 -4

	)

593 
	#EAI_NODATA
 -5

	)

594 
	#EAI_FAMILY
 -6

	)

595 
	#EAI_SOCKTYPE
 -7

	)

596 
	#EAI_SERVICE
 -8

	)

597 
	#EAI_ADDRFAMILY
 -9

	)

598 
	#EAI_MEMORY
 -10

	)

599 
	#EAI_SYSTEM
 -11

	)

600 
	#EAI_OVERFLOW
 -12

	)

601 #ifde‡
__USE_GNU


602 
	#EAI_INPROGRESS
 -100

	)

603 
	#EAI_CANCELED
 -101

	)

604 
	#EAI_NOTCANCELED
 -102

	)

605 
	#EAI_ALLDONE
 -103

	)

606 
	#EAI_INTR
 -104

	)

607 
	#EAI_IDN_ENCODE
 -105

	)

610 
	#NI_MAXHOST
 1025

	)

611 
	#NI_MAXSERV
 32

	)

613 
	#NI_NUMERICHOST
 1

	)

614 
	#NI_NUMERICSERV
 2

	)

615 
	#NI_NOFQDN
 4

	)

616 
	#NI_NAMEREQD
 8

	)

617 
	#NI_DGRAM
 16

	)

618 #ifde‡
__USE_GNU


619 
	#NI_IDN
 32

	)

620 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

622 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

631 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

632 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

633 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

634 
addröfo
 **
__ª°ri˘
 
__∑i
);

637 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

640 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

646 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

647 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

648 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

649 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

652 #ifde‡
__USE_GNU


661 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

662 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

672 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

673 
__c⁄°
 
time•ec
 *
__timeout
);

676 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

679 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

682 
__END_DECLS


	@/usr/include/openssl/asn1.h

59 #i‚de‡
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/°ack.h
>

68 
	~<›ís¶/ß„°ack.h
>

70 
	~<›ís¶/symhacks.h
>

72 
	~<›ís¶/os¶_typ.h
>

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

77 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


78 #unde‡
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifde‡ 
__˝lu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_NEG
 0x100

	)

101 
	#V_ASN1_UNDEF
 -1

	)

102 
	#V_ASN1_EOC
 0

	)

103 
	#V_ASN1_BOOLEAN
 1

	)

104 
	#V_ASN1_INTEGER
 2

	)

105 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

106 
	#V_ASN1_BIT_STRING
 3

	)

107 
	#V_ASN1_OCTET_STRING
 4

	)

108 
	#V_ASN1_NULL
 5

	)

109 
	#V_ASN1_OBJECT
 6

	)

110 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

111 
	#V_ASN1_EXTERNAL
 8

	)

112 
	#V_ASN1_REAL
 9

	)

113 
	#V_ASN1_ENUMERATED
 10

	)

114 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

115 
	#V_ASN1_UTF8STRING
 12

	)

116 
	#V_ASN1_SEQUENCE
 16

	)

117 
	#V_ASN1_SET
 17

	)

118 
	#V_ASN1_NUMERICSTRING
 18

	)

119 
	#V_ASN1_PRINTABLESTRING
 19

	)

120 
	#V_ASN1_T61STRING
 20

	)

121 
	#V_ASN1_TELETEXSTRING
 20

	)

122 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

123 
	#V_ASN1_IA5STRING
 22

	)

124 
	#V_ASN1_UTCTIME
 23

	)

125 
	#V_ASN1_GENERALIZEDTIME
 24

	)

126 
	#V_ASN1_GRAPHICSTRING
 25

	)

127 
	#V_ASN1_ISO64STRING
 26

	)

128 
	#V_ASN1_VISIBLESTRING
 26

	)

129 
	#V_ASN1_GENERALSTRING
 27

	)

130 
	#V_ASN1_UNIVERSALSTRING
 28

	)

131 
	#V_ASN1_BMPSTRING
 30

	)

134 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

135 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

136 
	#B_ASN1_T61STRING
 0x0004

	)

137 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

138 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

139 
	#B_ASN1_IA5STRING
 0x0010

	)

140 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

141 
	#B_ASN1_ISO64STRING
 0x0040

	)

142 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

143 
	#B_ASN1_GENERALSTRING
 0x0080

	)

144 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

145 
	#B_ASN1_OCTET_STRING
 0x0200

	)

146 
	#B_ASN1_BIT_STRING
 0x0400

	)

147 
	#B_ASN1_BMPSTRING
 0x0800

	)

148 
	#B_ASN1_UNKNOWN
 0x1000

	)

149 
	#B_ASN1_UTF8STRING
 0x2000

	)

150 
	#B_ASN1_UTCTIME
 0x4000

	)

151 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

152 
	#B_ASN1_SEQUENCE
 0x10000

	)

155 
	#MBSTRING_FLAG
 0x1000

	)

156 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

157 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

158 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

159 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

161 
X509_Æg‹_°
;

163 
	#DECLARE_ASN1_SET_OF
(
ty≥
Ë

	)

164 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
Ë

	)

170 
	sa¢1_˘x_°


172 *
p
;

173 
eos
;

174 
îr‹
;

175 
öf
;

176 
èg
;

177 
x˛ass
;

178 
¶í
;

179 *
max
;

180 *
q
;

181 **
µ
;

182 
löe
;

183 } 
	tASN1_CTX
;

185 
	sa¢1_c⁄°_˘x_°


187 c⁄° *
p
;

188 
eos
;

189 
îr‹
;

190 
öf
;

191 
èg
;

192 
x˛ass
;

193 
¶í
;

194 c⁄° *
max
;

195 c⁄° *
q
;

196 c⁄° **
µ
;

197 
löe
;

198 } 
	tASN1_c⁄°_CTX
;

202 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

203 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

204 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

205 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

206 
	sa¢1_obje˘_°


208 c⁄° *
¢
,*
 
;

209 
nid
;

210 
Àngth
;

211 *
d©a
;

212 
Êags
;

213 } 
	tASN1_OBJECT
;

215 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

220 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

222 
	sa¢1_°rög_°


224 
Àngth
;

225 
ty≥
;

226 *
d©a
;

231 
Êags
;

232 } 
	tASN1_STRING
;

239 
	sASN1_ENCODING_°


241 *
íc
;

242 
Àn
;

243 
modifõd
;

244 } 
	tASN1_ENCODING
;

247 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

249 
	#STABLE_FLAGS_MALLOC
 0x01

	)

250 
	#STABLE_NO_MASK
 0x02

	)

251 
	#DIRSTRING_TYPE
 \

252 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

253 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

255 
	sa¢1_°rög_èbÀ_°
 {

256 
nid
;

257 
mösize
;

258 
maxsize
;

259 
mask
;

260 
Êags
;

261 } 
	tASN1_STRING_TABLE
;

263 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

267 
	#ub_«me
 32768

	)

268 
	#ub_comm⁄_«me
 64

	)

269 
	#ub_loˇlôy_«me
 128

	)

270 
	#ub_°©e_«me
 128

	)

271 
	#ub_‹g™iz©i⁄_«me
 64

	)

272 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

273 
	#ub_tôÀ
 64

	)

274 
	#ub_emaû_addªss
 128

	)

279 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

280 
ASN1_ITEM_°
 
	tASN1_ITEM
;

281 
ASN1_TLC_°
 
	tASN1_TLC
;

283 
ASN1_VALUE_°
 
	tASN1_VALUE
;

287 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

289 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

290 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

292 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

293 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

294 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

296 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

297 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

298 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

300 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

301 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

302 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

303 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

305 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

306 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

307 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

308 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

310 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

311 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

313 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

314 
«me
 *«me##
	`_√w
(); \

315 
«me
##
	`_‰ì
“amê*
a
);

	)

317 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

318 
ty≥
 *
«me
##
	`_√w
(); \

319 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

321 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

322 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

323 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

325 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

326 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

327 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

329 
TYPEDEF_D2I2D_OF
();

366 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


369 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

372 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

375 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

377 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

379 
	#DECLARE_ASN1_ITEM
(
«me
) \

380 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

389 c⁄° 
	tASN1_ITEM
 * 
	tASN1_ITEM_EXP
();

392 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

395 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

397 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

399 
	#DECLARE_ASN1_ITEM
(
«me
) \

400 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

411 
	#ASN1_STRFLGS_ESC_2253
 1

	)

412 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

413 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

421 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

427 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

429 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

431 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

441 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

448 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

451 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

461 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

462 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

469 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

476 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

477 
ASN1_STRFLGS_ESC_CTRL
 | \

478 
ASN1_STRFLGS_ESC_MSB
 | \

479 
ASN1_STRFLGS_UTF8_CONVERT
 | \

480 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

481 
ASN1_STRFLGS_DUMP_DER
)

	)

483 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

484 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

486 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

488 
	sa¢1_ty≥_°


490 
ty≥
;

492 *
±r
;

493 
ASN1_BOOLEAN
 
boﬁón
;

494 
ASN1_STRING
 * 
a¢1_°rög
;

495 
ASN1_OBJECT
 * 
obje˘
;

496 
ASN1_INTEGER
 * 
öãgî
;

497 
ASN1_ENUMERATED
 * 
íumî©ed
;

498 
ASN1_BIT_STRING
 * 
bô_°rög
;

499 
ASN1_OCTET_STRING
 * 
o˘ë_°rög
;

500 
ASN1_PRINTABLESTRING
 * 
¥öèbÀ°rög
;

501 
ASN1_T61STRING
 * 
t61°rög
;

502 
ASN1_IA5STRING
 * 
ü5°rög
;

503 
ASN1_GENERALSTRING
 * 
gíîÆ°rög
;

504 
ASN1_BMPSTRING
 * 
bmp°rög
;

505 
ASN1_UNIVERSALSTRING
 * 
univîßl°rög
;

506 
ASN1_UTCTIME
 * 
ut˘ime
;

507 
ASN1_GENERALIZEDTIME
 * 
gíîÆizedtime
;

508 
ASN1_VISIBLESTRING
 * 
visibÀ°rög
;

509 
ASN1_UTF8STRING
 * 
utf8°rög
;

512 
ASN1_STRING
 * 
£t
;

513 
ASN1_STRING
 * 
£quí˚
;

514 } 
vÆue
;

515 } 
	tASN1_TYPE
;

517 
DECLARE_STACK_OF
(
ASN1_TYPE
)

518 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

520 
	sa¢1_mëhod_°


522 
i2d_of_void
 *
i2d
;

523 
d2i_of_void
 *
d2i
;

524 *(*
¸óã
)();

525 (*
de°roy
)(*);

526 } 
	tASN1_METHOD
;

529 
	sa¢1_hódî_°


531 
ASN1_OCTET_STRING
 *
hódî
;

532 *
d©a
;

533 
ASN1_METHOD
 *
mëh
;

534 } 
	tASN1_HEADER
;

537 
	sBIT_STRING_BITNAME_°
 {

538 
bônum
;

539 c⁄° *
 ame
;

540 c⁄° *
¢ame
;

541 } 
	tBIT_STRING_BITNAME
;

544 
	#M_ASN1_STRING_Àngth
(
x
Ë((x)->
Àngth
)

	)

545 
	#M_ASN1_STRING_Àngth_£t
(
x
, 
n
Ë((x)->
Àngth
 = (n))

	)

546 
	#M_ASN1_STRING_ty≥
(
x
Ë((x)->
ty≥
)

	)

547 
	#M_ASN1_STRING_d©a
(
x
Ë((x)->
d©a
)

	)

550 
	#M_ASN1_BIT_STRING_√w
(Ë(
ASN1_BIT_STRING
 *)\

551 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

552 
	#M_ASN1_BIT_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

553 
	#M_ASN1_BIT_STRING_dup
(
a
Ë(
ASN1_BIT_STRING
 *)\

554 
	`ASN1_STRING_dup
((
ASN1_STRING
 *)
a
)

	)

555 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

556 (
ASN1_STRING
 *)
a
,(ASN1_STRING *)
b
)

	)

557 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

559 
	#M_ASN1_INTEGER_√w
(Ë(
ASN1_INTEGER
 *)\

560 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

561 
	#M_ASN1_INTEGER_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

562 
	#M_ASN1_INTEGER_dup
(
a
Ë(
ASN1_INTEGER
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *Ô)

	)

563 
	#M_ASN1_INTEGER_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

564 (
ASN1_STRING
 *)
a
,(ASN1_STRING *)
b
)

	)

566 
	#M_ASN1_ENUMERATED_√w
(Ë(
ASN1_ENUMERATED
 *)\

567 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

568 
	#M_ASN1_ENUMERATED_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

569 
	#M_ASN1_ENUMERATED_dup
(
a
Ë(
ASN1_ENUMERATED
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *Ô)

	)

570 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

571 (
ASN1_STRING
 *)
a
,(ASN1_STRING *)
b
)

	)

573 
	#M_ASN1_OCTET_STRING_√w
(Ë(
ASN1_OCTET_STRING
 *)\

574 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

575 
	#M_ASN1_OCTET_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

576 
	#M_ASN1_OCTET_STRING_dup
(
a
Ë(
ASN1_OCTET_STRING
 *)\

577 
	`ASN1_STRING_dup
((
ASN1_STRING
 *)
a
)

	)

578 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

579 (
ASN1_STRING
 *)
a
,(ASN1_STRING *)
b
)

	)

580 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

581 
	#M_ASN1_OCTET_STRING_¥öt
(
a
,
b
Ë
	`ASN1_STRING_¥öt
◊,(
ASN1_STRING
 *)b)

	)

582 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

583 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

584 
V_ASN1_UNIVERSAL
)

	)

586 
	#B_ASN1_TIME
 \

587 
B_ASN1_UTCTIME
 | \

588 
B_ASN1_GENERALIZEDTIME


	)

590 
	#B_ASN1_PRINTABLE
 \

591 
B_ASN1_PRINTABLESTRING
| \

592 
B_ASN1_T61STRING
| \

593 
B_ASN1_IA5STRING
| \

594 
B_ASN1_BIT_STRING
| \

595 
B_ASN1_UNIVERSALSTRING
|\

596 
B_ASN1_BMPSTRING
|\

597 
B_ASN1_UTF8STRING
|\

598 
B_ASN1_SEQUENCE
|\

599 
B_ASN1_UNKNOWN


	)

601 
	#B_ASN1_DIRECTORYSTRING
 \

602 
B_ASN1_PRINTABLESTRING
| \

603 
B_ASN1_TELETEXSTRING
|\

604 
B_ASN1_BMPSTRING
|\

605 
B_ASN1_UNIVERSALSTRING
|\

606 
B_ASN1_UTF8STRING


	)

608 
	#B_ASN1_DISPLAYTEXT
 \

609 
B_ASN1_IA5STRING
| \

610 
B_ASN1_VISIBLESTRING
| \

611 
B_ASN1_BMPSTRING
|\

612 
B_ASN1_UTF8STRING


	)

614 
	#M_ASN1_PRINTABLE_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

615 
	#M_ASN1_PRINTABLE_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

616 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

617 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

618 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

619 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

620 
B_ASN1_PRINTABLE
)

	)

622 
	#M_DIRECTORYSTRING_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

623 
	#M_DIRECTORYSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

624 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

625 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

626 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

627 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

628 
B_ASN1_DIRECTORYSTRING
)

	)

630 
	#M_DISPLAYTEXT_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

631 
	#M_DISPLAYTEXT_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

632 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

633 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

634 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

635 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

636 
B_ASN1_DISPLAYTEXT
)

	)

638 
	#M_ASN1_PRINTABLESTRING_√w
(Ë(
ASN1_PRINTABLESTRING
 *)\

639 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

640 
	#M_ASN1_PRINTABLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

641 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

642 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

643 
V_ASN1_UNIVERSAL
)

	)

644 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

645 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

646 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

648 
	#M_ASN1_T61STRING_√w
(Ë(
ASN1_T61STRING
 *)\

649 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

650 
	#M_ASN1_T61STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

651 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

652 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

653 
V_ASN1_UNIVERSAL
)

	)

654 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

655 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byãs
\

656 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

658 
	#M_ASN1_IA5STRING_√w
(Ë(
ASN1_IA5STRING
 *)\

659 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

660 
	#M_ASN1_IA5STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

661 
	#M_ASN1_IA5STRING_dup
(
a
) \

662 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *)
a
)

	)

663 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

664 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

665 
V_ASN1_UNIVERSAL
)

	)

666 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

667 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

668 
B_ASN1_IA5STRING
)

	)

670 
	#M_ASN1_UTCTIME_√w
(Ë(
ASN1_UTCTIME
 *)\

671 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

672 
	#M_ASN1_UTCTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

673 
	#M_ASN1_UTCTIME_dup
(
a
Ë(
ASN1_UTCTIME
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *Ô)

	)

675 
	#M_ASN1_GENERALIZEDTIME_√w
(Ë(
ASN1_GENERALIZEDTIME
 *)\

676 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

677 
	#M_ASN1_GENERALIZEDTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

678 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
Ë(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

679 (
ASN1_STRING
 *)
a
)

	)

681 
	#M_ASN1_TIME_√w
(Ë(
ASN1_TIME
 *)\

682 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

683 
	#M_ASN1_TIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

684 
	#M_ASN1_TIME_dup
(
a
Ë(
ASN1_TIME
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *Ô)

	)

686 
	#M_ASN1_GENERALSTRING_√w
(Ë(
ASN1_GENERALSTRING
 *)\

687 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

688 
	#M_ASN1_GENERALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

689 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

690 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

691 
V_ASN1_UNIVERSAL
)

	)

692 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

693 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

694 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

696 
	#M_ASN1_UNIVERSALSTRING_√w
(Ë(
ASN1_UNIVERSALSTRING
 *)\

697 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

698 
	#M_ASN1_UNIVERSALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

699 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

700 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

701 
V_ASN1_UNIVERSAL
)

	)

702 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

703 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

704 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

706 
	#M_ASN1_BMPSTRING_√w
(Ë(
ASN1_BMPSTRING
 *)\

707 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

708 
	#M_ASN1_BMPSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

709 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

710 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

711 
V_ASN1_UNIVERSAL
)

	)

712 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

713 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byãs
\

714 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

716 
	#M_ASN1_VISIBLESTRING_√w
(Ë(
ASN1_VISIBLESTRING
 *)\

717 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

718 
	#M_ASN1_VISIBLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

719 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

720 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

721 
V_ASN1_UNIVERSAL
)

	)

722 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

723 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

724 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

726 
	#M_ASN1_UTF8STRING_√w
(Ë(
ASN1_UTF8STRING
 *)\

727 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

728 
	#M_ASN1_UTF8STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

729 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

730 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

731 
V_ASN1_UNIVERSAL
)

	)

732 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

733 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byãs
\

734 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

737 
	#IS_SEQUENCE
 0

	)

738 
	#IS_SET
 1

	)

740 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

742 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

743 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

745 
ASN1_OBJECT
 * 
ASN1_OBJECT_√w
();

746 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

747 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
,**
µ
);

748 
ASN1_OBJECT
 * 
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

749 
Àngth
);

750 
ASN1_OBJECT
 * 
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

751 
Àngth
);

753 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

755 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

756 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

758 
ASN1_STRING
 * 
ASN1_STRING_√w
();

759 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

760 
ASN1_STRING
 * 
ASN1_STRING_dup
(ASN1_STRING *
a
);

761 
ASN1_STRING
 * 
ASN1_STRING_ty≥_√w
(
ty≥
 );

762 
ASN1_STRING_cmp
(
ASN1_STRING
 *
a
, ASN1_STRING *
b
);

765 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

766 
ASN1_STRING_Àngth
(
ASN1_STRING
 *
x
);

767 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

768 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

769 * 
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

771 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

772 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
,**
µ
);

773 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,c⁄° **
µ
,

774 
Àngth
);

775 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
,

776 
Àngth
 );

777 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

778 
ASN1_BIT_STRING_gë_bô
(
ASN1_BIT_STRING
 *
a
, 
n
);

780 #i‚de‡
OPENSSL_NO_BIO


781 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

782 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

784 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

785 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vÆue
,

786 
BIT_STRING_BITNAME
 *
tbl
);

788 
i2d_ASN1_BOOLEAN
(
a
,**
µ
);

789 
d2i_ASN1_BOOLEAN
(*
a
,c⁄° **
µ
,
Àngth
);

791 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

792 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
,**
µ
);

793 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

794 
Àngth
);

795 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

796 
Àngth
);

797 
ASN1_INTEGER
 * 
ASN1_INTEGER_dup
(ASN1_INTEGER *
x
);

798 
ASN1_INTEGER_cmp
(
ASN1_INTEGER
 *
x
, ASN1_INTEGER *
y
);

800 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

802 
ASN1_UTCTIME_check
(
ASN1_UTCTIME
 *
a
);

803 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
,
time_t
 
t
);

804 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

805 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

807 
time_t
 
ASN1_UTCTIME_gë
(c⁄° 
ASN1_UTCTIME
 *
s
);

810 
ASN1_GENERALIZEDTIME_check
(
ASN1_GENERALIZEDTIME
 *
a
);

811 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,
time_t
 
t
);

812 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

814 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

815 
ASN1_OCTET_STRING
 * 
ASN1_OCTET_STRING_dup
(ASN1_OCTET_STRING *
a
);

816 
ASN1_OCTET_STRING_cmp
(
ASN1_OCTET_STRING
 *
a
, ASN1_OCTET_STRING *
b
);

817 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

819 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

820 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

821 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

822 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

823 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

825 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

826 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

828 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

830 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

831 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

832 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

833 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

834 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

835 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

836 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

837 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

838 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

840 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

842 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
,
time_t
 
t
);

843 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

844 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME **
out
);

846 
i2d_ASN1_SET
(
STACK
 *
a
, **
µ
,

847 
i2d_of_void
 *
i2d
, 
ex_èg
, 
ex_˛ass
, 
is_£t
);

848 
STACK
 * 
d2i_ASN1_SET
(STACK **
a
, c⁄° **
µ
, 
Àngth
,

849 
d2i_of_void
 *
d2i
, (*
‰ì_func
)(*),

850 
ex_èg
, 
ex_˛ass
);

852 #i‚de‡
OPENSSL_NO_BIO


853 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

854 
a2i_ASN1_INTEGER
(
BIO
 *
bp
,
ASN1_INTEGER
 *
bs
,*
buf
,
size
);

855 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

856 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
,
ASN1_ENUMERATED
 *
bs
,*
buf
,
size
);

857 
i2a_ASN1_OBJECT
(
BIO
 *
bp
,
ASN1_OBJECT
 *
a
);

858 
a2i_ASN1_STRING
(
BIO
 *
bp
,
ASN1_STRING
 *
bs
,*
buf
,
size
);

859 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

861 
i2t_ASN1_OBJECT
(*
buf
,
buf_Àn
,
ASN1_OBJECT
 *
a
);

863 
a2d_ASN1_OBJECT
(*
out
,
ﬁí
, c⁄° *
buf
, 
num
);

864 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
,
Àn
,

865 c⁄° *
¢
, c⁄° *
 
);

867 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

868 
ASN1_INTEGER_gë
(
ASN1_INTEGER
 *
a
);

869 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

870 
BIGNUM
 *
ASN1_INTEGER_to_BN
(
ASN1_INTEGER
 *
ai
,BIGNUM *
bn
);

872 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

873 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

874 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

875 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
,BIGNUM *
bn
);

879 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

881 
i2d_ASN1_byãs
(
ASN1_STRING
 *
a
, **
µ
, 
èg
, 
x˛ass
);

882 
ASN1_STRING
 *
d2i_ASN1_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

883 
Àngth
, 
Pèg
, 
P˛ass
);

884 
ASN1_èg2bô
(
èg
);

886 
ASN1_STRING
 *
d2i_ASN1_ty≥_byãs
(ASN1_STRING **
a
,c⁄° **
µ
,

887 
Àngth
,
ty≥
);

890 
a¢1_Föish
(
ASN1_CTX
 *
c
);

891 
a¢1_c⁄°_Föish
(
ASN1_c⁄°_CTX
 *
c
);

894 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

895 *
p˛ass
, 
omax
);

896 
ASN1_check_öföôe_íd
(**
p
,
Àn
);

897 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
,
Àn
);

898 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

899 
èg
, 
x˛ass
);

900 
ASN1_put_eoc
(**
µ
);

901 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

904 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

905 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

906 ((
ty≥
 *(*)(
	`I2D_OF
—y≥),
	`D2I_OF
—y≥),ty≥ *))
	`›ís¶_fˇ°
(
ASN1_dup
))(
i2d
,
d2i
,
x
)

	)

907 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

908 ((
ty≥
 *(*)(
	`I2D_OF_c⁄°
—y≥),
	`D2I_OF
—y≥),ty≥ *))
	`›ís¶_fˇ°
(
ASN1_dup
))(
i2d
,
d2i
,
x
)

	)

910 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

912 #i‚de‡
OPENSSL_NO_FP_API


913 *
ASN1_d2i_Â
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

914 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

915 ((
ty≥
 *(*)—y≥ *(*)(),
	`D2I_OF
—y≥),
FILE
 *,ty≥ **))
	`›ís¶_fˇ°
(
ASN1_d2i_Â
))(
x√w
,
d2i
,
ö
,
x
)

	)

916 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

917 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
,
FILE
 *
out
,*
x
);

918 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

919 (((*)(
	`I2D_OF
(
ty≥
),
FILE
 *,ty≥ *))
	`›ís¶_fˇ°
(
ASN1_i2d_Â
))(
i2d
,
out
,
x
)

	)

920 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

921 (((*)(
	`I2D_OF_c⁄°
(
ty≥
),
FILE
 *,ty≥ *))
	`›ís¶_fˇ°
(
ASN1_i2d_Â
))(
i2d
,
out
,
x
)

	)

922 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

923 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

926 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

928 #i‚de‡
OPENSSL_NO_BIO


929 *
ASN1_d2i_bio
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

930 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

931 ((
ty≥
 *(*)—y≥ *(*)(),
	`D2I_OF
—y≥),
BIO
 *,ty≥ **))
	`›ís¶_fˇ°
(
ASN1_d2i_bio
))(
x√w
,
d2i
,
ö
,
x
)

	)

932 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

933 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
,
BIO
 *
out
, *
x
);

934 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

935 (((*)(
	`I2D_OF
(
ty≥
),
BIO
 *,ty≥ *))
	`›ís¶_fˇ°
(
ASN1_i2d_bio
))(
i2d
,
out
,
x
)

	)

936 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

937 (((*)(
	`I2D_OF_c⁄°
(
ty≥
),
BIO
 *,c⁄°Åy≥ *))
	`›ís¶_fˇ°
(
ASN1_i2d_bio
))(
i2d
,
out
,
x
)

	)

938 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

939 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
,
ASN1_UTCTIME
 *
a
);

940 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
,
ASN1_GENERALIZEDTIME
 *
a
);

941 
ASN1_TIME_¥öt
(
BIO
 *
Â
,
ASN1_TIME
 *
a
);

942 
ASN1_STRING_¥öt
(
BIO
 *
bp
,
ASN1_STRING
 *
v
);

943 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

944 
ASN1_∑r£
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
);

945 
ASN1_∑r£_dump
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
,
dump
);

947 c⁄° *
ASN1_èg2°r
(
èg
);

950 
i2d_ASN1_HEADER
(
ASN1_HEADER
 *
a
,**
µ
);

951 
ASN1_HEADER
 *
d2i_ASN1_HEADER
(ASN1_HEADER **
a
,c⁄° **
µ
, 
Àngth
);

952 
ASN1_HEADER
 *
ASN1_HEADER_√w
();

953 
ASN1_HEADER_‰ì
(
ASN1_HEADER
 *
a
);

955 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

958 
ASN1_METHOD
 *
X509_a¢1_mëh
();

959 
ASN1_METHOD
 *
RSAPriv©eKey_a¢1_mëh
();

960 
ASN1_METHOD
 *
ASN1_IA5STRING_a¢1_mëh
();

961 
ASN1_METHOD
 *
ASN1_BIT_STRING_a¢1_mëh
();

963 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
,

964 *
d©a
, 
Àn
);

965 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
,

966 *
d©a
, 
max_Àn
);

967 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

968 *
d©a
, 
Àn
);

969 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
,*
num
,

970 *
d©a
, 
max_Àn
);

972 
STACK
 *
ASN1_£q_u≈ack
(c⁄° *
buf
, 
Àn
,

973 
d2i_of_void
 *
d2i
, (*
‰ì_func
)(*));

974 *
ASN1_£q_∑ck
(
STACK
 *
ß„s
, 
i2d_of_void
 *
i2d
,

975 **
buf
, *
Àn
 );

976 *
ASN1_u≈ack_°rög
(
ASN1_STRING
 *
o˘
, 
d2i_of_void
 *
d2i
);

977 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

978 
ASN1_STRING
 *
ASN1_∑ck_°rög
(*
obj
, 
i2d_of_void
 *
i2d
,

979 
ASN1_OCTET_STRING
 **
o˘
);

980 
	#ASN1_∑ck_°rög_of
(
ty≥
,
obj
,
i2d
,
o˘
) \

981 ((
ASN1_STRING
 *(*)(
ty≥
 *,
	`I2D_OF
—y≥),
ASN1_OCTET_STRING
 **))
	`›ís¶_fˇ°
(
ASN1_∑ck_°rög
))(
obj
,
i2d
,
o˘
)

	)

982 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
, 
ASN1_OCTET_STRING
 **
o˘
);

984 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

985 
ASN1_STRING_£t_deÁu…_mask_asc
(*
p
);

986 
ASN1_STRING_gë_deÁu…_mask
();

987 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

988 
öf‹m
, 
mask
);

989 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

990 
öf‹m
, 
mask
,

991 
mösize
, 
maxsize
);

993 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

994 c⁄° *
ö
, 
öÀn
, 
öf‹m
, 
nid
);

995 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

996 
ASN1_STRING_TABLE_add
(, , , , );

997 
ASN1_STRING_TABLE_˛ónup
();

1002 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1003 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1004 
ASN1_VALUE
 * 
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
, 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1005 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1006 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1008 
ASN1_add_oid_moduÀ
();

1010 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(*
°r
, 
CONF
 *
nc⁄f
);

1011 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(*
°r
, 
X509V3_CTX
 *
˙f
);

1017 
ERR_lﬂd_ASN1_°rögs
();

1022 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1023 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1024 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1025 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1026 
	#ASN1_F_APPEND_EXP
 176

	)

1027 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1028 
	#ASN1_F_ASN1_CB
 177

	)

1029 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1030 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1031 
	#ASN1_F_ASN1_COLLECT
 106

	)

1032 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1033 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1034 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1035 
	#ASN1_F_ASN1_DIGEST
 184

	)

1036 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1037 
	#ASN1_F_ASN1_DUP
 111

	)

1038 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1039 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1040 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1041 
	#ASN1_F_ASN1_FIND_END
 190

	)

1042 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1043 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1044 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1045 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1046 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1047 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1048 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1049 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1050 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1051 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1052 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1053 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1054 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1055 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1056 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1057 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1058 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1059 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1060 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1061 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1062 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1063 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1064 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1065 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1066 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1067 
	#ASN1_F_ASN1_SIGN
 128

	)

1068 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1069 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1070 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1071 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1072 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1073 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1074 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1075 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1076 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1077 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1078 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1079 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1080 
	#ASN1_F_ASN1_VERIFY
 137

	)

1081 
	#ASN1_F_BITSTR_CB
 180

	)

1082 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1083 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1084 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1085 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1086 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1087 
	#ASN1_F_COLLECT_DATA
 140

	)

1088 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1089 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1090 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1091 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1092 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1093 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1094 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1095 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1096 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1097 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1098 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1099 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1100 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1101 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1102 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1103 
	#ASN1_F_D2I_RSA_NET
 200

	)

1104 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1105 
	#ASN1_F_D2I_X509
 156

	)

1106 
	#ASN1_F_D2I_X509_CINF
 157

	)

1107 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1108 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1109 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1110 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1111 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1112 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1113 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1114 
	#ASN1_F_I2D_RSA_NET
 162

	)

1115 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1116 
	#ASN1_F_LONG_C2I
 166

	)

1117 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1118 
	#ASN1_F_PARSE_TAGGING
 182

	)

1119 
	#ASN1_F_PKCS5_PBE2_SET
 167

	)

1120 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1121 
	#ASN1_F_X509_CINF_NEW
 168

	)

1122 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1123 
	#ASN1_F_X509_INFO_NEW
 170

	)

1124 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1125 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1126 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1127 
	#ASN1_F_X509_NEW
 172

	)

1128 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1131 
	#ASN1_R_ADDING_OBJECT
 171

	)

1132 
	#ASN1_R_AUX_ERROR
 100

	)

1133 
	#ASN1_R_BAD_CLASS
 101

	)

1134 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1135 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1136 
	#ASN1_R_BAD_TAG
 104

	)

1137 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 210

	)

1138 
	#ASN1_R_BN_LIB
 105

	)

1139 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1140 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1141 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1142 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1143 
	#ASN1_R_DECODE_ERROR
 110

	)

1144 
	#ASN1_R_DECODING_ERROR
 111

	)

1145 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1146 
	#ASN1_R_ENCODE_ERROR
 112

	)

1147 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1148 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1149 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1150 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1151 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1152 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1153 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1154 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1155 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1156 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1157 
	#ASN1_R_FIELD_MISSING
 121

	)

1158 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1159 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1160 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1161 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1162 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1163 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1164 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1165 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1166 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1167 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1168 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1169 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1170 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1171 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1172 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1173 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1174 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1175 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1176 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1177 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1178 
	#ASN1_R_INVALID_DIGIT
 130

	)

1179 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1180 
	#ASN1_R_INVALID_NUMBER
 187

	)

1181 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1182 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1183 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1184 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1185 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1186 
	#ASN1_R_LENGTH_ERROR
 136

	)

1187 
	#ASN1_R_LIST_ERROR
 188

	)

1188 
	#ASN1_R_MISSING_EOC
 137

	)

1189 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1190 
	#ASN1_R_MISSING_VALUE
 189

	)

1191 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1192 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1193 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1194 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1195 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1196 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1197 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1198 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1199 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1200 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1201 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1202 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1203 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1204 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1205 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1206 
	#ASN1_R_SHORT_LINE
 150

	)

1207 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1208 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1209 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1210 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1211 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1212 
	#ASN1_R_TOO_LONG
 155

	)

1213 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1214 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1215 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1216 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1217 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 211

	)

1218 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1219 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1220 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1221 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1222 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1223 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1224 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1225 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1226 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1227 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1228 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1229 
	#ASN1_R_WRONG_TAG
 168

	)

1230 
	#ASN1_R_WRONG_TYPE
 169

	)

1232 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/asn1_mac.h

59 #i‚de‡
HEADER_ASN1_MAC_H


60 
	#HEADER_ASN1_MAC_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #ifde‡ 
__˝lu•lus


68 #i‚de‡
ASN1_MAC_ERR_LIB


69 
	#ASN1_MAC_ERR_LIB
 
ERR_LIB_ASN1


	)

72 
	#ASN1_MAC_H_îr
(
f
,
r
,
löe
) \

73 
	`ERR_PUT_îr‹
(
ASN1_MAC_ERR_LIB
,(
f
),(
r
),
__FILE__
,(
löe
))

	)

75 
	#M_ASN1_D2I_v¨s
(
a
,
ty≥
,
func
) \

76 
ASN1_c⁄°_CTX
 
c
; \

77 
ty≥
 
ªt
=
NULL
; \

79 
c
.
µ
=(const **)pp; \

80 
c
.
q
*(c⁄° **)
µ
; \

81 
c
.
îr‹
=
ERR_R_NESTED_ASN1_ERROR
; \

82 i‡((
a
 =
NULL
) || ((*a) == NULL)) \

83 { i‡((
ªt
=(
ty≥
)
	`func
()Ë=
NULL
) \

84 { 
c
.
löe
=
__LINE__
; 
îr
; } } \

85 
ªt
=(*
a
);

	)

87 
	#M_ASN1_D2I_Inô
() \

88 
c
.
p
*(c⁄° **)
µ
; \

89 
c
.
max
=(
Àngth
 =0)?0:(c.
p
+Àngth);

	)

91 
	#M_ASN1_D2I_Föish_2
(
a
) \

92 i‡(!
	`a¢1_c⁄°_Föish
(&
c
)) \

93 { 
c
.
löe
=
__LINE__
; 
îr
; } \

94 *(c⁄° **)
µ
=
c
.
p
; \

95 i‡(
a
 !
NULL
Ë(*a)=
ªt
; \

96 (
ªt
);

	)

98 
	#M_ASN1_D2I_Föish
(
a
,
func
,
e
) \

99 
	`M_ASN1_D2I_Föish_2
(
a
); \

100 
îr
:\

101 
	`ASN1_MAC_H_îr
((
e
),
c
.
îr‹
,c.
löe
); \

102 
	`a¢1_add_îr‹
(*(c⁄° **)
µ
,()(
c
.
q
- *pp)); \

103 i‡((
ªt
 !
NULL
Ë&& ((
a
 =NULLË|| (*®!ªt))Ë
	`func
(ret); \

104 (
NULL
)

	)

106 
	#M_ASN1_D2I_°¨t_£quí˚
() \

107 i‡(!
	`a¢1_GëSequí˚
(&
c
,&
Àngth
)) \

108 { 
c
.
löe
=
__LINE__
; 
îr
; }

	)

110 
	#M_ASN1_D2I_begö
() \

111 
c
.
¶í
 = 
Àngth
;

	)

114 
	#M_ASN1_D2I_Föish_nﬁí
(
a
, 
func
, 
e
) \

115 *
µ
=
c
.
p
; \

116 i‡(
a
 !
NULL
Ë(*a)=
ªt
; \

117 (
ªt
); \

118 
îr
:\

119 
	`ASN1_MAC_H_îr
((
e
),
c
.
îr‹
,c.
löe
); \

120 
	`a¢1_add_îr‹
(*
µ
,()(
c
.
q
- *pp)); \

121 i‡((
ªt
 !
NULL
Ë&& ((
a
 =NULLË|| (*®!ªt))Ë
	`func
(ret); \

122 (
NULL
)

	)

124 
	#M_ASN1_D2I_íd_£quí˚
() \

125 (((
c
.
öf
&1Ë=0)?(c.
¶í
 <= 0): \

126 (
c
.
eos
=
	`ASN1_c⁄°_check_öföôe_íd
(&c.
p
,c.
¶í
)))

	)

129 
	#M_ASN1_D2I_gë
(
b
, 
func
) \

130 
c
.
q
=c.
p
; \

131 i‡(
	`func
(&(
b
),&
c
.
p
,c.
¶í
Ë=
NULL
) \

132 {
c
.
löe
=
__LINE__
; 
îr
; } \

133 
c
.
¶í
-=(c.
p
-c.
q
);

	)

136 
	#M_ASN1_D2I_gë_x
(
ty≥
,
b
,
func
) \

137 
c
.
q
=c.
p
; \

138 i‡(((
	`D2I_OF
(
ty≥
))
func
)(&(
b
),&
c
.
p
,c.
¶í
Ë=
NULL
) \

139 {
c
.
löe
=
__LINE__
; 
îr
; } \

140 
c
.
¶í
-=(c.
p
-c.
q
);

	)

143 
	#M_ASN1_D2I_gë_öt
(
b
,
func
) \

144 
c
.
q
=c.
p
; \

145 i‡(
	`func
(&(
b
),&
c
.
p
,c.
¶í
) < 0) \

146 {
c
.
löe
=
__LINE__
; 
îr
; } \

147 
c
.
¶í
-=(c.
p
-c.
q
);

	)

149 
	#M_ASN1_D2I_gë_›t
(
b
,
func
,
ty≥
) \

150 i‡((
c
.
¶í
 !0Ë&& ((
M_ASN1_√xt
 & (~
V_ASN1_CONSTRUCTED
)) \

151 =(
V_ASN1_UNIVERSAL
|(
ty≥
)))) \

153 
	`M_ASN1_D2I_gë
(
b
,
func
); \

154 }

	)

156 
	#M_ASN1_D2I_gë_imp
(
b
,
func
, 
ty≥
) \

157 
M_ASN1_√xt
=(
_tmp
& 
V_ASN1_CONSTRUCTED
)|
ty≥
; \

158 
c
.
q
=c.
p
; \

159 i‡(
	`func
(&(
b
),&
c
.
p
,c.
¶í
Ë=
NULL
) \

160 {
c
.
löe
=
__LINE__
; 
M_ASN1_√xt_¥ev
 = 
_tmp
; 
îr
; } \

161 
c
.
¶í
-=(c.
p
-c.
q
);\

162 
M_ASN1_√xt_¥ev
=
_tmp
;

	)

164 
	#M_ASN1_D2I_gë_IMP_›t
(
b
,
func
,
èg
,
ty≥
) \

165 i‡((
c
.
¶í
 !0Ë&& ((
M_ASN1_√xt
 & (~
V_ASN1_CONSTRUCTED
)) == \

166 (
V_ASN1_CONTEXT_SPECIFIC
|(
èg
)))) \

168 
_tmp
 = 
M_ASN1_√xt
; \

169 
	`M_ASN1_D2I_gë_imp
(
b
,
func
, 
ty≥
);\

170 }

	)

172 
	#M_ASN1_D2I_gë_£t
(
r
,
func
,
‰ì_func
) \

173 
	`M_ASN1_D2I_gë_imp_£t
(
r
,
func
,
‰ì_func
, \

174 
V_ASN1_SET
,
V_ASN1_UNIVERSAL
);

	)

176 
	#M_ASN1_D2I_gë_£t_ty≥
(
ty≥
,
r
,
func
,
‰ì_func
) \

177 
	`M_ASN1_D2I_gë_imp_£t_ty≥
(
ty≥
,
r
,
func
,
‰ì_func
, \

178 
V_ASN1_SET
,
V_ASN1_UNIVERSAL
);

	)

180 
	#M_ASN1_D2I_gë_£t_›t
(
r
,
func
,
‰ì_func
) \

181 i‡((
c
.
¶í
 !0Ë&& (
M_ASN1_√xt
 =(
V_ASN1_UNIVERSAL
| \

182 
V_ASN1_CONSTRUCTED
|
V_ASN1_SET
)))\

183 { 
	`M_ASN1_D2I_gë_£t
(
r
,
func
,
‰ì_func
); }

	)

185 
	#M_ASN1_D2I_gë_£t_›t_ty≥
(
ty≥
,
r
,
func
,
‰ì_func
) \

186 i‡((
c
.
¶í
 !0Ë&& (
M_ASN1_√xt
 =(
V_ASN1_UNIVERSAL
| \

187 
V_ASN1_CONSTRUCTED
|
V_ASN1_SET
)))\

188 { 
	`M_ASN1_D2I_gë_£t_ty≥
(
ty≥
,
r
,
func
,
‰ì_func
); }

	)

190 
	#M_ASN1_I2D_Àn_SET_›t
(
a
,
f
) \

191 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0)) \

192 
	`M_ASN1_I2D_Àn_SET
(
a
,
f
);

	)

194 
	#M_ASN1_I2D_put_SET_›t
(
a
,
f
) \

195 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0)) \

196 
	`M_ASN1_I2D_put_SET
(
a
,
f
);

	)

198 
	#M_ASN1_I2D_put_SEQUENCE_›t
(
a
,
f
) \

199 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0)) \

200 
	`M_ASN1_I2D_put_SEQUENCE
(
a
,
f
);

	)

202 
	#M_ASN1_I2D_put_SEQUENCE_›t_ty≥
(
ty≥
,
a
,
f
) \

203 i‡((
a
 !
NULL
Ë&& (
sk_
##
ty≥
##
	`_num
(a) != 0)) \

204 
	`M_ASN1_I2D_put_SEQUENCE_ty≥
(
ty≥
,
a
,
f
);

	)

206 
	#M_ASN1_D2I_gë_IMP_£t_›t
(
b
,
func
,
‰ì_func
,
èg
) \

207 i‡((
c
.
¶í
 != 0) && \

208 (
M_ASN1_√xt
 == \

209 (
V_ASN1_CONTEXT_SPECIFIC
|
V_ASN1_CONSTRUCTED
|(
èg
))))\

211 
	`M_ASN1_D2I_gë_imp_£t
(
b
,
func
,
‰ì_func
,\

212 
èg
,
V_ASN1_CONTEXT_SPECIFIC
); \

213 }

	)

215 
	#M_ASN1_D2I_gë_IMP_£t_›t_ty≥
(
ty≥
,
b
,
func
,
‰ì_func
,
èg
) \

216 i‡((
c
.
¶í
 != 0) && \

217 (
M_ASN1_√xt
 == \

218 (
V_ASN1_CONTEXT_SPECIFIC
|
V_ASN1_CONSTRUCTED
|(
èg
))))\

220 
	`M_ASN1_D2I_gë_imp_£t_ty≥
(
ty≥
,
b
,
func
,
‰ì_func
,\

221 
èg
,
V_ASN1_CONTEXT_SPECIFIC
); \

222 }

	)

224 
	#M_ASN1_D2I_gë_£q
(
r
,
func
,
‰ì_func
) \

225 
	`M_ASN1_D2I_gë_imp_£t
(
r
,
func
,
‰ì_func
,\

226 
V_ASN1_SEQUENCE
,
V_ASN1_UNIVERSAL
);

	)

228 
	#M_ASN1_D2I_gë_£q_ty≥
(
ty≥
,
r
,
func
,
‰ì_func
) \

229 
	`M_ASN1_D2I_gë_imp_£t_ty≥
(
ty≥
,
r
,
func
,
‰ì_func
,\

230 
V_ASN1_SEQUENCE
,
V_ASN1_UNIVERSAL
)

	)

232 
	#M_ASN1_D2I_gë_£q_›t
(
r
,
func
,
‰ì_func
) \

233 i‡((
c
.
¶í
 !0Ë&& (
M_ASN1_√xt
 =(
V_ASN1_UNIVERSAL
| \

234 
V_ASN1_CONSTRUCTED
|
V_ASN1_SEQUENCE
)))\

235 { 
	`M_ASN1_D2I_gë_£q
(
r
,
func
,
‰ì_func
); }

	)

237 
	#M_ASN1_D2I_gë_£q_›t_ty≥
(
ty≥
,
r
,
func
,
‰ì_func
) \

238 i‡((
c
.
¶í
 !0Ë&& (
M_ASN1_√xt
 =(
V_ASN1_UNIVERSAL
| \

239 
V_ASN1_CONSTRUCTED
|
V_ASN1_SEQUENCE
)))\

240 { 
	`M_ASN1_D2I_gë_£q_ty≥
(
ty≥
,
r
,
func
,
‰ì_func
); }

	)

242 
	#M_ASN1_D2I_gë_IMP_£t
(
r
,
func
,
‰ì_func
,
x
) \

243 
	`M_ASN1_D2I_gë_imp_£t
(
r
,
func
,
‰ì_func
,\

244 
x
,
V_ASN1_CONTEXT_SPECIFIC
);

	)

246 
	#M_ASN1_D2I_gë_IMP_£t_ty≥
(
ty≥
,
r
,
func
,
‰ì_func
,
x
) \

247 
	`M_ASN1_D2I_gë_imp_£t_ty≥
(
ty≥
,
r
,
func
,
‰ì_func
,\

248 
x
,
V_ASN1_CONTEXT_SPECIFIC
);

	)

250 
	#M_ASN1_D2I_gë_imp_£t
(
r
,
func
,
‰ì_func
,
a
,
b
) \

251 
c
.
q
=c.
p
; \

252 i‡(
	`d2i_ASN1_SET
(&(
r
),&
c
.
p
,c.
¶í
,(*(*)())
func
,\

253 ((*)())
‰ì_func
,
a
,
b
Ë=
NULL
) \

254 { 
c
.
löe
=
__LINE__
; 
îr
; } \

255 
c
.
¶í
-=(c.
p
-c.
q
);

	)

257 
	#M_ASN1_D2I_gë_imp_£t_ty≥
(
ty≥
,
r
,
func
,
‰ì_func
,
a
,
b
) \

258 
c
.
q
=c.
p
; \

259 i‡(
d2i_ASN1_SET_OF_
##
	`ty≥
(&(
r
),&
c
.
p
,c.
¶í
,
func
,\

260 
‰ì_func
,
a
,
b
Ë=
NULL
) \

261 { 
c
.
löe
=
__LINE__
; 
îr
; } \

262 
c
.
¶í
-=(c.
p
-c.
q
);

	)

264 
	#M_ASN1_D2I_gë_£t_°rögs
(
r
,
func
,
a
,
b
) \

265 
c
.
q
=c.
p
; \

266 i‡(
	`d2i_ASN1_STRING_SET
(&(
r
),&
c
.
p
,c.
¶í
,
a
,
b
Ë=
NULL
) \

267 { 
c
.
löe
=
__LINE__
; 
îr
; } \

268 
c
.
¶í
-=(c.
p
-c.
q
);

	)

270 
	#M_ASN1_D2I_gë_EXP_›t
(
r
,
func
,
èg
) \

271 i‡((
c
.
¶í
 !0LË&& (
M_ASN1_√xt
 == \

272 (
V_ASN1_CONSTRUCTED
|
V_ASN1_CONTEXT_SPECIFIC
|
èg
))) \

274 
Töf
,
Tèg
,
T˛ass
; \

275 
TÀn
; \

277 
c
.
q
=c.
p
; \

278 
Töf
=
	`ASN1_gë_obje˘
(&
c
.
p
,&
TÀn
,&
Tèg
,&
T˛ass
,c.
¶í
); \

279 i‡(
Töf
 & 0x80) \

280 { 
c
.
îr‹
=
ERR_R_BAD_ASN1_OBJECT_HEADER
; \

281 
c
.
löe
=
__LINE__
; 
îr
; } \

282 i‡(
Töf
 =(
V_ASN1_CONSTRUCTED
+1)) \

283 
TÀn
 = 
c
.
¶í
 - (c.
p
 - c.
q
) - 2; \

284 i‡(
	`func
(&(
r
),&
c
.
p
,
TÀn
Ë=
NULL
) \

285 { 
c
.
löe
=
__LINE__
; 
îr
; } \

286 i‡(
Töf
 =(
V_ASN1_CONSTRUCTED
+1)) { \

287 
TÀn
 = 
c
.
¶í
 - (c.
p
 - c.
q
); \

288 if(!
	`ASN1_c⁄°_check_öföôe_íd
(&
c
.
p
, 
TÀn
)) \

289 { 
c
.
îr‹
=
ERR_R_MISSING_ASN1_EOS
; \

290 
c
.
löe
=
__LINE__
; 
îr
; } \

292 
c
.
¶í
-=(c.
p
-c.
q
); \

293 }

	)

295 
	#M_ASN1_D2I_gë_EXP_£t_›t
(
r
,
func
,
‰ì_func
,
èg
,
b
) \

296 i‡((
c
.
¶í
 !0Ë&& (
M_ASN1_√xt
 == \

297 (
V_ASN1_CONSTRUCTED
|
V_ASN1_CONTEXT_SPECIFIC
|
èg
))) \

299 
Töf
,
Tèg
,
T˛ass
; \

300 
TÀn
; \

302 
c
.
q
=c.
p
; \

303 
Töf
=
	`ASN1_gë_obje˘
(&
c
.
p
,&
TÀn
,&
Tèg
,&
T˛ass
,c.
¶í
); \

304 i‡(
Töf
 & 0x80) \

305 { 
c
.
îr‹
=
ERR_R_BAD_ASN1_OBJECT_HEADER
; \

306 
c
.
löe
=
__LINE__
; 
îr
; } \

307 i‡(
Töf
 =(
V_ASN1_CONSTRUCTED
+1)) \

308 
TÀn
 = 
c
.
¶í
 - (c.
p
 - c.
q
) - 2; \

309 i‡(
	`d2i_ASN1_SET
(&(
r
),&
c
.
p
,
TÀn
,(*(*)())
func
, \

310 ((*)())
‰ì_func
, \

311 
b
,
V_ASN1_UNIVERSAL
Ë=
NULL
) \

312 { 
c
.
löe
=
__LINE__
; 
îr
; } \

313 i‡(
Töf
 =(
V_ASN1_CONSTRUCTED
+1)) { \

314 
TÀn
 = 
c
.
¶í
 - (c.
p
 - c.
q
); \

315 if(!
	`ASN1_check_öföôe_íd
(&
c
.
p
, 
TÀn
)) \

316 { 
c
.
îr‹
=
ERR_R_MISSING_ASN1_EOS
; \

317 
c
.
löe
=
__LINE__
; 
îr
; } \

319 
c
.
¶í
-=(c.
p
-c.
q
); \

320 }

	)

322 
	#M_ASN1_D2I_gë_EXP_£t_›t_ty≥
(
ty≥
,
r
,
func
,
‰ì_func
,
èg
,
b
) \

323 i‡((
c
.
¶í
 !0Ë&& (
M_ASN1_√xt
 == \

324 (
V_ASN1_CONSTRUCTED
|
V_ASN1_CONTEXT_SPECIFIC
|
èg
))) \

326 
Töf
,
Tèg
,
T˛ass
; \

327 
TÀn
; \

329 
c
.
q
=c.
p
; \

330 
Töf
=
	`ASN1_gë_obje˘
(&
c
.
p
,&
TÀn
,&
Tèg
,&
T˛ass
,c.
¶í
); \

331 i‡(
Töf
 & 0x80) \

332 { 
c
.
îr‹
=
ERR_R_BAD_ASN1_OBJECT_HEADER
; \

333 
c
.
löe
=
__LINE__
; 
îr
; } \

334 i‡(
Töf
 =(
V_ASN1_CONSTRUCTED
+1)) \

335 
TÀn
 = 
c
.
¶í
 - (c.
p
 - c.
q
) - 2; \

336 i‡(
d2i_ASN1_SET_OF_
##
	`ty≥
(&(
r
),&
c
.
p
,
TÀn
,
func
, \

337 
‰ì_func
,
b
,
V_ASN1_UNIVERSAL
Ë=
NULL
) \

338 { 
c
.
löe
=
__LINE__
; 
îr
; } \

339 i‡(
Töf
 =(
V_ASN1_CONSTRUCTED
+1)) { \

340 
TÀn
 = 
c
.
¶í
 - (c.
p
 - c.
q
); \

341 if(!
	`ASN1_check_öföôe_íd
(&
c
.
p
, 
TÀn
)) \

342 { 
c
.
îr‹
=
ERR_R_MISSING_ASN1_EOS
; \

343 
c
.
löe
=
__LINE__
; 
îr
; } \

345 
c
.
¶í
-=(c.
p
-c.
q
); \

346 }

	)

349 
	#M_ASN1_New_MÆloc
(
ªt
,
ty≥
) \

350 i‡((
ªt
=(
ty≥
 *)
	`OPENSSL_mÆloc
(—y≥))Ë=
NULL
) \

351 { 
c
.
löe
=
__LINE__
; 
îr2
; }

	)

353 
	#M_ASN1_New
(
¨g
,
func
) \

354 i‡(((
¨g
)=
	`func
()Ë=
NULL
Ë(NULL)

	)

356 
	#M_ASN1_New_Eº‹
(
a
) \

359 
îr2
: 
	`ASN1_MAC_H_îr
((
a
),
ERR_R_MALLOC_FAILURE
,
c
.
löe
); \

360 (
NULL
)

	)

367 
	#M_ASN1_√xt
 (*((*)(
c
.
p
)))

	)

368 
	#M_ASN1_√xt_¥ev
 (*((*)(
c
.
q
)))

	)

372 
	#M_ASN1_I2D_v¨s
(
a
Ë
r
=0,
ªt
=0; \

373 *
p
; \

374 i‡(
a
 =
NULL
Ë(0)

	)

377 
	#M_ASN1_I2D_Àn
(
a
,
f
Ë
ªt
+=
	`f
◊,
NULL
)

	)

378 
	#M_ASN1_I2D_Àn_IMP_›t
(
a
,
f
Ëi‡◊ !
NULL
Ë
	`M_ASN1_I2D_Àn
◊,f)

	)

380 
	#M_ASN1_I2D_Àn_SET
(
a
,
f
) \

381 
ªt
+=
	`i2d_ASN1_SET
(
a
,
NULL
,
f
,
V_ASN1_SET
,
V_ASN1_UNIVERSAL
,
IS_SET
);

	)

383 
	#M_ASN1_I2D_Àn_SET_ty≥
(
ty≥
,
a
,
f
) \

384 
ªt
+=
i2d_ASN1_SET_OF_
##
	`ty≥
(
a
,
NULL
,
f
,
V_ASN1_SET
, \

385 
V_ASN1_UNIVERSAL
,
IS_SET
);

	)

387 
	#M_ASN1_I2D_Àn_SEQUENCE
(
a
,
f
) \

388 
ªt
+=
	`i2d_ASN1_SET
(
a
,
NULL
,
f
,
V_ASN1_SEQUENCE
,
V_ASN1_UNIVERSAL
, \

389 
IS_SEQUENCE
);

	)

391 
	#M_ASN1_I2D_Àn_SEQUENCE_ty≥
(
ty≥
,
a
,
f
) \

392 
ªt
+=
i2d_ASN1_SET_OF_
##
	`ty≥
(
a
,
NULL
,
f
,
V_ASN1_SEQUENCE
, \

393 
V_ASN1_UNIVERSAL
,
IS_SEQUENCE
)

	)

395 
	#M_ASN1_I2D_Àn_SEQUENCE_›t
(
a
,
f
) \

396 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0)) \

397 
	`M_ASN1_I2D_Àn_SEQUENCE
(
a
,
f
);

	)

399 
	#M_ASN1_I2D_Àn_SEQUENCE_›t_ty≥
(
ty≥
,
a
,
f
) \

400 i‡((
a
 !
NULL
Ë&& (
sk_
##
ty≥
##
	`_num
(a) != 0)) \

401 
	`M_ASN1_I2D_Àn_SEQUENCE_ty≥
(
ty≥
,
a
,
f
);

	)

403 
	#M_ASN1_I2D_Àn_IMP_SET
(
a
,
f
,
x
) \

404 
ªt
+=
	`i2d_ASN1_SET
(
a
,
NULL
,
f
,
x
,
V_ASN1_CONTEXT_SPECIFIC
,
IS_SET
);

	)

406 
	#M_ASN1_I2D_Àn_IMP_SET_ty≥
(
ty≥
,
a
,
f
,
x
) \

407 
ªt
+=
i2d_ASN1_SET_OF_
##
	`ty≥
(
a
,
NULL
,
f
,
x
, \

408 
V_ASN1_CONTEXT_SPECIFIC
,
IS_SET
);

	)

410 
	#M_ASN1_I2D_Àn_IMP_SET_›t
(
a
,
f
,
x
) \

411 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0)) \

412 
ªt
+=
	`i2d_ASN1_SET
(
a
,
NULL
,
f
,
x
,
V_ASN1_CONTEXT_SPECIFIC
, \

413 
IS_SET
);

	)

415 
	#M_ASN1_I2D_Àn_IMP_SET_›t_ty≥
(
ty≥
,
a
,
f
,
x
) \

416 i‡((
a
 !
NULL
Ë&& (
sk_
##
ty≥
##
	`_num
(a) != 0)) \

417 
ªt
+=
i2d_ASN1_SET_OF_
##
	`ty≥
(
a
,
NULL
,
f
,
x
, \

418 
V_ASN1_CONTEXT_SPECIFIC
,
IS_SET
);

	)

420 
	#M_ASN1_I2D_Àn_IMP_SEQUENCE
(
a
,
f
,
x
) \

421 
ªt
+=
	`i2d_ASN1_SET
(
a
,
NULL
,
f
,
x
,
V_ASN1_CONTEXT_SPECIFIC
, \

422 
IS_SEQUENCE
);

	)

424 
	#M_ASN1_I2D_Àn_IMP_SEQUENCE_›t
(
a
,
f
,
x
) \

425 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0)) \

426 
ªt
+=
	`i2d_ASN1_SET
(
a
,
NULL
,
f
,
x
,
V_ASN1_CONTEXT_SPECIFIC
, \

427 
IS_SEQUENCE
);

	)

429 
	#M_ASN1_I2D_Àn_IMP_SEQUENCE_›t_ty≥
(
ty≥
,
a
,
f
,
x
) \

430 i‡((
a
 !
NULL
Ë&& (
sk_
##
ty≥
##
	`_num
(a) != 0)) \

431 
ªt
+=
i2d_ASN1_SET_OF_
##
	`ty≥
(
a
,
NULL
,
f
,
x
, \

432 
V_ASN1_CONTEXT_SPECIFIC
, \

433 
IS_SEQUENCE
);

	)

435 
	#M_ASN1_I2D_Àn_EXP_›t
(
a
,
f
,
mèg
,
v
) \

436 i‡(
a
 !
NULL
)\

438 
v
=
	`f
(
a
,
NULL
); \

439 
ªt
+=
	`ASN1_obje˘_size
(1,
v
,
mèg
); \

440 }

	)

442 
	#M_ASN1_I2D_Àn_EXP_SET_›t
(
a
,
f
,
mèg
,
èg
,
v
) \

443 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0))\

445 
v
=
	`i2d_ASN1_SET
(
a
,
NULL
,
f
,
èg
,
V_ASN1_UNIVERSAL
,
IS_SET
); \

446 
ªt
+=
	`ASN1_obje˘_size
(1,
v
,
mèg
); \

447 }

	)

449 
	#M_ASN1_I2D_Àn_EXP_SEQUENCE_›t
(
a
,
f
,
mèg
,
èg
,
v
) \

450 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0))\

452 
v
=
	`i2d_ASN1_SET
(
a
,
NULL
,
f
,
èg
,
V_ASN1_UNIVERSAL
, \

453 
IS_SEQUENCE
); \

454 
ªt
+=
	`ASN1_obje˘_size
(1,
v
,
mèg
); \

455 }

	)

457 
	#M_ASN1_I2D_Àn_EXP_SEQUENCE_›t_ty≥
(
ty≥
,
a
,
f
,
mèg
,
èg
,
v
) \

458 i‡((
a
 !
NULL
Ë&& (
sk_
##
ty≥
##
	`_num
(a) != 0))\

460 
v
=
i2d_ASN1_SET_OF_
##
	`ty≥
(
a
,
NULL
,
f
,
èg
, \

461 
V_ASN1_UNIVERSAL
, \

462 
IS_SEQUENCE
); \

463 
ªt
+=
	`ASN1_obje˘_size
(1,
v
,
mèg
); \

464 }

	)

467 
	#M_ASN1_I2D_put
(
a
,
f
Ë
	`f
◊,&
p
)

	)

469 
	#M_ASN1_I2D_put_IMP_›t
(
a
,
f
,
t
) \

470 i‡(
a
 !
NULL
) \

472 *
q
=
p
; \

473 
	`f
(
a
,&
p
); \

474 *
q
=(
V_ASN1_CONTEXT_SPECIFIC
|
t
|(*q&
V_ASN1_CONSTRUCTED
));\

475 }

	)

477 
	#M_ASN1_I2D_put_SET
(
a
,
f
Ë
	`i2d_ASN1_SET
◊,&
p
,f,
V_ASN1_SET
,\

478 
V_ASN1_UNIVERSAL
,
IS_SET
)

	)

479 
	#M_ASN1_I2D_put_SET_ty≥
(
ty≥
,
a
,
f
) \

480 
i2d_ASN1_SET_OF_
##
	`ty≥
(
a
,&
p
,
f
,
V_ASN1_SET
,
V_ASN1_UNIVERSAL
,
IS_SET
)

	)

481 
	#M_ASN1_I2D_put_IMP_SET
(
a
,
f
,
x
Ë
	`i2d_ASN1_SET
◊,&
p
,f,x,\

482 
V_ASN1_CONTEXT_SPECIFIC
,
IS_SET
)

	)

483 
	#M_ASN1_I2D_put_IMP_SET_ty≥
(
ty≥
,
a
,
f
,
x
) \

484 
i2d_ASN1_SET_OF_
##
	`ty≥
(
a
,&
p
,
f
,
x
,
V_ASN1_CONTEXT_SPECIFIC
,
IS_SET
)

	)

485 
	#M_ASN1_I2D_put_IMP_SEQUENCE
(
a
,
f
,
x
Ë
	`i2d_ASN1_SET
◊,&
p
,f,x,\

486 
V_ASN1_CONTEXT_SPECIFIC
,
IS_SEQUENCE
)

	)

488 
	#M_ASN1_I2D_put_SEQUENCE
(
a
,
f
Ë
	`i2d_ASN1_SET
◊,&
p
,f,
V_ASN1_SEQUENCE
,\

489 
V_ASN1_UNIVERSAL
,
IS_SEQUENCE
)

	)

491 
	#M_ASN1_I2D_put_SEQUENCE_ty≥
(
ty≥
,
a
,
f
) \

492 
i2d_ASN1_SET_OF_
##
	`ty≥
(
a
,&
p
,
f
,
V_ASN1_SEQUENCE
,
V_ASN1_UNIVERSAL
, \

493 
IS_SEQUENCE
)

	)

495 
	#M_ASN1_I2D_put_SEQUENCE_›t
(
a
,
f
) \

496 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0)) \

497 
	`M_ASN1_I2D_put_SEQUENCE
(
a
,
f
);

	)

499 
	#M_ASN1_I2D_put_IMP_SET_›t
(
a
,
f
,
x
) \

500 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0)) \

501 { 
	`i2d_ASN1_SET
(
a
,&
p
,
f
,
x
,
V_ASN1_CONTEXT_SPECIFIC
, \

502 
IS_SET
); }

	)

504 
	#M_ASN1_I2D_put_IMP_SET_›t_ty≥
(
ty≥
,
a
,
f
,
x
) \

505 i‡((
a
 !
NULL
Ë&& (
sk_
##
ty≥
##
	`_num
(a) != 0)) \

506 { 
i2d_ASN1_SET_OF_
##
	`ty≥
(
a
,&
p
,
f
,
x
, \

507 
V_ASN1_CONTEXT_SPECIFIC
, \

508 
IS_SET
); }

	)

510 
	#M_ASN1_I2D_put_IMP_SEQUENCE_›t
(
a
,
f
,
x
) \

511 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0)) \

512 { 
	`i2d_ASN1_SET
(
a
,&
p
,
f
,
x
,
V_ASN1_CONTEXT_SPECIFIC
, \

513 
IS_SEQUENCE
); }

	)

515 
	#M_ASN1_I2D_put_IMP_SEQUENCE_›t_ty≥
(
ty≥
,
a
,
f
,
x
) \

516 i‡((
a
 !
NULL
Ë&& (
sk_
##
ty≥
##
	`_num
(a) != 0)) \

517 { 
i2d_ASN1_SET_OF_
##
	`ty≥
(
a
,&
p
,
f
,
x
, \

518 
V_ASN1_CONTEXT_SPECIFIC
, \

519 
IS_SEQUENCE
); }

	)

521 
	#M_ASN1_I2D_put_EXP_›t
(
a
,
f
,
èg
,
v
) \

522 i‡(
a
 !
NULL
) \

524 
	`ASN1_put_obje˘
(&
p
,1,
v
,
èg
,
V_ASN1_CONTEXT_SPECIFIC
); \

525 
	`f
(
a
,&
p
); \

526 }

	)

528 
	#M_ASN1_I2D_put_EXP_SET_›t
(
a
,
f
,
mèg
,
èg
,
v
) \

529 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0)) \

531 
	`ASN1_put_obje˘
(&
p
,1,
v
,
mèg
,
V_ASN1_CONTEXT_SPECIFIC
); \

532 
	`i2d_ASN1_SET
(
a
,&
p
,
f
,
èg
,
V_ASN1_UNIVERSAL
,
IS_SET
); \

533 }

	)

535 
	#M_ASN1_I2D_put_EXP_SEQUENCE_›t
(
a
,
f
,
mèg
,
èg
,
v
) \

536 i‡((
a
 !
NULL
Ë&& (
	`sk_num
(a) != 0)) \

538 
	`ASN1_put_obje˘
(&
p
,1,
v
,
mèg
,
V_ASN1_CONTEXT_SPECIFIC
); \

539 
	`i2d_ASN1_SET
(
a
,&
p
,
f
,
èg
,
V_ASN1_UNIVERSAL
,
IS_SEQUENCE
); \

540 }

	)

542 
	#M_ASN1_I2D_put_EXP_SEQUENCE_›t_ty≥
(
ty≥
,
a
,
f
,
mèg
,
èg
,
v
) \

543 i‡((
a
 !
NULL
Ë&& (
sk_
##
ty≥
##
	`_num
(a) != 0)) \

545 
	`ASN1_put_obje˘
(&
p
,1,
v
,
mèg
,
V_ASN1_CONTEXT_SPECIFIC
); \

546 
i2d_ASN1_SET_OF_
##
	`ty≥
(
a
,&
p
,
f
,
èg
,
V_ASN1_UNIVERSAL
, \

547 
IS_SEQUENCE
); \

548 }

	)

550 
	#M_ASN1_I2D_£q_tŸÆ
() \

551 
r
=
	`ASN1_obje˘_size
(1,
ªt
,
V_ASN1_SEQUENCE
); \

552 i‡(
µ
 =
NULL
Ë(
r
); \

553 
p
*
µ
; \

554 
	`ASN1_put_obje˘
(&
p
,1,
ªt
,
V_ASN1_SEQUENCE
,
V_ASN1_UNIVERSAL
)

	)

556 
	#M_ASN1_I2D_INF_£q_°¨t
(
èg
,
˘x
) \

557 *(
p
++)=(
V_ASN1_CONSTRUCTED
|(
èg
)|(
˘x
)); \

558 *(
p
++)=0x80

	)

560 
	#M_ASN1_I2D_INF_£q_íd
(Ë*(
p
++)=0x00; *’++)=0x00

	)

562 
	#M_ASN1_I2D_föish
(Ë*
µ
=
p
; \

563 (
r
);

	)

565 
a¢1_GëSequí˚
(
ASN1_c⁄°_CTX
 *
c
, *
Àngth
);

566 
a¢1_add_îr‹
(c⁄° *
addªss
,
off£t
);

567 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bio.h

59 #i‚de‡
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°d¨g.h
>

69 
	~<›ís¶/¸y±o.h
>

71 #ifde‡ 
__˝lu•lus


76 
	#BIO_TYPE_NONE
 0

	)

77 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

78 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

80 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

81 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

82 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

83 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

84 
	#BIO_TYPE_MD
 (8|0x0200Ë

	)

85 
	#BIO_TYPE_BUFFER
 (9|0x0200Ë

	)

86 
	#BIO_TYPE_CIPHER
 (10|0x0200Ë

	)

87 
	#BIO_TYPE_BASE64
 (11|0x0200Ë

	)

88 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100Ë

	)

89 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100Ë

	)

90 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200Ë

	)

91 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200Ë

	)

92 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200Ë

	)

93 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

94 
	#BIO_TYPE_BER
 (18|0x0200Ë

	)

95 
	#BIO_TYPE_BIO
 (19|0x0400Ë

	)

96 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200Ë

	)

97 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

99 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

100 
	#BIO_TYPE_FILTER
 0x0200

	)

101 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

105 
	#BIO_NOCLOSE
 0x00

	)

106 
	#BIO_CLOSE
 0x01

	)

110 
	#BIO_CTRL_RESET
 1

	)

111 
	#BIO_CTRL_EOF
 2

	)

112 
	#BIO_CTRL_INFO
 3

	)

113 
	#BIO_CTRL_SET
 4

	)

114 
	#BIO_CTRL_GET
 5

	)

115 
	#BIO_CTRL_PUSH
 6

	)

116 
	#BIO_CTRL_POP
 7

	)

117 
	#BIO_CTRL_GET_CLOSE
 8

	)

118 
	#BIO_CTRL_SET_CLOSE
 9

	)

119 
	#BIO_CTRL_PENDING
 10

	)

120 
	#BIO_CTRL_FLUSH
 11

	)

121 
	#BIO_CTRL_DUP
 12

	)

122 
	#BIO_CTRL_WPENDING
 13

	)

124 
	#BIO_CTRL_SET_CALLBACK
 14

	)

125 
	#BIO_CTRL_GET_CALLBACK
 15

	)

127 
	#BIO_CTRL_SET_FILENAME
 30

	)

130 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

131 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

134 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

135 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

136 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

137 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

139 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

140 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

143 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

146 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

147 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

148 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

153 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

158 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

162 
	#BIO_FP_READ
 0x02

	)

163 
	#BIO_FP_WRITE
 0x04

	)

164 
	#BIO_FP_APPEND
 0x08

	)

165 
	#BIO_FP_TEXT
 0x10

	)

167 
	#BIO_FLAGS_READ
 0x01

	)

168 
	#BIO_FLAGS_WRITE
 0x02

	)

169 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

170 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

171 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

172 #i‚def 
BIO_FLAGS_UPLINK


175 
	#BIO_FLAGS_UPLINK
 0

	)

179 
	#BIO_GHBN_CTRL_HITS
 1

	)

180 
	#BIO_GHBN_CTRL_MISSES
 2

	)

181 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

182 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

183 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

192 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

197 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

199 
bio_°
 
	tBIO
;

201 #ifde‡
OPENSSL_USE_NEW_FUNCTIONS


202 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

203 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

204 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

206 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

207 
	#BIO_£t_ªåy_•ecül
(
b
) \

208 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

209 
	#BIO_£t_ªåy_ªad
(
b
) \

210 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

211 
	#BIO_£t_ªåy_wrôe
(
b
) \

212 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

215 
	#BIO_˛ór_ªåy_Êags
(
b
) \

216 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

217 
	#BIO_gë_ªåy_Êags
(
b
) \

218 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

221 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

222 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

223 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

224 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

225 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

227 
	#BIO_£t_Êags
(
b
,
f
Ë((b)->
Êags
|=(f))

	)

228 
	#BIO_gë_Êags
(
b
Ë((b)->
Êags
)

	)

229 
	#BIO_£t_ªåy_•ecül
(
b
) \

230 ((
b
)->
Êags
|=(
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

231 
	#BIO_£t_ªåy_ªad
(
b
) \

232 ((
b
)->
Êags
|=(
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

233 
	#BIO_£t_ªåy_wrôe
(
b
) \

234 ((
b
)->
Êags
|=(
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

237 
	#BIO_˛ór_Êags
(
b
,
f
Ë((b)->
Êags
&~(f))

	)

238 
	#BIO_˛ór_ªåy_Êags
(
b
) \

239 ((
b
)->
Êags
&~(
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

240 
	#BIO_gë_ªåy_Êags
(
b
) \

241 ((
b
)->
Êags
&(
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

244 
	#BIO_should_ªad
(
a
Ë(◊)->
Êags
 & 
BIO_FLAGS_READ
)

	)

245 
	#BIO_should_wrôe
(
a
Ë(◊)->
Êags
 & 
BIO_FLAGS_WRITE
)

	)

246 
	#BIO_should_io_•ecül
(
a
Ë(◊)->
Êags
 & 
BIO_FLAGS_IO_SPECIAL
)

	)

247 
	#BIO_ªåy_ty≥
(
a
Ë(◊)->
Êags
 & 
BIO_FLAGS_RWS
)

	)

248 
	#BIO_should_ªåy
(
a
Ë(◊)->
Êags
 & 
BIO_FLAGS_SHOULD_RETRY
)

	)

257 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

259 
	#BIO_RR_CONNECT
 0x02

	)

261 
	#BIO_RR_ACCEPT
 0x03

	)

264 
	#BIO_CB_FREE
 0x01

	)

265 
	#BIO_CB_READ
 0x02

	)

266 
	#BIO_CB_WRITE
 0x03

	)

267 
	#BIO_CB_PUTS
 0x04

	)

268 
	#BIO_CB_GETS
 0x05

	)

269 
	#BIO_CB_CTRL
 0x06

	)

273 
	#BIO_CB_RETURN
 0x80

	)

274 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
))

	)

275 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

276 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

278 #ifde‡
OPENSSL_USE_NEW_FUNCTIONS


279 (*
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
)Ë(
bio_°
 *,,const *,, ,);

280 
BIO_£t_ˇŒback
(
BIO
 *
b
,

281 (*
ˇŒback
)(
bio_°
 *,,const *,, ,));

282 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

283 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

285 c⁄° * 
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

286 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

288 
	#BIO_£t_ˇŒback
(
b
,
cb
Ë((b)->
ˇŒback
=(cb))

	)

289 
	#BIO_£t_ˇŒback_¨g
(
b
,
¨g
Ë((b)->
cb_¨g
=(*)◊rg))

	)

290 
	#BIO_gë_ˇŒback_¨g
(
b
Ë((b)->
cb_¨g
)

	)

291 
	#BIO_gë_ˇŒback
(
b
Ë((b)->
ˇŒback
)

	)

292 
	#BIO_mëhod_«me
(
b
Ë((b)->
mëhod
->
«me
)

	)

293 
	#BIO_mëhod_ty≥
(
b
Ë((b)->
mëhod
->
ty≥
)

	)

296 
	tbio_öfo_cb
(
	tbio_°
 *, , const *, , , );

298 #i‚de‡
OPENSSL_SYS_WIN16


299 
	sbio_mëhod_°


301 
ty≥
;

302 c⁄° *
«me
;

303 (*
bwrôe
)(
BIO
 *, const *, );

304 (*
bªad
)(
BIO
 *, *, );

305 (*
bputs
)(
BIO
 *, const *);

306 (*
bgës
)(
BIO
 *, *, );

307 (*
˘æ
)(
BIO
 *, , , *);

308 (*
¸óã
)(
BIO
 *);

309 (*
de°roy
)(
BIO
 *);

310 (*
ˇŒback_˘æ
)(
BIO
 *, , 
bio_öfo_cb
 *);

311 } 
	tBIO_METHOD
;

313 
	sbio_mëhod_°


315 
ty≥
;

316 c⁄° *
«me
;

317 (
_Ár
 *
bwrôe
)();

318 (
_Ár
 *
bªad
)();

319 (
_Ár
 *
bputs
)();

320 (
_Ár
 *
bgës
)();

321 (
_Ár
 *
˘æ
)();

322 (
_Ár
 *
¸óã
)();

323 (
_Ár
 *
de°roy
)();

324 (
_Ár
 *
ˇŒback_˘æ
)();

325 } 
	tBIO_METHOD
;

328 
	sbio_°


330 
BIO_METHOD
 *
mëhod
;

332 (*
ˇŒback
)(
bio_°
 *,,const *,, ,);

333 *
cb_¨g
;

335 
öô
;

336 
shutdown
;

337 
Êags
;

338 
ªåy_ªas⁄
;

339 
num
;

340 *
±r
;

341 
bio_°
 *
√xt_bio
;

342 
bio_°
 *
¥ev_bio
;

343 
ª„ªn˚s
;

344 
num_ªad
;

345 
num_wrôe
;

347 
CRYPTO_EX_DATA
 
ex_d©a
;

350 
DECLARE_STACK_OF
(
BIO
)

352 
	sbio_f_buf„r_˘x_°ru˘


355 
ibuf_size
;

356 
obuf_size
;

358 *
ibuf
;

359 
ibuf_Àn
;

360 
ibuf_off
;

362 *
obuf
;

363 
obuf_Àn
;

364 
obuf_off
;

365 } 
	tBIO_F_BUFFER_CTX
;

368 
	#BIO_CONN_S_BEFORE
 1

	)

369 
	#BIO_CONN_S_GET_IP
 2

	)

370 
	#BIO_CONN_S_GET_PORT
 3

	)

371 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

372 
	#BIO_CONN_S_CONNECT
 5

	)

373 
	#BIO_CONN_S_OK
 6

	)

374 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

375 
	#BIO_CONN_S_NBIO
 8

	)

378 
	#BIO_C_SET_CONNECT
 100

	)

379 
	#BIO_C_DO_STATE_MACHINE
 101

	)

380 
	#BIO_C_SET_NBIO
 102

	)

381 
	#BIO_C_SET_PROXY_PARAM
 103

	)

382 
	#BIO_C_SET_FD
 104

	)

383 
	#BIO_C_GET_FD
 105

	)

384 
	#BIO_C_SET_FILE_PTR
 106

	)

385 
	#BIO_C_GET_FILE_PTR
 107

	)

386 
	#BIO_C_SET_FILENAME
 108

	)

387 
	#BIO_C_SET_SSL
 109

	)

388 
	#BIO_C_GET_SSL
 110

	)

389 
	#BIO_C_SET_MD
 111

	)

390 
	#BIO_C_GET_MD
 112

	)

391 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

392 
	#BIO_C_SET_BUF_MEM
 114

	)

393 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

394 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

395 
	#BIO_C_SET_BUFF_SIZE
 117

	)

396 
	#BIO_C_SET_ACCEPT
 118

	)

397 
	#BIO_C_SSL_MODE
 119

	)

398 
	#BIO_C_GET_MD_CTX
 120

	)

399 
	#BIO_C_GET_PROXY_PARAM
 121

	)

400 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

401 
	#BIO_C_GET_CONNECT
 123

	)

402 
	#BIO_C_GET_ACCEPT
 124

	)

403 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

404 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

405 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

406 
	#BIO_C_FILE_SEEK
 128

	)

407 
	#BIO_C_GET_CIPHER_CTX
 129

	)

408 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

409 
	#BIO_C_SET_BIND_MODE
 131

	)

410 
	#BIO_C_GET_BIND_MODE
 132

	)

411 
	#BIO_C_FILE_TELL
 133

	)

412 
	#BIO_C_GET_SOCKS
 134

	)

413 
	#BIO_C_SET_SOCKS
 135

	)

415 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

416 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

417 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

418 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

419 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

420 
	#BIO_C_GET_READ_REQUEST
 141

	)

421 
	#BIO_C_SHUTDOWN_WR
 142

	)

422 
	#BIO_C_NREAD0
 143

	)

423 
	#BIO_C_NREAD
 144

	)

424 
	#BIO_C_NWRITE0
 145

	)

425 
	#BIO_C_NWRITE
 146

	)

426 
	#BIO_C_RESET_READ_REQUEST
 147

	)

427 
	#BIO_C_SET_MD_CTX
 148

	)

430 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

431 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

434 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

435 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

436 
	#BIO_£t_c⁄n_ù
(
b
,
ù
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*)ù)

	)

437 
	#BIO_£t_c⁄n_öt_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,3,(*Ì‹t)

	)

438 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0)

	)

439 
	#BIO_gë_c⁄n_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1)

	)

440 
	#BIO_gë_c⁄n_ù
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2)

	)

441 
	#BIO_gë_c⁄n_öt_p‹t
(
b
Ë
	`BIO_öt_˘æ
(b,
BIO_C_GET_CONNECT
,3)

	)

444 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

447 
	#BIO_£t_ac˚±_p‹t
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

448 
	#BIO_gë_ac˚±_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0)

	)

450 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,“)?"a":
NULL
)

	)

451 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

453 
	#BIO_BIND_NORMAL
 0

	)

454 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

455 
	#BIO_BIND_REUSEADDR
 2

	)

456 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

457 
	#BIO_gë_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

459 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

460 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

461 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

464 
	#BIO_£t_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uæ))

	)

465 
	#BIO_£t_¥oxõs
(
b
,
p
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

467 
	#BIO_£t_fûãr_bio
(
b
,
s
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

469 
	#BIO_£t_¥oxy_cb
(
b
,
cb
Ë
	`BIO_ˇŒback_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

470 
	#BIO_£t_¥oxy_hódî
(
b
,
sk
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

471 
	#BIO_£t_no_c⁄√˘_ªtu∫
(
b
,
boﬁ
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,5,boﬁ)

	)

473 
	#BIO_gë_¥oxy_hódî
(
b
,
skp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

474 
	#BIO_gë_¥oxõs
(
b
,
pxy_p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

475 
	#BIO_gë_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uæ))

	)

476 
	#BIO_gë_no_c⁄√˘_ªtu∫
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

478 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

479 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

481 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

482 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

484 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

485 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

489 #ifde‡
CONST_STRICT


493 
BIO_ªad_fûíame
(
BIO
 *
b
,c⁄° *
«me
);

495 
	#BIO_ªad_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

496 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

498 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

499 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

500 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

501 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

502 
	#BIO_rw_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

503 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

509 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

510 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

511 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

512 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

513 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
);

	)

514 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

515 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
);

	)

516 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

517 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
);

	)

522 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

523 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

524 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

525 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

526 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

529 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

530 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

531 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

532 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

533 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

536 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

538 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

539 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

540 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

541 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

542 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

543 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

545 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

546 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

547 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

548 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

549 
cbp
)

	)

550 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

553 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

556 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

557 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

558 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

559 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

560 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

562 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

563 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

564 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

565 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

566 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

569 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

570 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

571 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
, 
°©e
, 
≥î
) \

572 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥î
)

	)

573 
	#BIO_dgøm_ªcv_timedout
(
b
) \

574 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

575 
	#BIO_dgøm_£nd_timedout
(
b
) \

576 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

577 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

578 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

583 
BIO_£t_ex_d©a
(
BIO
 *
bio
,
idx
,*
d©a
);

584 *
BIO_gë_ex_d©a
(
BIO
 *
bio
,
idx
);

585 
BIO_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

586 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

587 
BIO_numbî_ªad
(
BIO
 *
bio
);

588 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

590 #i‚de‡
OPENSSL_NO_FP_API


591 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë&& deföed(
_WINDLL
)

592 
BIO_METHOD
 *
BIO_s_fûe_öã∫Æ
();

593 
BIO
 *
BIO_√w_fûe_öã∫Æ
(*
fûíame
, *
mode
);

594 
BIO
 *
BIO_√w_Â_öã∫Æ
(
FILE
 *
°ªam
, 
˛o£_Êag
);

595 
	#BIO_s_fûe
 
BIO_s_fûe_öã∫Æ


	)

596 
	#BIO_√w_fûe
 
BIO_√w_fûe_öã∫Æ


	)

597 
	#BIO_√w_Â
 
BIO_√w_Â_öã∫Æ


	)

599 
BIO_METHOD
 *
BIO_s_fûe
();

600 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

601 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

602 
	#BIO_s_fûe_öã∫Æ
 
BIO_s_fûe


	)

603 
	#BIO_√w_fûe_öã∫Æ
 
BIO_√w_fûe


	)

604 
	#BIO_√w_Â_öã∫Æ
 
BIO_s_fûe


	)

607 
BIO
 * 
BIO_√w
(
BIO_METHOD
 *
ty≥
);

608 
BIO_£t
(
BIO
 *
a
,
BIO_METHOD
 *
ty≥
);

609 
BIO_‰ì
(
BIO
 *
a
);

610 
BIO_v‰ì
(
BIO
 *
a
);

611 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

612 
BIO_gës
(
BIO
 *
bp
,*
buf
, 
size
);

613 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

614 
BIO_puts
(
BIO
 *
bp
,c⁄° *
buf
);

615 
BIO_ödít
(
BIO
 *
b
,
ödít
,
max
);

616 
BIO_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,*
∑rg
);

617 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, (*
Â
)(
bio_°
 *, , const *, , , ));

618 * 
BIO_±r_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
);

619 
BIO_öt_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,
ürg
);

620 
BIO
 * 
BIO_push
(BIO *
b
,BIO *
≠≥nd
);

621 
BIO
 * 
BIO_p›
(BIO *
b
);

622 
BIO_‰ì_Æl
(
BIO
 *
a
);

623 
BIO
 * 
BIO_föd_ty≥
(BIO *
b
,
bio_ty≥
);

624 
BIO
 * 
BIO_√xt
(BIO *
b
);

625 
BIO
 * 
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

626 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

627 
BIO
 * 
BIO_dup_chaö
(BIO *
ö
);

629 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

630 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

631 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

632 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

634 #i‚de‡
OPENSSL_SYS_WIN16


635 
BIO_debug_ˇŒback
(
BIO
 *
bio
,
cmd
,c⁄° *
¨gp
,
¨gi
,

636 
¨gl
,
ªt
);

638 
_Ár
 
_lﬂdds
 
BIO_debug_ˇŒback
(
BIO
 *
bio
,
cmd
,c⁄° *
¨gp
,
¨gi
,

639 
¨gl
,
ªt
);

642 
BIO_METHOD
 *
BIO_s_mem
();

643 
BIO
 *
BIO_√w_mem_buf
(*
buf
, 
Àn
);

644 
BIO_METHOD
 *
BIO_s_sockë
();

645 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

646 
BIO_METHOD
 *
BIO_s_ac˚±
();

647 
BIO_METHOD
 *
BIO_s_fd
();

648 #i‚de‡
OPENSSL_SYS_OS2


649 
BIO_METHOD
 *
BIO_s_log
();

651 
BIO_METHOD
 *
BIO_s_bio
();

652 
BIO_METHOD
 *
BIO_s_nuŒ
();

653 
BIO_METHOD
 *
BIO_f_nuŒ
();

654 
BIO_METHOD
 *
BIO_f_buf„r
();

655 #ifde‡
OPENSSL_SYS_VMS


656 
BIO_METHOD
 *
BIO_f_löebuf„r
();

658 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

659 #i‚de‡
OPENSSL_NO_DGRAM


660 
BIO_METHOD
 *
BIO_s_d©agøm
();

665 
BIO_sock_should_ªåy
(
i
);

666 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

667 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

669 
BIO_fd_should_ªåy
(
i
);

670 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

671 
BIO_dump_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

672 *
u
, c⁄° *
s
, 
Àn
);

673 
BIO_dump_ödít_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

674 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

675 
BIO_dump
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
);

676 
BIO_dump_ödít
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
,
ödít
);

677 #i‚de‡
OPENSSL_NO_FP_API


678 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

679 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

681 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

690 
BIO_sock_îr‹
(
sock
);

691 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

692 
BIO_sockë_nbio
(
fd
,
mode
);

693 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

694 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

695 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
,
mode
);

696 
BIO_ac˚±
(
sock
,**
ù_p‹t
);

697 
BIO_sock_öô
();

698 
BIO_sock_˛ónup
();

699 
BIO_£t_t˝_ndñay
(
sock
,
tu∫_⁄
);

701 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

702 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

703 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

704 
BIO
 *
BIO_√w_c⁄√˘
(*
ho°_p‹t
);

705 
BIO
 *
BIO_√w_ac˚±
(*
ho°_p‹t
);

707 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

708 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

714 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

718 #ifde‡
__GNUC__


719 
	#__bio_h__©å__
 
__©åibuã__


	)

721 
	#__bio_h__©å__
(
x
)

	)

723 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

724 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,3)));

725 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

726 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,0)));

727 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

728 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,4)));

729 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

730 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,0)));

731 #unde‡
__bio_h__©å__


737 
ERR_lﬂd_BIO_°rögs
();

742 
	#BIO_F_ACPT_STATE
 100

	)

743 
	#BIO_F_BIO_ACCEPT
 101

	)

744 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

745 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

746 
	#BIO_F_BIO_CTRL
 103

	)

747 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

748 
	#BIO_F_BIO_GETS
 104

	)

749 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

750 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

751 
	#BIO_F_BIO_GET_PORT
 107

	)

752 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

753 
	#BIO_F_BIO_NEW
 108

	)

754 
	#BIO_F_BIO_NEW_FILE
 109

	)

755 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

756 
	#BIO_F_BIO_NREAD
 123

	)

757 
	#BIO_F_BIO_NREAD0
 124

	)

758 
	#BIO_F_BIO_NWRITE
 125

	)

759 
	#BIO_F_BIO_NWRITE0
 122

	)

760 
	#BIO_F_BIO_PUTS
 110

	)

761 
	#BIO_F_BIO_READ
 111

	)

762 
	#BIO_F_BIO_SOCK_INIT
 112

	)

763 
	#BIO_F_BIO_WRITE
 113

	)

764 
	#BIO_F_BUFFER_CTRL
 114

	)

765 
	#BIO_F_CONN_CTRL
 127

	)

766 
	#BIO_F_CONN_STATE
 115

	)

767 
	#BIO_F_FILE_CTRL
 116

	)

768 
	#BIO_F_FILE_READ
 130

	)

769 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

770 
	#BIO_F_MEM_READ
 128

	)

771 
	#BIO_F_MEM_WRITE
 117

	)

772 
	#BIO_F_SSL_NEW
 118

	)

773 
	#BIO_F_WSASTARTUP
 119

	)

776 
	#BIO_R_ACCEPT_ERROR
 100

	)

777 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

778 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

779 
	#BIO_R_BROKEN_PIPE
 124

	)

780 
	#BIO_R_CONNECT_ERROR
 103

	)

781 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

782 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

783 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

784 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

785 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

786 
	#BIO_R_INVALID_ARGUMENT
 125

	)

787 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

788 
	#BIO_R_IN_USE
 123

	)

789 
	#BIO_R_KEEPALIVE
 109

	)

790 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

791 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

792 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

793 
	#BIO_R_NO_PORT_DEFINED
 113

	)

794 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

795 
	#BIO_R_NO_SUCH_FILE
 128

	)

796 
	#BIO_R_NULL_PARAMETER
 115

	)

797 
	#BIO_R_TAG_MISMATCH
 116

	)

798 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

799 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

800 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

801 
	#BIO_R_UNINITIALIZED
 120

	)

802 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

803 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

804 
	#BIO_R_WSASTARTUP
 122

	)

806 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bn.h

72 #i‚de‡
HEADER_BN_H


73 
	#HEADER_BN_H


	)

75 
	~<›ís¶/e_os2.h
>

76 #i‚de‡
OPENSSL_NO_FP_API


77 
	~<°dio.h
>

79 
	~<›ís¶/os¶_typ.h
>

81 #ifde‡ 
__˝lu•lus


97 
	#BN_MUL_COMBA


	)

98 
	#BN_SQR_COMBA


	)

99 
	#BN_RECURSION


	)

112 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
) || \

113 
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
löux
)

114 #i‚de‡
BN_DIV2W


115 
	#BN_DIV2W


	)

122 #ifde‡
SIXTY_FOUR_BIT_LONG


123 
	#BN_ULLONG
 

	)

124 
	#BN_ULONG
 

	)

125 
	#BN_LONG
 

	)

126 
	#BN_BITS
 128

	)

127 
	#BN_BYTES
 8

	)

128 
	#BN_BITS2
 64

	)

129 
	#BN_BITS4
 32

	)

130 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

131 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

132 
	#BN_MASK2l
 (0xffffffffL)

	)

133 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

134 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

135 
	#BN_TBIT
 (0x8000000000000000L)

	)

136 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

137 
	#BN_DEC_FMT1
 "%lu"

	)

138 
	#BN_DEC_FMT2
 "%019lu"

	)

139 
	#BN_DEC_NUM
 19

	)

147 #ifde‡
SIXTY_FOUR_BIT


148 #unde‡
BN_LLONG


149 #unde‡
BN_ULLONG


150 
	#BN_ULONG
 

	)

151 
	#BN_LONG
 

	)

152 
	#BN_BITS
 128

	)

153 
	#BN_BYTES
 8

	)

154 
	#BN_BITS2
 64

	)

155 
	#BN_BITS4
 32

	)

156 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

157 
	#BN_MASK2l
 (0xffffffffL)

	)

158 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

159 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

160 
	#BN_TBIT
 (0x8000000000000000LL)

	)

161 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

162 
	#BN_DEC_FMT1
 "%Œu"

	)

163 
	#BN_DEC_FMT2
 "%019Œu"

	)

164 
	#BN_DEC_NUM
 19

	)

167 #ifde‡
THIRTY_TWO_BIT


168 #ifde‡
BN_LLONG


169 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë&& !deföed(
__GNUC__
)

170 
	#BN_ULLONG
 
__öt64


	)

172 
	#BN_ULLONG
 

	)

175 
	#BN_ULONG
 

	)

176 
	#BN_LONG
 

	)

177 
	#BN_BITS
 64

	)

178 
	#BN_BYTES
 4

	)

179 
	#BN_BITS2
 32

	)

180 
	#BN_BITS4
 16

	)

181 #ifde‡
OPENSSL_SYS_WIN32


183 
	#BN_MASK
 (0xffffffffffffffffL)

	)

185 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

187 
	#BN_MASK2
 (0xffffffffL)

	)

188 
	#BN_MASK2l
 (0xffff)

	)

189 
	#BN_MASK2h1
 (0xffff8000L)

	)

190 
	#BN_MASK2h
 (0xffff0000L)

	)

191 
	#BN_TBIT
 (0x80000000L)

	)

192 
	#BN_DEC_CONV
 (1000000000L)

	)

193 
	#BN_DEC_FMT1
 "%lu"

	)

194 
	#BN_DEC_FMT2
 "%09lu"

	)

195 
	#BN_DEC_NUM
 9

	)

198 #ifde‡
SIXTEEN_BIT


199 #i‚de‡
BN_DIV2W


200 
	#BN_DIV2W


	)

202 
	#BN_ULLONG
 

	)

203 
	#BN_ULONG
 

	)

204 
	#BN_LONG
 

	)

205 
	#BN_BITS
 32

	)

206 
	#BN_BYTES
 2

	)

207 
	#BN_BITS2
 16

	)

208 
	#BN_BITS4
 8

	)

209 
	#BN_MASK
 (0xffffffff)

	)

210 
	#BN_MASK2
 (0xffff)

	)

211 
	#BN_MASK2l
 (0xff)

	)

212 
	#BN_MASK2h1
 (0xff80)

	)

213 
	#BN_MASK2h
 (0xff00)

	)

214 
	#BN_TBIT
 (0x8000)

	)

215 
	#BN_DEC_CONV
 (100000)

	)

216 
	#BN_DEC_FMT1
 "%u"

	)

217 
	#BN_DEC_FMT2
 "%05u"

	)

218 
	#BN_DEC_NUM
 5

	)

221 #ifde‡
EIGHT_BIT


222 #i‚de‡
BN_DIV2W


223 
	#BN_DIV2W


	)

225 
	#BN_ULLONG
 

	)

226 
	#BN_ULONG
 

	)

227 
	#BN_LONG
 

	)

228 
	#BN_BITS
 16

	)

229 
	#BN_BYTES
 1

	)

230 
	#BN_BITS2
 8

	)

231 
	#BN_BITS4
 4

	)

232 
	#BN_MASK
 (0xffff)

	)

233 
	#BN_MASK2
 (0xff)

	)

234 
	#BN_MASK2l
 (0xf)

	)

235 
	#BN_MASK2h1
 (0xf8)

	)

236 
	#BN_MASK2h
 (0xf0)

	)

237 
	#BN_TBIT
 (0x80)

	)

238 
	#BN_DEC_CONV
 (100)

	)

239 
	#BN_DEC_FMT1
 "%u"

	)

240 
	#BN_DEC_FMT2
 "%02u"

	)

241 
	#BN_DEC_NUM
 2

	)

244 
	#BN_DEFAULT_BITS
 1280

	)

246 
	#BN_FLG_MALLOCED
 0x01

	)

247 
	#BN_FLG_STATIC_DATA
 0x02

	)

248 
	#BN_FLG_CONSTTIME
 0x04

	)

254 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

258 #i‚de‡
OPENSSL_NO_DEPRECATED


259 
	#BN_FLG_FREE
 0x8000

	)

261 
	#BN_£t_Êags
(
b
,
n
Ë((b)->
Êags
|=“))

	)

262 
	#BN_gë_Êags
(
b
,
n
Ë((b)->
Êags
&“))

	)

266 
	#BN_wôh_Êags
(
de°
,
b
,
n
Ë((de°)->
d
=(b)->d, \

267 (
de°
)->
t›
=(
b
)->top, \

268 (
de°
)->
dmax
=(
b
)->dmax, \

269 (
de°
)->
√g
=(
b
)->neg, \

270 (
de°
)->
Êags
=(((de°)->Êag†& 
BN_FLG_MALLOCED
) \

271 | ((
b
)->
Êags
 & ~
BN_FLG_MALLOCED
) \

272 | 
BN_FLG_STATIC_DATA
 \

273 | (
n
)))

	)

277 
bignum_°
 
	tBIGNUM
;

279 
bignum_˘x
 
	tBN_CTX
;

280 
bn_blödög_°
 
	tBN_BLINDING
;

281 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

282 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

283 
bn_gícb_°
 
	tBN_GENCB
;

286 
	sbignum_°


288 
BN_ULONG
 *
d
;

289 
t›
;

291 
dmax
;

292 
√g
;

293 
Êags
;

297 
	sbn_m⁄t_˘x_°


299 
ri
;

300 
BIGNUM
 
RR
;

301 
BIGNUM
 
N
;

302 
BIGNUM
 
Ni
;

304 
BN_ULONG
 
n0
;

305 
Êags
;

311 
	sbn_ª˝_˘x_°


313 
BIGNUM
 
N
;

314 
BIGNUM
 
Nr
;

315 
num_bôs
;

316 
shi·
;

317 
Êags
;

321 
	sbn_gícb_°


323 
vî
;

324 *
¨g
;

328 (*
cb_1
)(, , *);

330 (*
cb_2
)(, , 
BN_GENCB
 *);

331 } 
cb
;

334 
BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

336 
	#BN_GENCB_£t_ﬁd
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

337 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

338 
tmp_gícb
->
vî
 = 1; \

339 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

340 
tmp_gícb
->
cb
.
cb_1
 = (
ˇŒback
); }

	)

342 
	#BN_GENCB_£t
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

343 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

344 
tmp_gícb
->
vî
 = 2; \

345 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

346 
tmp_gícb
->
cb
.
cb_2
 = (
ˇŒback
); }

	)

348 
	#BN_¥ime_checks
 0

	)

356 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 1300 ? 2 : \

357 (
b
) >= 850 ? 3 : \

358 (
b
) >= 650 ? 4 : \

359 (
b
) >= 550 ? 5 : \

360 (
b
) >= 450 ? 6 : \

361 (
b
) >= 400 ? 7 : \

362 (
b
) >= 350 ? 8 : \

363 (
b
) >= 300 ? 9 : \

364 (
b
) >= 250 ? 12 : \

365 (
b
) >= 200 ? 15 : \

366 (
b
) >= 150 ? 18 : \

367  27)

	)

369 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

372 
	#BN_abs_is_w‹d
(
a
,
w
Ë(((◊)->
t›
 =1Ë&& (◊)->
d
[0] =(
BN_ULONG
)(w))) || \

373 (((
w
Ë=0Ë&& ((
a
)->
t›
 =0)))

	)

374 
	#BN_is_zîo
(
a
Ë(◊)->
t›
 =0)

	)

375 
	#BN_is_⁄e
(
a
Ë(
	`BN_abs_is_w‹d
(◊),1Ë&& !◊)->
√g
)

	)

376 
	#BN_is_w‹d
(
a
,
w
Ë(
	`BN_abs_is_w‹d
(◊),(w)Ë&& (!(wË|| !◊)->
√g
))

	)

377 
	#BN_is_odd
(
a
Ë((◊)->
t›
 > 0Ë&& (◊)->
d
[0] & 1))

	)

379 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

380 
	#BN_zîo_ex
(
a
) \

382 
BIGNUM
 *
_tmp_bn
 = (
a
); \

383 
_tmp_bn
->
t›
 = 0; \

384 
_tmp_bn
->
√g
 = 0; \

385 } 0)

	)

386 #ifde‡
OPENSSL_NO_DEPRECATED


387 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

389 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

392 c⁄° 
BIGNUM
 *
BN_vÆue_⁄e
();

393 * 
BN_›ti⁄s
();

394 
BN_CTX
 *
BN_CTX_√w
();

395 #i‚de‡
OPENSSL_NO_DEPRECATED


396 
BN_CTX_öô
(
BN_CTX
 *
c
);

398 
BN_CTX_‰ì
(
BN_CTX
 *
c
);

399 
BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

400 
BIGNUM
 *
BN_CTX_gë
(
BN_CTX
 *
˘x
);

401 
BN_CTX_íd
(
BN_CTX
 *
˘x
);

402 
BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

403 
BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

404 
BN_ønd_ønge
(
BIGNUM
 *
∫d
, BIGNUM *
ønge
);

405 
BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, BIGNUM *
ønge
);

406 
BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

407 
BN_num_bôs_w‹d
(
BN_ULONG
);

408 
BIGNUM
 *
BN_√w
();

409 
BN_öô
(
BIGNUM
 *);

410 
BN_˛ór_‰ì
(
BIGNUM
 *
a
);

411 
BIGNUM
 *
BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

412 
BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

413 
BIGNUM
 *
BN_bö2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

414 
BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

415 
BIGNUM
 *
BN_mpi2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

416 
BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

417 
BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

418 
BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

419 
BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

420 
BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

421 
BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

422 
BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,
BN_CTX
 *
˘x
);

427 
BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

432 
	#BN_is_√g©ive
(
a
Ë(◊)->
√g
 !0)

	)

434 
BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

435 
BN_CTX
 *
˘x
);

436 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

437 
BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

438 
BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

439 
BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

440 
BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

441 
BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

442 
BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

443 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

444 
BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

445 
BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

446 
BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

447 
BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

448 
BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

450 
BN_ULONG
 
BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

451 
BN_ULONG
 
BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

452 
BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

453 
BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

454 
BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

455 
BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

456 
BN_ULONG
 
BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

458 
BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

459 
BN_‰ì
(
BIGNUM
 *
a
);

460 
BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

461 
BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

462 
BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

463 
BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,
BN_CTX
 *
˘x
);

465 
BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

466 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

467 
BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

468 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

469 
BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

470 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
ö_m⁄t
);

471 
BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

472 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

473 
BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

474 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
,c⁄° BIGNUM *
m
,

475 
BN_CTX
 *
˘x
,
BN_MONT_CTX
 *
m_˘x
);

476 
BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

477 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

479 
BN_mask_bôs
(
BIGNUM
 *
a
,
n
);

480 #i‚de‡
OPENSSL_NO_FP_API


481 
BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

483 #ifde‡
HEADER_BIO_H


484 
BN_¥öt
(
BIO
 *
Â
, c⁄° 
BIGNUM
 *
a
);

486 
BN_¥öt
(*
Â
, c⁄° 
BIGNUM
 *
a
);

488 
BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

489 
BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

490 
BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

491 
BN_˛ór
(
BIGNUM
 *
a
);

492 
BIGNUM
 *
BN_dup
(c⁄° BIGNUM *
a
);

493 
BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

494 
BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

495 
BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

496 * 
BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

497 * 
BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

498 
BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

499 
BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

500 
BN_gcd
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

501 
BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

502 
BIGNUM
 *
BN_mod_övî£
(BIGNUM *
ªt
,

503 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

504 
BIGNUM
 *
BN_mod_sqπ
(BIGNUM *
ªt
,

505 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

508 #i‚de‡
OPENSSL_NO_DEPRECATED


509 
BIGNUM
 *
BN_gíî©e_¥ime
(BIGNUM *
ªt
,
bôs
,
ß„
,

510 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

511 (*
ˇŒback
)(,,*),*
cb_¨g
);

512 
BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

513 (*
ˇŒback
)(,,*),

514 
BN_CTX
 *
˘x
,*
cb_¨g
);

515 
BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

516 (*
ˇŒback
)(,,*),
BN_CTX
 *
˘x
,*
cb_¨g
,

517 
do_åül_divisi⁄
);

521 
BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
,
bôs
,
ß„
, c⁄° BIGNUM *
add
,

522 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

523 
BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

524 
BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
,

525 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

527 
BN_X931_dîive_¥ime
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

528 (*
cb
)(, , *), *
cb_¨g
,

529 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

530 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
);

531 
BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

532 
BN_X931_gíî©e_¥ime
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

533 
BIGNUM
 *
Xp1
, BIGNUM *
Xp2
,

534 c⁄° 
BIGNUM
 *
Xp
,

535 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
,

536 (*
cb
)(, , *), *
cb_¨g
);

538 
BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

539 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

540 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

541 
BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

542 
BIGNUM
 *
Xp1
, BIGNUM *
Xp2
,

543 c⁄° 
BIGNUM
 *
Xp
,

544 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
,

545 
BN_GENCB
 *
cb
);

547 
BN_MONT_CTX
 *
BN_MONT_CTX_√w
();

548 
BN_MONT_CTX_öô
(
BN_MONT_CTX
 *
˘x
);

549 
BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,

550 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

551 
	#BN_to_m⁄tgomîy
(
r
,
a
,
m⁄t
,
˘x
Ë
	`BN_mod_mul_m⁄tgomîy
(\

552 (
r
),(
a
),&((
m⁄t
)->
RR
),(m⁄t),(
˘x
))

	)

553 
BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,

554 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

555 
BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

556 
BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
,c⁄° 
BIGNUM
 *
mod
,
BN_CTX
 *
˘x
);

557 
BN_MONT_CTX
 *
BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
,BN_MONT_CTX *
‰om
);

558 
BN_MONT_CTX
 *
BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
lock
,

559 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

562 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

563 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

565 
BN_BLINDING
 *
BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

566 
BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

567 
BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
,
BN_CTX
 *
˘x
);

568 
BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

569 
BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

570 
BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

571 
BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

572 
BN_BLINDING_gë_thªad_id
(c⁄° 
BN_BLINDING
 *);

573 
BN_BLINDING_£t_thªad_id
(
BN_BLINDING
 *, );

574 
BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

575 
BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

576 
BN_BLINDING
 *
BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

577 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

578 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

579 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
),

580 
BN_MONT_CTX
 *
m_˘x
);

582 #i‚de‡
OPENSSL_NO_DEPRECATED


583 
BN_£t_∑øms
(
mul
,
high
,
low
,
m⁄t
);

584 
BN_gë_∑øms
(
which
);

587 
BN_RECP_CTX_öô
(
BN_RECP_CTX
 *
ª˝
);

588 
BN_RECP_CTX
 *
BN_RECP_CTX_√w
();

589 
BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

590 
BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
,c⁄° 
BIGNUM
 *
rdiv
,
BN_CTX
 *
˘x
);

591 
BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

592 
BN_RECP_CTX
 *
ª˝
,
BN_CTX
 *
˘x
);

593 
BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

594 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

595 
BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

596 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

607 
BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

608 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

609 
BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

610 
BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

611 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

612 
BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

613 
BN_CTX
 *
˘x
);

614 
BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
,

615 
BN_CTX
 *
˘x
);

616 
BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

617 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

618 
BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

619 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

620 
BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

621 
BN_CTX
 *
˘x
);

622 
BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

623 
BN_CTX
 *
˘x
);

624 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

630 
BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

632 
BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

633 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

634 
BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

635 
BN_CTX
 *
˘x
);

636 
BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

637 
BN_CTX
 *
˘x
);

638 
BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

639 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

640 
BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

641 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

642 
BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

643 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

644 
BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

645 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

646 
BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

647 
BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

651 
BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

652 
BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

653 
BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

654 
BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

655 
BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

657 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_192
();

658 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_224
();

659 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_256
();

660 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_384
();

661 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_521
();

665 
	#bn_ex∑nd
(
a
,
bôs
Ë((((((bôs+
BN_BITS2
-1))/BN_BITS2)Ë<◊)->
dmax
)?\

666 (
a
):
	`bn_ex∑nd2
(◊),(
bôs
+
BN_BITS2
-1)/BN_BITS2))

	)

667 
	#bn_wex∑nd
(
a
,
w‹ds
Ë(((w‹dsË<◊)->
dmax
)?◊):
	`bn_ex∑nd2
(◊),(w‹ds)))

	)

668 
BIGNUM
 *
bn_ex∑nd2
(BIGNUM *
a
, 
w‹ds
);

669 #i‚de‡
OPENSSL_NO_DEPRECATED


670 
BIGNUM
 *
bn_dup_ex∑nd
(c⁄° BIGNUM *
a
, 
w‹ds
);

701 #ifde‡
BN_DEBUG


704 
	~<as£π.h
>

706 #ifde‡
BN_DEBUG_RAND


708 #i‚de‡
RAND_p£udo_byãs


709 
RAND_p£udo_byãs
(*
buf
,
num
);

710 
	#BN_DEBUG_TRIX


	)

712 
	#bn_pﬁluã
(
a
) \

714 c⁄° 
BIGNUM
 *
_bnum1
 = (
a
); \

715 if(
_bnum1
->
t›
 < _bnum1->
dmax
) { \

716 
_tmp_ch¨
; \

720 
BN_ULONG
 *
_nŸ_c⁄°
; \

721 
	`mem˝y
(&
_nŸ_c⁄°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

722 
	`RAND_p£udo_byãs
(&
_tmp_ch¨
, 1); \

723 
	`mem£t
((*)(
_nŸ_c⁄°
 + 
_bnum1
->
t›
), 
_tmp_ch¨
, \

724 (
_bnum1
->
dmax
 - _bnum1->
t›
Ë* (
BN_ULONG
)); \

726 } 0)

	)

727 #ifde‡
BN_DEBUG_TRIX


728 #unde‡
RAND_p£udo_byãs


731 
	#bn_pﬁluã
(
a
)

	)

733 
	#bn_check_t›
(
a
) \

735 c⁄° 
BIGNUM
 *
_bnum2
 = (
a
); \

736 i‡(
_bnum2
 !
NULL
) { \

737 
	`as£π
((
_bnum2
->
t›
 == 0) || \

738 (
_bnum2
->
d
[_bnum2->
t›
 - 1] != 0)); \

739 
	`bn_pﬁluã
(
_bnum2
); \

741 } 0)

	)

743 
	#bn_fix_t›
(
a
Ë
	`bn_check_t›
◊)

	)

747 
	#bn_pﬁluã
(
a
)

	)

748 
	#bn_check_t›
(
a
)

	)

749 
	#bn_fix_t›
(
a
Ë
	`bn_c‹ª˘_t›
◊)

	)

753 
	#bn_c‹ª˘_t›
(
a
) \

755 
BN_ULONG
 *
·l
; \

756 i‡((
a
)->
t›
 > 0) \

758 
·l
&((
a
)->
d
[◊)->
t›
-1]); (a)->top > 0; (a)->top--) \

759 i‡(*(
·l
--)) ; \

761 
	`bn_pﬁluã
(
a
); \

762 }

	)

764 
BN_ULONG
 
bn_mul_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

765 
BN_ULONG
 
bn_mul_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

766 
bn_sqr_w‹ds
(
BN_ULONG
 *
Ω
, c⁄° BN_ULONG *
≠
, 
num
);

767 
BN_ULONG
 
bn_div_w‹ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

768 
BN_ULONG
 
bn_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

769 
BN_ULONG
 
bn_sub_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

772 
BIGNUM
 *
gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

773 
BIGNUM
 *
gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

776 
BIGNUM
 *
gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

777 
BIGNUM
 *
gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

778 
BIGNUM
 *
gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

779 
BIGNUM
 *
gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

780 
BIGNUM
 *
gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

781 
BIGNUM
 *
gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

783 
BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

789 
ERR_lﬂd_BN_°rögs
();

794 
	#BN_F_BNRAND
 127

	)

795 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

796 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

797 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

798 
	#BN_F_BN_BLINDING_NEW
 102

	)

799 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

800 
	#BN_F_BN_BN2DEC
 104

	)

801 
	#BN_F_BN_BN2HEX
 105

	)

802 
	#BN_F_BN_CTX_GET
 116

	)

803 
	#BN_F_BN_CTX_NEW
 106

	)

804 
	#BN_F_BN_CTX_START
 129

	)

805 
	#BN_F_BN_DIV
 107

	)

806 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

807 
	#BN_F_BN_DIV_RECP
 130

	)

808 
	#BN_F_BN_EXP
 123

	)

809 
	#BN_F_BN_EXPAND2
 108

	)

810 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

811 
	#BN_F_BN_GF2M_MOD
 131

	)

812 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

813 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

814 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

815 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

816 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

817 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

818 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

819 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

820 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

821 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

822 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

823 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

824 
	#BN_F_BN_MOD_INVERSE
 110

	)

825 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

826 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

827 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

828 
	#BN_F_BN_MOD_SQRT
 121

	)

829 
	#BN_F_BN_MPI2BN
 112

	)

830 
	#BN_F_BN_NEW
 113

	)

831 
	#BN_F_BN_RAND
 114

	)

832 
	#BN_F_BN_RAND_RANGE
 122

	)

833 
	#BN_F_BN_USUB
 115

	)

836 
	#BN_R_ARG2_LT_ARG3
 100

	)

837 
	#BN_R_BAD_RECIPROCAL
 101

	)

838 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

839 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

840 
	#BN_R_DIV_BY_ZERO
 103

	)

841 
	#BN_R_ENCODING_ERROR
 104

	)

842 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

843 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

844 
	#BN_R_INVALID_LENGTH
 106

	)

845 
	#BN_R_INVALID_RANGE
 115

	)

846 
	#BN_R_NOT_A_SQUARE
 111

	)

847 
	#BN_R_NOT_INITIALIZED
 107

	)

848 
	#BN_R_NO_INVERSE
 108

	)

849 
	#BN_R_NO_SOLUTION
 116

	)

850 
	#BN_R_P_IS_NOT_PRIME
 112

	)

851 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

852 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

854 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/conf.h

59 #i‚de‡ 
HEADER_CONF_H


60 
	#HEADER_CONF_H


	)

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/lhash.h
>

64 
	~<›ís¶/°ack.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/os¶_typ.h
>

70 #ifde‡ 
__˝lu•lus


76 *
£˘i⁄
;

77 *
«me
;

78 *
vÆue
;

79 } 
	tCONF_VALUE
;

81 
DECLARE_STACK_OF
(
CONF_VALUE
)

82 
DECLARE_STACK_OF
(
CONF_MODULE
)

83 
DECLARE_STACK_OF
(
CONF_IMODULE
)

85 
c⁄f_°
;

86 
c⁄f_mëhod_°
;

87 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

89 
	sc⁄f_mëhod_°


91 c⁄° *
«me
;

92 
CONF
 *(*
¸óã
)(
CONF_METHOD
 *
mëh
);

93 (*
öô
)(
CONF
 *
c⁄f
);

94 (*
de°roy
)(
CONF
 *
c⁄f
);

95 (*
de°roy_d©a
)(
CONF
 *
c⁄f
);

96 (*
lﬂd_bio
)(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

97 (*
dump
)(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
bp
);

98 (*
is_numbî
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

99 (*
to_öt
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

100 (*
lﬂd
)(
CONF
 *
c⁄f
, c⁄° *
«me
, *
ñöe
);

105 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

106 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

109 
	tc⁄f_öô_func
(
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

110 
	tc⁄f_föish_func
(
	tCONF_IMODULE
 *
	tmd
);

112 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

113 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

114 
	#CONF_MFLAGS_SILENT
 0x4

	)

115 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

116 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

117 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

119 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

120 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
,
LHASH
 *
hash
);

121 
LHASH
 *
CONF_lﬂd
(LHASH *
c⁄f
,c⁄° *
fûe
,*
ñöe
);

122 #i‚de‡
OPENSSL_NO_FP_API


123 
LHASH
 *
CONF_lﬂd_Â
(LHASH *
c⁄f
, 
FILE
 *
Â
,*
ñöe
);

125 
LHASH
 *
CONF_lﬂd_bio
(LHASH *
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

126 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH
 *
c⁄f
,c⁄° *
£˘i⁄
);

127 *
CONF_gë_°rög
(
LHASH
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
);

128 
CONF_gë_numbî
(
LHASH
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
);

129 
CONF_‰ì
(
LHASH
 *
c⁄f
);

130 
CONF_dump_Â
(
LHASH
 *
c⁄f
, 
FILE
 *
out
);

131 
CONF_dump_bio
(
LHASH
 *
c⁄f
, 
BIO
 *
out
);

133 
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
);

134 
OPENSSL_no_c⁄fig
();

139 
	sc⁄f_°


141 
CONF_METHOD
 *
mëh
;

142 *
mëh_d©a
;

143 
LHASH
 *
d©a
;

146 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

147 
CONF_METHOD
 *
NCONF_deÁu…
();

148 
CONF_METHOD
 *
NCONF_WIN32
();

150 
CONF_METHOD
 *
NCONF_XML
();

152 
NCONF_‰ì
(
CONF
 *
c⁄f
);

153 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

155 
NCONF_lﬂd
(
CONF
 *
c⁄f
,c⁄° *
fûe
,*
ñöe
);

156 #i‚de‡
OPENSSL_NO_FP_API


157 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
,*
ñöe
);

159 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

160 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
£˘i⁄
);

161 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
);

162 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
,

163 *
ªsu…
);

164 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

165 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

169 
NCONF_gë_numbî
(
CONF
 *
c⁄f
,*
group
,*
«me
);

171 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

176 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

177 
Êags
);

178 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

179 
Êags
);

180 
CONF_moduÀs_u∆ﬂd
(
Æl
);

181 
CONF_moduÀs_föish
();

182 
CONF_moduÀs_‰ì
();

183 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

184 
c⁄f_föish_func
 *
ffunc
);

186 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

187 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

188 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

189 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

190 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

191 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

192 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

193 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

194 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

196 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

198 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

199 (*
li°_cb
)(c⁄° *
ñem
, 
Àn
, *
u§
), *
¨g
);

201 
OPENSSL_lﬂd_buûtö_moduÀs
();

207 
ERR_lﬂd_CONF_°rögs
();

212 
	#CONF_F_CONF_DUMP_FP
 104

	)

213 
	#CONF_F_CONF_LOAD
 100

	)

214 
	#CONF_F_CONF_LOAD_BIO
 102

	)

215 
	#CONF_F_CONF_LOAD_FP
 103

	)

216 
	#CONF_F_CONF_MODULES_LOAD
 116

	)

217 
	#CONF_F_DEF_LOAD
 120

	)

218 
	#CONF_F_DEF_LOAD_BIO
 121

	)

219 
	#CONF_F_MODULE_INIT
 115

	)

220 
	#CONF_F_MODULE_LOAD_DSO
 117

	)

221 
	#CONF_F_MODULE_RUN
 118

	)

222 
	#CONF_F_NCONF_DUMP_BIO
 105

	)

223 
	#CONF_F_NCONF_DUMP_FP
 106

	)

224 
	#CONF_F_NCONF_GET_NUMBER
 107

	)

225 
	#CONF_F_NCONF_GET_NUMBER_E
 112

	)

226 
	#CONF_F_NCONF_GET_SECTION
 108

	)

227 
	#CONF_F_NCONF_GET_STRING
 109

	)

228 
	#CONF_F_NCONF_LOAD
 113

	)

229 
	#CONF_F_NCONF_LOAD_BIO
 110

	)

230 
	#CONF_F_NCONF_LOAD_FP
 114

	)

231 
	#CONF_F_NCONF_NEW
 111

	)

232 
	#CONF_F_STR_COPY
 101

	)

235 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

236 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

237 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

238 
	#CONF_R_MISSING_FINISH_FUNCTION
 111

	)

239 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

240 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

241 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

242 
	#CONF_R_NO_CONF
 105

	)

243 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

244 
	#CONF_R_NO_SECTION
 107

	)

245 
	#CONF_R_NO_SUCH_FILE
 114

	)

246 
	#CONF_R_NO_VALUE
 108

	)

247 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

248 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

249 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

251 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

59 #i‚de‡
HEADER_ERR_H


60 
	#HEADER_ERR_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

66 
	~<°dlib.h
>

69 
	~<›ís¶/os¶_typ.h
>

70 #i‚de‡
OPENSSL_NO_BIO


71 
	~<›ís¶/bio.h
>

73 #i‚de‡
OPENSSL_NO_LHASH


74 
	~<›ís¶/lhash.h
>

77 #ifdef 
__˝lu•lus


81 #i‚de‡
OPENSSL_NO_ERR


82 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

84 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

87 
	~<î∫o.h
>

89 
	#ERR_TXT_MALLOCED
 0x01

	)

90 
	#ERR_TXT_STRING
 0x02

	)

92 
	#ERR_FLAG_MARK
 0x01

	)

94 
	#ERR_NUM_ERRORS
 16

	)

95 
	sîr_°©e_°


97 
pid
;

98 
îr_Êags
[
ERR_NUM_ERRORS
];

99 
îr_buf„r
[
ERR_NUM_ERRORS
];

100 *
îr_d©a
[
ERR_NUM_ERRORS
];

101 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

102 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

103 
îr_löe
[
ERR_NUM_ERRORS
];

104 
t›
,
bŸtom
;

105 } 
	tERR_STATE
;

108 
	#ERR_LIB_NONE
 1

	)

109 
	#ERR_LIB_SYS
 2

	)

110 
	#ERR_LIB_BN
 3

	)

111 
	#ERR_LIB_RSA
 4

	)

112 
	#ERR_LIB_DH
 5

	)

113 
	#ERR_LIB_EVP
 6

	)

114 
	#ERR_LIB_BUF
 7

	)

115 
	#ERR_LIB_OBJ
 8

	)

116 
	#ERR_LIB_PEM
 9

	)

117 
	#ERR_LIB_DSA
 10

	)

118 
	#ERR_LIB_X509
 11

	)

120 
	#ERR_LIB_ASN1
 13

	)

121 
	#ERR_LIB_CONF
 14

	)

122 
	#ERR_LIB_CRYPTO
 15

	)

123 
	#ERR_LIB_EC
 16

	)

124 
	#ERR_LIB_SSL
 20

	)

130 
	#ERR_LIB_BIO
 32

	)

131 
	#ERR_LIB_PKCS7
 33

	)

132 
	#ERR_LIB_X509V3
 34

	)

133 
	#ERR_LIB_PKCS12
 35

	)

134 
	#ERR_LIB_RAND
 36

	)

135 
	#ERR_LIB_DSO
 37

	)

136 
	#ERR_LIB_ENGINE
 38

	)

137 
	#ERR_LIB_OCSP
 39

	)

138 
	#ERR_LIB_UI
 40

	)

139 
	#ERR_LIB_COMP
 41

	)

140 
	#ERR_LIB_ECDSA
 42

	)

141 
	#ERR_LIB_ECDH
 43

	)

142 
	#ERR_LIB_STORE
 44

	)

143 
	#ERR_LIB_FIPS
 45

	)

145 
	#ERR_LIB_USER
 128

	)

147 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
__FILE__
,
__LINE__
)

	)

148 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
__FILE__
,
__LINE__
)

	)

149 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

150 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
__FILE__
,
__LINE__
)

	)

151 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
__FILE__
,
__LINE__
)

	)

152 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
__FILE__
,
__LINE__
)

	)

153 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
__FILE__
,
__LINE__
)

	)

154 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
__FILE__
,
__LINE__
)

	)

155 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

156 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
__FILE__
,
__LINE__
)

	)

157 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
__FILE__
,
__LINE__
)

	)

158 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
__FILE__
,
__LINE__
)

	)

159 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
__FILE__
,
__LINE__
)

	)

160 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
__FILE__
,
__LINE__
)

	)

161 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
__FILE__
,
__LINE__
)

	)

162 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
__FILE__
,
__LINE__
)

	)

163 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
__FILE__
,
__LINE__
)

	)

164 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
__FILE__
,
__LINE__
)

	)

165 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
__FILE__
,
__LINE__
)

	)

166 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
__FILE__
,
__LINE__
)

	)

167 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
__FILE__
,
__LINE__
)

	)

168 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
__FILE__
,
__LINE__
)

	)

169 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
__FILE__
,
__LINE__
)

	)

170 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
__FILE__
,
__LINE__
)

	)

171 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
__FILE__
,
__LINE__
)

	)

172 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

173 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
__FILE__
,
__LINE__
)

	)

174 
	#STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_STORE
,(f),‘),
__FILE__
,
__LINE__
)

	)

175 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
__FILE__
,
__LINE__
)

	)

179 
	#ERR_PACK
(
l
,
f
,
r
) ((((()l)&0xffL)*0x1000000)| \

180 (((()
f
)&0xfffL)*0x1000)| \

181 (((()
r
)&0xfffL)))

	)

182 
	#ERR_GET_LIB
(
l
Ë()((((Ó)>>24L)&0xffL)

	)

183 
	#ERR_GET_FUNC
(
l
Ë()((((Ó)>>12L)&0xfffL)

	)

184 
	#ERR_GET_REASON
(
l
Ë()(÷)&0xfffL)

	)

185 
	#ERR_FATAL_ERROR
(
l
Ë()(÷)&
ERR_R_FATAL
)

	)

189 
	#SYS_F_FOPEN
 1

	)

190 
	#SYS_F_CONNECT
 2

	)

191 
	#SYS_F_GETSERVBYNAME
 3

	)

192 
	#SYS_F_SOCKET
 4

	)

193 
	#SYS_F_IOCTLSOCKET
 5

	)

194 
	#SYS_F_BIND
 6

	)

195 
	#SYS_F_LISTEN
 7

	)

196 
	#SYS_F_ACCEPT
 8

	)

197 
	#SYS_F_WSASTARTUP
 9

	)

198 
	#SYS_F_OPENDIR
 10

	)

199 
	#SYS_F_FREAD
 11

	)

203 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

204 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

205 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

206 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

207 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

208 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

209 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

210 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

211 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

212 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

213 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

214 
	#ERR_R_CONF_LIB
 
ERR_LIB_CONF


	)

215 
	#ERR_R_CRYPTO_LIB
 
ERR_LIB_CRYPTO


	)

216 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

217 
	#ERR_R_SSL_LIB
 
ERR_LIB_SSL


	)

218 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

219 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

220 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

221 
	#ERR_R_PKCS12_LIB
 
ERR_LIB_PKCS12


	)

222 
	#ERR_R_RAND_LIB
 
ERR_LIB_RAND


	)

223 
	#ERR_R_DSO_LIB
 
ERR_LIB_DSO


	)

224 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

225 
	#ERR_R_OCSP_LIB
 
ERR_LIB_OCSP


	)

226 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

227 
	#ERR_R_COMP_LIB
 
ERR_LIB_COMP


	)

228 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

229 
	#ERR_R_ECDH_LIB
 
ERR_LIB_ECDH


	)

230 
	#ERR_R_STORE_LIB
 
ERR_LIB_STORE


	)

232 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

233 
	#ERR_R_BAD_ASN1_OBJECT_HEADER
 59

	)

234 
	#ERR_R_BAD_GET_ASN1_OBJECT_CALL
 60

	)

235 
	#ERR_R_EXPECTING_AN_ASN1_SEQUENCE
 61

	)

236 
	#ERR_R_ASN1_LENGTH_MISMATCH
 62

	)

237 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

240 
	#ERR_R_FATAL
 64

	)

241 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

242 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

243 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

244 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

245 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

251 
	sERR_°rög_d©a_°


253 
îr‹
;

254 c⁄° *
°rög
;

255 } 
	tERR_STRING_DATA
;

257 
ERR_put_îr‹
(
lib
, 
func
,
ªas⁄
,c⁄° *
fûe
,
löe
);

258 
ERR_£t_îr‹_d©a
(*
d©a
,
Êags
);

260 
ERR_gë_îr‹
();

261 
ERR_gë_îr‹_löe
(c⁄° **
fûe
,*
löe
);

262 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

263 c⁄° **
d©a
, *
Êags
);

264 
ERR_≥ek_îr‹
();

265 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
,*
löe
);

266 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

267 c⁄° **
d©a
,*
Êags
);

268 
ERR_≥ek_œ°_îr‹
();

269 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
,*
löe
);

270 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

271 c⁄° **
d©a
,*
Êags
);

272 
ERR_˛ór_îr‹
();

273 *
ERR_îr‹_°rög
(
e
,*
buf
);

274 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

275 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

276 c⁄° *
ERR_func_îr‹_°rög
(
e
);

277 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

278 
ERR_¥öt_îr‹s_cb
((*
cb
)(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

279 *
u
);

280 #i‚de‡
OPENSSL_NO_FP_API


281 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

283 #i‚de‡
OPENSSL_NO_BIO


284 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

285 
ERR_add_îr‹_d©a
(
num
, ...);

287 
ERR_lﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

288 
ERR_u∆ﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

289 
ERR_lﬂd_ERR_°rögs
();

290 
ERR_lﬂd_¸y±o_°rögs
();

291 
ERR_‰ì_°rögs
();

293 
ERR_ªmove_°©e
(
pid
);

294 
ERR_STATE
 *
ERR_gë_°©e
();

296 #i‚de‡
OPENSSL_NO_LHASH


297 
LHASH
 *
ERR_gë_°rög_èbÀ
();

298 
LHASH
 *
ERR_gë_îr_°©e_èbÀ
();

299 
ERR_ªÀa£_îr_°©e_èbÀ
(
LHASH
 **
hash
);

302 
ERR_gë_√xt_îr‹_libøry
();

304 
ERR_£t_m¨k
();

305 
ERR_p›_to_m¨k
();

307 #ifde‡
OPENSSL_FIPS


308 
öt_ERR_£t_°©e_func
(
ERR_STATE
 *(*
gë_func
)(),

309 (*
ªmove_func
)(
pid
));

310 
öt_ERR_lib_öô
();

317 c⁄° 
ERR_FNS
 *
ERR_gë_im∂emíèti⁄
();

320 
ERR_£t_im∂emíèti⁄
(c⁄° 
ERR_FNS
 *
‚s
);

322 #ifdef 
__˝lu•lus


	@/usr/include/openssl/evp.h

59 #i‚de‡
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifde‡
OPENSSL_ALGORITHM_DEFINES


63 
	~<›ís¶/›ís¶c⁄f.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

67 #unde‡
OPENSSL_ALGORITHM_DEFINES


70 
	~<›ís¶/os¶_typ.h
>

72 
	~<›ís¶/symhacks.h
>

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

78 #ifde‡
OPENSSL_FIPS


79 
	~<›ís¶/fùs.h
>

89 
	#EVP_MAX_MD_SIZE
 64

	)

90 
	#EVP_MAX_KEY_LENGTH
 32

	)

91 
	#EVP_MAX_IV_LENGTH
 16

	)

92 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

94 
	#PKCS5_SALT_LEN
 8

	)

96 
	#PKCS5_DEFAULT_ITER
 2048

	)

98 
	~<›ís¶/obje˘s.h
>

100 
	#EVP_PK_RSA
 0x0001

	)

101 
	#EVP_PK_DSA
 0x0002

	)

102 
	#EVP_PK_DH
 0x0004

	)

103 
	#EVP_PK_EC
 0x0008

	)

104 
	#EVP_PKT_SIGN
 0x0010

	)

105 
	#EVP_PKT_ENC
 0x0020

	)

106 
	#EVP_PKT_EXCH
 0x0040

	)

107 
	#EVP_PKS_RSA
 0x0100

	)

108 
	#EVP_PKS_DSA
 0x0200

	)

109 
	#EVP_PKS_EC
 0x0400

	)

110 
	#EVP_PKT_EXP
 0x1000

	)

112 
	#EVP_PKEY_NONE
 
NID_undef


	)

113 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

114 
	#EVP_PKEY_RSA2
 
NID_rß


	)

115 
	#EVP_PKEY_DSA
 
NID_dß


	)

116 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

117 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

118 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

119 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

120 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

121 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

123 #ifdef 
__˝lu•lus


130 
	sevp_pkey_°


132 
ty≥
;

133 
ßve_ty≥
;

134 
ª„ªn˚s
;

136 *
±r
;

137 #i‚de‡
OPENSSL_NO_RSA


138 
rß_°
 *
rß
;

140 #i‚de‡
OPENSSL_NO_DSA


141 
dß_°
 *
dß
;

143 #i‚de‡
OPENSSL_NO_DH


144 
dh_°
 *
dh
;

146 } 
pkey
;

147 
ßve_∑ømëîs
;

148 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

151 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

152 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

153 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

154 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

167 
	sevp_pkey_md_°


169 
oid
;

170 
EVP_MD
 *
md
;

171 
EVP_PKEY_METHOD
 *
pkey
;

172 } 
	tEVP_PKEY_MD
;

174 
	#EVP_rß_md2
() \

175 
	`EVP_PKEY_MD_add
(
NID_md2WôhRSAEn¸y±i⁄
,\

176 
	`EVP_rß_pkcs1
(),
	`EVP_md2
())

	)

177 
	#EVP_rß_md5
() \

178 
	`EVP_PKEY_MD_add
(
NID_md5WôhRSAEn¸y±i⁄
,\

179 
	`EVP_rß_pkcs1
(),
	`EVP_md5
())

	)

180 
	#EVP_rß_sha0
() \

181 
	`EVP_PKEY_MD_add
(
NID_shaWôhRSAEn¸y±i⁄
,\

182 
	`EVP_rß_pkcs1
(),
	`EVP_sha
())

	)

183 
	#EVP_rß_sha1
() \

184 
	`EVP_PKEY_MD_add
(
NID_sha1WôhRSAEn¸y±i⁄
,\

185 
	`EVP_rß_pkcs1
(),
	`EVP_sha1
())

	)

186 
	#EVP_rß_rùemd160
() \

187 
	`EVP_PKEY_MD_add
(
NID_rùemd160WôhRSA
,\

188 
	`EVP_rß_pkcs1
(),
	`EVP_rùemd160
())

	)

189 
	#EVP_rß_mdc2
() \

190 
	`EVP_PKEY_MD_add
(
NID_mdc2WôhRSA
,\

191 
	`EVP_rß_o˘ë_°rög
(),
	`EVP_mdc2
())

	)

192 
	#EVP_dß_sha
() \

193 
	`EVP_PKEY_MD_add
(
NID_dßWôhSHA
,\

194 
	`EVP_dß
(),
	`EVP_sha
())

	)

195 
	#EVP_dß_sha1
() \

196 
	`EVP_PKEY_MD_add
(
NID_dßWôhSHA1
,\

197 
	`EVP_dß
(),
	`EVP_sha1
())

	)

199 
	sevp_pkey_mëhod_°


201 *
«me
;

202 
Êags
;

203 
ty≥
;

204 
oid
;

205 
í¸y±_oid
;

207 (*
sign
)();

208 (*
vîify
)();

210 (*
£t
)();

211 (*
gë
)();

212 (*
í¸y±
)();

213 (*
de¸y±
)();

214 (*
i2d
)();

215 (*
d2i
)();

216 (*
dup
)();

217 } 
pub
,
¥iv
;

218 (*
£t_a¢1_∑ømëîs
)();

219 (*
gë_a¢1_∑ømëîs
)();

220 } 
	tEVP_PKEY_METHOD
;

223 #i‚de‡
EVP_MD


224 
	sív_md_°


226 
ty≥
;

227 
pkey_ty≥
;

228 
md_size
;

229 
Êags
;

230 (*
öô
)(
EVP_MD_CTX
 *
˘x
);

231 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

232 (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,*
md
);

233 (*
c›y
)(
EVP_MD_CTX
 *
to
,c⁄° EVP_MD_CTX *
‰om
);

234 (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
);

237 (*
sign
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

238 *
sigªt
, *
sigÀn
, *
key
);

239 (*
vîify
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

240 c⁄° *
sigbuf
, 
sigÀn
,

241 *
key
);

242 
ªquúed_pkey_ty≥
[5];

243 
block_size
;

244 
˘x_size
;

247 
	tevp_sign_mëhod
(
	tty≥
,c⁄° *
	tm
,

248 
	tm_Àngth
,*
	tsigªt
,

249 *
	tsigÀn
, *
	tkey
);

250 
	tevp_vîify_mëhod
(
	tty≥
,c⁄° *
	tm
,

251 
	tm_Àngth
,c⁄° *
	tsigbuf
,

252 
	tsigÀn
, *
	tkey
);

256 
EVP_MD_CTX
 *
m˘x
;

257 *
key
;

258 } 
	tEVP_MD_SVCTX
;

260 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

263 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

265 
	#EVP_MD_FLAG_SVCTX
 0x0800

	)

267 
	#EVP_PKEY_NULL_mëhod
 
NULL
,NULL,{0,0,0,0}

	)

269 #i‚de‡
OPENSSL_NO_DSA


270 
	#EVP_PKEY_DSA_mëhod
 (
evp_sign_mëhod
 *)
DSA_sign
, \

271 (
evp_vîify_mëhod
 *)
DSA_vîify
, \

272 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

273 
EVP_PKEY_DSA4
,0}

	)

275 
	#EVP_PKEY_DSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

279 #i‚de‡
OPENSSL_NO_RSA


280 
	#EVP_PKEY_RSA_mëhod
 (
evp_sign_mëhod
 *)
RSA_sign
, \

281 (
evp_vîify_mëhod
 *)
RSA_vîify
, \

282 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

283 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 \

284 (
evp_sign_mëhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

285 (
evp_vîify_mëhod
 *)
RSA_vîify_ASN1_OCTET_STRING
, \

286 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

288 
	#EVP_PKEY_RSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

289 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 
EVP_PKEY_NULL_mëhod


	)

294 
	sív_md_˘x_°


296 c⁄° 
EVP_MD
 *
dige°
;

297 
ENGINE
 *
ígöe
;

298 
Êags
;

299 *
md_d©a
;

304 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

306 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

308 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

310 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

313 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

314 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

315 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

316 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

317 
	#M_EVP_MD_CTX_FLAG_PSS_SALT
(
˘x
) \

318 ((
˘x
->
Êags
>>16Ë&0xFFFFË

	)

319 
	#EVP_MD_CTX_FLAG_PSS_MDLEN
 0xFFFF

	)

320 
	#EVP_MD_CTX_FLAG_PSS_MREC
 0xFFFE

	)

322 
	sevp_cùhî_°


324 
nid
;

325 
block_size
;

326 
key_Àn
;

327 
iv_Àn
;

328 
Êags
;

329 (*
öô
)(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
key
,

330 c⁄° *
iv
, 
íc
);

331 (*
do_cùhî
)(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

332 c⁄° *
ö
, 
öl
);

333 (*
˛ónup
)(
EVP_CIPHER_CTX
 *);

334 
˘x_size
;

335 (*
£t_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

336 (*
gë_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

337 (*
˘æ
)(
EVP_CIPHER_CTX
 *, 
ty≥
, 
¨g
, *
±r
);

338 *
≠p_d©a
;

345 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

346 
	#EVP_CIPH_ECB_MODE
 0x1

	)

347 
	#EVP_CIPH_CBC_MODE
 0x2

	)

348 
	#EVP_CIPH_CFB_MODE
 0x3

	)

349 
	#EVP_CIPH_OFB_MODE
 0x4

	)

350 
	#EVP_CIPH_MODE
 0x7

	)

352 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

354 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

356 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

358 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

360 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

362 
	#EVP_CIPH_NO_PADDING
 0x100

	)

364 
	#EVP_CIPH_RAND_KEY
 0x200

	)

366 
	#EVP_CIPH_FLAG_FIPS
 0x400

	)

368 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x800

	)

370 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

372 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

376 
	#EVP_CTRL_INIT
 0x0

	)

377 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

378 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

379 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

380 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

381 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

382 
	#EVP_CTRL_RAND_KEY
 0x6

	)

384 
	sevp_cùhî_öfo_°


386 c⁄° 
EVP_CIPHER
 *
cùhî
;

387 
iv
[
EVP_MAX_IV_LENGTH
];

388 } 
	tEVP_CIPHER_INFO
;

390 
	sevp_cùhî_˘x_°


392 c⁄° 
EVP_CIPHER
 *
cùhî
;

393 
ENGINE
 *
ígöe
;

394 
í¸y±
;

395 
buf_Àn
;

397 
oiv
[
EVP_MAX_IV_LENGTH
];

398 
iv
[
EVP_MAX_IV_LENGTH
];

399 
buf
[
EVP_MAX_BLOCK_LENGTH
];

400 
num
;

402 *
≠p_d©a
;

403 
key_Àn
;

404 
Êags
;

405 *
cùhî_d©a
;

406 
föÆ_u£d
;

407 
block_mask
;

408 
föÆ
[
EVP_MAX_BLOCK_LENGTH
];

411 
	sevp_Encode_Ctx_°


413 
num
;

414 
Àngth
;

419 
íc_d©a
[80];

420 
löe_num
;

421 
ex≥˘_∆
;

422 } 
	tEVP_ENCODE_CTX
;

425 (
EVP_PBE_KEYGEN
)(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
, 
	t∑s¶í
,

426 
	tASN1_TYPE
 *
	t∑øm
, c⁄° 
	tEVP_CIPHER
 *
	tcùhî
,

427 c⁄° 
	tEVP_MD
 *
	tmd
, 
	tí_de
);

429 #i‚de‡
OPENSSL_NO_RSA


430 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

431 (*)(
rß
))

	)

434 #i‚de‡
OPENSSL_NO_DSA


435 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

436 (*)(
dß
))

	)

439 #i‚de‡
OPENSSL_NO_DH


440 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

441 (*)(
dh
))

	)

446 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

447 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

448 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

449 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

451 #ifde‡
OPENSSL_USE_NEW_FUNCTIONS


453 
	#M_EVP_MD_size
(
e
Ë(”)->
md_size
)

	)

454 
	#M_EVP_MD_block_size
(
e
Ë(”)->
block_size
)

	)

455 
	#M_EVP_MD_CTX_£t_Êags
(
˘x
,
Êgs
Ë((˘x)->
Êags
|=(Êgs))

	)

456 
	#M_EVP_MD_CTX_˛ór_Êags
(
˘x
,
Êgs
Ë((˘x)->
Êags
&=~(Êgs))

	)

457 
	#M_EVP_MD_CTX_ã°_Êags
(
˘x
,
Êgs
Ë((˘x)->
Êags
&(Êgs))

	)

458 
	#M_EVP_MD_ty≥
(
e
Ë(”)->
ty≥
)

	)

459 
	#M_EVP_MD_CTX_ty≥
(
e
Ë
	`M_EVP_MD_ty≥
(
	`M_EVP_MD_CTX_md
”))

	)

460 
	#M_EVP_MD_CTX_md
(
e
Ë(”)->
dige°
)

	)

462 
	#M_EVP_CIPHER_CTX_£t_Êags
(
˘x
,
Êgs
Ë((˘x)->
Êags
|=(Êgs))

	)

464 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

465 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

466 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

467 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

468 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

469 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

471 c⁄° 
EVP_MD
 * 
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

472 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

473 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

474 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

476 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

477 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

478 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

479 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

480 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

481 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

482 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

484 c⁄° 
EVP_CIPHER
 * 
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

485 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

486 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

487 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

488 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

489 * 
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

490 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

491 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

492 
EVP_CIPHER_CTX_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

493 
	#EVP_CIPHER_CTX_mode
(
e
Ë(
	`EVP_CIPHER_CTX_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

495 
	#EVP_MD_ty≥
(
e
Ë(”)->
ty≥
)

	)

496 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

497 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

498 
	#EVP_MD_pkey_ty≥
(
e
Ë(”)->
pkey_ty≥
)

	)

499 
	#EVP_MD_size
(
e
Ë(”)->
md_size
)

	)

500 
	#EVP_MD_block_size
(
e
Ë(”)->
block_size
)

	)

502 
	#EVP_MD_CTX_md
(
e
Ë(”)->
dige°
)

	)

503 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(”)->
dige°
)

	)

504 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(”)->
dige°
)

	)

505 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(”)->
dige°
)

	)

507 
	#EVP_CIPHER_nid
(
e
Ë(”)->
nid
)

	)

508 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

509 
	#EVP_CIPHER_block_size
(
e
Ë(”)->
block_size
)

	)

510 
	#EVP_CIPHER_key_Àngth
(
e
Ë(”)->
key_Àn
)

	)

511 
	#EVP_CIPHER_iv_Àngth
(
e
Ë(”)->
iv_Àn
)

	)

512 
	#EVP_CIPHER_Êags
(
e
Ë(”)->
Êags
)

	)

513 
	#EVP_CIPHER_mode
(
e
Ë((”)->
Êags
Ë& 
EVP_CIPH_MODE
)

	)

515 
	#EVP_CIPHER_CTX_cùhî
(
e
Ë(”)->
cùhî
)

	)

516 
	#EVP_CIPHER_CTX_nid
(
e
Ë(”)->
cùhî
->
nid
)

	)

517 
	#EVP_CIPHER_CTX_block_size
(
e
Ë(”)->
cùhî
->
block_size
)

	)

518 
	#EVP_CIPHER_CTX_key_Àngth
(
e
Ë(”)->
key_Àn
)

	)

519 
	#EVP_CIPHER_CTX_iv_Àngth
(
e
Ë(”)->
cùhî
->
iv_Àn
)

	)

520 
	#EVP_CIPHER_CTX_gë_≠p_d©a
(
e
Ë(”)->
≠p_d©a
)

	)

521 
	#EVP_CIPHER_CTX_£t_≠p_d©a
(
e
,
d
Ë(”)->
≠p_d©a
=(*)(d))

	)

522 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

523 
	#EVP_CIPHER_CTX_Êags
(
e
Ë(”)->
cùhî
->
Êags
)

	)

524 
	#EVP_CIPHER_CTX_mode
(
e
Ë(”)->
cùhî
->
Êags
 & 
EVP_CIPH_MODE
)

	)

527 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

528 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

530 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

531 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

532 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

533 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

534 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

535 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

536 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

537 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

539 #ifde‡
CONST_STRICT


540 
BIO_£t_md
(
BIO
 *,c⁄° 
EVP_MD
 *
md
);

542 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

544 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

545 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

546 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

547 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

548 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

550 #ifde‡
OPENSSL_USE_NEW_FUNCTIONS


551 
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

552 *
out
,

553 c⁄° *
ö
,

554 
öl
);

556 
	#EVP_Cùhî
(
c
,
o
,
i
,
l
Ë(c)->
cùhî
->
	`do_cùhî
((c),(o),(i),÷))

	)

559 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

560 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

561 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

562 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

563 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

564 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

565 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

566 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

568 
EVP_MD_CTX_öô
(
EVP_MD_CTX
 *
˘x
);

569 
EVP_MD_CTX_˛ónup
(
EVP_MD_CTX
 *
˘x
);

570 
EVP_MD_CTX
 *
EVP_MD_CTX_¸óã
();

571 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
˘x
);

572 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

573 #ifde‡
OPENSSL_USE_NEW_FUNCTIONS


574 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

575 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

576 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
,
Êags
);

578 
	#EVP_MD_CTX_£t_Êags
(
˘x
,
Êgs
Ë((˘x)->
Êags
|=(Êgs))

	)

579 
	#EVP_MD_CTX_˛ór_Êags
(
˘x
,
Êgs
Ë((˘x)->
Êags
&=~(Êgs))

	)

580 
	#EVP_MD_CTX_ã°_Êags
(
˘x
,
Êgs
Ë((˘x)->
Êags
&(Êgs))

	)

582 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

583 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
,c⁄° *
d
,

584 
size_t
 
˙t
);

585 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

586 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

587 *
md
, *
size
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

589 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

590 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

591 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

593 
EVP_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

594 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

595 * 
EVP_gë_pw_¥om±
();

597 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
,c⁄° 
EVP_MD
 *
md
,

598 c⁄° *
ß…
, c⁄° *
d©a
,

599 
d©Æ
, 
cou¡
, *
key
,*
iv
);

601 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

602 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

603 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
,
Êags
);

605 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

606 c⁄° *
key
, c⁄° *
iv
);

607 
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

608 c⁄° *
key
, c⁄° *
iv
);

609 
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

610 *
oué
, c⁄° *
ö
, 
öl
);

611 
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

612 
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

614 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

615 c⁄° *
key
, c⁄° *
iv
);

616 
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

617 c⁄° *
key
, c⁄° *
iv
);

618 
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

619 *
oué
, c⁄° *
ö
, 
öl
);

620 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

621 
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

623 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

624 c⁄° *
key
,c⁄° *
iv
,

625 
íc
);

626 
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

627 c⁄° *
key
,c⁄° *
iv
,

628 
íc
);

629 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

630 *
oué
, c⁄° *
ö
, 
öl
);

631 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

632 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

634 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
,

635 
EVP_PKEY
 *
pkey
);

637 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,c⁄° *
sigbuf
,

638 
sigÀn
,
EVP_PKEY
 *
pkey
);

640 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
ty≥
,

641 c⁄° *
ek
, 
ekl
, c⁄° *
iv
,

642 
EVP_PKEY
 *
¥iv
);

643 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

645 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

646 **
ek
, *
ekl
, *
iv
,

647 
EVP_PKEY
 **
pubk
, 
≈ubk
);

648 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
,*
out
,*
oué
);

650 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

651 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

652 c⁄° *
ö
,
öl
);

653 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
);

654 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

656 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

657 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

658 c⁄° *
ö
, 
öl
);

659 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

660 *
out
, *
oué
);

661 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

663 
EVP_CIPHER_CTX_öô
(
EVP_CIPHER_CTX
 *
a
);

664 
EVP_CIPHER_CTX_˛ónup
(
EVP_CIPHER_CTX
 *
a
);

665 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

666 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
a
);

667 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

668 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

669 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

670 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

672 #i‚de‡
OPENSSL_NO_BIO


673 
BIO_METHOD
 *
BIO_f_md
();

674 
BIO_METHOD
 *
BIO_f_ba£64
();

675 
BIO_METHOD
 *
BIO_f_cùhî
();

676 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

677 
BIO_£t_cùhî
(
BIO
 *
b
,c⁄° 
EVP_CIPHER
 *
c
,c⁄° *
k
,

678 c⁄° *
i
, 
íc
);

681 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

682 #i‚de‡
OPENSSL_NO_MD2


683 c⁄° 
EVP_MD
 *
EVP_md2
();

685 #i‚de‡
OPENSSL_NO_MD4


686 c⁄° 
EVP_MD
 *
EVP_md4
();

688 #i‚de‡
OPENSSL_NO_MD5


689 c⁄° 
EVP_MD
 *
EVP_md5
();

691 #i‚de‡
OPENSSL_NO_SHA


692 c⁄° 
EVP_MD
 *
EVP_sha
();

693 c⁄° 
EVP_MD
 *
EVP_sha1
();

694 c⁄° 
EVP_MD
 *
EVP_dss
();

695 c⁄° 
EVP_MD
 *
EVP_dss1
();

696 c⁄° 
EVP_MD
 *
EVP_ecdß
();

698 #i‚de‡
OPENSSL_NO_SHA256


699 c⁄° 
EVP_MD
 *
EVP_sha224
();

700 c⁄° 
EVP_MD
 *
EVP_sha256
();

702 #i‚de‡
OPENSSL_NO_SHA512


703 c⁄° 
EVP_MD
 *
EVP_sha384
();

704 c⁄° 
EVP_MD
 *
EVP_sha512
();

706 #i‚de‡
OPENSSL_NO_RIPEMD


707 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

709 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

710 #i‚de‡
OPENSSL_NO_DES


711 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

712 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

713 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

714 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

715 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

716 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

717 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

718 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

719 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

720 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

721 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

723 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

724 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

726 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

727 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

728 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

729 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

730 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

731 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

732 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

733 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

734 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

735 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

736 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

740 #ifde‡
OPENSSL_OPENBSD_DEV_CRYPTO


741 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_des_ede3_cbc
();

742 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_rc4
();

743 c⁄° 
EVP_MD
 *
EVP_dev_¸y±o_md5
();

747 #i‚de‡
OPENSSL_NO_RC4


748 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

749 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

751 #i‚de‡
OPENSSL_NO_RC2


752 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

753 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

754 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

755 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

756 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

757 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

758 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

760 #i‚de‡
OPENSSL_NO_BF


761 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

762 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

763 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

764 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

765 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

767 #i‚de‡
OPENSSL_NO_CAST


768 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

769 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

770 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

771 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

772 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

774 #i‚de‡
OPENSSL_NO_AES


775 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

776 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

777 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

778 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

779 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

780 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

781 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

783 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

785 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

786 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

787 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

788 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

789 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

790 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

791 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

793 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

795 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

796 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

797 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

798 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

799 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

800 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

801 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

803 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

806 #i‚de‡
OPENSSL_NO_CAMELLIA


807 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

808 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

809 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

810 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

811 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

812 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

813 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

814 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

815 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

816 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

817 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

818 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

819 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

820 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

821 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

822 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

823 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

824 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

825 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

826 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

827 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

830 #i‚de‡
OPENSSL_NO_SEED


831 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

832 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

833 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

834 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

835 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

838 
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
();

839 
OPENSSL_add_Æl_Æg‹ôhms_c⁄f
();

841 #ifde‡
OPENSSL_LOAD_CONF


842 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

843 
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

845 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

846 
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

849 
O≥nSSL_add_Æl_cùhîs
();

850 
O≥nSSL_add_Æl_dige°s
();

851 
	#SSLóy_add_Æl_Æg‹ôhms
(Ë
	`O≥nSSL_add_Æl_Æg‹ôhms
()

	)

852 
	#SSLóy_add_Æl_cùhîs
(Ë
	`O≥nSSL_add_Æl_cùhîs
()

	)

853 
	#SSLóy_add_Æl_dige°s
(Ë
	`O≥nSSL_add_Æl_dige°s
()

	)

855 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

856 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

858 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

859 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

860 
EVP_˛ónup
();

862 
EVP_PKEY_de¸y±
(*
dec_key
,

863 c⁄° *
íc_key
,
íc_key_Àn
,

864 
EVP_PKEY
 *
¥iv©e_key
);

865 
EVP_PKEY_í¸y±
(*
íc_key
,

866 c⁄° *
key
,
key_Àn
,

867 
EVP_PKEY
 *
pub_key
);

868 
EVP_PKEY_ty≥
(
ty≥
);

869 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

870 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

871 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
,
ty≥
,*
key
);

873 #i‚de‡
OPENSSL_NO_RSA


874 
rß_°
;

875 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
,
rß_°
 *
key
);

876 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

878 #i‚de‡
OPENSSL_NO_DSA


879 
dß_°
;

880 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
,
dß_°
 *
key
);

881 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

883 #i‚de‡
OPENSSL_NO_DH


884 
dh_°
;

885 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
,
dh_°
 *
key
);

886 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

889 
EVP_PKEY
 * 
EVP_PKEY_√w
();

890 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

892 
EVP_PKEY
 * 
d2i_PublicKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

893 
Àngth
);

894 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

896 
EVP_PKEY
 * 
d2i_Priv©eKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

897 
Àngth
);

898 
EVP_PKEY
 * 
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

899 
Àngth
);

900 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

902 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

903 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

904 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
,
mode
);

905 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

907 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

909 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

912 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

913 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

916 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

917 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

920 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

921 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

922 
í_de
);

923 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

924 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

925 
keyÀn
, *
out
);

926 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

927 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

928 
í_de
);

930 
PKCS5_PBE_add
();

932 
EVP_PBE_CùhîInô
 (
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

933 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

934 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

935 
EVP_PBE_KEYGEN
 *
keygí
);

936 
EVP_PBE_˛ónup
();

938 #ifde‡
OPENSSL_FIPS


939 #i‚de‡
OPENSSL_NO_ENGINE


940 
öt_EVP_MD_£t_ígöe_ˇŒbacks
(

941 (*
íg_md_öô
)(
ENGINE
 *
im∂
),

942 (*
íg_md_fö
)(
ENGINE
 *
im∂
),

943 (*
íg_md_evp
)

944 (
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 **
±y≥
, 
ENGINE
 *
im∂
));

945 
öt_EVP_MD_öô_ígöe_ˇŒbacks
();

946 
öt_EVP_CIPHER_£t_ígöe_ˇŒbacks
(

947 (*
íg_cùh_fö
)(
ENGINE
 *
im∂
),

948 (*
íg_cùh_evp
)

949 (
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 **
pcùh
, 
ENGINE
 *
im∂
));

950 
öt_EVP_CIPHER_öô_ígöe_ˇŒbacks
();

954 
EVP_add_Æg_moduÀ
();

960 
ERR_lﬂd_EVP_°rögs
();

965 
	#EVP_F_AES_INIT_KEY
 133

	)

966 
	#EVP_F_ALG_MODULE_INIT
 138

	)

967 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

968 
	#EVP_F_D2I_PKEY
 100

	)

969 
	#EVP_F_DO_EVP_ENC_ENGINE
 140

	)

970 
	#EVP_F_DO_EVP_ENC_ENGINE_FULL
 141

	)

971 
	#EVP_F_DO_EVP_MD_ENGINE
 139

	)

972 
	#EVP_F_DO_EVP_MD_ENGINE_FULL
 142

	)

973 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

974 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

975 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

976 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

977 
	#EVP_F_EVP_CIPHERINIT
 137

	)

978 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

979 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

980 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

981 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

982 
	#EVP_F_EVP_DIGESTINIT
 136

	)

983 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

984 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

985 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

986 
	#EVP_F_EVP_OPENINIT
 102

	)

987 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

988 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

989 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

990 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

991 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

992 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

993 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

994 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

995 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

996 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

997 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

998 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

999 
	#EVP_F_EVP_PKEY_NEW
 106

	)

1000 
	#EVP_F_EVP_RIJNDAEL
 126

	)

1001 
	#EVP_F_EVP_SIGNFINAL
 107

	)

1002 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

1003 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

1004 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

1005 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

1006 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

1007 
	#EVP_F_RC5_CTRL
 125

	)

1010 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

1011 
	#EVP_R_ASN1_LIB
 140

	)

1012 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

1013 
	#EVP_R_BAD_DECRYPT
 100

	)

1014 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

1015 
	#EVP_R_BN_DECODE_ERROR
 112

	)

1016 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

1017 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1018 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1019 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1020 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1021 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1022 
	#EVP_R_DECODE_ERROR
 114

	)

1023 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1024 
	#EVP_R_DISABLED_FOR_FIPS
 144

	)

1025 
	#EVP_R_ENCODE_ERROR
 115

	)

1026 
	#EVP_R_ERROR_LOADING_SECTION
 145

	)

1027 
	#EVP_R_ERROR_SETTING_FIPS_MODE
 146

	)

1028 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

1029 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1030 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1031 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1032 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

1033 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1034 
	#EVP_R_FIPS_MODE_NOT_SUPPORTED
 147

	)

1035 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1036 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1037 
	#EVP_R_INVALID_FIPS_MODE
 148

	)

1038 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1039 
	#EVP_R_IV_TOO_LARGE
 102

	)

1040 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1041 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1042 
	#EVP_R_NO_CIPHER_SET
 131

	)

1043 
	#EVP_R_NO_DIGEST_SET
 139

	)

1044 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

1045 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

1046 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

1047 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

1048 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1049 
	#EVP_R_SEED_KEY_SETUP_FAILED
 162

	)

1050 
	#EVP_R_UNKNOWN_OPTION
 149

	)

1051 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1052 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1053 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1054 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1055 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1056 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1057 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1058 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1059 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1060 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1061 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

1063 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/md5.h

59 #i‚de‡
HEADER_MD5_H


60 
	#HEADER_MD5_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #ifde‡
OPENSSL_NO_MD5


70 #îr‹ 
MD5
 
is
 
dißbÀd
.

80 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë|| deföed(
__LP32__
)

81 
	#MD5_LONG
 

	)

82 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

83 
	#MD5_LONG
 

	)

84 
	#MD5_LONG_LOG2
 3

	)

93 
	#MD5_LONG
 

	)

96 
	#MD5_CBLOCK
 64

	)

97 
	#MD5_LBLOCK
 (
MD5_CBLOCK
/4)

	)

98 
	#MD5_DIGEST_LENGTH
 16

	)

100 
	sMD5°©e_°


102 
MD5_LONG
 
A
,
B
,
C
,
D
;

103 
MD5_LONG
 
Nl
,
Nh
;

104 
MD5_LONG
 
d©a
[
MD5_LBLOCK
];

105 
num
;

106 } 
	tMD5_CTX
;

108 #ifde‡
OPENSSL_FIPS


109 
¥iv©e_MD5_Inô
(
MD5_CTX
 *
c
);

111 
MD5_Inô
(
MD5_CTX
 *
c
);

112 
MD5_Upd©e
(
MD5_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

113 
MD5_FöÆ
(*
md
, 
MD5_CTX
 *
c
);

114 *
MD5
(c⁄° *
d
, 
size_t
 
n
, *
md
);

115 
MD5_Tønsf‹m
(
MD5_CTX
 *
c
, c⁄° *
b
);

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/objects.h

59 #i‚de‡
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifde‡
USE_OBJ_MAC


65 
	~<›ís¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undeföed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

73 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

74 
	#NID_Æg‹ôhm
 38

	)

75 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rßdsi
 "rßdsi"

	)

78 
	#NID_rßdsi
 1

	)

79 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

100 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

101 
	#NID_rßEn¸y±i⁄
 6

	)

102 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

105 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

106 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

107 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

110 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

111 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

112 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

116 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

121 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_comm⁄Name
 "CN"

	)

133 
	#LN_comm⁄Name
 "comm⁄Name"

	)

134 
	#NID_comm⁄Name
 13

	)

135 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

137 
	#SN_cou¡ryName
 "C"

	)

138 
	#LN_cou¡ryName
 "cou¡ryName"

	)

139 
	#NID_cou¡ryName
 14

	)

140 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

142 
	#SN_loˇlôyName
 "L"

	)

143 
	#LN_loˇlôyName
 "loˇlôyName"

	)

144 
	#NID_loˇlôyName
 15

	)

145 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvö˚Name
 "ST"

	)

151 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

152 
	#NID_°©eOrProvö˚Name
 16

	)

153 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

155 
	#SN_‹g™iz©i⁄Name
 "O"

	)

156 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

157 
	#NID_‹g™iz©i⁄Name
 17

	)

158 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

160 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

161 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

162 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

163 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

165 
	#SN_rß
 "RSA"

	)

166 
	#LN_rß
 "rß"

	)

167 
	#NID_rß
 19

	)

168 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

183 
	#NID_pkcs7_ívñ›ed
 23

	)

184 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

195 
	#NID_pkcs7_í¸y±ed
 26

	)

196 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

203 
	#NID_dhKeyAgªemít
 28

	)

204 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idó_cbc
 "IDEA-CBC"

	)

234 
	#LN_idó_cbc
 "idó-cbc"

	)

235 
	#NID_idó_cbc
 34

	)

236 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idó_cfb64
 "idó-cfb"

	)

240 
	#NID_idó_cfb64
 35

	)

242 
	#SN_idó_ecb
 "IDEA-ECB"

	)

243 
	#LN_idó_ecb
 "idó-ecb"

	)

244 
	#NID_idó_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

268 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

269 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

270 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

271 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idó_ofb64
 "idó-ofb"

	)

289 
	#NID_idó_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

296 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

297 
	#NID_pkcs9_emaûAddªss
 48

	)

298 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

301 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

302 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

305 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

306 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

309 
	#NID_pkcs9_mesßgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signögTime
 "signögTime"

	)

313 
	#NID_pkcs9_signögTime
 52

	)

314 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

317 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

318 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

321 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

322 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

325 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

326 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

329 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

330 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

333 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

334 
	#NID_√tsˇ≥
 57

	)

335 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

338 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

339 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

340 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

342 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

344 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

345 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

371 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

372 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

373 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

374 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

377 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

378 
	#NID_dßWôhSHA
 66

	)

379 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

381 
	#SN_dß_2
 "DSA-ﬁd"

	)

382 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

383 
	#NID_dß_2
 67

	)

384 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

387 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

396 
	#LN_id_pbkdf2
 "PBKDF2"

	)

397 
	#NID_id_pbkdf2
 69

	)

398 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

400 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

401 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

402 
	#NID_dßWôhSHA1_2
 70

	)

404 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

406 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

407 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

408 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

409 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

411 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

412 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

413 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

414 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

416 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

417 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

418 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

419 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

421 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

422 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

423 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

424 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

426 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

427 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

428 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

429 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

431 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

432 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

433 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

434 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

436 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

437 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

438 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

439 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

441 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

442 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

443 
	#NID_√tsˇ≥_commít
 78

	)

444 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

446 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

447 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

448 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

449 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

451 
	#SN_desx_cbc
 "DESX-CBC"

	)

452 
	#LN_desx_cbc
 "desx-cbc"

	)

453 
	#NID_desx_cbc
 80

	)

455 
	#SN_id_˚
 "id-˚"

	)

456 
	#NID_id_˚
 81

	)

457 
	#OBJ_id_˚
 2L,5L,29L

	)

459 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

460 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

461 
	#NID_subje˘_key_idítifõr
 82

	)

462 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

464 
	#SN_key_ußge
 "keyUßge"

	)

465 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

466 
	#NID_key_ußge
 83

	)

467 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

469 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

470 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

471 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

472 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

474 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

475 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

476 
	#NID_subje˘_Æt_«me
 85

	)

477 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

479 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

480 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

481 
	#NID_issuî_Æt_«me
 86

	)

482 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

484 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

485 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

486 
	#NID_basic_c⁄°øöts
 87

	)

487 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

489 
	#SN_¸l_numbî
 "¸lNumbî"

	)

490 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

491 
	#NID_¸l_numbî
 88

	)

492 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

494 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

495 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

496 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

497 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

499 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

500 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

501 
	#NID_auth‹ôy_key_idítifõr
 90

	)

502 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

504 
	#SN_bf_cbc
 "BF-CBC"

	)

505 
	#LN_bf_cbc
 "bf-cbc"

	)

506 
	#NID_bf_cbc
 91

	)

507 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

509 
	#SN_bf_ecb
 "BF-ECB"

	)

510 
	#LN_bf_ecb
 "bf-ecb"

	)

511 
	#NID_bf_ecb
 92

	)

513 
	#SN_bf_cfb64
 "BF-CFB"

	)

514 
	#LN_bf_cfb64
 "bf-cfb"

	)

515 
	#NID_bf_cfb64
 93

	)

517 
	#SN_bf_ofb64
 "BF-OFB"

	)

518 
	#LN_bf_ofb64
 "bf-ofb"

	)

519 
	#NID_bf_ofb64
 94

	)

521 
	#SN_mdc2
 "MDC2"

	)

522 
	#LN_mdc2
 "mdc2"

	)

523 
	#NID_mdc2
 95

	)

524 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

527 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

528 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

529 
	#NID_mdc2WôhRSA
 96

	)

530 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

532 
	#SN_rc4_40
 "RC4-40"

	)

533 
	#LN_rc4_40
 "rc4-40"

	)

534 
	#NID_rc4_40
 97

	)

536 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

537 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

538 
	#NID_rc2_40_cbc
 98

	)

540 
	#SN_givíName
 "G"

	)

541 
	#LN_givíName
 "givíName"

	)

542 
	#NID_givíName
 99

	)

543 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

545 
	#SN_su∫ame
 "S"

	)

546 
	#LN_su∫ame
 "su∫ame"

	)

547 
	#NID_su∫ame
 100

	)

548 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

550 
	#SN_öôüls
 "I"

	)

551 
	#LN_öôüls
 "öôüls"

	)

552 
	#NID_öôüls
 101

	)

553 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

555 
	#SN_uniqueIdítifõr
 "UID"

	)

556 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

557 
	#NID_uniqueIdítifõr
 102

	)

558 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

560 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

561 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

562 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

563 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

565 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

566 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

567 
	#NID_md5WôhRSA
 104

	)

568 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

570 
	#SN_£rülNumbî
 "SN"

	)

571 
	#LN_£rülNumbî
 "£rülNumbî"

	)

572 
	#NID_£rülNumbî
 105

	)

573 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

575 
	#SN_tôÀ
 "T"

	)

576 
	#LN_tôÀ
 "tôÀ"

	)

577 
	#NID_tôÀ
 106

	)

578 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

580 
	#SN_des¸ùti⁄
 "D"

	)

581 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

582 
	#NID_des¸ùti⁄
 107

	)

583 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

586 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

587 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

588 
	#NID_ˇ°5_cbc
 108

	)

589 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

591 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

592 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

593 
	#NID_ˇ°5_ecb
 109

	)

595 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

596 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

597 
	#NID_ˇ°5_cfb64
 110

	)

599 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

600 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

601 
	#NID_ˇ°5_ofb64
 111

	)

603 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

604 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

605 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

611 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

612 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

613 
	#NID_dßWôhSHA1
 113

	)

614 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

616 
	#NID_md5_sha1
 114

	)

617 
	#SN_md5_sha1
 "MD5-SHA1"

	)

618 
	#LN_md5_sha1
 "md5-sha1"

	)

620 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

621 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

622 
	#NID_sha1WôhRSA
 115

	)

623 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

625 
	#SN_dß
 "DSA"

	)

626 
	#LN_dß
 "dßEn¸y±i⁄"

	)

627 
	#NID_dß
 116

	)

628 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

630 
	#SN_rùemd160
 "RIPEMD160"

	)

631 
	#LN_rùemd160
 "rùemd160"

	)

632 
	#NID_rùemd160
 117

	)

633 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

637 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

638 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

639 
	#NID_rùemd160WôhRSA
 119

	)

640 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

650 
	#SN_rc5_cbc
 "RC5-CBC"

	)

651 
	#LN_rc5_cbc
 "rc5-cbc"

	)

652 
	#NID_rc5_cbc
 120

	)

653 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

655 
	#SN_rc5_ecb
 "RC5-ECB"

	)

656 
	#LN_rc5_ecb
 "rc5-ecb"

	)

657 
	#NID_rc5_ecb
 121

	)

659 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

660 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

661 
	#NID_rc5_cfb64
 122

	)

663 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

664 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

665 
	#NID_rc5_ofb64
 123

	)

667 
	#SN_æe_com¥essi⁄
 "RLE"

	)

668 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

669 
	#NID_æe_com¥essi⁄
 124

	)

670 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

672 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

673 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

674 
	#NID_zlib_com¥essi⁄
 125

	)

675 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

677 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

678 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

679 
	#NID_ext_key_ußge
 126

	)

680 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

682 
	#SN_id_pkix
 "PKIX"

	)

683 
	#NID_id_pkix
 127

	)

684 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

686 
	#SN_id_kp
 "id-kp"

	)

687 
	#NID_id_kp
 128

	)

688 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

692 
	#SN_£rvî_auth
 "£rvîAuth"

	)

693 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

694 
	#NID_£rvî_auth
 129

	)

695 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

697 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

698 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

699 
	#NID_˛õ¡_auth
 130

	)

700 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

702 
	#SN_code_sign
 "codeSignög"

	)

703 
	#LN_code_sign
 "CodêSignög"

	)

704 
	#NID_code_sign
 131

	)

705 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

707 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

708 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

709 
	#NID_emaû_¥Ÿe˘
 132

	)

710 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

712 
	#SN_time_°amp
 "timeSèmpög"

	)

713 
	#LN_time_°amp
 "TimêSèmpög"

	)

714 
	#NID_time_°amp
 133

	)

715 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

719 
	#SN_ms_code_öd
 "msCodeInd"

	)

720 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

721 
	#NID_ms_code_öd
 134

	)

722 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

724 
	#SN_ms_code_com
 "msCodeCom"

	)

725 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

726 
	#NID_ms_code_com
 135

	)

727 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

729 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

730 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

731 
	#NID_ms_˘l_sign
 136

	)

732 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

734 
	#SN_ms_sgc
 "msSGC"

	)

735 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

736 
	#NID_ms_sgc
 137

	)

737 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

739 
	#SN_ms_efs
 "msEFS"

	)

740 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

741 
	#NID_ms_efs
 138

	)

742 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

746 
	#SN_ns_sgc
 "nsSGC"

	)

747 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

748 
	#NID_ns_sgc
 139

	)

749 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

751 
	#SN_dñè_¸l
 "dñèCRL"

	)

752 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

753 
	#NID_dñè_¸l
 140

	)

754 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

756 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

757 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

758 
	#NID_¸l_ªas⁄
 141

	)

759 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

761 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

762 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

763 
	#NID_övÆidôy_d©e
 142

	)

764 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

766 
	#SN_sx√t
 "SXNëID"

	)

767 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

768 
	#NID_sx√t
 143

	)

769 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

773 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

774 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

776 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

777 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

778 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

779 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

781 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

782 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

783 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

784 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

786 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

787 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

788 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

789 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

791 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

792 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

793 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

794 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

796 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

797 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

798 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

799 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

801 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

802 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

803 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

804 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

806 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

808 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

810 
	#LN_keyBag
 "keyBag"

	)

811 
	#NID_keyBag
 150

	)

812 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

814 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

815 
	#NID_pkcs8ShroudedKeyBag
 151

	)

816 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

818 
	#LN_˚πBag
 "˚πBag"

	)

819 
	#NID_˚πBag
 152

	)

820 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

822 
	#LN_¸lBag
 "¸lBag"

	)

823 
	#NID_¸lBag
 153

	)

824 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

826 
	#LN_£¸ëBag
 "£¸ëBag"

	)

827 
	#NID_£¸ëBag
 154

	)

828 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

830 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

831 
	#NID_ß„C⁄ã¡sBag
 155

	)

832 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

834 
	#LN_‰õndlyName
 "‰õndlyName"

	)

835 
	#NID_‰õndlyName
 156

	)

836 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

838 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

839 
	#NID_loˇlKeyID
 157

	)

840 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

842 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

844 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

845 
	#NID_x509Cîtifiˇã
 158

	)

846 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

848 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

849 
	#NID_sdsiCîtifiˇã
 159

	)

850 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

852 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

854 
	#LN_x509Cæ
 "x509Cæ"

	)

855 
	#NID_x509Cæ
 160

	)

856 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

860 
	#LN_pbes2
 "PBES2"

	)

861 
	#NID_pbes2
 161

	)

862 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

864 
	#LN_pbmac1
 "PBMAC1"

	)

865 
	#NID_pbmac1
 162

	)

866 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

868 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

869 
	#NID_hmacWôhSHA1
 163

	)

870 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

874 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

875 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

876 
	#NID_id_qt_˝s
 164

	)

877 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

879 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

880 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

881 
	#NID_id_qt_unŸi˚
 165

	)

882 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

884 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

885 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

886 
	#NID_rc2_64_cbc
 166

	)

888 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

889 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

890 
	#NID_SMIMEC≠abûôõs
 167

	)

891 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

893 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

894 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

895 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

896 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

898 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

899 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

900 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

901 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

903 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

904 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

905 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

906 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

910 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

911 
	#SN_ms_ext_ªq
 "msExtReq"

	)

912 
	#NID_ms_ext_ªq
 171

	)

913 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

915 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

916 
	#SN_ext_ªq
 "extReq"

	)

917 
	#NID_ext_ªq
 172

	)

918 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

920 
	#SN_«me
 "«me"

	)

921 
	#LN_«me
 "«me"

	)

922 
	#NID_«me
 173

	)

923 
	#OBJ_«me
 
OBJ_X509
,41L

	)

925 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

926 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

927 
	#NID_dnQuÆifõr
 174

	)

928 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

930 
	#SN_id_≥
 "id-≥"

	)

931 
	#NID_id_≥
 175

	)

932 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

934 
	#SN_id_ad
 "id-ad"

	)

935 
	#NID_id_ad
 176

	)

936 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

938 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

939 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

940 
	#NID_öfo_ac˚ss
 177

	)

941 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

943 
	#SN_ad_OCSP
 "OCSP"

	)

944 
	#LN_ad_OCSP
 "OCSP"

	)

945 
	#NID_ad_OCSP
 178

	)

946 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

948 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

949 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

950 
	#NID_ad_ˇ_issuîs
 179

	)

951 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

953 
	#SN_OCSP_sign
 "OCSPSignög"

	)

954 
	#LN_OCSP_sign
 "OCSP Signög"

	)

955 
	#NID_OCSP_sign
 180

	)

956 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

959 
	~<›ís¶/bio.h
>

960 
	~<›ís¶/a¢1.h
>

962 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

963 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

964 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

965 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

966 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

967 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

969 
	#OBJ_NAME_ALIAS
 0x8000

	)

971 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

972 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

975 #ifde‡ 
__˝lu•lus


979 
	sobj_«me_°


981 
ty≥
;

982 
Æüs
;

983 c⁄° *
«me
;

984 c⁄° *
d©a
;

985 } 
	tOBJ_NAME
;

987 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

990 
OBJ_NAME_öô
();

991 
OBJ_NAME_√w_ödex
((*
hash_func
)(const *),

992 (*
cmp_func
)(const *, const *),

993 (*
‰ì_func
)(const *, , const *));

994 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
,
ty≥
);

995 
OBJ_NAME_add
(c⁄° *
«me
,
ty≥
,c⁄° *
d©a
);

996 
OBJ_NAME_ªmove
(c⁄° *
«me
,
ty≥
);

997 
OBJ_NAME_˛ónup
(
ty≥
);

998 
OBJ_NAME_do_Æl
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

999 *
¨g
);

1000 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

1001 *
¨g
);

1003 
ASN1_OBJECT
 * 
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

1004 
ASN1_OBJECT
 * 
OBJ_nid2obj
(
n
);

1005 c⁄° * 
OBJ_nid2 
(
n
);

1006 c⁄° * 
OBJ_nid2¢
(
n
);

1007 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

1008 
ASN1_OBJECT
 * 
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

1009 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1010 
OBJ_txt2nid
(c⁄° *
s
);

1011 
OBJ_ 2nid
(c⁄° *
s
);

1012 
OBJ_¢2nid
(c⁄° *
s
);

1013 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
,c⁄° ASN1_OBJECT *
b
);

1014 c⁄° * 
OBJ_b£¨ch
(c⁄° *
key
,c⁄° *
ba£
,
num
,
size
,

1015 (*
cmp
)(const *, const *));

1016 c⁄° * 
OBJ_b£¨ch_ex
(c⁄° *
key
,c⁄° *
ba£
,
num
,

1017 
size
, (*
cmp
)(c⁄° *, c⁄° *), 
Êags
);

1019 
OBJ_√w_nid
(
num
);

1020 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1021 
OBJ_¸óã
(c⁄° *
oid
,c⁄° *
¢
,c⁄° *
 
);

1022 
OBJ_˛ónup
();

1023 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1029 
ERR_lﬂd_OBJ_°rögs
();

1034 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1035 
	#OBJ_F_OBJ_CREATE
 100

	)

1036 
	#OBJ_F_OBJ_DUP
 101

	)

1037 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1038 
	#OBJ_F_OBJ_NID2LN
 102

	)

1039 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1040 
	#OBJ_F_OBJ_NID2SN
 104

	)

1043 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1044 
	#OBJ_R_UNKNOWN_NID
 101

	)

1046 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

28 
	#OPENSSL_VERSION_NUMBER
 0x0090802fL

	)

29 #ifde‡
OPENSSL_FIPS


30 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 0.9.8e-fùs-rhñ5 01 Ju»2008"

	)

32 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 0.9.8e-rhñ5 01 Ju»2008"

	)

34 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

85 
	#SHLIB_VERSION_HISTORY
 ""

	)

86 
	#SHLIB_VERSION_NUMBER
 "0.9.8"

	)

	@/usr/include/openssl/pem.h

59 #i‚de‡
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<›ís¶/e_os2.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 #i‚de‡
OPENSSL_NO_STACK


67 
	~<›ís¶/°ack.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m2.h
>

73 #ifde‡ 
__˝lu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WôhRSAEn¸y±i⁄


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WôhRSAEn¸y±i⁄


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WôhRSAEn¸y±i⁄


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

129 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

130 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

131 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

132 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

133 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

134 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

135 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

139 
	sPEM_Encode_Sól_°


141 
EVP_ENCODE_CTX
 
ícode
;

142 
EVP_MD_CTX
 
md
;

143 
EVP_CIPHER_CTX
 
cùhî
;

144 } 
	tPEM_ENCODE_SEAL_CTX
;

147 
	#PEM_TYPE_ENCRYPTED
 10

	)

148 
	#PEM_TYPE_MIC_ONLY
 20

	)

149 
	#PEM_TYPE_MIC_CLEAR
 30

	)

150 
	#PEM_TYPE_CLEAR
 40

	)

152 
	s≥m_ªcù_°


154 *
«me
;

155 
X509_NAME
 *
dn
;

157 
cùhî
;

158 
key_íc
;

160 } 
	tPEM_USER
;

162 
	s≥m_˘x_°


164 
ty≥
;

167 
vîsi⁄
;

168 
mode
;

169 } 
¥oc_ty≥
;

171 *
domaö
;

174 
cùhî
;

177 } 
DEK_öfo
;

179 
PEM_USER
 *
‹igö©‹
;

181 
num_ªcùõ¡
;

182 
PEM_USER
 **
ªcùõ¡
;

184 #i‚de‡
OPENSSL_NO_STACK


185 
STACK
 *
x509_chaö
;

187 *
x509_chaö
;

189 
EVP_MD
 *
md
;

191 
md_íc
;

192 
md_Àn
;

193 *
md_d©a
;

195 
EVP_CIPHER
 *
dec
;

196 
key_Àn
;

197 *
key
;

202 
d©a_íc
;

203 
d©a_Àn
;

204 *
d©a
;

205 } 
	tPEM_CTX
;

212 #ifde‡
OPENSSL_NO_FP_API


214 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

215 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

216 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

220 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

221 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

223 (((
ty≥
 *(*)(
	`D2I_OF
—y≥),*,
FILE
 *,ty≥ **,
≥m_∑ssw‹d_cb
 *,*))
	`›ís¶_fˇ°
(
PEM_ASN1_ªad
))(
d2i_
##
a¢1
, 
°r
,
Â
,
x
,
cb
,
u
)); \

224 }

	)

226 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

227 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

229 ((((*)(
	`I2D_OF
(
ty≥
),c⁄° *,
FILE
 *,ty≥ *, c⁄° 
EVP_CIPHER
 *,*,, 
≥m_∑ssw‹d_cb
 *,*))
	`›ís¶_fˇ°
(
PEM_ASN1_wrôe
))(
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL)); \

230 }

	)

232 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

233 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

235 ((((*)(
	`I2D_OF_c⁄°
(
ty≥
),c⁄° *,
FILE
 *, c⁄°Åy≥ *, c⁄° 
EVP_CIPHER
 *,*,, 
≥m_∑ssw‹d_cb
 *,*))
	`›ís¶_fˇ°
(
PEM_ASN1_wrôe
))(
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL)); \

236 }

	)

238 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

239 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

240 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

241 *
u
) \

243 ((((*)(
	`I2D_OF
(
ty≥
),c⁄° *,
FILE
 *,ty≥ *, c⁄° 
EVP_CIPHER
 *,*,, 
≥m_∑ssw‹d_cb
 *,*))
	`›ís¶_fˇ°
(
PEM_ASN1_wrôe
))(
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)); \

244 }

	)

246 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

247 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

248 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

249 *
u
) \

251 ((((*)(
	`I2D_OF_c⁄°
(
ty≥
),c⁄° *,
FILE
 *,ty≥ *, c⁄° 
EVP_CIPHER
 *,*,, 
≥m_∑ssw‹d_cb
 *,*))
	`›ís¶_fˇ°
(
PEM_ASN1_wrôe
))(
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)); \

252 }

	)

256 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

257 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

259 (((
ty≥
 *(*)(
	`D2I_OF
—y≥),c⁄° *,
BIO
 *,ty≥ **,
≥m_∑ssw‹d_cb
 *,*))
	`›ís¶_fˇ°
(
PEM_ASN1_ªad_bio
))(
d2i_
##
a¢1
, 
°r
,
bp
,
x
,
cb
,
u
)); \

260 }

	)

262 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

263 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

265 ((((*)(
	`I2D_OF
(
ty≥
),c⁄° *,
BIO
 *,ty≥ *, c⁄° 
EVP_CIPHER
 *,*,, 
≥m_∑ssw‹d_cb
 *,*))
	`›ís¶_fˇ°
(
PEM_ASN1_wrôe_bio
))(
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL)); \

266 }

	)

268 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

269 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

271 ((((*)(
	`I2D_OF_c⁄°
(
ty≥
),c⁄° *,
BIO
 *,c⁄°Åy≥ *, c⁄° 
EVP_CIPHER
 *,*,, 
≥m_∑ssw‹d_cb
 *,*))
	`›ís¶_fˇ°
(
PEM_ASN1_wrôe_bio
))(
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL)); \

272 }

	)

274 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

275 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

276 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

278 ((((*)(
	`I2D_OF
(
ty≥
),c⁄° *,
BIO
 *,ty≥ *,c⁄° 
EVP_CIPHER
 *,*,,
≥m_∑ssw‹d_cb
 *,*))
	`›ís¶_fˇ°
(
PEM_ASN1_wrôe_bio
))(
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)); \

279 }

	)

281 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

282 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

283 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

285 ((((*)(
	`I2D_OF_c⁄°
(
ty≥
),c⁄° *,
BIO
 *,ty≥ *,c⁄° 
EVP_CIPHER
 *,*,,
≥m_∑ssw‹d_cb
 *,*))
	`›ís¶_fˇ°
(
PEM_ASN1_wrôe_bio
))(
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)); \

286 }

	)

288 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

289 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

290 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

292 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

293 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

294 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

296 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

297 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

298 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

300 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

301 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

302 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

304 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

305 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

306 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

308 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

309 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

310 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

312 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

313 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

314 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

316 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

317 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

318 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

322 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë|| deföed(
OPENSSL_NO_FP_API
)

324 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

325 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

326 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

330 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

331 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

333 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

334 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

336 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

337 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

339 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

340 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

341 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

345 #i‚de‡
OPENSSL_NO_BIO


346 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

347 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

349 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

350 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

352 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

353 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

355 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

356 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

357 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

361 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
Ë

	)

362 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
Ë

	)

363 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
Ë

	)

367 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

368 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

369 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

371 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

372 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

373 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

375 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

376 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

377 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

379 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

380 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

381 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

383 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

384 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

385 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

387 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

388 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

389 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

391 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

392 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

393 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

395 #ifde‡
SSLEAY_MACROS


397 
	#PEM_wrôe_SSL_SESSION
(
Â
,
x
) \

398 
	`PEM_ASN1_wrôe
(((*)())
i2d_SSL_SESSION
, \

399 
PEM_STRING_SSL_SESSION
,
Â
, (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

400 
	#PEM_wrôe_X509
(
Â
,
x
) \

401 
	`PEM_ASN1_wrôe
(((*)())
i2d_X509
,
PEM_STRING_X509
,
Â
, \

402 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

403 
	#PEM_wrôe_X509_REQ
(
Â
,
x
Ë
	`PEM_ASN1_wrôe
( \

404 ((*)())
i2d_X509_REQ
,
PEM_STRING_X509_REQ
,
Â
,(*)
x
, \

405 
NULL
,NULL,0,NULL,NULL)

	)

406 
	#PEM_wrôe_X509_CRL
(
Â
,
x
) \

407 
	`PEM_ASN1_wrôe
(((*)())
i2d_X509_CRL
,
PEM_STRING_X509_CRL
, \

408 
Â
,(*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

409 
	#PEM_wrôe_RSAPriv©eKey
(
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

410 
	`PEM_ASN1_wrôe
(((*)())
i2d_RSAPriv©eKey
,
PEM_STRING_RSA
,
Â
,\

411 (*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

412 
	#PEM_wrôe_RSAPublicKey
(
Â
,
x
) \

413 
	`PEM_ASN1_wrôe
(((*)())
i2d_RSAPublicKey
,\

414 
PEM_STRING_RSA_PUBLIC
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

415 
	#PEM_wrôe_DSAPriv©eKey
(
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

416 
	`PEM_ASN1_wrôe
(((*)())
i2d_DSAPriv©eKey
,
PEM_STRING_DSA
,
Â
,\

417 (*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

418 
	#PEM_wrôe_Priv©eKey
(
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

419 
	`PEM_ASN1_wrôe
(((*)())
i2d_Priv©eKey
,\

420 (((
x
)->
ty≥
 =
EVP_PKEY_DSA
)?
PEM_STRING_DSA
:
PEM_STRING_RSA
),\

421 
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

422 
	#PEM_wrôe_PKCS7
(
Â
,
x
) \

423 
	`PEM_ASN1_wrôe
(((*)())
i2d_PKCS7
,
PEM_STRING_PKCS7
,
Â
, \

424 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

425 
	#PEM_wrôe_DH∑øms
(
Â
,
x
) \

426 
	`PEM_ASN1_wrôe
(((*)())
i2d_DH∑øms
,
PEM_STRING_DHPARAMS
,
Â
,\

427 (*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

429 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
(
Â
,
x
) \

430 
	`PEM_ASN1_wrôe
(((*)())
i2d_NETSCAPE_CERT_SEQUENCE
, \

431 
PEM_STRING_X509
,
Â
, \

432 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

434 
	#PEM_ªad_SSL_SESSION
(
Â
,
x
,
cb
,
u
Ë(
SSL_SESSION
 *)
	`PEM_ASN1_ªad
( \

435 (*(*)())
d2i_SSL_SESSION
,
PEM_STRING_SSL_SESSION
,
Â
,(**)
x
,
cb
,
u
)

	)

436 
	#PEM_ªad_X509
(
Â
,
x
,
cb
,
u
Ë(
X509
 *)
	`PEM_ASN1_ªad
( \

437 (*(*)())
d2i_X509
,
PEM_STRING_X509
,
Â
,(**)
x
,
cb
,
u
)

	)

438 
	#PEM_ªad_X509_REQ
(
Â
,
x
,
cb
,
u
Ë(
X509_REQ
 *)
	`PEM_ASN1_ªad
( \

439 (*(*)())
d2i_X509_REQ
,
PEM_STRING_X509_REQ
,
Â
,(**)
x
,
cb
,
u
)

	)

440 
	#PEM_ªad_X509_CRL
(
Â
,
x
,
cb
,
u
Ë(
X509_CRL
 *)
	`PEM_ASN1_ªad
( \

441 (*(*)())
d2i_X509_CRL
,
PEM_STRING_X509_CRL
,
Â
,(**)
x
,
cb
,
u
)

	)

442 
	#PEM_ªad_RSAPriv©eKey
(
Â
,
x
,
cb
,
u
Ë(
RSA
 *)
	`PEM_ASN1_ªad
( \

443 (*(*)())
d2i_RSAPriv©eKey
,
PEM_STRING_RSA
,
Â
,(**)
x
,
cb
,
u
)

	)

444 
	#PEM_ªad_RSAPublicKey
(
Â
,
x
,
cb
,
u
Ë(
RSA
 *)
	`PEM_ASN1_ªad
( \

445 (*(*)())
d2i_RSAPublicKey
,
PEM_STRING_RSA_PUBLIC
,
Â
,(**)
x
,
cb
,
u
)

	)

446 
	#PEM_ªad_DSAPriv©eKey
(
Â
,
x
,
cb
,
u
Ë(
DSA
 *)
	`PEM_ASN1_ªad
( \

447 (*(*)())
d2i_DSAPriv©eKey
,
PEM_STRING_DSA
,
Â
,(**)
x
,
cb
,
u
)

	)

448 
	#PEM_ªad_Priv©eKey
(
Â
,
x
,
cb
,
u
Ë(
EVP_PKEY
 *)
	`PEM_ASN1_ªad
( \

449 (*(*)())
d2i_Priv©eKey
,
PEM_STRING_EVP_PKEY
,
Â
,(**)
x
,
cb
,
u
)

	)

450 
	#PEM_ªad_PKCS7
(
Â
,
x
,
cb
,
u
Ë(
PKCS7
 *)
	`PEM_ASN1_ªad
( \

451 (*(*)())
d2i_PKCS7
,
PEM_STRING_PKCS7
,
Â
,(**)
x
,
cb
,
u
)

	)

452 
	#PEM_ªad_DH∑øms
(
Â
,
x
,
cb
,
u
Ë(
DH
 *)
	`PEM_ASN1_ªad
( \

453 (*(*)())
d2i_DH∑øms
,
PEM_STRING_DHPARAMS
,
Â
,(**)
x
,
cb
,
u
)

	)

455 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
(
Â
,
x
,
cb
,
u
) \

456 (
NETSCAPE_CERT_SEQUENCE
 *)
	`PEM_ASN1_ªad
( \

457 (*(*)())
d2i_NETSCAPE_CERT_SEQUENCE
,
PEM_STRING_X509
,
Â
,\

458 (**)
x
,
cb
,
u
)

	)

460 
	#PEM_wrôe_bio_X509
(
bp
,
x
) \

461 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_X509
,
PEM_STRING_X509
,
bp
, \

462 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

463 
	#PEM_wrôe_bio_X509_REQ
(
bp
,
x
Ë
	`PEM_ASN1_wrôe_bio
( \

464 ((*)())
i2d_X509_REQ
,
PEM_STRING_X509_REQ
,
bp
,(*)
x
, \

465 
NULL
,NULL,0,NULL,NULL)

	)

466 
	#PEM_wrôe_bio_X509_CRL
(
bp
,
x
) \

467 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_X509_CRL
,
PEM_STRING_X509_CRL
,\

468 
bp
,(*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

469 
	#PEM_wrôe_bio_RSAPriv©eKey
(
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

470 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_RSAPriv©eKey
,
PEM_STRING_RSA
,\

471 
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

472 
	#PEM_wrôe_bio_RSAPublicKey
(
bp
,
x
) \

473 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_RSAPublicKey
, \

474 
PEM_STRING_RSA_PUBLIC
,\

475 
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

476 
	#PEM_wrôe_bio_DSAPriv©eKey
(
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

477 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_DSAPriv©eKey
,
PEM_STRING_DSA
,\

478 
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

479 
	#PEM_wrôe_bio_Priv©eKey
(
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

480 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_Priv©eKey
,\

481 (((
x
)->
ty≥
 =
EVP_PKEY_DSA
)?
PEM_STRING_DSA
:
PEM_STRING_RSA
),\

482 
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

483 
	#PEM_wrôe_bio_PKCS7
(
bp
,
x
) \

484 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_PKCS7
,
PEM_STRING_PKCS7
,
bp
, \

485 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

486 
	#PEM_wrôe_bio_DH∑øms
(
bp
,
x
) \

487 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_DH∑øms
,
PEM_STRING_DHPARAMS
,\

488 
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

489 
	#PEM_wrôe_bio_DSA∑øms
(
bp
,
x
) \

490 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_DSA∑øms
, \

491 
PEM_STRING_DSAPARAMS
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

493 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
(
bp
,
x
) \

494 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_NETSCAPE_CERT_SEQUENCE
, \

495 
PEM_STRING_X509
,
bp
, \

496 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

498 
	#PEM_ªad_bio_X509
(
bp
,
x
,
cb
,
u
Ë(
X509
 *)
	`PEM_ASN1_ªad_bio
( \

499 (*(*)())
d2i_X509
,
PEM_STRING_X509
,
bp
,(**)
x
,
cb
,
u
)

	)

500 
	#PEM_ªad_bio_X509_REQ
(
bp
,
x
,
cb
,
u
Ë(
X509_REQ
 *)
	`PEM_ASN1_ªad_bio
( \

501 (*(*)())
d2i_X509_REQ
,
PEM_STRING_X509_REQ
,
bp
,(**)
x
,
cb
,
u
)

	)

502 
	#PEM_ªad_bio_X509_CRL
(
bp
,
x
,
cb
,
u
Ë(
X509_CRL
 *)
	`PEM_ASN1_ªad_bio
( \

503 (*(*)())
d2i_X509_CRL
,
PEM_STRING_X509_CRL
,
bp
,(**)
x
,
cb
,
u
)

	)

504 
	#PEM_ªad_bio_RSAPriv©eKey
(
bp
,
x
,
cb
,
u
Ë(
RSA
 *)
	`PEM_ASN1_ªad_bio
( \

505 (*(*)())
d2i_RSAPriv©eKey
,
PEM_STRING_RSA
,
bp
,(**)
x
,
cb
,
u
)

	)

506 
	#PEM_ªad_bio_RSAPublicKey
(
bp
,
x
,
cb
,
u
Ë(
RSA
 *)
	`PEM_ASN1_ªad_bio
( \

507 (*(*)())
d2i_RSAPublicKey
,
PEM_STRING_RSA_PUBLIC
,
bp
,(**)
x
,
cb
,
u
)

	)

508 
	#PEM_ªad_bio_DSAPriv©eKey
(
bp
,
x
,
cb
,
u
Ë(
DSA
 *)
	`PEM_ASN1_ªad_bio
( \

509 (*(*)())
d2i_DSAPriv©eKey
,
PEM_STRING_DSA
,
bp
,(**)
x
,
cb
,
u
)

	)

510 
	#PEM_ªad_bio_Priv©eKey
(
bp
,
x
,
cb
,
u
Ë(
EVP_PKEY
 *)
	`PEM_ASN1_ªad_bio
( \

511 (*(*)())
d2i_Priv©eKey
,
PEM_STRING_EVP_PKEY
,
bp
,(**)
x
,
cb
,
u
)

	)

513 
	#PEM_ªad_bio_PKCS7
(
bp
,
x
,
cb
,
u
Ë(
PKCS7
 *)
	`PEM_ASN1_ªad_bio
( \

514 (*(*)())
d2i_PKCS7
,
PEM_STRING_PKCS7
,
bp
,(**)
x
,
cb
,
u
)

	)

515 
	#PEM_ªad_bio_DH∑øms
(
bp
,
x
,
cb
,
u
Ë(
DH
 *)
	`PEM_ASN1_ªad_bio
( \

516 (*(*)())
d2i_DH∑øms
,
PEM_STRING_DHPARAMS
,
bp
,(**)
x
,
cb
,
u
)

	)

517 
	#PEM_ªad_bio_DSA∑øms
(
bp
,
x
,
cb
,
u
Ë(
DSA
 *)
	`PEM_ASN1_ªad_bio
( \

518 (*(*)())
d2i_DSA∑øms
,
PEM_STRING_DSAPARAMS
,
bp
,(**)
x
,
cb
,
u
)

	)

520 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
(
bp
,
x
,
cb
,
u
) \

521 (
NETSCAPE_CERT_SEQUENCE
 *)
	`PEM_ASN1_ªad_bio
( \

522 (*(*)())
d2i_NETSCAPE_CERT_SEQUENCE
,
PEM_STRING_X509
,
bp
,\

523 (**)
x
,
cb
,
u
)

	)

529 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

532 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
);

535 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

536 
PEM_do_hódî
 (
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
,*
Àn
,

537 
≥m_∑ssw‹d_cb
 *
ˇŒback
,*
u
);

539 #i‚de‡
OPENSSL_NO_BIO


540 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

541 **
d©a
,*
Àn
);

542 
PEM_wrôe_bio
(
BIO
 *
bp
,c⁄° *
«me
,*
hdr
,*
d©a
,

543 
Àn
);

544 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
, c⁄° *
«me
, 
BIO
 *
bp
,

545 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

546 * 
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
,

547 **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

548 
	#PEM_ASN1_ªad_bio_of
(
ty≥
,
d2i
,
«me
,
bp
,
x
,
cb
,
u
) \

549 ((
ty≥
 *(*)(
	`D2I_OF
—y≥),c⁄° *,
BIO
 *,ty≥ **,
≥m_∑ssw‹d_cb
 *,*))
	`›ís¶_fˇ°
(
PEM_ASN1_ªad_bio
))(
d2i
,
«me
,
bp
,
x
,
cb
,
u
)

	)

550 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
BIO
 *
bp
,*
x
,

551 c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,
kÀn
,

552 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

553 
	#PEM_ASN1_wrôe_bio_of
(
ty≥
,
i2d
,
«me
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

554 (((*)(
	`I2D_OF
(
ty≥
),c⁄° *,
BIO
 *,ty≥ *, c⁄° 
EVP_CIPHER
 *,*,, 
≥m_∑ssw‹d_cb
 *,*))
	`›ís¶_fˇ°
(
PEM_ASN1_wrôe_bio
))(
i2d
,
«me
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

556 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

557 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
,
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

558 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

561 #i‚de‡
OPENSSL_SYS_WIN16


562 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

563 **
d©a
,*
Àn
);

564 
PEM_wrôe
(
FILE
 *
Â
,*
«me
,*
hdr
,*
d©a
,
Àn
);

565 * 
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

566 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

567 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
FILE
 *
Â
,

568 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,

569 
kÀn
,
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

570 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

571 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

574 
PEM_SólInô
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, 
EVP_CIPHER
 *
ty≥
,

575 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

576 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

577 
PEM_SólUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
out
, *
oué
,

578 *
ö
, 
öl
);

579 
PEM_SólFöÆ
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
sig
,*
sigl
,

580 *
out
, *
oué
, 
EVP_PKEY
 *
¥iv
);

582 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

583 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
,*
d
,
˙t
);

584 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

585 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

587 
PEM_def_ˇŒback
(*
buf
, 
num
, 
w
, *
key
);

588 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

589 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

591 #i‚de‡
SSLEAY_MACROS


593 
	~<›ís¶/symhacks.h
>

595 
DECLARE_PEM_rw
(
X509
, X509)

597 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

599 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

601 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

602 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

604 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

606 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

608 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

610 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

612 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

614 #i‚de‡
OPENSSL_NO_RSA


616 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

618 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

619 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

623 #i‚de‡
OPENSSL_NO_DSA


625 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

627 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

629 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

634 #i‚de‡
OPENSSL_NO_DH


636 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

640 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

642 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

644 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

645 *
k°r
, 
kÀn
,

646 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

647 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

648 *, , 
≥m_∑ssw‹d_cb
 *, *);

649 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

650 *
k°r
, 
kÀn
,

651 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

652 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

653 *
k°r
, 
kÀn
,

654 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

655 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

657 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

658 *
k°r
, 
kÀn
,

659 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

660 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

661 *
k°r
, 
kÀn
,

662 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

663 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

664 *
k°r
, 
kÀn
,

665 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

667 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

669 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
,
EVP_PKEY
 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,

670 *
k°r
,
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

679 
ERR_lﬂd_PEM_°rögs
();

684 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

685 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

686 
	#PEM_F_DO_PK8PKEY
 126

	)

687 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

688 
	#PEM_F_LOAD_IV
 101

	)

689 
	#PEM_F_PEM_ASN1_READ
 102

	)

690 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

691 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

692 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

693 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

694 
	#PEM_F_PEM_DO_HEADER
 106

	)

695 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

696 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

697 
	#PEM_F_PEM_PK8PKEY
 119

	)

698 
	#PEM_F_PEM_READ
 108

	)

699 
	#PEM_F_PEM_READ_BIO
 109

	)

700 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

701 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

702 
	#PEM_F_PEM_SEALFINAL
 110

	)

703 
	#PEM_F_PEM_SEALINIT
 111

	)

704 
	#PEM_F_PEM_SIGNFINAL
 112

	)

705 
	#PEM_F_PEM_WRITE
 113

	)

706 
	#PEM_F_PEM_WRITE_BIO
 114

	)

707 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

708 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

709 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

712 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

713 
	#PEM_R_BAD_DECRYPT
 101

	)

714 
	#PEM_R_BAD_END_LINE
 102

	)

715 
	#PEM_R_BAD_IV_CHARS
 103

	)

716 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

717 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

718 
	#PEM_R_NOT_DEK_INFO
 105

	)

719 
	#PEM_R_NOT_ENCRYPTED
 106

	)

720 
	#PEM_R_NOT_PROC_TYPE
 107

	)

721 
	#PEM_R_NO_START_LINE
 108

	)

722 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

723 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

724 
	#PEM_R_READ_KEY
 111

	)

725 
	#PEM_R_SHORT_HEADER
 112

	)

726 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

727 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

729 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pkcs7.h

59 #i‚de‡
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<›ís¶/a¢1.h
>

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/e_os2.h
>

66 
	~<›ís¶/symhacks.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


73 #ifde‡
OPENSSL_SYS_WIN32


75 #unde‡
PKCS7_ISSUER_AND_SERIAL


76 #unde‡
PKCS7_SIGNER_INFO


86 
	spkcs7_issuî_™d_£rül_°


88 
X509_NAME
 *
issuî
;

89 
ASN1_INTEGER
 *
£rül
;

90 } 
	tPKCS7_ISSUER_AND_SERIAL
;

92 
	spkcs7_sig√r_öfo_°


94 
ASN1_INTEGER
 *
vîsi⁄
;

95 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

96 
X509_ALGOR
 *
dige°_Æg
;

97 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

98 
X509_ALGOR
 *
dige°_íc_Æg
;

99 
ASN1_OCTET_STRING
 *
íc_dige°
;

100 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

103 
EVP_PKEY
 *
pkey
;

104 } 
	tPKCS7_SIGNER_INFO
;

106 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

107 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

109 
	spkcs7_ªcù_öfo_°


111 
ASN1_INTEGER
 *
vîsi⁄
;

112 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

113 
X509_ALGOR
 *
key_íc_Æg‹
;

114 
ASN1_OCTET_STRING
 *
íc_key
;

115 
X509
 *
˚π
;

116 } 
	tPKCS7_RECIP_INFO
;

118 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

119 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

121 
	spkcs7_sig√d_°


123 
ASN1_INTEGER
 *
vîsi⁄
;

124 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

125 
STACK_OF
(
X509
Ë*
˚π
;

126 
STACK_OF
(
X509_CRL
Ë*
¸l
;

127 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

129 
pkcs7_°
 *
c⁄ã¡s
;

130 } 
	tPKCS7_SIGNED
;

134 
	spkcs7_íc_c⁄ã¡_°


136 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

137 
X509_ALGOR
 *
Æg‹ôhm
;

138 
ASN1_OCTET_STRING
 *
íc_d©a
;

139 c⁄° 
EVP_CIPHER
 *
cùhî
;

140 } 
	tPKCS7_ENC_CONTENT
;

142 
	spkcs7_ívñ›ed_°


144 
ASN1_INTEGER
 *
vîsi⁄
;

145 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

146 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

147 } 
	tPKCS7_ENVELOPE
;

149 
	spkcs7_sig√d™dívñ›ed_°


151 
ASN1_INTEGER
 *
vîsi⁄
;

152 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

153 
STACK_OF
(
X509
Ë*
˚π
;

154 
STACK_OF
(
X509_CRL
Ë*
¸l
;

155 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

157 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

158 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

159 } 
	tPKCS7_SIGN_ENVELOPE
;

161 
	spkcs7_dige°_°


163 
ASN1_INTEGER
 *
vîsi⁄
;

164 
X509_ALGOR
 *
md
;

165 
pkcs7_°
 *
c⁄ã¡s
;

166 
ASN1_OCTET_STRING
 *
dige°
;

167 } 
	tPKCS7_DIGEST
;

169 
	spkcs7_í¸y±ed_°


171 
ASN1_INTEGER
 *
vîsi⁄
;

172 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

173 } 
	tPKCS7_ENCRYPT
;

175 
	spkcs7_°


179 *
a¢1
;

180 
Àngth
;

182 
	#PKCS7_S_HEADER
 0

	)

183 
	#PKCS7_S_BODY
 1

	)

184 
	#PKCS7_S_TAIL
 2

	)

185 
°©e
;

187 
dëached
;

189 
ASN1_OBJECT
 *
ty≥
;

194 *
±r
;

197 
ASN1_OCTET_STRING
 *
d©a
;

200 
PKCS7_SIGNED
 *
sign
;

203 
PKCS7_ENVELOPE
 *
ívñ›ed
;

206 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

209 
PKCS7_DIGEST
 *
dige°
;

212 
PKCS7_ENCRYPT
 *
í¸y±ed
;

215 
ASN1_TYPE
 *
Ÿhî
;

216 } 
d
;

217 } 
	tPKCS7
;

219 
DECLARE_STACK_OF
(
PKCS7
)

220 
DECLARE_ASN1_SET_OF
(
PKCS7
)

221 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

223 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

224 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

226 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

227 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

229 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

230 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

231 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

232 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

233 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

234 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

236 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

238 
	#PKCS7_£t_dëached
(
p
,
v
) \

239 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

240 
	#PKCS7_gë_dëached
(
p
) \

241 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

243 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

245 #ifde‡
SSLEAY_MACROS


246 #i‚de‡
PKCS7_ISSUER_AND_SERIAL_dige°


247 
	#PKCS7_ISSUER_AND_SERIAL_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

248 
	`ASN1_dige°
(((*)())
i2d_PKCS7_ISSUER_AND_SERIAL
,
ty≥
,\

249 (*)
d©a
,
md
,
Àn
)

	)

255 
	#PKCS7_TEXT
 0x1

	)

256 
	#PKCS7_NOCERTS
 0x2

	)

257 
	#PKCS7_NOSIGS
 0x4

	)

258 
	#PKCS7_NOCHAIN
 0x8

	)

259 
	#PKCS7_NOINTERN
 0x10

	)

260 
	#PKCS7_NOVERIFY
 0x20

	)

261 
	#PKCS7_DETACHED
 0x40

	)

262 
	#PKCS7_BINARY
 0x80

	)

263 
	#PKCS7_NOATTR
 0x100

	)

264 
	#PKCS7_NOSMIMECAP
 0x200

	)

265 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

266 
	#PKCS7_CRLFEOL
 0x800

	)

267 
	#PKCS7_STREAM
 0x1000

	)

268 
	#PKCS7_NOCRL
 0x2000

	)

272 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

273 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

274 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

275 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

276 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

277 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

278 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

279 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

280 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

282 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

284 #i‚de‡
SSLEAY_MACROS


285 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

286 *
md
,*
Àn
);

287 #i‚de‡
OPENSSL_NO_FP_API


288 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
,PKCS7 **
p7
);

289 
i2d_PKCS7_Â
(
FILE
 *
Â
,
PKCS7
 *
p7
);

291 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

292 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
,PKCS7 **
p7
);

293 
i2d_PKCS7_bio
(
BIO
 *
bp
,
PKCS7
 *
p7
);

296 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

297 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

298 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

299 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

300 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

301 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

302 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

303 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

304 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

306 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

307 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

309 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

311 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

313 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

314 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

315 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

316 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

317 c⁄° 
EVP_MD
 *
dg°
);

318 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

319 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

320 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

321 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

322 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

323 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

324 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

325 
X509
 *
x509
);

327 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

328 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

329 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

332 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

333 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

334 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

335 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

336 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

338 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

339 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

340 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

341 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

343 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

344 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

345 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
,
nid
,
ty≥
,

346 *
d©a
);

347 
PKCS7_add_©åibuã
 (
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

348 *
vÆue
);

349 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

350 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

351 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

352 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

353 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

356 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

357 
BIO
 *
d©a
, 
Êags
);

358 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

359 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

360 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
, 
Êags
);

361 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

362 
Êags
);

363 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
, 
Êags
);

365 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

366 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

367 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

368 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

370 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

371 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

372 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

373 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

379 
ERR_lﬂd_PKCS7_°rögs
();

384 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

385 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

386 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

387 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

388 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

389 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

390 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

391 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

392 
	#PKCS7_F_PKCS7_CTRL
 104

	)

393 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

394 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

395 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

396 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

397 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

398 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

399 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

400 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

401 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

402 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

403 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

404 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

405 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

406 
	#PKCS7_F_PKCS7_SIGN
 116

	)

407 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

408 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

409 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

410 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

411 
	#PKCS7_F_SMIME_TEXT
 123

	)

414 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

415 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

416 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

417 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

418 
	#PKCS7_R_DECODE_ERROR
 130

	)

419 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

420 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

421 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

422 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

423 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

424 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

425 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

426 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

427 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

428 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

429 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

430 
	#PKCS7_R_NO_CONTENT
 122

	)

431 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

432 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

433 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

434 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

435 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

436 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

437 
	#PKCS7_R_NO_SIGNERS
 142

	)

438 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

439 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

440 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

441 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

442 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

443 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

444 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

445 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

446 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

447 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

448 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

449 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

450 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

451 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

452 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

453 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

454 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

455 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

456 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

457 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

458 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

459 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

461 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rand.h

59 #i‚de‡
HEADER_RAND_H


60 
	#HEADER_RAND_H


	)

62 
	~<°dlib.h
>

63 
	~<›ís¶/os¶_typ.h
>

64 
	~<›ís¶/e_os2.h
>

66 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
)

67 
	~<wödows.h
>

70 #ifde‡ 
__˝lu•lus


74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_RAND_SIZE_T
 

	)

81 
	sønd_mëh_°


83 (*
£ed
)(c⁄° *
buf
, 
num
);

84 (*
byãs
)(*
buf
, 
num
);

85 (*
˛ónup
)();

86 (*
add
)(c⁄° *
buf
, 
num
, 
íå›y
);

87 (*
p£ud‹™d
)(*
buf
, 
num
);

88 (*
°©us
)();

91 #ifde‡
BN_DEBUG


92 
ønd_¥edi˘abÀ
;

95 
RAND_£t_ønd_mëhod
(c⁄° 
RAND_METHOD
 *
mëh
);

96 c⁄° 
RAND_METHOD
 *
RAND_gë_ønd_mëhod
();

97 #i‚de‡
OPENSSL_NO_ENGINE


98 
RAND_£t_ønd_ígöe
(
ENGINE
 *
ígöe
);

100 
RAND_METHOD
 *
RAND_SSLóy
();

101 
RAND_˛ónup
();

102 
RAND_byãs
(*
buf
,
num
);

103 
RAND_p£udo_byãs
(*
buf
,
num
);

104 
RAND_£ed
(c⁄° *
buf
,
num
);

105 
RAND_add
(c⁄° *
buf
,
num
,
íå›y
);

106 
RAND_lﬂd_fûe
(c⁄° *
fûe
,
max_byãs
);

107 
RAND_wrôe_fûe
(c⁄° *
fûe
);

108 c⁄° *
RAND_fûe_«me
(*
fûe
,
size_t
 
num
);

109 
RAND_°©us
();

110 
RAND_quîy_egd_byãs
(c⁄° *
∑th
, *
buf
, 
byãs
);

111 
RAND_egd
(c⁄° *
∑th
);

112 
RAND_egd_byãs
(c⁄° *
∑th
,
byãs
);

113 
RAND_pﬁl
();

114 #i‚de‡
OPENSSL_NO_ENGINE


115 #ifde‡
OPENSSL_FIPS


116 
öt_RAND_öô_ígöe_ˇŒbacks
();

117 
öt_RAND_£t_ˇŒbacks
(

118 (*
£t_ønd_func
)(c⁄° 
RAND_METHOD
 *
mëh
,

119 c⁄° 
RAND_METHOD
 **
pmëh
),

120 c⁄° 
RAND_METHOD
 *(*
gë_ønd_func
)(c⁄° RAND_METHOD **
pmëh
));

124 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_WIN32
)

126 
RAND_s¸ìn
();

127 
RAND_evít
(
UINT
, 
WPARAM
, 
LPARAM
);

135 
ERR_lﬂd_RAND_°rögs
();

140 
	#RAND_F_ENG_RAND_GET_RAND_METHOD
 108

	)

141 
	#RAND_F_FIPS_RAND
 103

	)

142 
	#RAND_F_FIPS_RAND_BYTES
 102

	)

143 
	#RAND_F_FIPS_RAND_GET_RAND_METHOD
 109

	)

144 
	#RAND_F_FIPS_RAND_SET_DT
 106

	)

145 
	#RAND_F_FIPS_SET_DT
 104

	)

146 
	#RAND_F_FIPS_SET_PRNG_SEED
 107

	)

147 
	#RAND_F_FIPS_SET_TEST_MODE
 105

	)

148 
	#RAND_F_RAND_GET_RAND_METHOD
 101

	)

149 
	#RAND_F_SSLEAY_RAND_BYTES
 100

	)

152 
	#RAND_R_NON_FIPS_METHOD
 105

	)

153 
	#RAND_R_NOT_IN_TEST_MODE
 106

	)

154 
	#RAND_R_NO_KEY_SET
 107

	)

155 
	#RAND_R_PRNG_ASKING_FOR_TOO_MUCH
 101

	)

156 
	#RAND_R_PRNG_ERROR
 108

	)

157 
	#RAND_R_PRNG_KEYED
 109

	)

158 
	#RAND_R_PRNG_NOT_REKEYED
 102

	)

159 
	#RAND_R_PRNG_NOT_RESEEDED
 103

	)

160 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

161 
	#RAND_R_PRNG_SEED_MUST_NOT_MATCH_KEY
 110

	)

162 
	#RAND_R_PRNG_STUCK
 104

	)

164 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rsa.h

59 #i‚de‡
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/¸y±o.h
>

68 
	~<›ís¶/os¶_typ.h
>

69 #i‚de‡
OPENSSL_NO_DEPRECATED


70 
	~<›ís¶/bn.h
>

73 #ifde‡
OPENSSL_NO_RSA


74 #îr‹ 
RSA
 
is
 
dißbÀd
.

83 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

90 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

92 #ifde‡
OPENSSL_FIPS


93 
	#FIPS_RSA_SIZE_T
 

	)

96 #ifde‡ 
__˝lu•lus


104 
	srß_mëh_°


106 c⁄° *
«me
;

107 (*
rß_pub_íc
)(
Êí
,c⁄° *
‰om
,

108 *
to
,

109 
RSA
 *
rß
,
∑ddög
);

110 (*
rß_pub_dec
)(
Êí
,c⁄° *
‰om
,

111 *
to
,

112 
RSA
 *
rß
,
∑ddög
);

113 (*
rß_¥iv_íc
)(
Êí
,c⁄° *
‰om
,

114 *
to
,

115 
RSA
 *
rß
,
∑ddög
);

116 (*
rß_¥iv_dec
)(
Êí
,c⁄° *
‰om
,

117 *
to
,

118 
RSA
 *
rß
,
∑ddög
);

119 (*
rß_mod_exp
)(
BIGNUM
 *
r0
,c⁄° BIGNUM *
I
,
RSA
 *
rß
,
BN_CTX
 *
˘x
);

120 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

121 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

122 
BN_MONT_CTX
 *
m_˘x
);

123 (*
öô
)(
RSA
 *
rß
);

124 (*
föish
)(
RSA
 *
rß
);

125 
Êags
;

126 *
≠p_d©a
;

134 (*
rß_sign
)(
ty≥
,

135 c⁄° *
m
, 
m_Àngth
,

136 *
sigªt
, *
sigÀn
, c⁄° 
RSA
 *
rß
);

137 (*
rß_vîify
)(
dty≥
,

138 c⁄° *
m
, 
m_Àngth
,

139 *
sigbuf
, 
sigÀn
, c⁄° 
RSA
 *
rß
);

144 (*
rß_keygí
)(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

147 
	srß_°


151 
∑d
;

152 
vîsi⁄
;

153 c⁄° 
RSA_METHOD
 *
mëh
;

155 
ENGINE
 *
ígöe
;

156 
BIGNUM
 *
n
;

157 
BIGNUM
 *
e
;

158 
BIGNUM
 *
d
;

159 
BIGNUM
 *
p
;

160 
BIGNUM
 *
q
;

161 
BIGNUM
 *
dmp1
;

162 
BIGNUM
 *
dmq1
;

163 
BIGNUM
 *
iqmp
;

165 
CRYPTO_EX_DATA
 
ex_d©a
;

166 
ª„ªn˚s
;

167 
Êags
;

170 
BN_MONT_CTX
 *
_mëhod_mod_n
;

171 
BN_MONT_CTX
 *
_mëhod_mod_p
;

172 
BN_MONT_CTX
 *
_mëhod_mod_q
;

176 *
bignum_d©a
;

177 
BN_BLINDING
 *
blödög
;

178 
BN_BLINDING
 *
mt_blödög
;

181 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


182 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

185 
	#OPENSSL_RSA_FIPS_MIN_MODULUS_BITS
 1024

	)

187 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


188 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

190 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


191 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

194 
	#RSA_3
 0x3L

	)

195 
	#RSA_F4
 0x10001L

	)

197 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

199 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

200 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

201 
	#RSA_FLAG_BLINDING
 0x0008

	)

202 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

208 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

212 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

214 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

219 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

229 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

239 
	#RSA_PKCS1_PADDING
 1

	)

240 
	#RSA_SSLV23_PADDING
 2

	)

241 
	#RSA_NO_PADDING
 3

	)

242 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

243 
	#RSA_X931_PADDING
 5

	)

245 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

247 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

248 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

250 
RSA
 * 
RSA_√w
();

251 
RSA
 * 
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

252 
RSA_size
(c⁄° 
RSA
 *);

255 #i‚de‡
OPENSSL_NO_DEPRECATED


256 
RSA
 * 
RSA_gíî©e_key
(
bôs
, 
e
,

257 (*
ˇŒback
)(,,*),*
cb_¨g
);

258 
RSA_X931_dîive
(
RSA
 *
rß
, 
BIGNUM
 *
p1
, BIGNUM *
p2
, BIGNUM *
q1
, BIGNUM *
q2
,

259 (*
cb
)(, , *), *
cb_¨g
,

260 c⁄° 
BIGNUM
 *
Xp1
, c⁄° BIGNUM *
Xp2
, c⁄° BIGNUM *
Xp
,

261 c⁄° 
BIGNUM
 *
Xq1
, c⁄° BIGNUM *
Xq2
, c⁄° BIGNUM *
Xq
,

262 c⁄° 
BIGNUM
 *
e
);

263 
RSA
 *
RSA_X931_gíî©e_key
(
bôs
, c⁄° 
BIGNUM
 *
e
,

264 (*
cb
)(,,*), *
cb_¨g
);

268 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

269 
RSA_X931_dîive_ex
(
RSA
 *
rß
, 
BIGNUM
 *
p1
, BIGNUM *
p2
, BIGNUM *
q1
, BIGNUM *
q2
,

270 c⁄° 
BIGNUM
 *
Xp1
, c⁄° BIGNUM *
Xp2
, c⁄° BIGNUM *
Xp
,

271 c⁄° 
BIGNUM
 *
Xq1
, c⁄° BIGNUM *
Xq2
, c⁄° BIGNUM *
Xq
,

272 c⁄° 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

273 
RSA_X931_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, c⁄° 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

275 
RSA_check_key
(c⁄° 
RSA
 *);

277 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

278 *
to
, 
RSA
 *
rß
,
∑ddög
);

279 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

280 *
to
, 
RSA
 *
rß
,
∑ddög
);

281 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

282 *
to
, 
RSA
 *
rß
,
∑ddög
);

283 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

284 *
to
, 
RSA
 *
rß
,
∑ddög
);

285 
RSA_‰ì
 (
RSA
 *
r
);

287 
RSA_up_ªf
(
RSA
 *
r
);

289 
RSA_Êags
(c⁄° 
RSA
 *
r
);

291 #ifde‡
OPENSSL_FIPS


292 
RSA
 *
FIPS_rß_√w
();

293 
FIPS_rß_‰ì
(
RSA
 *
r
);

296 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

297 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

298 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

299 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

302 
RSA_mem‹y_lock
(
RSA
 *
r
);

305 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_SSLóy
();

307 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

309 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

310 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

312 #i‚de‡
OPENSSL_NO_FP_API


313 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
,
off£t
);

316 #i‚de‡
OPENSSL_NO_BIO


317 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
,
off£t
);

320 
i2d_RSA_NET
(c⁄° 
RSA
 *
a
, **
µ
,

321 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

322 
sgckey
);

323 
RSA
 *
d2i_RSA_NET
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

324 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

325 
sgckey
);

327 
i2d_Nësˇ≥_RSA
(c⁄° 
RSA
 *
a
, **
µ
,

328 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

329 
vîify
));

330 
RSA
 *
d2i_Nësˇ≥_RSA
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

331 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

332 
vîify
));

336 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

337 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

338 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

339 *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

343 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

344 c⁄° *
m
, 
m_Àngth
,

345 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

346 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
,

347 c⁄° *
m
, 
m_Àngth
,

348 *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

350 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

351 
RSA_blödög_off
(
RSA
 *
rß
);

352 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

354 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
,
éí
,

355 c⁄° *
f
,
Ê
);

356 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
,
éí
,

357 c⁄° *
f
,
Ê
,
rß_Àn
);

358 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
,
éí
,

359 c⁄° *
f
,
Ê
);

360 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
,
éí
,

361 c⁄° *
f
,
Ê
,
rß_Àn
);

362 
PKCS1_MGF1
(*
mask
, 
Àn
,

363 c⁄° *
£ed
, 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

364 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
,
éí
,

365 c⁄° *
f
,
Ê
,

366 c⁄° *
p
,
∂
);

367 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
,
éí
,

368 c⁄° *
f
,
Ê
,
rß_Àn
,

369 c⁄° *
p
,
∂
);

370 
RSA_∑ddög_add_SSLv23
(*
to
,
éí
,

371 c⁄° *
f
,
Ê
);

372 
RSA_∑ddög_check_SSLv23
(*
to
,
éí
,

373 c⁄° *
f
,
Ê
,
rß_Àn
);

374 
RSA_∑ddög_add_n⁄e
(*
to
,
éí
,

375 c⁄° *
f
,
Ê
);

376 
RSA_∑ddög_check_n⁄e
(*
to
,
éí
,

377 c⁄° *
f
,
Ê
,
rß_Àn
);

378 
RSA_∑ddög_add_X931
(*
to
,
éí
,

379 c⁄° *
f
,
Ê
);

380 
RSA_∑ddög_check_X931
(*
to
,
éí
,

381 c⁄° *
f
,
Ê
,
rß_Àn
);

382 
RSA_X931_hash_id
(
nid
);

384 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

385 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
, 
sLí
);

386 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

387 c⁄° *
mHash
,

388 c⁄° 
EVP_MD
 *
Hash
, 
sLí
);

390 
RSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

391 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

392 
RSA_£t_ex_d©a
(
RSA
 *
r
,
idx
,*
¨g
);

393 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

395 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

396 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

402 
ERR_lﬂd_RSA_°rögs
();

407 
	#RSA_F_FIPS_RSA_SIGN
 140

	)

408 
	#RSA_F_FIPS_RSA_VERIFY
 141

	)

409 
	#RSA_F_MEMORY_LOCK
 100

	)

410 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

411 
	#RSA_F_RSA_CHECK_KEY
 123

	)

412 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

413 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

414 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

415 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

416 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

417 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

418 
	#RSA_F_RSA_NEW_METHOD
 106

	)

419 
	#RSA_F_RSA_NULL
 124

	)

420 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

421 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

422 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

423 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

424 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

425 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

426 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

427 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

428 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

429 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

430 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

431 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

432 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

433 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

434 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

435 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

436 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

437 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

438 
	#RSA_F_RSA_PRINT
 115

	)

439 
	#RSA_F_RSA_PRINT_FP
 116

	)

440 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 137

	)

441 
	#RSA_F_RSA_PUBLIC_DECRYPT
 138

	)

442 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

443 
	#RSA_F_RSA_SET_DEFAULT_METHOD
 139

	)

444 
	#RSA_F_RSA_SET_METHOD
 142

	)

445 
	#RSA_F_RSA_SIGN
 117

	)

446 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

447 
	#RSA_F_RSA_VERIFY
 119

	)

448 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

449 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

452 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

453 
	#RSA_R_BAD_E_VALUE
 101

	)

454 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

455 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

456 
	#RSA_R_BAD_SIGNATURE
 104

	)

457 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

458 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

459 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

460 
	#RSA_R_DATA_TOO_LARGE
 109

	)

461 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

462 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

463 
	#RSA_R_DATA_TOO_SMALL
 111

	)

464 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

465 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

466 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

467 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

468 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

469 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

470 
	#RSA_R_INVALID_HEADER
 137

	)

471 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

472 
	#RSA_R_INVALID_PADDING
 138

	)

473 
	#RSA_R_INVALID_TRAILER
 139

	)

474 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

475 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

476 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

477 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

478 
	#RSA_R_NON_FIPS_METHOD
 141

	)

479 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

480 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

481 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

482 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

483 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 142

	)

484 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

485 
	#RSA_R_P_NOT_PRIME
 128

	)

486 
	#RSA_R_Q_NOT_PRIME
 129

	)

487 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

488 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

489 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

490 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

491 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

492 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

493 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

494 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

496 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509.h

64 #i‚de‡
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/symhacks.h
>

69 #i‚de‡
OPENSSL_NO_BUFFER


70 
	~<›ís¶/buf„r.h
>

72 #i‚de‡
OPENSSL_NO_EVP


73 
	~<›ís¶/evp.h
>

75 #i‚de‡
OPENSSL_NO_BIO


76 
	~<›ís¶/bio.h
>

78 
	~<›ís¶/°ack.h
>

79 
	~<›ís¶/a¢1.h
>

80 
	~<›ís¶/ß„°ack.h
>

85 #i‚de‡
OPENSSL_NO_DEPRECATED


86 #i‚de‡
OPENSSL_NO_RSA


87 
	~<›ís¶/rß.h
>

89 #i‚de‡
OPENSSL_NO_DSA


90 
	~<›ís¶/dß.h
>

92 #i‚de‡
OPENSSL_NO_DH


93 
	~<›ís¶/dh.h
>

97 #i‚de‡
OPENSSL_NO_SHA


98 
	~<›ís¶/sha.h
>

100 
	~<›ís¶/os¶_typ.h
>

102 #ifde‡ 
__˝lu•lus


106 #ifde‡
OPENSSL_SYS_WIN32


108 #unde‡
X509_NAME


109 #unde‡
X509_CERT_PAIR


112 
	#X509_FILETYPE_PEM
 1

	)

113 
	#X509_FILETYPE_ASN1
 2

	)

114 
	#X509_FILETYPE_DEFAULT
 3

	)

116 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

117 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

118 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

119 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

120 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

121 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

122 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

123 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

124 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

125 
	#X509v3_KU_UNDEF
 0xffff

	)

127 
	sX509_obje˘s_°


129 
nid
;

130 (*
a2i
)();

131 (*
i2a
)();

132 } 
	tX509_OBJECTS
;

134 
	sX509_Æg‹_°


136 
ASN1_OBJECT
 *
Æg‹ôhm
;

137 
ASN1_TYPE
 *
∑ømëî
;

140 
DECLARE_STACK_OF
(
X509_ALGOR
)

141 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

143 
	sX509_vÆ_°


145 
ASN1_TIME
 *
nŸBef‹e
;

146 
ASN1_TIME
 *
nŸA·î
;

147 } 
	tX509_VAL
;

149 
	sX509_pubkey_°


151 
X509_ALGOR
 *
Æg‹
;

152 
ASN1_BIT_STRING
 *
public_key
;

153 
EVP_PKEY
 *
pkey
;

154 } 
	tX509_PUBKEY
;

156 
	sX509_sig_°


158 
X509_ALGOR
 *
Æg‹
;

159 
ASN1_OCTET_STRING
 *
dige°
;

160 } 
	tX509_SIG
;

162 
	sX509_«me_íåy_°


164 
ASN1_OBJECT
 *
obje˘
;

165 
ASN1_STRING
 *
vÆue
;

166 
£t
;

167 
size
;

168 } 
	tX509_NAME_ENTRY
;

170 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

171 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

174 
	sX509_«me_°


176 
STACK_OF
(
X509_NAME_ENTRY
Ë*
íåõs
;

177 
modifõd
;

178 #i‚de‡
OPENSSL_NO_BUFFER


179 
BUF_MEM
 *
byãs
;

181 *
byãs
;

183 
hash
;

186 
DECLARE_STACK_OF
(
X509_NAME
)

188 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

189 
	#X509_EX_V_INIT
 0x0001

	)

190 
	sX509_exãnsi⁄_°


192 
ASN1_OBJECT
 *
obje˘
;

193 
ASN1_BOOLEAN
 
¸ôiˇl
;

194 
ASN1_OCTET_STRING
 *
vÆue
;

195 } 
	tX509_EXTENSION
;

197 
DECLARE_STACK_OF
(
X509_EXTENSION
)

198 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

201 
	sx509_©åibuãs_°


203 
ASN1_OBJECT
 *
obje˘
;

204 
sögÀ
;

206 *
±r
;

207  
STACK_OF
(
ASN1_TYPE
Ë*
£t
;

208  
ASN1_TYPE
 *
sögÀ
;

209 } 
vÆue
;

210 } 
	tX509_ATTRIBUTE
;

212 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

213 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

216 
	sX509_ªq_öfo_°


218 
ASN1_ENCODING
 
íc
;

219 
ASN1_INTEGER
 *
vîsi⁄
;

220 
X509_NAME
 *
subje˘
;

221 
X509_PUBKEY
 *
pubkey
;

223 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

224 } 
	tX509_REQ_INFO
;

226 
	sX509_ªq_°


228 
X509_REQ_INFO
 *
ªq_öfo
;

229 
X509_ALGOR
 *
sig_Æg
;

230 
ASN1_BIT_STRING
 *
sig«tuª
;

231 
ª„ªn˚s
;

232 } 
	tX509_REQ
;

234 
	sx509_cöf_°


236 
ASN1_INTEGER
 *
vîsi⁄
;

237 
ASN1_INTEGER
 *
£rülNumbî
;

238 
X509_ALGOR
 *
sig«tuª
;

239 
X509_NAME
 *
issuî
;

240 
X509_VAL
 *
vÆidôy
;

241 
X509_NAME
 *
subje˘
;

242 
X509_PUBKEY
 *
key
;

243 
ASN1_BIT_STRING
 *
issuîUID
;

244 
ASN1_BIT_STRING
 *
subje˘UID
;

245 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
;

246 } 
	tX509_CINF
;

254 
	sx509_˚π_aux_°


256 
STACK_OF
(
ASN1_OBJECT
Ë*
åu°
;

257 
STACK_OF
(
ASN1_OBJECT
Ë*
ªje˘
;

258 
ASN1_UTF8STRING
 *
Æüs
;

259 
ASN1_OCTET_STRING
 *
keyid
;

260 
STACK_OF
(
X509_ALGOR
Ë*
Ÿhî
;

261 } 
	tX509_CERT_AUX
;

263 
	sx509_°


265 
X509_CINF
 *
˚π_öfo
;

266 
X509_ALGOR
 *
sig_Æg
;

267 
ASN1_BIT_STRING
 *
sig«tuª
;

268 
vÆid
;

269 
ª„ªn˚s
;

270 *
«me
;

271 
CRYPTO_EX_DATA
 
ex_d©a
;

273 
ex_∑thÀn
;

274 
ex_p˝©hÀn
;

275 
ex_Êags
;

276 
ex_kußge
;

277 
ex_xkußge
;

278 
ex_ns˚π
;

279 
ASN1_OCTET_STRING
 *
skid
;

280 
AUTHORITY_KEYID_°
 *
akid
;

281 
X509_POLICY_CACHE
 *
pﬁicy_ˇche
;

282 #i‚de‡
OPENSSL_NO_RFC3779


283 
STACK_OF
(
IPAddªssFamûy
Ë*
rfc3779_addr
;

284 
ASIdítifõrs_°
 *
rfc3779_asid
;

286 #i‚de‡
OPENSSL_NO_SHA


287 
sha1_hash
[
SHA_DIGEST_LENGTH
];

289 
X509_CERT_AUX
 *
aux
;

292 
DECLARE_STACK_OF
(
X509
)

293 
DECLARE_ASN1_SET_OF
(
X509
)

297 
	sx509_åu°_°
 {

298 
åu°
;

299 
Êags
;

300 (*
check_åu°
)(
x509_åu°_°
 *, 
X509
 *, );

301 *
«me
;

302 
¨g1
;

303 *
¨g2
;

304 } 
	tX509_TRUST
;

306 
DECLARE_STACK_OF
(
X509_TRUST
)

308 
	sx509_˚π_∑ú_°
 {

309 
X509
 *
f‹w¨d
;

310 
X509
 *
ªvî£
;

311 } 
	tX509_CERT_PAIR
;

315 
	#X509_TRUST_DEFAULT
 -1

	)

317 
	#X509_TRUST_COMPAT
 1

	)

318 
	#X509_TRUST_SSL_CLIENT
 2

	)

319 
	#X509_TRUST_SSL_SERVER
 3

	)

320 
	#X509_TRUST_EMAIL
 4

	)

321 
	#X509_TRUST_OBJECT_SIGN
 5

	)

322 
	#X509_TRUST_OCSP_SIGN
 6

	)

323 
	#X509_TRUST_OCSP_REQUEST
 7

	)

326 
	#X509_TRUST_MIN
 1

	)

327 
	#X509_TRUST_MAX
 7

	)

331 
	#X509_TRUST_DYNAMIC
 1

	)

332 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

336 
	#X509_TRUST_TRUSTED
 1

	)

337 
	#X509_TRUST_REJECTED
 2

	)

338 
	#X509_TRUST_UNTRUSTED
 3

	)

342 
	#X509_FLAG_COMPAT
 0

	)

343 
	#X509_FLAG_NO_HEADER
 1L

	)

344 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

345 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

346 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

347 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

348 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

349 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

350 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

351 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

352 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

353 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

354 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

360 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

362 
	#XN_FLAG_COMPAT
 0

	)

363 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16Ë

	)

364 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16Ë

	)

365 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16Ë

	)

366 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16Ë

	)

368 
	#XN_FLAG_DN_REV
 (1 << 20Ë

	)

372 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

374 
	#XN_FLAG_FN_SN
 0

	)

375 
	#XN_FLAG_FN_LN
 (1 << 21Ë

	)

376 
	#XN_FLAG_FN_OID
 (2 << 21Ë

	)

377 
	#XN_FLAG_FN_NONE
 (3 << 21Ë

	)

379 
	#XN_FLAG_SPC_EQ
 (1 << 23Ë

	)

385 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

387 
	#XN_FLAG_FN_ALIGN
 (1 << 25Ë

	)

391 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

392 
XN_FLAG_SEP_COMMA_PLUS
 | \

393 
XN_FLAG_DN_REV
 | \

394 
XN_FLAG_FN_SN
 | \

395 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

399 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

400 
ASN1_STRFLGS_ESC_QUOTE
 | \

401 
XN_FLAG_SEP_CPLUS_SPC
 | \

402 
XN_FLAG_SPC_EQ
 | \

403 
XN_FLAG_FN_SN
)

	)

407 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

408 
ASN1_STRFLGS_ESC_MSB
 | \

409 
XN_FLAG_SEP_MULTILINE
 | \

410 
XN_FLAG_SPC_EQ
 | \

411 
XN_FLAG_FN_LN
 | \

412 
XN_FLAG_FN_ALIGN
)

	)

414 
	sX509_ªvoked_°


416 
ASN1_INTEGER
 *
£rülNumbî
;

417 
ASN1_TIME
 *
ªvoˇti⁄D©e
;

418 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

419 
£quí˚
;

420 } 
	tX509_REVOKED
;

422 
DECLARE_STACK_OF
(
X509_REVOKED
)

423 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

425 
	sX509_¸l_öfo_°


427 
ASN1_INTEGER
 *
vîsi⁄
;

428 
X509_ALGOR
 *
sig_Æg
;

429 
X509_NAME
 *
issuî
;

430 
ASN1_TIME
 *
œ°Upd©e
;

431 
ASN1_TIME
 *
√xtUpd©e
;

432 
STACK_OF
(
X509_REVOKED
Ë*
ªvoked
;

433 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

434 
ASN1_ENCODING
 
íc
;

435 } 
	tX509_CRL_INFO
;

437 
	sX509_¸l_°


440 
X509_CRL_INFO
 *
¸l
;

441 
X509_ALGOR
 *
sig_Æg
;

442 
ASN1_BIT_STRING
 *
sig«tuª
;

443 
ª„ªn˚s
;

446 
DECLARE_STACK_OF
(
X509_CRL
)

447 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

449 
	s¥iv©e_key_°


451 
vîsi⁄
;

453 
X509_ALGOR
 *
íc_Æg‹
;

454 
ASN1_OCTET_STRING
 *
íc_pkey
;

457 
EVP_PKEY
 *
dec_pkey
;

460 
key_Àngth
;

461 *
key_d©a
;

462 
key_‰ì
;

465 
EVP_CIPHER_INFO
 
cùhî
;

467 
ª„ªn˚s
;

468 } 
	tX509_PKEY
;

470 #i‚de‡
OPENSSL_NO_EVP


471 
	sX509_öfo_°


473 
X509
 *
x509
;

474 
X509_CRL
 *
¸l
;

475 
X509_PKEY
 *
x_pkey
;

477 
EVP_CIPHER_INFO
 
íc_cùhî
;

478 
íc_Àn
;

479 *
íc_d©a
;

481 
ª„ªn˚s
;

482 } 
	tX509_INFO
;

484 
DECLARE_STACK_OF
(
X509_INFO
)

491 
	sNësˇ≥_•kac_°


493 
X509_PUBKEY
 *
pubkey
;

494 
ASN1_IA5STRING
 *
chÆÀnge
;

495 } 
	tNETSCAPE_SPKAC
;

497 
	sNësˇ≥_•ki_°


499 
NETSCAPE_SPKAC
 *
•kac
;

500 
X509_ALGOR
 *
sig_Æg‹
;

501 
ASN1_BIT_STRING
 *
sig«tuª
;

502 } 
	tNETSCAPE_SPKI
;

505 
	sNësˇ≥_˚πifiˇã_£quí˚


507 
ASN1_OBJECT
 *
ty≥
;

508 
STACK_OF
(
X509
Ë*
˚πs
;

509 } 
	tNETSCAPE_CERT_SEQUENCE
;

520 
	sPBEPARAM_°
 {

521 
ASN1_OCTET_STRING
 *
ß…
;

522 
ASN1_INTEGER
 *
ôî
;

523 } 
	tPBEPARAM
;

527 
	sPBE2PARAM_°
 {

528 
X509_ALGOR
 *
keyfunc
;

529 
X509_ALGOR
 *
í¸y±i⁄
;

530 } 
	tPBE2PARAM
;

532 
	sPBKDF2PARAM_°
 {

533 
ASN1_TYPE
 *
ß…
;

534 
ASN1_INTEGER
 *
ôî
;

535 
ASN1_INTEGER
 *
keyÀngth
;

536 
X509_ALGOR
 *
¥f
;

537 } 
	tPBKDF2PARAM
;

542 
	spkcs8_¥iv_key_öfo_°


544 
brokí
;

545 
	#PKCS8_OK
 0

	)

546 
	#PKCS8_NO_OCTET
 1

	)

547 
	#PKCS8_EMBEDDED_PARAM
 2

	)

548 
	#PKCS8_NS_DB
 3

	)

549 
ASN1_INTEGER
 *
vîsi⁄
;

550 
X509_ALGOR
 *
pkeyÆg
;

551 
ASN1_TYPE
 *
pkey
;

552 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

553 } 
	tPKCS8_PRIV_KEY_INFO
;

555 #ifde‡ 
__˝lu•lus


559 
	~<›ís¶/x509_vfy.h
>

560 
	~<›ís¶/pkcs7.h
>

562 #ifde‡ 
__˝lu•lus


566 #ifde‡
SSLEAY_MACROS


567 
	#X509_vîify
(
a
,
r
Ë
	`ASN1_vîify
(((*)())
i2d_X509_CINF
,a->
sig_Æg
,\

568 
a
->
sig«tuª
,(*Ô->
˚π_öfo
,
r
)

	)

569 
	#X509_REQ_vîify
(
a
,
r
Ë
	`ASN1_vîify
(((*)())
i2d_X509_REQ_INFO
, \

570 
a
->
sig_Æg
,a->
sig«tuª
,(*Ô->
ªq_öfo
,
r
)

	)

571 
	#X509_CRL_vîify
(
a
,
r
Ë
	`ASN1_vîify
(((*)())
i2d_X509_CRL_INFO
, \

572 
a
->
sig_Æg
,á->
sig«tuª
,(*Ô->
¸l
,
r
)

	)

574 
	#X509_sign
(
x
,
pkey
,
md
) \

575 
	`ASN1_sign
(((*)())
i2d_X509_CINF
, 
x
->
˚π_öfo
->
sig«tuª
, \

576 
x
->
sig_Æg
, x->
sig«tuª
, (*)x->
˚π_öfo
,
pkey
,
md
)

	)

577 
	#X509_REQ_sign
(
x
,
pkey
,
md
) \

578 
	`ASN1_sign
(((*)())
i2d_X509_REQ_INFO
,
x
->
sig_Æg
, 
NULL
, \

579 
x
->
sig«tuª
, (*)x->
ªq_öfo
,
pkey
,
md
)

	)

580 
	#X509_CRL_sign
(
x
,
pkey
,
md
) \

581 
	`ASN1_sign
(((*)())
i2d_X509_CRL_INFO
,
x
->
¸l
->
sig_Æg
,x->sig_alg, \

582 
x
->
sig«tuª
, (*)x->
¸l
,
pkey
,
md
)

	)

583 
	#NETSCAPE_SPKI_sign
(
x
,
pkey
,
md
) \

584 
	`ASN1_sign
(((*)())
i2d_NETSCAPE_SPKAC
, 
x
->
sig_Æg‹
,
NULL
, \

585 
x
->
sig«tuª
, (*)x->
•kac
,
pkey
,
md
)

	)

587 
	#X509_dup
(
x509
Ë(
X509
 *)
	`ASN1_dup
(((*)())
i2d_X509
, \

588 (*(*)())
d2i_X509
,(*)
x509
)

	)

589 
	#X509_ATTRIBUTE_dup
(
xa
Ë(
X509_ATTRIBUTE
 *)
	`ASN1_dup
(\

590 ((*)())
i2d_X509_ATTRIBUTE
, \

591 (*(*)())
d2i_X509_ATTRIBUTE
,(*)
xa
)

	)

592 
	#X509_EXTENSION_dup
(
ex
Ë(
X509_EXTENSION
 *)
	`ASN1_dup
( \

593 ((*)())
i2d_X509_EXTENSION
, \

594 (*(*)())
d2i_X509_EXTENSION
,(*)
ex
)

	)

595 
	#d2i_X509_Â
(
Â
,
x509
Ë(
X509
 *)
	`ASN1_d2i_Â
((*(*)())
X509_√w
, \

596 (*(*)())
d2i_X509
, (
Â
),(**)(
x509
))

	)

597 
	#i2d_X509_Â
(
Â
,
x509
Ë
	`ASN1_i2d_Â
(
i2d_X509
,Â,(*)x509)

	)

598 
	#d2i_X509_bio
(
bp
,
x509
Ë(
X509
 *)
	`ASN1_d2i_bio
((*(*)())
X509_√w
, \

599 (*(*)())
d2i_X509
, (
bp
),(**)(
x509
))

	)

600 
	#i2d_X509_bio
(
bp
,
x509
Ë
	`ASN1_i2d_bio
(
i2d_X509
,bp,(*)x509)

	)

602 
	#X509_CRL_dup
(
¸l
Ë(
X509_CRL
 *)
	`ASN1_dup
(((*)())
i2d_X509_CRL
, \

603 (*(*)())
d2i_X509_CRL
,(*)
¸l
)

	)

604 
	#d2i_X509_CRL_Â
(
Â
,
¸l
Ë(
X509_CRL
 *)
	`ASN1_d2i_Â
((*(*)()) \

605 
X509_CRL_√w
,(*(*)())
d2i_X509_CRL
, (
Â
),\

606 (**)(
¸l
))

	)

607 
	#i2d_X509_CRL_Â
(
Â
,
¸l
Ë
	`ASN1_i2d_Â
(
i2d_X509_CRL
,fp,\

608 (*)
¸l
)

	)

609 
	#d2i_X509_CRL_bio
(
bp
,
¸l
Ë(
X509_CRL
 *)
	`ASN1_d2i_bio
((*(*)()) \

610 
X509_CRL_√w
,(*(*)())
d2i_X509_CRL
, (
bp
),\

611 (**)(
¸l
))

	)

612 
	#i2d_X509_CRL_bio
(
bp
,
¸l
Ë
	`ASN1_i2d_bio
(
i2d_X509_CRL
,bp,\

613 (*)
¸l
)

	)

615 
	#PKCS7_dup
(
p7
Ë(
PKCS7
 *)
	`ASN1_dup
(((*)())
i2d_PKCS7
, \

616 (*(*)())
d2i_PKCS7
,(*)
p7
)

	)

617 
	#d2i_PKCS7_Â
(
Â
,
p7
Ë(
PKCS7
 *)
	`ASN1_d2i_Â
((*(*)()) \

618 
PKCS7_√w
,(*(*)())
d2i_PKCS7
, (
Â
),\

619 (**)(
p7
))

	)

620 
	#i2d_PKCS7_Â
(
Â
,
p7
Ë
	`ASN1_i2d_Â
(
i2d_PKCS7
,fp,\

621 (*)
p7
)

	)

622 
	#d2i_PKCS7_bio
(
bp
,
p7
Ë(
PKCS7
 *)
	`ASN1_d2i_bio
((*(*)()) \

623 
PKCS7_√w
,(*(*)())
d2i_PKCS7
, (
bp
),\

624 (**)(
p7
))

	)

625 
	#i2d_PKCS7_bio
(
bp
,
p7
Ë
	`ASN1_i2d_bio
(
i2d_PKCS7
,bp,\

626 (*)
p7
)

	)

628 
	#X509_REQ_dup
(
ªq
Ë(
X509_REQ
 *)
	`ASN1_dup
(((*)())
i2d_X509_REQ
, \

629 (*(*)())
d2i_X509_REQ
,(*)
ªq
)

	)

630 
	#d2i_X509_REQ_Â
(
Â
,
ªq
Ë(
X509_REQ
 *)
	`ASN1_d2i_Â
((*(*)())\

631 
X509_REQ_√w
, (*(*)())
d2i_X509_REQ
, (
Â
),\

632 (**)(
ªq
))

	)

633 
	#i2d_X509_REQ_Â
(
Â
,
ªq
Ë
	`ASN1_i2d_Â
(
i2d_X509_REQ
,fp,\

634 (*)
ªq
)

	)

635 
	#d2i_X509_REQ_bio
(
bp
,
ªq
Ë(
X509_REQ
 *)
	`ASN1_d2i_bio
((*(*)())\

636 
X509_REQ_√w
, (*(*)())
d2i_X509_REQ
, (
bp
),\

637 (**)(
ªq
))

	)

638 
	#i2d_X509_REQ_bio
(
bp
,
ªq
Ë
	`ASN1_i2d_bio
(
i2d_X509_REQ
,bp,\

639 (*)
ªq
)

	)

641 
	#RSAPublicKey_dup
(
rß
Ë(
RSA
 *)
	`ASN1_dup
(((*)())
i2d_RSAPublicKey
, \

642 (*(*)())
d2i_RSAPublicKey
,(*)
rß
)

	)

643 
	#RSAPriv©eKey_dup
(
rß
Ë(
RSA
 *)
	`ASN1_dup
(((*)())
i2d_RSAPriv©eKey
, \

644 (*(*)())
d2i_RSAPriv©eKey
,(*)
rß
)

	)

646 
	#d2i_RSAPriv©eKey_Â
(
Â
,
rß
Ë(
RSA
 *)
	`ASN1_d2i_Â
((*(*)())\

647 
RSA_√w
,(*(*)())
d2i_RSAPriv©eKey
, (
Â
), \

648 (**)(
rß
))

	)

649 
	#i2d_RSAPriv©eKey_Â
(
Â
,
rß
Ë
	`ASN1_i2d_Â
(
i2d_RSAPriv©eKey
,fp, \

650 (*)
rß
)

	)

651 
	#d2i_RSAPriv©eKey_bio
(
bp
,
rß
Ë(
RSA
 *)
	`ASN1_d2i_bio
((*(*)())\

652 
RSA_√w
,(*(*)())
d2i_RSAPriv©eKey
, (
bp
), \

653 (**)(
rß
))

	)

654 
	#i2d_RSAPriv©eKey_bio
(
bp
,
rß
Ë
	`ASN1_i2d_bio
(
i2d_RSAPriv©eKey
,bp, \

655 (*)
rß
)

	)

657 
	#d2i_RSAPublicKey_Â
(
Â
,
rß
Ë(
RSA
 *)
	`ASN1_d2i_Â
((*(*)())\

658 
RSA_√w
,(*(*)())
d2i_RSAPublicKey
, (
Â
), \

659 (**)(
rß
))

	)

660 
	#i2d_RSAPublicKey_Â
(
Â
,
rß
Ë
	`ASN1_i2d_Â
(
i2d_RSAPublicKey
,fp, \

661 (*)
rß
)

	)

662 
	#d2i_RSAPublicKey_bio
(
bp
,
rß
Ë(
RSA
 *)
	`ASN1_d2i_bio
((*(*)())\

663 
RSA_√w
,(*(*)())
d2i_RSAPublicKey
, (
bp
), \

664 (**)(
rß
))

	)

665 
	#i2d_RSAPublicKey_bio
(
bp
,
rß
Ë
	`ASN1_i2d_bio
(
i2d_RSAPublicKey
,bp, \

666 (*)
rß
)

	)

668 
	#d2i_DSAPriv©eKey_Â
(
Â
,
dß
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())\

669 
DSA_√w
,(*(*)())
d2i_DSAPriv©eKey
, (
Â
), \

670 (**)(
dß
))

	)

671 
	#i2d_DSAPriv©eKey_Â
(
Â
,
dß
Ë
	`ASN1_i2d_Â
(
i2d_DSAPriv©eKey
,fp, \

672 (*)
dß
)

	)

673 
	#d2i_DSAPriv©eKey_bio
(
bp
,
dß
Ë(
DSA
 *)
	`ASN1_d2i_bio
((*(*)())\

674 
DSA_√w
,(*(*)())
d2i_DSAPriv©eKey
, (
bp
), \

675 (**)(
dß
))

	)

676 
	#i2d_DSAPriv©eKey_bio
(
bp
,
dß
Ë
	`ASN1_i2d_bio
(
i2d_DSAPriv©eKey
,bp, \

677 (*)
dß
)

	)

679 
	#d2i_ECPriv©eKey_Â
(
Â
,
ecdß
Ë(
EC_KEY
 *)
	`ASN1_d2i_Â
((*(*)())\

680 
EC_KEY_√w
,(*(*)())
d2i_ECPriv©eKey
, (
Â
), \

681 (**)(
ecdß
))

	)

682 
	#i2d_ECPriv©eKey_Â
(
Â
,
ecdß
Ë
	`ASN1_i2d_Â
(
i2d_ECPriv©eKey
,fp, \

683 (*)
ecdß
)

	)

684 
	#d2i_ECPriv©eKey_bio
(
bp
,
ecdß
Ë(
EC_KEY
 *)
	`ASN1_d2i_bio
((*(*)())\

685 
EC_KEY_√w
,(*(*)())
d2i_ECPriv©eKey
, (
bp
), \

686 (**)(
ecdß
))

	)

687 
	#i2d_ECPriv©eKey_bio
(
bp
,
ecdß
Ë
	`ASN1_i2d_bio
(
i2d_ECPriv©eKey
,bp, \

688 (*)
ecdß
)

	)

690 
	#X509_ALGOR_dup
(
xn
Ë(
X509_ALGOR
 *)
	`ASN1_dup
(((*)())
i2d_X509_ALGOR
,\

691 (*(*)())
d2i_X509_ALGOR
,(*)
xn
)

	)

693 
	#X509_NAME_dup
(
xn
Ë(
X509_NAME
 *)
	`ASN1_dup
(((*)())
i2d_X509_NAME
, \

694 (*(*)())
d2i_X509_NAME
,(*)
xn
)

	)

695 
	#X509_NAME_ENTRY_dup
(
√
Ë(
X509_NAME_ENTRY
 *)
	`ASN1_dup
( \

696 ((*)())
i2d_X509_NAME_ENTRY
, \

697 (*(*)())
d2i_X509_NAME_ENTRY
,\

698 (*)
√
)

	)

700 
	#X509_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

701 
	`ASN1_dige°
(((*)())
i2d_X509
,
ty≥
,(*)
d©a
,
md
,
Àn
)

	)

702 
	#X509_NAME_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

703 
	`ASN1_dige°
(((*)())
i2d_X509_NAME
,
ty≥
,(*)
d©a
,
md
,
Àn
)

	)

704 #i‚de‡
PKCS7_ISSUER_AND_SERIAL_dige°


705 
	#PKCS7_ISSUER_AND_SERIAL_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

706 
	`ASN1_dige°
(((*)())
i2d_PKCS7_ISSUER_AND_SERIAL
,
ty≥
,\

707 (*)
d©a
,
md
,
Àn
)

	)

711 
	#X509_EXT_PACK_UNKNOWN
 1

	)

712 
	#X509_EXT_PACK_STRING
 2

	)

714 
	#X509_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
˚π_öfo
->
vîsi⁄
)

	)

716 
	#X509_gë_nŸBef‹e
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸBef‹e
)

	)

717 
	#X509_gë_nŸA·î
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸA·î
)

	)

718 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(xË

	)

719 
	#X509_REQ_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
ªq_öfo
->
vîsi⁄
)

	)

720 
	#X509_REQ_gë_subje˘_«me
(
x
Ë((x)->
ªq_öfo
->
subje˘
)

	)

721 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

722 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

723 
	#X509_gë_sig«tuª_ty≥
(
x
Ë
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Æg
->
Æg‹ôhm
))

	)

725 
	#X509_CRL_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
¸l
->
vîsi⁄
)

	)

726 
	#X509_CRL_gë_œ°Upd©e
(
x
Ë((x)->
¸l
->
œ°Upd©e
)

	)

727 
	#X509_CRL_gë_√xtUpd©e
(
x
Ë((x)->
¸l
->
√xtUpd©e
)

	)

728 
	#X509_CRL_gë_issuî
(
x
Ë((x)->
¸l
->
issuî
)

	)

729 
	#X509_CRL_gë_REVOKED
(
x
Ë((x)->
¸l
->
ªvoked
)

	)

733 
	#X509_gë_X509_PUBKEY
(
x
Ë((x)->
˚π_öfo
->
key
)

	)

736 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

738 #i‚de‡
SSLEAY_MACROS


739 #i‚de‡
OPENSSL_NO_EVP


740 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

742 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

743 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

744 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

746 
NETSCAPE_SPKI
 * 
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

747 * 
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

748 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

749 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

751 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

753 
X509_sig«tuª_¥öt
(
BIO
 *
bp
,
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

755 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

756 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

757 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

758 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

760 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

761 *
md
, *
Àn
);

762 
X509_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

763 *
md
, *
Àn
);

764 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

765 *
md
, *
Àn
);

766 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

767 *
md
, *
Àn
);

768 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

769 *
md
, *
Àn
);

772 #i‚de‡
OPENSSL_NO_FP_API


773 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

774 
i2d_X509_Â
(
FILE
 *
Â
,
X509
 *
x509
);

775 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
,X509_CRL **
¸l
);

776 
i2d_X509_CRL_Â
(
FILE
 *
Â
,
X509_CRL
 *
¸l
);

777 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
,X509_REQ **
ªq
);

778 
i2d_X509_REQ_Â
(
FILE
 *
Â
,
X509_REQ
 *
ªq
);

779 #i‚de‡
OPENSSL_NO_RSA


780 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
,RSA **
rß
);

781 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

782 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
,RSA **
rß
);

783 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

784 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
,RSA **
rß
);

785 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

787 #i‚de‡
OPENSSL_NO_DSA


788 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

789 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

790 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

791 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

793 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
,X509_SIG **
p8
);

794 
i2d_PKCS8_Â
(
FILE
 *
Â
,
X509_SIG
 *
p8
);

795 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

796 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

797 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

798 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

799 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

800 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

801 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

802 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

805 #i‚de‡
OPENSSL_NO_BIO


806 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
,X509 **
x509
);

807 
i2d_X509_bio
(
BIO
 *
bp
,
X509
 *
x509
);

808 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
,X509_CRL **
¸l
);

809 
i2d_X509_CRL_bio
(
BIO
 *
bp
,
X509_CRL
 *
¸l
);

810 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
,X509_REQ **
ªq
);

811 
i2d_X509_REQ_bio
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

812 #i‚de‡
OPENSSL_NO_RSA


813 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
,RSA **
rß
);

814 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

815 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
,RSA **
rß
);

816 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

817 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
,RSA **
rß
);

818 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

820 #i‚de‡
OPENSSL_NO_DSA


821 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

822 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

823 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

824 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

826 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
,X509_SIG **
p8
);

827 
i2d_PKCS8_bio
(
BIO
 *
bp
,
X509_SIG
 *
p8
);

828 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

829 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

830 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

831 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

832 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

833 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

834 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

835 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

838 
X509
 *
X509_dup
(X509 *
x509
);

839 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

840 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

841 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

842 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

843 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

844 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

845 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

849 
X509_cmp_time
(
ASN1_TIME
 *
s
, 
time_t
 *
t
);

850 
X509_cmp_cuºít_time
(
ASN1_TIME
 *
s
);

851 
ASN1_TIME
 * 
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

852 
ASN1_TIME
 * 
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

854 c⁄° * 
X509_gë_deÁu…_˚π_¨ó
();

855 c⁄° * 
X509_gë_deÁu…_˚π_dú
();

856 c⁄° * 
X509_gë_deÁu…_˚π_fûe
();

857 c⁄° * 
X509_gë_deÁu…_˚π_dú_ív
();

858 c⁄° * 
X509_gë_deÁu…_˚π_fûe_ív
();

859 c⁄° * 
X509_gë_deÁu…_¥iv©e_dú
();

861 
X509_REQ
 * 
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

862 
X509
 * 
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
,
EVP_PKEY
 *
pkey
);

864 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

865 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

867 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

869 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

870 
EVP_PKEY
 * 
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

871 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
,

872 
STACK_OF
(
X509
Ë*
chaö
);

873 
i2d_PUBKEY
(
EVP_PKEY
 *
a
,**
µ
);

874 
EVP_PKEY
 * 
d2i_PUBKEY
(EVP_PKEY **
a
,c⁄° **
µ
,

875 
Àngth
);

876 #i‚de‡
OPENSSL_NO_RSA


877 
i2d_RSA_PUBKEY
(
RSA
 *
a
,**
µ
);

878 
RSA
 * 
d2i_RSA_PUBKEY
(RSA **
a
,c⁄° **
µ
,

879 
Àngth
);

881 #i‚de‡
OPENSSL_NO_DSA


882 
i2d_DSA_PUBKEY
(
DSA
 *
a
,**
µ
);

883 
DSA
 * 
d2i_DSA_PUBKEY
(DSA **
a
,c⁄° **
µ
,

884 
Àngth
);

887 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

888 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

889 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

891 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

892 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

894 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

896 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

898 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

900 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

902 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

904 
DECLARE_ASN1_FUNCTIONS
(
X509
)

905 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

907 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

909 
X509_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

910 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

911 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

912 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

913 
i2d_X509_AUX
(
X509
 *
a
,**
µ
);

914 
X509
 * 
d2i_X509_AUX
(X509 **
a
,c⁄° **
µ
,
Àngth
);

916 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

917 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

918 * 
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

919 * 
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

920 (*
X509_TRUST_£t_deÁu…
((*
åu°
)(, 
X509
 *, )))(, X509 *, );

921 
X509_TRUST_£t
(*
t
, 
åu°
);

922 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

923 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

924 
X509_åu°_˛ór
(
X509
 *
x
);

925 
X509_ªje˘_˛ór
(
X509
 *
x
);

927 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

928 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

929 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

931 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

933 
X509_PKEY
 * 
X509_PKEY_√w
();

934 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

935 
i2d_X509_PKEY
(
X509_PKEY
 *
a
,**
µ
);

936 
X509_PKEY
 * 
d2i_X509_PKEY
(X509_PKEY **
a
,c⁄° **
µ
,
Àngth
);

938 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

939 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

940 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

942 #i‚de‡
OPENSSL_NO_EVP


943 
X509_INFO
 * 
X509_INFO_√w
();

944 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

945 * 
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
,*
buf
,
size
);

947 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

948 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

950 
ASN1_dige°
(
i2d_of_void
 *
i2d
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

951 *
md
,*
Àn
);

953 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

954 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

955 *
d©a
,
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

957 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

958 *
md
,*
Àn
);

960 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

961 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

963 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

964 
ASN1_BIT_STRING
 *
sig«tuª
,

965 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

968 
X509_£t_vîsi⁄
(
X509
 *
x
,
vîsi⁄
);

969 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

970 
ASN1_INTEGER
 * 
X509_gë_£rülNumbî
(
X509
 *
x
);

971 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

972 
X509_NAME
 * 
X509_gë_issuî_«me
(
X509
 *
a
);

973 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

974 
X509_NAME
 * 
X509_gë_subje˘_«me
(
X509
 *
a
);

975 
X509_£t_nŸBef‹e
(
X509
 *
x
, 
ASN1_TIME
 *
tm
);

976 
X509_£t_nŸA·î
(
X509
 *
x
, 
ASN1_TIME
 *
tm
);

977 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

978 
EVP_PKEY
 * 
X509_gë_pubkey
(
X509
 *
x
);

979 
ASN1_BIT_STRING
 * 
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

980 
X509_˚πifiˇã_ty≥
(
X509
 *
x
,
EVP_PKEY
 *
pubkey
 );

982 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
,
vîsi⁄
);

983 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
,
X509_NAME
 *
«me
);

984 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

985 
EVP_PKEY
 * 
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

986 
X509_REQ_exãnsi⁄_nid
(
nid
);

987 * 
X509_REQ_gë_exãnsi⁄_nids
();

988 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

989 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

990 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

991 
nid
);

992 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

993 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

994 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
,

995 
œ°pos
);

996 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

997 
œ°pos
);

998 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

999 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

1000 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

1001 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

1002 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1003 c⁄° *
byãs
, 
Àn
);

1004 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

1005 
nid
, 
ty≥
,

1006 c⁄° *
byãs
, 
Àn
);

1007 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

1008 c⁄° *
©å«me
, 
ty≥
,

1009 c⁄° *
byãs
, 
Àn
);

1011 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

1012 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

1013 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, 
ASN1_TIME
 *
tm
);

1014 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, 
ASN1_TIME
 *
tm
);

1015 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

1017 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

1018 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

1020 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
,
EVP_PKEY
 *
pkey
);

1022 
X509_check_¥iv©e_key
(
X509
 *
x509
,
EVP_PKEY
 *
pkey
);

1024 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

1025 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

1027 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

1028 
X509_issuî_«me_hash
(
X509
 *
a
);

1030 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

1031 
X509_subje˘_«me_hash
(
X509
 *
x
);

1033 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

1034 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

1035 
X509_NAME_hash
(
X509_NAME
 *
x
);

1037 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

1038 #i‚de‡
OPENSSL_NO_FP_API


1039 
X509_¥öt_ex_Â
(
FILE
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

1040 
X509_¥öt_Â
(
FILE
 *
bp
,
X509
 *
x
);

1041 
X509_CRL_¥öt_Â
(
FILE
 *
bp
,
X509_CRL
 *
x
);

1042 
X509_REQ_¥öt_Â
(
FILE
 *
bp
,
X509_REQ
 *
ªq
);

1043 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

1046 #i‚de‡
OPENSSL_NO_BIO


1047 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

1048 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

1049 
X509_¥öt_ex
(
BIO
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

1050 
X509_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1051 
X509_oc•id_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1052 
X509_CERT_AUX_¥öt
(
BIO
 *
bp
,
X509_CERT_AUX
 *
x
, 
ödít
);

1053 
X509_CRL_¥öt
(
BIO
 *
bp
,
X509_CRL
 *
x
);

1054 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
, 
cÊag
);

1055 
X509_REQ_¥öt
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

1058 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

1059 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
,

1060 *
buf
,
Àn
);

1061 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1062 *
buf
,
Àn
);

1066 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
,
nid
,
œ°pos
);

1067 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
,
ASN1_OBJECT
 *
obj
,

1068 
œ°pos
);

1069 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

1070 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

1071 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
,
X509_NAME_ENTRY
 *
√
,

1072 
loc
, 
£t
);

1073 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1074 *
byãs
, 
Àn
, 
loc
, 
£t
);

1075 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1076 *
byãs
, 
Àn
, 
loc
, 
£t
);

1077 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

1078 c⁄° *
fõld
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1079 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1080 
ty≥
,*
byãs
, 
Àn
);

1081 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

1082 c⁄° *
byãs
, 
Àn
, 
loc
, 
£t
);

1083 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

1084 
ASN1_OBJECT
 *
obj
, 
ty≥
,c⁄° *
byãs
,

1085 
Àn
);

1086 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
,

1087 
ASN1_OBJECT
 *
obj
);

1088 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1089 c⁄° *
byãs
, 
Àn
);

1090 
ASN1_OBJECT
 * 
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

1091 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

1093 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1094 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1095 
nid
, 
œ°pos
);

1096 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1097 
ASN1_OBJECT
 *
obj
,
œ°pos
);

1098 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1099 
¸ô
, 
œ°pos
);

1100 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1101 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1102 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1103 
X509_EXTENSION
 *
ex
, 
loc
);

1105 
X509_gë_ext_cou¡
(
X509
 *
x
);

1106 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

1107 
X509_gë_ext_by_OBJ
(
X509
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1108 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

1109 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

1110 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1111 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1112 * 
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1113 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1114 
Êags
);

1116 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

1117 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1118 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1119 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1120 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

1121 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1122 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1123 * 
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1124 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1125 
Êags
);

1127 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

1128 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1129 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1130 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

1131 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

1132 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1133 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1134 * 
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

1135 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1136 
Êags
);

1138 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1139 
nid
, 
¸ô
, 
ASN1_OCTET_STRING
 *
d©a
);

1140 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1141 
ASN1_OBJECT
 *
obj
,
¸ô
,
ASN1_OCTET_STRING
 *
d©a
);

1142 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
,
ASN1_OBJECT
 *
obj
);

1143 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1144 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
,

1145 
ASN1_OCTET_STRING
 *
d©a
);

1146 
ASN1_OBJECT
 * 
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1147 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1148 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

1150 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1151 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1152 
œ°pos
);

1153 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
, 
ASN1_OBJECT
 *
obj
,

1154 
œ°pos
);

1155 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1156 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1157 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1158 
X509_ATTRIBUTE
 *
©å
);

1159 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTEË**
x
,

1160 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1161 c⁄° *
byãs
, 
Àn
);

1162 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTEË**
x
,

1163 
nid
, 
ty≥
,

1164 c⁄° *
byãs
, 
Àn
);

1165 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTEË**
x
,

1166 c⁄° *
©å«me
, 
ty≥
,

1167 c⁄° *
byãs
, 
Àn
);

1168 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1169 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1170 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1171 c⁄° 
ASN1_OBJECT
 *
obj
, 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1172 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1173 c⁄° *
©∫ame
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1174 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1175 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
, c⁄° *
d©a
, 
Àn
);

1176 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
,

1177 
©πy≥
, *
d©a
);

1178 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

1179 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1180 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1182 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1183 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
,

1184 
œ°pos
);

1185 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1186 
œ°pos
);

1187 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1188 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1189 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1190 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1191 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1192 c⁄° *
byãs
, 
Àn
);

1193 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1194 
nid
, 
ty≥
,

1195 c⁄° *
byãs
, 
Àn
);

1196 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1197 c⁄° *
©å«me
, 
ty≥
,

1198 c⁄° *
byãs
, 
Àn
);

1200 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

1203 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
,

1204 
ASN1_INTEGER
 *
£rül
);

1205 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
);

1207 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1208 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1209 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1211 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
, *
ß…
, 
ß…Àn
);

1212 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1213 *
ß…
, 
ß…Àn
);

1217 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1219 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1220 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1221 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokí
(
EVP_PKEY
 *
pkey
, 
brokí
);

1222 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokí
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokí
);

1224 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1225 
X509_TRUST_gë_cou¡
();

1226 
X509_TRUST
 * 
X509_TRUST_gë0
(
idx
);

1227 
X509_TRUST_gë_by_id
(
id
);

1228 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
)(
X509_TRUST
 *, 
X509
 *, ),

1229 *
«me
, 
¨g1
, *
¨g2
);

1230 
X509_TRUST_˛ónup
();

1231 
X509_TRUST_gë_Êags
(
X509_TRUST
 *
xp
);

1232 *
X509_TRUST_gë0_«me
(
X509_TRUST
 *
xp
);

1233 
X509_TRUST_gë_åu°
(
X509_TRUST
 *
xp
);

1239 
ERR_lﬂd_X509_°rögs
();

1244 
	#X509_F_ADD_CERT_DIR
 100

	)

1245 
	#X509_F_BY_FILE_CTRL
 101

	)

1246 
	#X509_F_CHECK_POLICY
 145

	)

1247 
	#X509_F_DIR_CTRL
 102

	)

1248 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1249 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1250 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1251 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1252 
	#X509_F_X509V3_ADD_EXT
 104

	)

1253 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1254 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1255 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1256 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1257 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1258 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1259 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1260 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1261 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1262 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1263 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1264 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1265 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1266 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1267 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1268 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1269 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1270 
	#X509_F_X509_NAME_ONELINE
 116

	)

1271 
	#X509_F_X509_NAME_PRINT
 117

	)

1272 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1273 
	#X509_F_X509_PUBKEY_GET
 119

	)

1274 
	#X509_F_X509_PUBKEY_SET
 120

	)

1275 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1276 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1277 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1278 
	#X509_F_X509_REQ_TO_X509
 123

	)

1279 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1280 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1281 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1282 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1283 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1284 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1285 
	#X509_F_X509_TO_X509_REQ
 126

	)

1286 
	#X509_F_X509_TRUST_ADD
 133

	)

1287 
	#X509_F_X509_TRUST_SET
 141

	)

1288 
	#X509_F_X509_VERIFY_CERT
 127

	)

1291 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1292 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1293 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1294 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1295 
	#X509_R_ERR_ASN1_LIB
 102

	)

1296 
	#X509_R_INVALID_DIRECTORY
 113

	)

1297 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1298 
	#X509_R_INVALID_TRUST
 123

	)

1299 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1300 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1301 
	#X509_R_LOADING_CERT_DIR
 103

	)

1302 
	#X509_R_LOADING_DEFAULTS
 104

	)

1303 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1304 
	#X509_R_SHOULD_RETRY
 106

	)

1305 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1306 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1307 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1308 
	#X509_R_UNKNOWN_NID
 109

	)

1309 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1310 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1311 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1312 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1313 
	#X509_R_WRONG_TYPE
 122

	)

1315 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509v3.h

58 #i‚de‡
HEADER_X509V3_H


59 
	#HEADER_X509V3_H


	)

61 
	~<›ís¶/bio.h
>

62 
	~<›ís¶/x509.h
>

63 
	~<›ís¶/c⁄f.h
>

65 #ifde‡
__˝lu•lus


70 
v3_ext_mëhod
;

71 
v3_ext_˘x
;

75 * (*
	tX509V3_EXT_NEW
)();

76 (*
X509V3_EXT_FREE
)(*);

77 * (*
	tX509V3_EXT_D2I
)(*, const ** , );

78 (*
X509V3_EXT_I2D
)(*, **);

79 
STACK_OF
(
	tCONF_VALUE
Ë* (*
	tX509V3_EXT_I2V
)(
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
, 
	tSTACK_OF
(CONF_VALUEË*
	texéi°
);

80 * (*
	tX509V3_EXT_V2I
)(
	tv3_ext_mëhod
 *
	tmëhod
, 
	tv3_ext_˘x
 *
	t˘x
, 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	tvÆues
);

81 * (*
	tX509V3_EXT_I2S
)(
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
);

82 * (*
	tX509V3_EXT_S2I
)(
	tv3_ext_mëhod
 *
	tmëhod
, 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

83 (*
X509V3_EXT_I2R
)(
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
, 
	tBIO
 *
	tout
, 
	tödít
);

84 * (*
	tX509V3_EXT_R2I
)(
	tv3_ext_mëhod
 *
	tmëhod
, 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

88 
	sv3_ext_mëhod
 {

89 
ext_nid
;

90 
ext_Êags
;

92 
ASN1_ITEM_EXP
 *
ô
;

94 
X509V3_EXT_NEW
 
ext_√w
;

95 
X509V3_EXT_FREE
 
ext_‰ì
;

96 
X509V3_EXT_D2I
 
d2i
;

97 
X509V3_EXT_I2D
 
i2d
;

100 
X509V3_EXT_I2S
 
i2s
;

101 
X509V3_EXT_S2I
 
s2i
;

104 
X509V3_EXT_I2V
 
i2v
;

105 
X509V3_EXT_V2I
 
v2i
;

108 
X509V3_EXT_I2R
 
i2r
;

109 
X509V3_EXT_R2I
 
r2i
;

111 *
u§_d©a
;

114 
	sX509V3_CONF_METHOD_°
 {

115 * (*
gë_°rög
)(*
db
, *
£˘i⁄
, *
vÆue
);

116 
STACK_OF
(
CONF_VALUE
Ë* (*
gë_£˘i⁄
)(*
db
, *
£˘i⁄
);

117 (*
‰ì_°rög
)(*
db
, * 
°rög
);

118 (*
‰ì_£˘i⁄
)(*
db
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

119 } 
	tX509V3_CONF_METHOD
;

122 
	sv3_ext_˘x
 {

123 
	#CTX_TEST
 0x1

	)

124 
Êags
;

125 
X509
 *
issuî_˚π
;

126 
X509
 *
subje˘_˚π
;

127 
X509_REQ
 *
subje˘_ªq
;

128 
X509_CRL
 *
¸l
;

129 
X509V3_CONF_METHOD
 *
db_mëh
;

130 *
db
;

134 
v3_ext_mëhod
 
	tX509V3_EXT_METHOD
;

136 
DECLARE_STACK_OF
(
X509V3_EXT_METHOD
)

139 
	#X509V3_EXT_DYNAMIC
 0x1

	)

140 
	#X509V3_EXT_CTX_DEP
 0x2

	)

141 
	#X509V3_EXT_MULTILINE
 0x4

	)

143 
BIT_STRING_BITNAME
 
	tENUMERATED_NAMES
;

145 
	sBASIC_CONSTRAINTS_°
 {

146 
ˇ
;

147 
ASN1_INTEGER
 *
∑thÀn
;

148 } 
	tBASIC_CONSTRAINTS
;

151 
	sPKEY_USAGE_PERIOD_°
 {

152 
ASN1_GENERALIZEDTIME
 *
nŸBef‹e
;

153 
ASN1_GENERALIZEDTIME
 *
nŸA·î
;

154 } 
	tPKEY_USAGE_PERIOD
;

156 
	sŸhîName_°
 {

157 
ASN1_OBJECT
 *
ty≥_id
;

158 
ASN1_TYPE
 *
vÆue
;

159 } 
	tOTHERNAME
;

161 
	sEDIP¨tyName_°
 {

162 
ASN1_STRING
 *
«meAssig√r
;

163 
ASN1_STRING
 *
∑πyName
;

164 } 
	tEDIPARTYNAME
;

166 
	sGENERAL_NAME_°
 {

168 
	#GEN_OTHERNAME
 0

	)

169 
	#GEN_EMAIL
 1

	)

170 
	#GEN_DNS
 2

	)

171 
	#GEN_X400
 3

	)

172 
	#GEN_DIRNAME
 4

	)

173 
	#GEN_EDIPARTY
 5

	)

174 
	#GEN_URI
 6

	)

175 
	#GEN_IPADD
 7

	)

176 
	#GEN_RID
 8

	)

178 
ty≥
;

180 *
±r
;

181 
OTHERNAME
 *
ŸhîName
;

182 
ASN1_IA5STRING
 *
rfc822Name
;

183 
ASN1_IA5STRING
 *
dNSName
;

184 
ASN1_TYPE
 *
x400Addªss
;

185 
X509_NAME
 *
dúe˘‹yName
;

186 
EDIPARTYNAME
 *
ediP¨tyName
;

187 
ASN1_IA5STRING
 *
unif‹mResour˚Idítifõr
;

188 
ASN1_OCTET_STRING
 *
iPAddªss
;

189 
ASN1_OBJECT
 *
ªgi°îedID
;

192 
ASN1_OCTET_STRING
 *
ù
;

193 
X509_NAME
 *
dún
;

194 
ASN1_IA5STRING
 *
ü5
;

195 
ASN1_OBJECT
 *
rid
;

196 
ASN1_TYPE
 *
Ÿhî
;

197 } 
d
;

198 } 
	tGENERAL_NAME
;

200 
STACK_OF
(
	tGENERAL_NAME
Ë
	tGENERAL_NAMES
;

202 
	sACCESS_DESCRIPTION_°
 {

203 
ASN1_OBJECT
 *
mëhod
;

204 
GENERAL_NAME
 *
loˇti⁄
;

205 } 
	tACCESS_DESCRIPTION
;

207 
STACK_OF
(
	tACCESS_DESCRIPTION
Ë
	tAUTHORITY_INFO_ACCESS
;

209 
STACK_OF
(
	tASN1_OBJECT
Ë
	tEXTENDED_KEY_USAGE
;

211 
DECLARE_STACK_OF
(
GENERAL_NAME
)

212 
DECLARE_ASN1_SET_OF
(
GENERAL_NAME
)

214 
DECLARE_STACK_OF
(
ACCESS_DESCRIPTION
)

215 
DECLARE_ASN1_SET_OF
(
ACCESS_DESCRIPTION
)

217 
	sDIST_POINT_NAME_°
 {

218 
ty≥
;

220 
GENERAL_NAMES
 *
fuŒ«me
;

221 
STACK_OF
(
X509_NAME_ENTRY
Ë*
ªœtivíame
;

222 } 
«me
;

223 } 
	tDIST_POINT_NAME
;

225 
	sDIST_POINT_°
 {

226 
DIST_POINT_NAME
 *
di°poöt
;

227 
ASN1_BIT_STRING
 *
ªas⁄s
;

228 
GENERAL_NAMES
 *
CRLissuî
;

229 } 
	tDIST_POINT
;

231 
STACK_OF
(
	tDIST_POINT
Ë
	tCRL_DIST_POINTS
;

233 
DECLARE_STACK_OF
(
DIST_POINT
)

234 
DECLARE_ASN1_SET_OF
(
DIST_POINT
)

236 
	sAUTHORITY_KEYID_°
 {

237 
ASN1_OCTET_STRING
 *
keyid
;

238 
GENERAL_NAMES
 *
issuî
;

239 
ASN1_INTEGER
 *
£rül
;

240 } 
	tAUTHORITY_KEYID
;

244 
	sSXNET_ID_°
 {

245 
ASN1_INTEGER
 *
z⁄e
;

246 
ASN1_OCTET_STRING
 *
u£r
;

247 } 
	tSXNETID
;

249 
DECLARE_STACK_OF
(
SXNETID
)

250 
DECLARE_ASN1_SET_OF
(
SXNETID
)

252 
	sSXNET_°
 {

253 
ASN1_INTEGER
 *
vîsi⁄
;

254 
STACK_OF
(
SXNETID
Ë*
ids
;

255 } 
	tSXNET
;

257 
	sNOTICEREF_°
 {

258 
ASN1_STRING
 *
‹g™iz©i⁄
;

259 
STACK_OF
(
ASN1_INTEGER
Ë*
nŸi˚nos
;

260 } 
	tNOTICEREF
;

262 
	sUSERNOTICE_°
 {

263 
NOTICEREF
 *
nŸi˚ªf
;

264 
ASN1_STRING
 *
ex±ext
;

265 } 
	tUSERNOTICE
;

267 
	sPOLICYQUALINFO_°
 {

268 
ASN1_OBJECT
 *
pquÆid
;

270 
ASN1_IA5STRING
 *
˝suri
;

271 
USERNOTICE
 *
u£∫Ÿi˚
;

272 
ASN1_TYPE
 *
Ÿhî
;

273 } 
d
;

274 } 
	tPOLICYQUALINFO
;

276 
DECLARE_STACK_OF
(
POLICYQUALINFO
)

277 
DECLARE_ASN1_SET_OF
(
POLICYQUALINFO
)

279 
	sPOLICYINFO_°
 {

280 
ASN1_OBJECT
 *
pﬁicyid
;

281 
STACK_OF
(
POLICYQUALINFO
Ë*
quÆifõrs
;

282 } 
	tPOLICYINFO
;

284 
STACK_OF
(
	tPOLICYINFO
Ë
	tCERTIFICATEPOLICIES
;

286 
DECLARE_STACK_OF
(
POLICYINFO
)

287 
DECLARE_ASN1_SET_OF
(
POLICYINFO
)

289 
	sPOLICY_MAPPING_°
 {

290 
ASN1_OBJECT
 *
issuîDomaöPﬁicy
;

291 
ASN1_OBJECT
 *
subje˘DomaöPﬁicy
;

292 } 
	tPOLICY_MAPPING
;

294 
DECLARE_STACK_OF
(
POLICY_MAPPING
)

296 
STACK_OF
(
	tPOLICY_MAPPING
Ë
	tPOLICY_MAPPINGS
;

298 
	sGENERAL_SUBTREE_°
 {

299 
GENERAL_NAME
 *
ba£
;

300 
ASN1_INTEGER
 *
möimum
;

301 
ASN1_INTEGER
 *
maximum
;

302 } 
	tGENERAL_SUBTREE
;

304 
DECLARE_STACK_OF
(
GENERAL_SUBTREE
)

306 
	sNAME_CONSTRAINTS_°
 {

307 
STACK_OF
(
GENERAL_SUBTREE
Ë*
≥rmôãdSubåìs
;

308 
STACK_OF
(
GENERAL_SUBTREE
Ë*
ex˛udedSubåìs
;

309 } 
	tNAME_CONSTRAINTS
;

311 
	sPOLICY_CONSTRAINTS_°
 {

312 
ASN1_INTEGER
 *
ªquúeEx∂icôPﬁicy
;

313 
ASN1_INTEGER
 *
öhibôPﬁicyM≠pög
;

314 } 
	tPOLICY_CONSTRAINTS
;

317 
	sPROXY_POLICY_°


319 
ASN1_OBJECT
 *
pﬁicyL™guage
;

320 
ASN1_OCTET_STRING
 *
pﬁicy
;

321 } 
	tPROXY_POLICY
;

323 
	sPROXY_CERT_INFO_EXTENSION_°


325 
ASN1_INTEGER
 *
pcP©hLígthC⁄°øöt
;

326 
PROXY_POLICY
 *
¥oxyPﬁicy
;

327 } 
	tPROXY_CERT_INFO_EXTENSION
;

329 
DECLARE_ASN1_FUNCTIONS
(
PROXY_POLICY
)

330 
DECLARE_ASN1_FUNCTIONS
(
PROXY_CERT_INFO_EXTENSION
)

333 
	#X509V3_c⁄f_îr
(
vÆ
Ë
	`ERR_add_îr‹_d©a
(6, "£˘i⁄:", vÆ->
£˘i⁄
, \

334 ",«me:", 
vÆ
->
«me
, ",vÆue:", vÆ->
vÆue
);

	)

336 
	#X509V3_£t_˘x_ã°
(
˘x
) \

337 
	`X509V3_£t_˘x
(
˘x
, 
NULL
, NULL, NULL, NULL, 
CTX_TEST
)

	)

338 
	#X509V3_£t_˘x_nodb
(
˘x
Ë(˘x)->
db
 = 
NULL
;

	)

340 
	#EXT_BITSTRING
(
nid
, 
èbÀ
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_BIT_STRING
), \

343 (
X509V3_EXT_I2V
)
i2v_ASN1_BIT_STRING
, \

344 (
X509V3_EXT_V2I
)
v2i_ASN1_BIT_STRING
, \

345 
NULL
, NULL, \

346 
èbÀ
}

	)

348 
	#EXT_IA5STRING
(
nid
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_IA5STRING
), \

350 (
X509V3_EXT_I2S
)
i2s_ASN1_IA5STRING
, \

351 (
X509V3_EXT_S2I
)
s2i_ASN1_IA5STRING
, \

353 
NULL
}

	)

355 
	#EXT_END
 { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

360 
	#EXFLAG_BCONS
 0x1

	)

361 
	#EXFLAG_KUSAGE
 0x2

	)

362 
	#EXFLAG_XKUSAGE
 0x4

	)

363 
	#EXFLAG_NSCERT
 0x8

	)

365 
	#EXFLAG_CA
 0x10

	)

366 
	#EXFLAG_SS
 0x20

	)

367 
	#EXFLAG_V1
 0x40

	)

368 
	#EXFLAG_INVALID
 0x80

	)

369 
	#EXFLAG_SET
 0x100

	)

370 
	#EXFLAG_CRITICAL
 0x200

	)

371 
	#EXFLAG_PROXY
 0x400

	)

373 
	#EXFLAG_INVALID_POLICY
 0x400

	)

375 
	#KU_DIGITAL_SIGNATURE
 0x0080

	)

376 
	#KU_NON_REPUDIATION
 0x0040

	)

377 
	#KU_KEY_ENCIPHERMENT
 0x0020

	)

378 
	#KU_DATA_ENCIPHERMENT
 0x0010

	)

379 
	#KU_KEY_AGREEMENT
 0x0008

	)

380 
	#KU_KEY_CERT_SIGN
 0x0004

	)

381 
	#KU_CRL_SIGN
 0x0002

	)

382 
	#KU_ENCIPHER_ONLY
 0x0001

	)

383 
	#KU_DECIPHER_ONLY
 0x8000

	)

385 
	#NS_SSL_CLIENT
 0x80

	)

386 
	#NS_SSL_SERVER
 0x40

	)

387 
	#NS_SMIME
 0x20

	)

388 
	#NS_OBJSIGN
 0x10

	)

389 
	#NS_SSL_CA
 0x04

	)

390 
	#NS_SMIME_CA
 0x02

	)

391 
	#NS_OBJSIGN_CA
 0x01

	)

392 
	#NS_ANY_CA
 (
NS_SSL_CA
|
NS_SMIME_CA
|
NS_OBJSIGN_CA
)

	)

394 
	#XKU_SSL_SERVER
 0x1

	)

395 
	#XKU_SSL_CLIENT
 0x2

	)

396 
	#XKU_SMIME
 0x4

	)

397 
	#XKU_CODE_SIGN
 0x8

	)

398 
	#XKU_SGC
 0x10

	)

399 
	#XKU_OCSP_SIGN
 0x20

	)

400 
	#XKU_TIMESTAMP
 0x40

	)

401 
	#XKU_DVCS
 0x80

	)

403 
	#X509_PURPOSE_DYNAMIC
 0x1

	)

404 
	#X509_PURPOSE_DYNAMIC_NAME
 0x2

	)

406 
	sx509_puΩo£_°
 {

407 
puΩo£
;

408 
åu°
;

409 
Êags
;

410 (*
check_puΩo£
)(c⁄° 
x509_puΩo£_°
 *,

411 c⁄° 
X509
 *, );

412 *
«me
;

413 *
¢ame
;

414 *
u§_d©a
;

415 } 
	tX509_PURPOSE
;

417 
	#X509_PURPOSE_SSL_CLIENT
 1

	)

418 
	#X509_PURPOSE_SSL_SERVER
 2

	)

419 
	#X509_PURPOSE_NS_SSL_SERVER
 3

	)

420 
	#X509_PURPOSE_SMIME_SIGN
 4

	)

421 
	#X509_PURPOSE_SMIME_ENCRYPT
 5

	)

422 
	#X509_PURPOSE_CRL_SIGN
 6

	)

423 
	#X509_PURPOSE_ANY
 7

	)

424 
	#X509_PURPOSE_OCSP_HELPER
 8

	)

426 
	#X509_PURPOSE_MIN
 1

	)

427 
	#X509_PURPOSE_MAX
 8

	)

431 
	#X509V3_EXT_UNKNOWN_MASK
 (0xfL << 16)

	)

433 
	#X509V3_EXT_DEFAULT
 0

	)

435 
	#X509V3_EXT_ERROR_UNKNOWN
 (1L << 16)

	)

437 
	#X509V3_EXT_PARSE_UNKNOWN
 (2L << 16)

	)

439 
	#X509V3_EXT_DUMP_UNKNOWN
 (3L << 16)

	)

443 
	#X509V3_ADD_OP_MASK
 0xfL

	)

444 
	#X509V3_ADD_DEFAULT
 0L

	)

445 
	#X509V3_ADD_APPEND
 1L

	)

446 
	#X509V3_ADD_REPLACE
 2L

	)

447 
	#X509V3_ADD_REPLACE_EXISTING
 3L

	)

448 
	#X509V3_ADD_KEEP_EXISTING
 4L

	)

449 
	#X509V3_ADD_DELETE
 5L

	)

450 
	#X509V3_ADD_SILENT
 0x10

	)

452 
DECLARE_STACK_OF
(
X509_PURPOSE
)

454 
DECLARE_ASN1_FUNCTIONS
(
BASIC_CONSTRAINTS
)

456 
DECLARE_ASN1_FUNCTIONS
(
SXNET
)

457 
DECLARE_ASN1_FUNCTIONS
(
SXNETID
)

459 
SXNET_add_id_asc
(
SXNET
 **
psx
, *
z⁄e
, *
u£r
, 
u£æí
);

460 
SXNET_add_id_ul⁄g
(
SXNET
 **
psx
, 
lz⁄e
, *
u£r
, 
u£æí
);

461 
SXNET_add_id_INTEGER
(
SXNET
 **
psx
, 
ASN1_INTEGER
 *
iz⁄e
, *
u£r
, 
u£æí
);

463 
ASN1_OCTET_STRING
 *
SXNET_gë_id_asc
(
SXNET
 *
sx
, *
z⁄e
);

464 
ASN1_OCTET_STRING
 *
SXNET_gë_id_ul⁄g
(
SXNET
 *
sx
, 
lz⁄e
);

465 
ASN1_OCTET_STRING
 *
SXNET_gë_id_INTEGER
(
SXNET
 *
sx
, 
ASN1_INTEGER
 *
z⁄e
);

467 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_KEYID
)

469 
DECLARE_ASN1_FUNCTIONS
(
PKEY_USAGE_PERIOD
)

471 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAME
)

474 
ASN1_BIT_STRING
 *
v2i_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

475 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

476 
STACK_OF
(
CONF_VALUE
Ë*
i2v_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

477 
ASN1_BIT_STRING
 *
bôs
,

478 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

480 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
, 
GENERAL_NAME
 *
gí
, STACK_OF(CONF_VALUEË*
ªt
);

481 
GENERAL_NAME_¥öt
(
BIO
 *
out
, 
GENERAL_NAME
 *
gí
);

483 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAMES
)

485 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

486 
GENERAL_NAMES
 *
gí
, 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

487 
GENERAL_NAMES
 *
v2i_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

488 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

490 
DECLARE_ASN1_FUNCTIONS
(
OTHERNAME
)

491 
DECLARE_ASN1_FUNCTIONS
(
EDIPARTYNAME
)

493 *
i2s_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
ASN1_OCTET_STRING
 *
ü5
);

494 
ASN1_OCTET_STRING
 *
s2i_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
, *
°r
);

496 
DECLARE_ASN1_FUNCTIONS
(
EXTENDED_KEY_USAGE
)

497 
i2a_ACCESS_DESCRIPTION
(
BIO
 *
bp
, 
ACCESS_DESCRIPTION
* 
a
);

499 
DECLARE_ASN1_FUNCTIONS
(
CERTIFICATEPOLICIES
)

500 
DECLARE_ASN1_FUNCTIONS
(
POLICYINFO
)

501 
DECLARE_ASN1_FUNCTIONS
(
POLICYQUALINFO
)

502 
DECLARE_ASN1_FUNCTIONS
(
USERNOTICE
)

503 
DECLARE_ASN1_FUNCTIONS
(
NOTICEREF
)

505 
DECLARE_ASN1_FUNCTIONS
(
CRL_DIST_POINTS
)

506 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT
)

507 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT_NAME
)

509 
DECLARE_ASN1_FUNCTIONS
(
ACCESS_DESCRIPTION
)

510 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_INFO_ACCESS
)

512 
DECLARE_ASN1_ITEM
(
POLICY_MAPPING
)

513 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_MAPPING
)

514 
DECLARE_ASN1_ITEM
(
POLICY_MAPPINGS
)

516 
DECLARE_ASN1_ITEM
(
GENERAL_SUBTREE
)

517 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
GENERAL_SUBTREE
)

519 
DECLARE_ASN1_ITEM
(
NAME_CONSTRAINTS
)

520 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
NAME_CONSTRAINTS
)

522 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_CONSTRAINTS
)

523 
DECLARE_ASN1_ITEM
(
POLICY_CONSTRAINTS
)

525 #ifde‡
HEADER_CONF_H


526 
GENERAL_NAME
 *
v2i_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
,

527 
CONF_VALUE
 *
˙f
);

528 
GENERAL_NAME
 *
v2i_GENERAL_NAME_ex
(GENERAL_NAME *
out
, 
X509V3_EXT_METHOD
 *
mëhod
,

529 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
, 
is_nc
);

530 
X509V3_c⁄f_‰ì
(
CONF_VALUE
 *
vÆ
);

532 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f_nid
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
, *
vÆue
);

533 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
«me
, *
vÆue
);

534 
X509V3_EXT_add_nc⁄f_sk
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
STACK_OF
(
X509_EXTENSION
Ë**
sk
);

535 
X509V3_EXT_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509
 *
˚π
);

536 
X509V3_EXT_REQ_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_REQ
 *
ªq
);

537 
X509V3_EXT_CRL_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_CRL
 *
¸l
);

539 
X509_EXTENSION
 *
X509V3_EXT_c⁄f_nid
(
LHASH
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
, *
vÆue
);

540 
X509_EXTENSION
 *
X509V3_EXT_c⁄f
(
LHASH
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
«me
, *
vÆue
);

541 
X509V3_EXT_add_c⁄f
(
LHASH
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509
 *
˚π
);

542 
X509V3_EXT_REQ_add_c⁄f
(
LHASH
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_REQ
 *
ªq
);

543 
X509V3_EXT_CRL_add_c⁄f
(
LHASH
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_CRL
 *
¸l
);

545 
X509V3_add_vÆue_boﬁ_nf
(*
«me
, 
a¢1_boﬁ
,

546 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

547 
X509V3_gë_vÆue_boﬁ
(
CONF_VALUE
 *
vÆue
, *
a¢1_boﬁ
);

548 
X509V3_gë_vÆue_öt
(
CONF_VALUE
 *
vÆue
, 
ASN1_INTEGER
 **
aöt
);

549 
X509V3_£t_nc⁄f
(
X509V3_CTX
 *
˘x
, 
CONF
 *
c⁄f
);

550 
X509V3_£t_c⁄f_lhash
(
X509V3_CTX
 *
˘x
, 
LHASH
 *
lhash
);

553 * 
X509V3_gë_°rög
(
X509V3_CTX
 *
˘x
, *
«me
, *
£˘i⁄
);

554 
STACK_OF
(
CONF_VALUE
Ë* 
X509V3_gë_£˘i⁄
(
X509V3_CTX
 *
˘x
, *
£˘i⁄
);

555 
X509V3_°rög_‰ì
(
X509V3_CTX
 *
˘x
, *
°r
);

556 
X509V3_£˘i⁄_‰ì
–
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

557 
X509V3_£t_˘x
(
X509V3_CTX
 *
˘x
, 
X509
 *
issuî
, X509 *
subje˘
,

558 
X509_REQ
 *
ªq
, 
X509_CRL
 *
¸l
, 
Êags
);

560 
X509V3_add_vÆue
(c⁄° *
«me
, c⁄° *
vÆue
,

561 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

562 
X509V3_add_vÆue_uch¨
(c⁄° *
«me
, c⁄° *
vÆue
,

563 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

564 
X509V3_add_vÆue_boﬁ
(c⁄° *
«me
, 
a¢1_boﬁ
,

565 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

566 
X509V3_add_vÆue_öt
(c⁄° *
«me
, 
ASN1_INTEGER
 *
aöt
,

567 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

568 * 
i2s_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_INTEGER
 *
aöt
);

569 
ASN1_INTEGER
 * 
s2i_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, *
vÆue
);

570 * 
i2s_ASN1_ENUMERATED
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

571 * 
i2s_ASN1_ENUMERATED_TABLE
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

572 
X509V3_EXT_add
(
X509V3_EXT_METHOD
 *
ext
);

573 
X509V3_EXT_add_li°
(
X509V3_EXT_METHOD
 *
exéi°
);

574 
X509V3_EXT_add_Æüs
(
nid_to
, 
nid_‰om
);

575 
X509V3_EXT_˛ónup
();

577 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë
(
X509_EXTENSION
 *
ext
);

578 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë_nid
(
nid
);

579 
X509V3_add_°™d¨d_exãnsi⁄s
();

580 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_∑r£_li°
(c⁄° *
löe
);

581 *
X509V3_EXT_d2i
(
X509_EXTENSION
 *
ext
);

582 *
X509V3_gë_d2i
(
STACK_OF
(
X509_EXTENSION
Ë*
x
, 
nid
, *
¸ô
, *
idx
);

585 
X509_EXTENSION
 *
X509V3_EXT_i2d
(
ext_nid
, 
¸ô
, *
ext_°ruc
);

586 
X509V3_add1_i2d
(
STACK_OF
(
X509_EXTENSION
Ë**
x
, 
nid
, *
vÆue
, 
¸ô
, 
Êags
);

588 *
hex_to_°rög
(*
buf„r
, 
Àn
);

589 *
°rög_to_hex
(*
°r
, *
Àn
);

590 
«me_cmp
(c⁄° *
«me
, c⁄° *
cmp
);

592 
X509V3_EXT_vÆ_¥n
(
BIO
 *
out
, 
STACK_OF
(
CONF_VALUE
Ë*
vÆ
, 
ödít
,

593 
ml
);

594 
X509V3_EXT_¥öt
(
BIO
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

595 
X509V3_EXT_¥öt_Â
(
FILE
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

597 
X509V3_exãnsi⁄s_¥öt
(
BIO
 *
out
, *
tôÀ
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
, 
Êag
, 
ödít
);

599 
X509_check_ˇ
(
X509
 *
x
);

600 
X509_check_puΩo£
(
X509
 *
x
, 
id
, 
ˇ
);

601 
X509_suµ‹ãd_exãnsi⁄
(
X509_EXTENSION
 *
ex
);

602 
X509_PURPOSE_£t
(*
p
, 
puΩo£
);

603 
X509_check_issued
(
X509
 *
issuî
, X509 *
subje˘
);

604 
X509_PURPOSE_gë_cou¡
();

605 
X509_PURPOSE
 * 
X509_PURPOSE_gë0
(
idx
);

606 
X509_PURPOSE_gë_by_¢ame
(*
¢ame
);

607 
X509_PURPOSE_gë_by_id
(
id
);

608 
X509_PURPOSE_add
(
id
, 
åu°
, 
Êags
,

609 (*
ck
)(c⁄° 
X509_PURPOSE
 *, c⁄° 
X509
 *, ),

610 *
«me
, *
¢ame
, *
¨g
);

611 *
X509_PURPOSE_gë0_«me
(
X509_PURPOSE
 *
xp
);

612 *
X509_PURPOSE_gë0_¢ame
(
X509_PURPOSE
 *
xp
);

613 
X509_PURPOSE_gë_åu°
(
X509_PURPOSE
 *
xp
);

614 
X509_PURPOSE_˛ónup
();

615 
X509_PURPOSE_gë_id
(
X509_PURPOSE
 *);

617 
STACK
 *
X509_gë1_emaû
(
X509
 *
x
);

618 
STACK
 *
X509_REQ_gë1_emaû
(
X509_REQ
 *
x
);

619 
X509_emaû_‰ì
(
STACK
 *
sk
);

621 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS
(c⁄° *
ùasc
);

622 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS_NC
(c⁄° *
ùasc
);

623 
a2i_ùadd
(*
ùout
, c⁄° *
ùasc
);

624 
X509V3_NAME_‰om_£˘i⁄
(
X509_NAME
 *
nm
, 
STACK_OF
(
CONF_VALUE
)*
dn_sk
,

625 
chty≥
);

627 
X509_POLICY_NODE_¥öt
(
BIO
 *
out
, 
X509_POLICY_NODE
 *
node
, 
ödít
);

629 #i‚de‡
OPENSSL_NO_RFC3779


631 
	sASR™ge_°
 {

632 
ASN1_INTEGER
 *
mö
, *
max
;

633 } 
	tASR™ge
;

635 
	#ASIdOrR™ge_id
 0

	)

636 
	#ASIdOrR™ge_ønge
 1

	)

638 
	sASIdOrR™ge_°
 {

639 
ty≥
;

641 
ASN1_INTEGER
 *
id
;

642 
ASR™ge
 *
ønge
;

643 } 
u
;

644 } 
	tASIdOrR™ge
;

646 
STACK_OF
(
	tASIdOrR™ge
Ë
	tASIdOrR™ges
;

647 
DECLARE_STACK_OF
(
ASIdOrR™ge
)

649 
	#ASIdítifõrChoi˚_öhîô
 0

	)

650 
	#ASIdítifõrChoi˚_asIdsOrR™ges
 1

	)

652 
	sASIdítifõrChoi˚_°
 {

653 
ty≥
;

655 
ASN1_NULL
 *
öhîô
;

656 
ASIdOrR™ges
 *
asIdsOrR™ges
;

657 } 
u
;

658 } 
	tASIdítifõrChoi˚
;

660 
	sASIdítifõrs_°
 {

661 
ASIdítifõrChoi˚
 *
a¢um
, *
rdi
;

662 } 
	tASIdítifõrs
;

664 
DECLARE_ASN1_FUNCTIONS
(
ASR™ge
)

665 
DECLARE_ASN1_FUNCTIONS
(
ASIdOrR™ge
)

666 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrChoi˚
)

667 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrs
)

670 
	sIPAddªssR™ge_°
 {

671 
ASN1_BIT_STRING
 *
mö
, *
max
;

672 } 
	tIPAddªssR™ge
;

674 
	#IPAddªssOrR™ge_addªssPªfix
 0

	)

675 
	#IPAddªssOrR™ge_addªssR™ge
 1

	)

677 
	sIPAddªssOrR™ge_°
 {

678 
ty≥
;

680 
ASN1_BIT_STRING
 *
addªssPªfix
;

681 
IPAddªssR™ge
 *
addªssR™ge
;

682 } 
u
;

683 } 
	tIPAddªssOrR™ge
;

685 
STACK_OF
(
	tIPAddªssOrR™ge
Ë
	tIPAddªssOrR™ges
;

686 
DECLARE_STACK_OF
(
IPAddªssOrR™ge
)

688 
	#IPAddªssChoi˚_öhîô
 0

	)

689 
	#IPAddªssChoi˚_addªs£sOrR™ges
 1

	)

691 
	sIPAddªssChoi˚_°
 {

692 
ty≥
;

694 
ASN1_NULL
 *
öhîô
;

695 
IPAddªssOrR™ges
 *
addªs£sOrR™ges
;

696 } 
u
;

697 } 
	tIPAddªssChoi˚
;

699 
	sIPAddªssFamûy_°
 {

700 
ASN1_OCTET_STRING
 *
addªssFamûy
;

701 
IPAddªssChoi˚
 *
ùAddªssChoi˚
;

702 } 
	tIPAddªssFamûy
;

704 
STACK_OF
(
	tIPAddªssFamûy
Ë
	tIPAddrBlocks
;

705 
DECLARE_STACK_OF
(
IPAddªssFamûy
)

707 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssR™ge
)

708 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssOrR™ge
)

709 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssChoi˚
)

710 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssFamûy
)

715 
	#V3_ASID_ASNUM
 0

	)

716 
	#V3_ASID_RDI
 1

	)

724 
	#IANA_AFI_IPV4
 1

	)

725 
	#IANA_AFI_IPV6
 2

	)

732 
v3_asid_add_öhîô
(
ASIdítifõrs
 *
asid
, 
which
);

733 
v3_asid_add_id_‹_ønge
(
ASIdítifõrs
 *
asid
, 
which
,

734 
ASN1_INTEGER
 *
mö
, ASN1_INTEGER *
max
);

735 
v3_addr_add_öhîô
(
IPAddrBlocks
 *
addr
,

736 c⁄° 
afi
, c⁄° *
ßfi
);

737 
v3_addr_add_¥efix
(
IPAddrBlocks
 *
addr
,

738 c⁄° 
afi
, c⁄° *
ßfi
,

739 *
a
, c⁄° 
¥efixÀn
);

740 
v3_addr_add_ønge
(
IPAddrBlocks
 *
addr
,

741 c⁄° 
afi
, c⁄° *
ßfi
,

742 *
mö
, *
max
);

743 
v3_addr_gë_afi
(c⁄° 
IPAddªssFamûy
 *
f
);

744 
v3_addr_gë_ønge
(
IPAddªssOrR™ge
 *
a‹
, c⁄° 
afi
,

745 *
mö
, *
max
,

746 c⁄° 
Àngth
);

751 
v3_asid_is_ˇn⁄iˇl
(
ASIdítifõrs
 *
asid
);

752 
v3_addr_is_ˇn⁄iˇl
(
IPAddrBlocks
 *
addr
);

753 
v3_asid_ˇn⁄ize
(
ASIdítifõrs
 *
asid
);

754 
v3_addr_ˇn⁄ize
(
IPAddrBlocks
 *
addr
);

759 
v3_asid_öhîôs
(
ASIdítifõrs
 *
asid
);

760 
v3_addr_öhîôs
(
IPAddrBlocks
 *
addr
);

761 
v3_asid_sub£t
(
ASIdítifõrs
 *
a
, ASIdítifõr†*
b
);

762 
v3_addr_sub£t
(
IPAddrBlocks
 *
a
, IPAddrBlock†*
b
);

767 
v3_asid_vÆid©e_∑th
(
X509_STORE_CTX
 *);

768 
v3_addr_vÆid©e_∑th
(
X509_STORE_CTX
 *);

769 
v3_asid_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

770 
ASIdítifõrs
 *
ext
,

771 
Ælow_öhîô™˚
);

772 
v3_addr_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

773 
IPAddrBlocks
 *
ext
,

774 
Ælow_öhîô™˚
);

782 
ERR_lﬂd_X509V3_°rögs
();

787 
	#X509V3_F_ASIDENTIFIERCHOICE_CANONIZE
 156

	)

788 
	#X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL
 157

	)

789 
	#X509V3_F_COPY_EMAIL
 122

	)

790 
	#X509V3_F_COPY_ISSUER
 123

	)

791 
	#X509V3_F_DO_DIRNAME
 144

	)

792 
	#X509V3_F_DO_EXT_CONF
 124

	)

793 
	#X509V3_F_DO_EXT_I2D
 135

	)

794 
	#X509V3_F_DO_EXT_NCONF
 151

	)

795 
	#X509V3_F_DO_I2V_NAME_CONSTRAINTS
 148

	)

796 
	#X509V3_F_HEX_TO_STRING
 111

	)

797 
	#X509V3_F_I2S_ASN1_ENUMERATED
 121

	)

798 
	#X509V3_F_I2S_ASN1_IA5STRING
 149

	)

799 
	#X509V3_F_I2S_ASN1_INTEGER
 120

	)

800 
	#X509V3_F_I2V_AUTHORITY_INFO_ACCESS
 138

	)

801 
	#X509V3_F_NOTICE_SECTION
 132

	)

802 
	#X509V3_F_NREF_NOS
 133

	)

803 
	#X509V3_F_POLICY_SECTION
 131

	)

804 
	#X509V3_F_PROCESS_PCI_VALUE
 150

	)

805 
	#X509V3_F_R2I_CERTPOL
 130

	)

806 
	#X509V3_F_R2I_PCI
 155

	)

807 
	#X509V3_F_S2I_ASN1_IA5STRING
 100

	)

808 
	#X509V3_F_S2I_ASN1_INTEGER
 108

	)

809 
	#X509V3_F_S2I_ASN1_OCTET_STRING
 112

	)

810 
	#X509V3_F_S2I_ASN1_SKEY_ID
 114

	)

811 
	#X509V3_F_S2I_SKEY_ID
 115

	)

812 
	#X509V3_F_STRING_TO_HEX
 113

	)

813 
	#X509V3_F_SXNET_ADD_ID_ASC
 125

	)

814 
	#X509V3_F_SXNET_ADD_ID_INTEGER
 126

	)

815 
	#X509V3_F_SXNET_ADD_ID_ULONG
 127

	)

816 
	#X509V3_F_SXNET_GET_ID_ASC
 128

	)

817 
	#X509V3_F_SXNET_GET_ID_ULONG
 129

	)

818 
	#X509V3_F_V2I_ASIDENTIFIERS
 158

	)

819 
	#X509V3_F_V2I_ASN1_BIT_STRING
 101

	)

820 
	#X509V3_F_V2I_AUTHORITY_INFO_ACCESS
 139

	)

821 
	#X509V3_F_V2I_AUTHORITY_KEYID
 119

	)

822 
	#X509V3_F_V2I_BASIC_CONSTRAINTS
 102

	)

823 
	#X509V3_F_V2I_CRLD
 134

	)

824 
	#X509V3_F_V2I_EXTENDED_KEY_USAGE
 103

	)

825 
	#X509V3_F_V2I_GENERAL_NAMES
 118

	)

826 
	#X509V3_F_V2I_GENERAL_NAME_EX
 117

	)

827 
	#X509V3_F_V2I_IPADDRBLOCKS
 159

	)

828 
	#X509V3_F_V2I_ISSUER_ALT
 153

	)

829 
	#X509V3_F_V2I_NAME_CONSTRAINTS
 147

	)

830 
	#X509V3_F_V2I_POLICY_CONSTRAINTS
 146

	)

831 
	#X509V3_F_V2I_POLICY_MAPPINGS
 145

	)

832 
	#X509V3_F_V2I_SUBJECT_ALT
 154

	)

833 
	#X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL
 160

	)

834 
	#X509V3_F_V3_GENERIC_EXTENSION
 116

	)

835 
	#X509V3_F_X509V3_ADD1_I2D
 140

	)

836 
	#X509V3_F_X509V3_ADD_VALUE
 105

	)

837 
	#X509V3_F_X509V3_EXT_ADD
 104

	)

838 
	#X509V3_F_X509V3_EXT_ADD_ALIAS
 106

	)

839 
	#X509V3_F_X509V3_EXT_CONF
 107

	)

840 
	#X509V3_F_X509V3_EXT_I2D
 136

	)

841 
	#X509V3_F_X509V3_EXT_NCONF
 152

	)

842 
	#X509V3_F_X509V3_GET_SECTION
 142

	)

843 
	#X509V3_F_X509V3_GET_STRING
 143

	)

844 
	#X509V3_F_X509V3_GET_VALUE_BOOL
 110

	)

845 
	#X509V3_F_X509V3_PARSE_LIST
 109

	)

846 
	#X509V3_F_X509_PURPOSE_ADD
 137

	)

847 
	#X509V3_F_X509_PURPOSE_SET
 141

	)

850 
	#X509V3_R_BAD_IP_ADDRESS
 118

	)

851 
	#X509V3_R_BAD_OBJECT
 119

	)

852 
	#X509V3_R_BN_DEC2BN_ERROR
 100

	)

853 
	#X509V3_R_BN_TO_ASN1_INTEGER_ERROR
 101

	)

854 
	#X509V3_R_DIRNAME_ERROR
 149

	)

855 
	#X509V3_R_DUPLICATE_ZONE_ID
 133

	)

856 
	#X509V3_R_ERROR_CONVERTING_ZONE
 131

	)

857 
	#X509V3_R_ERROR_CREATING_EXTENSION
 144

	)

858 
	#X509V3_R_ERROR_IN_EXTENSION
 128

	)

859 
	#X509V3_R_EXPECTED_A_SECTION_NAME
 137

	)

860 
	#X509V3_R_EXTENSION_EXISTS
 145

	)

861 
	#X509V3_R_EXTENSION_NAME_ERROR
 115

	)

862 
	#X509V3_R_EXTENSION_NOT_FOUND
 102

	)

863 
	#X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED
 103

	)

864 
	#X509V3_R_EXTENSION_VALUE_ERROR
 116

	)

865 
	#X509V3_R_ILLEGAL_EMPTY_EXTENSION
 151

	)

866 
	#X509V3_R_ILLEGAL_HEX_DIGIT
 113

	)

867 
	#X509V3_R_INCORRECT_POLICY_SYNTAX_TAG
 152

	)

868 
	#X509V3_R_INVALID_ASNUMBER
 160

	)

869 
	#X509V3_R_INVALID_ASRANGE
 161

	)

870 
	#X509V3_R_INVALID_BOOLEAN_STRING
 104

	)

871 
	#X509V3_R_INVALID_EXTENSION_STRING
 105

	)

872 
	#X509V3_R_INVALID_INHERITANCE
 162

	)

873 
	#X509V3_R_INVALID_IPADDRESS
 163

	)

874 
	#X509V3_R_INVALID_NAME
 106

	)

875 
	#X509V3_R_INVALID_NULL_ARGUMENT
 107

	)

876 
	#X509V3_R_INVALID_NULL_NAME
 108

	)

877 
	#X509V3_R_INVALID_NULL_VALUE
 109

	)

878 
	#X509V3_R_INVALID_NUMBER
 140

	)

879 
	#X509V3_R_INVALID_NUMBERS
 141

	)

880 
	#X509V3_R_INVALID_OBJECT_IDENTIFIER
 110

	)

881 
	#X509V3_R_INVALID_OPTION
 138

	)

882 
	#X509V3_R_INVALID_POLICY_IDENTIFIER
 134

	)

883 
	#X509V3_R_INVALID_PROXY_POLICY_SETTING
 153

	)

884 
	#X509V3_R_INVALID_PURPOSE
 146

	)

885 
	#X509V3_R_INVALID_SAFI
 164

	)

886 
	#X509V3_R_INVALID_SECTION
 135

	)

887 
	#X509V3_R_INVALID_SYNTAX
 143

	)

888 
	#X509V3_R_ISSUER_DECODE_ERROR
 126

	)

889 
	#X509V3_R_MISSING_VALUE
 124

	)

890 
	#X509V3_R_NEED_ORGANIZATION_AND_NUMBERS
 142

	)

891 
	#X509V3_R_NO_CONFIG_DATABASE
 136

	)

892 
	#X509V3_R_NO_ISSUER_CERTIFICATE
 121

	)

893 
	#X509V3_R_NO_ISSUER_DETAILS
 127

	)

894 
	#X509V3_R_NO_POLICY_IDENTIFIER
 139

	)

895 
	#X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED
 154

	)

896 
	#X509V3_R_NO_PUBLIC_KEY
 114

	)

897 
	#X509V3_R_NO_SUBJECT_DETAILS
 125

	)

898 
	#X509V3_R_ODD_NUMBER_OF_DIGITS
 112

	)

899 
	#X509V3_R_OPERATION_NOT_DEFINED
 148

	)

900 
	#X509V3_R_OTHERNAME_ERROR
 147

	)

901 
	#X509V3_R_POLICY_LANGUAGE_ALREADTY_DEFINED
 155

	)

902 
	#X509V3_R_POLICY_PATH_LENGTH
 156

	)

903 
	#X509V3_R_POLICY_PATH_LENGTH_ALREADTY_DEFINED
 157

	)

904 
	#X509V3_R_POLICY_SYNTAX_NOT_CURRENTLY_SUPPORTED
 158

	)

905 
	#X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY
 159

	)

906 
	#X509V3_R_SECTION_NOT_FOUND
 150

	)

907 
	#X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS
 122

	)

908 
	#X509V3_R_UNABLE_TO_GET_ISSUER_KEYID
 123

	)

909 
	#X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT
 111

	)

910 
	#X509V3_R_UNKNOWN_EXTENSION
 129

	)

911 
	#X509V3_R_UNKNOWN_EXTENSION_NAME
 130

	)

912 
	#X509V3_R_UNKNOWN_OPTION
 120

	)

913 
	#X509V3_R_UNSUPPORTED_OPTION
 117

	)

914 
	#X509V3_R_USER_TOO_LONG
 132

	)

916 #ifde‡ 
__˝lu•lus


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
__BEGIN_NAMESPACE_STD


46 
_IO_FILE
 
	tFILE
;

47 
	g__END_NAMESPACE_STD


48 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

49 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

50 || 
deföed
 
__USE_POSIX2


51 
	$__USING_NAMESPACE_STD
(
FILE
)

54 
	#__FILE_deföed
 1

	)

56 #unde‡
__√ed_FILE


59 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


62 
_IO_FILE
 
	t__FILE
;

64 
	#____FILE_deföed
 1

	)

66 #unde‡
__√ed___FILE


69 #ifdef 
_STDIO_H


70 
	#_STDIO_USES_IOSTREAM


	)

72 
	~<libio.h
>

74 #ifde‡
__USE_XOPEN


75 #ifde‡
__GNUC__


76 #i‚de‡
_VA_LIST_DEFINED


77 
_G_va_li°
 
	tva_li°
;

78 
	#_VA_LIST_DEFINED


	)

81 
	~<°d¨g.h
>

86 
__BEGIN_NAMESPACE_STD


87 #i‚de‡
__USE_FILE_OFFSET64


88 
_G_Âos_t
 
	tÂos_t
;

90 
_G_Âos64_t
 
	tÂos_t
;

92 
__END_NAMESPACE_STD


93 #ifde‡
__USE_LARGEFILE64


94 
_G_Âos64_t
 
	tÂos64_t
;

98 
	#_IOFBF
 0

	)

99 
	#_IOLBF
 1

	)

100 
	#_IONBF
 2

	)

104 #i‚de‡
BUFSIZ


105 
	#BUFSIZ
 
_IO_BUFSIZ


	)

111 #i‚de‡
EOF


112 
	#EOF
 (-1)

	)

118 
	#SEEK_SET
 0

	)

119 
	#SEEK_CUR
 1

	)

120 
	#SEEK_END
 2

	)

123 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


125 
	#P_tmpdú
 "/tmp"

	)

138 
	~<bôs/°dio_lim.h
>

142 
_IO_FILE
 *
°dö
;

143 
_IO_FILE
 *
°dout
;

144 
_IO_FILE
 *
°dîr
;

145 #ifde‡
__STDC__


147 
	#°dö
 
°dö


	)

148 
	#°dout
 
°dout


	)

149 
	#°dîr
 
°dîr


	)

152 
__BEGIN_NAMESPACE_STD


154 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

156 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_ATFILE


161 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

162 
__c⁄°
 *
__√w
Ë
__THROW
;

165 
__BEGIN_NAMESPACE_STD


170 #i‚de‡
__USE_FILE_OFFSET64


171 
FILE
 *
	`tmpfûe
 ();

173 #ifde‡
__REDIRECT


174 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
);

176 
	#tmpfûe
 
tmpfûe64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
FILE
 *
	`tmpfûe64
 ();

185 *
	$tm≤am
 (*
__s
Ë
__THROW
;

186 
__END_NAMESPACE_STD


188 #ifde‡
__USE_MISC


191 *
	$tm≤am_r
 (*
__s
Ë
__THROW
;

195 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


203 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

204 
__THROW
 
__©åibuã_mÆloc__
;

208 
__BEGIN_NAMESPACE_STD


213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

219 
__END_NAMESPACE_STD


221 #ifde‡
__USE_MISC


228 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

231 #ifde‡
__USE_GNU


238 
	`f˛o£Æl
 ();

242 
__BEGIN_NAMESPACE_STD


243 #i‚de‡
__USE_FILE_OFFSET64


248 
FILE
 *
	`f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

249 
__c⁄°
 *
__ª°ri˘
 
__modes
);

254 
FILE
 *
	`‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

255 
__c⁄°
 *
__ª°ri˘
 
__modes
,

256 
FILE
 *
__ª°ri˘
 
__°ªam
);

258 #ifde‡
__REDIRECT


259 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

260 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
);

261 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

262 
__c⁄°
 *
__ª°ri˘
 
__modes
,

263 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
);

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 
__END_NAMESPACE_STD


270 #ifde‡
__USE_LARGEFILE64


271 
FILE
 *
	`f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
);

273 
FILE
 *
	`‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
);

278 #ifdef 
__USE_POSIX


280 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
;

283 #ifdef 
__USE_GNU


286 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

287 
__c⁄°
 *
__ª°ri˘
 
__modes
,

288 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
;

291 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
Ë
__THROW
;

296 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

300 
__BEGIN_NAMESPACE_STD


303 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

307 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

308 
__modes
, 
size_t
 
__n
Ë
__THROW
;

309 
__END_NAMESPACE_STD


311 #ifdef 
__USE_BSD


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

322 
__BEGIN_NAMESPACE_STD


327 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

328 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

333 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

335 
	$•rötf
 (*
__ª°ri˘
 
__s
,

336 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

342 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

343 
_G_va_li°
 
__¨g
);

348 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

350 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

351 
_G_va_li°
 
__¨g
Ë
__THROW
;

352 
__END_NAMESPACE_STD


354 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


355 
__BEGIN_NAMESPACE_C99


357 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

359 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

361 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

363 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

364 
__END_NAMESPACE_C99


367 #ifde‡
__USE_GNU


370 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

371 
_G_va_li°
 
__¨g
)

372 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

373 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

374 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

375 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

376 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

377 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

378 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

386 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

387 
_G_va_li°
 
__¨g
)

388 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

389 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

390 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

394 
__BEGIN_NAMESPACE_STD


399 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

400 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

405 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

408 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
__END_NAMESPACE_STD


411 #ifdef 
__USE_ISOC99


412 
__BEGIN_NAMESPACE_C99


417 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

418 
_G_va_li°
 
__¨g
)

419 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

425 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

426 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

429 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

431 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

432 
__END_NAMESPACE_C99


436 
__BEGIN_NAMESPACE_STD


441 
	`fgëc
 (
FILE
 *
__°ªam
);

442 
	`gëc
 (
FILE
 *
__°ªam
);

448 
	`gëch¨
 ();

449 
__END_NAMESPACE_STD


453 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

455 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


460 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

461 
	`gëch¨_u∆ocked
 ();

464 #ifde‡
__USE_MISC


471 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

475 
__BEGIN_NAMESPACE_STD


483 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

484 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

490 
	`putch¨
 (
__c
);

491 
__END_NAMESPACE_STD


495 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

497 #ifde‡
__USE_MISC


504 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

507 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


512 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

513 
	`putch¨_u∆ocked
 (
__c
);

517 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

518 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

520 
	`gëw
 (
FILE
 *
__°ªam
);

523 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

527 
__BEGIN_NAMESPACE_STD


532 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

533 
__wur
;

540 *
	$gës
 (*
__s
Ë
__wur
;

541 
__END_NAMESPACE_STD


543 #ifde‡
__USE_GNU


550 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

551 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

555 #ifdef 
__USE_GNU


566 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

567 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

568 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

569 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

570 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

571 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

579 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

580 
size_t
 *
__ª°ri˘
 
__n
,

581 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

585 
__BEGIN_NAMESPACE_STD


590 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

596 
	`puts
 (
__c⁄°
 *
__s
);

603 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

610 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

611 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

617 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

618 
__END_NAMESPACE_STD


620 #ifde‡
__USE_GNU


627 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

628 
FILE
 *
__ª°ri˘
 
__°ªam
);

631 #ifde‡
__USE_MISC


638 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

639 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

640 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

641 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

645 
__BEGIN_NAMESPACE_STD


650 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

655 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

660 
	`ªwöd
 (
FILE
 *
__°ªam
);

661 
__END_NAMESPACE_STD


668 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


669 #i‚de‡
__USE_FILE_OFFSET64


674 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

679 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

681 #ifde‡
__REDIRECT


682 
	`__REDIRECT
 (
f£eko
,

683 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

684 
f£eko64
);

685 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

687 
	#f£eko
 
f£eko64


	)

688 
	#·ñlo
 
·ñlo64


	)

693 
__BEGIN_NAMESPACE_STD


694 #i‚de‡
__USE_FILE_OFFSET64


699 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

704 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

708 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

709 
	`__REDIRECT
 (
f£ços
,

710 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

712 
	#fgëpos
 
fgëpos64


	)

713 
	#f£ços
 
f£ços64


	)

716 
__END_NAMESPACE_STD


718 #ifde‡
__USE_LARGEFILE64


719 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

720 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

721 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

722 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

725 
__BEGIN_NAMESPACE_STD


727 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

729 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

731 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

732 
__END_NAMESPACE_STD


734 #ifde‡
__USE_MISC


736 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

737 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

738 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

742 
__BEGIN_NAMESPACE_STD


747 
	`≥º‹
 (
__c⁄°
 *
__s
);

748 
__END_NAMESPACE_STD


754 
	~<bôs/sys_îæi°.h
>

757 #ifdef 
__USE_POSIX


759 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

762 #ifde‡
__USE_MISC


764 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

768 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

769 
deföed
 
__USE_MISC
)

774 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

780 
	`p˛o£
 (
FILE
 *
__°ªam
);

784 #ifdef 
__USE_POSIX


786 *
	$˘îmid
 (*
__s
Ë
__THROW
;

790 #ifde‡
__USE_XOPEN


792 *
	`cu£rid
 (*
__s
);

796 #ifdef 
__USE_GNU


797 
ob°ack
;

800 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

801 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

802 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

803 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

804 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

805 
_G_va_li°
 
__¨gs
)

806 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

810 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


814 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

818 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

821 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

824 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


828 
	#__√ed_gë›t


	)

829 
	~<gë›t.h
>

834 #ifde‡
__USE_EXTERN_INLINES


835 
	~<bôs/°dio.h
>

837 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


838 
	~<bôs/°dio2.h
>

840 #ifde‡
__LDBL_COMPAT


841 
	~<bôs/°dio-ldbl.h
>

844 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

53 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

279 
	$__°πod_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

280 **
__ª°ri˘
 
__íd±r
, 
__group
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

282 
	$__°πof_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

283 **
__ª°ri˘
 
__íd±r
, 
__group
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

285 
	$__°πﬁd_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

286 **
__ª°ri˘
 
__íd±r
,

287 
__group
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

289 #i‚de‡
__°πﬁ_öã∫Æ_deföed


290 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
__group
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

294 
	#__°πﬁ_öã∫Æ_deföed
 1

	)

296 #i‚de‡
__°πoul_öã∫Æ_deföed


297 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
,

299 
__ba£
, 
__group
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

301 
	#__°πoul_öã∫Æ_deföed
 1

	)

303 #i‡
deföed
 
__GNUC__
 || deföed 
__USE_ISOC99


304 #i‚de‡
__°πﬁl_öã∫Æ_deföed


305 
__exãnsi⁄__


306 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

307 **
__ª°ri˘
 
__íd±r
,

308 
__ba£
, 
__group
)

309 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

310 
	#__°πﬁl_öã∫Æ_deföed
 1

	)

312 #i‚de‡
__°πouŒ_öã∫Æ_deföed


313 
__exãnsi⁄__


314 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

315 
__ª°ri˘
 
__≈å
,

316 **
__ª°ri˘
 
__íd±r
,

317 
__ba£
, 
__group
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 
	#__°πouŒ_öã∫Æ_deföed
 1

	)

323 #ifde‡
__USE_EXTERN_INLINES


326 
__BEGIN_NAMESPACE_STD


327 
__ölöe
 

328 
	`__NTH
 (
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

330  
	`__°πod_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

331 
	}
}

332 
__ölöe
 

333 
__NTH
 (
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

334 
__ba£
))

336  
	`__°πﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

337 
	}
}

338 
__ölöe
 

339 
__NTH
 (
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

340 
__ba£
))

342  
	`__°πoul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

343 
	}
}

344 
__END_NAMESPACE_STD


346 #ifde‡
__USE_ISOC99


347 
__BEGIN_NAMESPACE_C99


348 
__ölöe
 

349 
__NTH
 (
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

351  
	`__°πof_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

352 
	}
}

353 #i‚de‡
__LDBL_COMPAT


354 
__ölöe
 

355 
__NTH
 (
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

357  
	`__°πﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

358 
	}
}

360 
__END_NAMESPACE_C99


363 #ifde‡
__USE_BSD


364 
__exãnsi⁄__
 
__ölöe
 

365 
__NTH
 (
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

366 
__ba£
))

368  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

369 
	}
}

370 
__exãnsi⁄__
 
__ölöe
 

371 
__NTH
 (
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

372 
__ba£
))

374  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

375 
	}
}

378 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


379 
__BEGIN_NAMESPACE_C99


380 
__exãnsi⁄__
 
__ölöe
 

381 
__NTH
 (
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

382 
__ba£
))

384  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

385 
	}
}

386 
__exãnsi⁄__
 
__ölöe
 

387 
__NTH
 (
	$°πouŒ
 (
__c⁄°
 * 
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

388 
__ba£
))

390  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

391 
	}
}

392 
__END_NAMESPACE_C99


395 
__BEGIN_NAMESPACE_STD


396 
__ölöe
 

397 
__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

399  
	`°πod
 (
__≈å
, (**Ë
NULL
);

400 
	}
}

401 
__ölöe
 

402 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

404  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

405 
	}
}

406 
__ölöe
 

407 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

409  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

410 
	}
}

411 
__END_NAMESPACE_STD


413 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


414 
__BEGIN_NAMESPACE_C99


415 
__exãnsi⁄__
 
__ölöe
 

416 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

418  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

419 
	}
}

420 
__END_NAMESPACE_C99


425 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


429 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

432 
	$a64l
 (
__c⁄°
 *
__s
)

433 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

437 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


438 
	~<sys/ty≥s.h
>

445 
	$øndom
 (Ë
__THROW
;

448 
	$§™dom
 (
__£ed
Ë
__THROW
;

454 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

455 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

459 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 #ifde‡
__USE_MISC


467 
	søndom_d©a


469 
öt32_t
 *
Âå
;

470 
öt32_t
 *
Ωå
;

471 
öt32_t
 *
°©e
;

472 
ønd_ty≥
;

473 
ønd_deg
;

474 
ønd_£p
;

475 
öt32_t
 *
íd_±r
;

478 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

479 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

481 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

482 
__THROW
 
	`__n⁄nuŒ
 ((2));

484 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

485 
size_t
 
__°©ñí
,

486 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

487 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

489 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

490 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

491 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

496 
__BEGIN_NAMESPACE_STD


498 
	$ønd
 (Ë
__THROW
;

500 
	$§™d
 (
__£ed
Ë
__THROW
;

501 
__END_NAMESPACE_STD


503 #ifde‡
__USE_POSIX


505 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

509 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


513 
	$dønd48
 (Ë
__THROW
;

514 
	`î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

517 
	$Ã™d48
 (Ë
__THROW
;

518 
	`ƒ™d48
 (
__xsubi
[3])

519 
__THROW
 
	`__n⁄nuŒ
 ((1));

522 
	$mønd48
 (Ë
__THROW
;

523 
	`jønd48
 (
__xsubi
[3])

524 
__THROW
 
	`__n⁄nuŒ
 ((1));

527 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

528 *
	`£ed48
 (
__£ed16v
[3])

529 
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
	`lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

532 #ifde‡
__USE_MISC


536 
	sdønd48_d©a


538 
__x
[3];

539 
__ﬁd_x
[3];

540 
__c
;

541 
__öô
;

542 
__a
;

546 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

547 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

548 
	`î™d48_r
 (
__xsubi
[3],

549 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

550 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

553 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

554 *
__ª°ri˘
 
__ªsu…
)

555 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

556 
	`ƒ™d48_r
 (
__xsubi
[3],

557 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

558 *
__ª°ri˘
 
__ªsu…
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

563 *
__ª°ri˘
 
__ªsu…
)

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	`jønd48_r
 (
__xsubi
[3],

566 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

567 *
__ª°ri˘
 
__ªsu…
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

572 
__THROW
 
	`__n⁄nuŒ
 ((2));

574 
	`£ed48_r
 (
__£ed16v
[3],

575 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 
	`lc⁄g48_r
 (
__∑øm
[7],

578 
dønd48_d©a
 *
__buf„r
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


586 
	#__mÆloc_™d_ˇŒoc_deföed


	)

587 
__BEGIN_NAMESPACE_STD


589 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

591 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

592 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

593 
__END_NAMESPACE_STD


596 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


597 
__BEGIN_NAMESPACE_STD


600 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

601 
__THROW
 
__©åibuã_mÆloc__
 
__©åibuã_w¨n_unu£d_ªsu…__
;

603 
	$‰ì
 (*
__±r
Ë
__THROW
;

604 
__END_NAMESPACE_STD


606 #ifdef 
__USE_MISC


608 
	$c‰ì
 (*
__±r
Ë
__THROW
;

611 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


612 
	~<Æloˇ.h
>

615 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


617 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

620 #ifde‡
__USE_XOPEN2K


622 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

623 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
__BEGIN_NAMESPACE_STD


628 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

632 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

633 
__END_NAMESPACE_STD


635 #ifdef 
__USE_MISC


638 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

639 
__THROW
 
	`__n⁄nuŒ
 ((1));

642 
__BEGIN_NAMESPACE_STD


646 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

647 
__END_NAMESPACE_STD


649 #ifde‡
__USE_ISOC99


650 
__BEGIN_NAMESPACE_C99


653 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

654 
__END_NAMESPACE_C99


658 
__BEGIN_NAMESPACE_STD


660 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

661 
__END_NAMESPACE_STD


665 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

666 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

668 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


672 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


678 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

679 
__THROW
 
	`__n⁄nuŒ
 ((2));

682 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

685 #ifdef 
__USE_MISC


689 
	$˛óªnv
 (Ë
__THROW
;

693 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


698 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

708 #i‚de‡
__USE_FILE_OFFSET64


709 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 #ifde‡
__REDIRECT


712 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

713 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

715 
	#mk°emp
 
mk°emp64


	)

718 #ifde‡
__USE_LARGEFILE64


719 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 #ifde‡
__USE_BSD


729 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

733 
__BEGIN_NAMESPACE_STD


738 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

739 
__END_NAMESPACE_STD


742 #ifdef 
__USE_GNU


746 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

750 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


756 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

757 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

762 #i‚de‡
__COMPAR_FN_T


763 
	#__COMPAR_FN_T


	)

764 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

766 #ifdef 
__USE_GNU


767 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

771 
__BEGIN_NAMESPACE_STD


774 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

775 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

776 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

780 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

781 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

785 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

786 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
__END_NAMESPACE_STD


789 #ifde‡
__USE_ISOC99


790 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

795 
__BEGIN_NAMESPACE_STD


799 
div_t
 
	$div
 (
__numî
, 
__díom
)

800 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

801 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

802 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

803 
__END_NAMESPACE_STD


805 #ifde‡
__USE_ISOC99


806 
__BEGIN_NAMESPACE_C99


807 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

808 
__díom
)

809 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

810 
__END_NAMESPACE_C99


814 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


821 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

822 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

827 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

828 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

837 #ifde‡
__USE_MISC


839 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

840 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

841 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

842 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

843 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

844 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

845 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

846 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

851 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

852 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

853 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

854 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

855 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

856 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

858 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

859 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

860 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

861 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

862 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

863 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

864 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

865 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

870 
__BEGIN_NAMESPACE_STD


873 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

876 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

877 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

880 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

884 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

885 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

887 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

888 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

889 
__THROW
;

890 
__END_NAMESPACE_STD


893 #ifde‡
__USE_SVID


898 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 #ifde‡
__USE_XOPEN_EXTENDED


909 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

910 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

911 **
__ª°ri˘
 
__vÆuï
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

916 #ifde‡
__USE_XOPEN


918 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

924 #ifde‡
__USE_XOPEN2K


926 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

929 #ifde‡
__USE_XOPEN


934 
	$gø¡±
 (
__fd
Ë
__THROW
;

938 
	$u∆ock±
 (
__fd
Ë
__THROW
;

943 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

946 #ifde‡
__USE_GNU


950 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

951 
__THROW
 
	`__n⁄nuŒ
 ((2));

954 
	`gë±
 ();

957 #ifde‡
__USE_BSD


961 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

967 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


968 
	~<bôs/°dlib.h
>

970 #ifde‡
__LDBL_COMPAT


971 
	~<bôs/°dlib-ldbl.h
>

975 #unde‡
__√ed_mÆloc_™d_ˇŒoc


977 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 
__BEGIN_NAMESPACE_STD


38 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

39 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

43 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

45 
__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


51 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

52 
__c
, 
size_t
 
__n
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

57 
__BEGIN_NAMESPACE_STD


59 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

62 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

63 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

66 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

67 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

68 
__END_NAMESPACE_STD


70 #ifde‡
__USE_GNU


73 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 
__BEGIN_NAMESPACE_STD


84 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

85 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

87 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

88 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

93 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

95 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

96 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

99 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

100 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

102 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

110 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

111 
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
__END_NAMESPACE_STD


114 #ifde‡
__USE_GNU


118 
	~<xloˇÀ.h
>

121 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

124 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

125 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

128 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


130 *
	$°rdup
 (
__c⁄°
 *
__s
)

131 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

137 #i‡
deföed
 
__USE_GNU


138 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

139 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

142 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


144 
	#°rdu∑
(
s
) \

145 (
__exãnsi⁄__
 \

147 
__c⁄°
 *
__ﬁd
 = (
s
); \

148 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

149 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

150 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

151 
	}
}))

	)

154 
	#°∫du∑
(
s
, 
n
) \

155 (
__exãnsi⁄__
 \

157 
__c⁄°
 *
__ﬁd
 = (
s
); \

158 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

159 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

160 
__√w
[
__Àn
] = '\0'; \

161 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

162 }))

	)

165 
__BEGIN_NAMESPACE_STD


167 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

168 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

170 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

171 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

172 
__END_NAMESPACE_STD


174 #ifde‡
__USE_GNU


177 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

178 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

181 
__BEGIN_NAMESPACE_STD


184 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

185 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

188 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

189 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

191 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

192 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

194 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

195 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

199 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

200 
__THROW
 
	`__n⁄nuŒ
 ((2));

201 
__END_NAMESPACE_STD


205 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

207 **
__ª°ri˘
 
__ßve_±r
)

208 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

209 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


210 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

211 **
__ª°ri˘
 
__ßve_±r
)

212 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

215 #ifde‡
__USE_GNU


217 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

218 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

221 #ifde‡
__USE_GNU


225 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

226 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

231 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

232 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

233 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

234 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

235 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

240 
__BEGIN_NAMESPACE_STD


242 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

243 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__END_NAMESPACE_STD


246 #ifdef 
__USE_GNU


249 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

250 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

254 
__BEGIN_NAMESPACE_STD


256 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

257 
__END_NAMESPACE_STD


258 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


266 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


269 #ifde‡
__REDIRECT_NTH


270 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

271 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

272 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

274 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

275 
__THROW
 
	`__n⁄nuŒ
 ((2));

276 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

281 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

282 
__THROW
 
	`__n⁄nuŒ
 ((2));

288 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_BSD


292 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

296 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

300 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

303 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

307 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

308 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

312 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

316 #ifdef 
__USE_GNU


317 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

318 #ifde‡
__GNUC__


319 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

333 #ifdef 
__USE_GNU


336 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

337 
__loˇÀ_t
 
__loc
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

340 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

341 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

345 #ifdef 
__USE_BSD


348 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

349 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

353 #ifdef 
__USE_GNU


355 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

356 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

362 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

364 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

370 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

373 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

380 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

382 #i‚de‡
ba£«me


387 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

392 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

393 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

394 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


414 
	~<bôs/°rög.h
>

417 
	~<bôs/°rög2.h
>

420 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


422 
	~<bôs/°rög3.h
>

426 
__END_DECLS


	@/usr/include/strings.h

19 #i‚def 
_STRINGS_H


20 
	#_STRINGS_H
 1

	)

25 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


27 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
__BEGIN_DECLS


34 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
;

38 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

41 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

45 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

48 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

51 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

54 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

55 
__THROW
 
__©åibuã_puª__
;

58 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

59 
__THROW
 
__©åibuã_puª__
;

61 
__END_DECLS


	@/usr/include/sys/socket.h

20 #i‚def 
_SYS_SOCKET_H


21 
	#_SYS_SOCKET_H
 1

	)

23 
	~<„©uªs.h
>

25 
	g__BEGIN_DECLS


27 
	~<sys/uio.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

35 
	~<bôs/sockë.h
>

37 #ifde‡
__USE_BSD


40 
	sosockaddr


42 
	mß_Ámûy
;

43 
	mß_d©a
[14];

51 
	mSHUT_RD
 = 0,

52 
	#SHUT_RD
 
SHUT_RD


	)

53 
	mSHUT_WR
,

54 
	#SHUT_WR
 
SHUT_WR


	)

55 
	mSHUT_RDWR


56 
	#SHUT_RDWR
 
SHUT_RDWR


	)

65 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


66 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

67 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

71 
	#__SOCKADDR_ALLTYPES
 \

72 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

73 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

74 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

86 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

87 uni⁄ { 
	m__SOCKADDR_ALLTYPES


88 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

89 #unde‡
__SOCKADDR_ONETYPE


90 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

91 uni⁄ { 
	m__SOCKADDR_ALLTYPES


92 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

93 #unde‡
__SOCKADDR_ONETYPE


100 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

106 
	`sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

107 
__fds
[2]Ë
__THROW
;

110 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

111 
__THROW
;

114 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

115 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

124 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

128 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

129 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

136 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

143 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

150 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

151 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

152 
sockÀn_t
 
__addr_Àn
);

161 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

162 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

163 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

171 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

172 
__Êags
);

179 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

185 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

186 *
__ª°ri˘
 
__›tvÆ
,

187 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

192 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

193 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

199 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

209 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

210 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

218 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

221 #ifde‡
__USE_XOPEN2K


223 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

227 #ifde‡
__USE_MISC


231 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

236 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


237 
	~<bôs/sockë2.h
>

240 
__END_DECLS


	@/usr/include/sys/stat.h

23 #i‚def 
_SYS_STAT_H


24 
	#_SYS_STAT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_MISC


31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

34 #ifde‡
__USE_MISC


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


141 
	#S_ISLNK
(
mode
Ë0

	)

144 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
) \

145 && 
deföed
 
	g__S_IFSOCK


146 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

153 #ifdef 
__USE_POSIX199309


154 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

155 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

156 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

162 
	#S_ISUID
 
__S_ISUID


	)

163 
	#S_ISGID
 
__S_ISGID


	)

165 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


167 
	#S_ISVTX
 
__S_ISVTX


	)

170 
	#S_IRUSR
 
__S_IREAD


	)

171 
	#S_IWUSR
 
__S_IWRITE


	)

172 
	#S_IXUSR
 
__S_IEXEC


	)

174 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

176 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


177 
	#S_IREAD
 
S_IRUSR


	)

178 
	#S_IWRITE
 
S_IWUSR


	)

179 
	#S_IEXEC
 
S_IXUSR


	)

182 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

183 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

184 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

186 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

188 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

189 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

190 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

192 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

195 #ifdef 
__USE_BSD


197 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

198 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

199 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

201 
	#S_BLKSIZE
 512

	)

205 #i‚de‡
__USE_FILE_OFFSET64


207 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

208 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

212 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

216 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

217 
	`__n⁄nuŒ
 ((1, 2));

218 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

219 
	`__n⁄nuŒ
 ((2));

221 
	#°©
 
°©64


	)

222 
	#f°©
 
f°©64


	)

225 #ifde‡
__USE_LARGEFILE64


226 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

227 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

228 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

231 #ifde‡
__USE_ATFILE


235 #i‚de‡
__USE_FILE_OFFSET64


236 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

237 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

238 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

240 #ifde‡
__REDIRECT_NTH


241 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

242 
°©
 *
__ª°ri˘
 
__buf
,

243 
__Êag
),

244 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

246 
	#f°©©
 
f°©©64


	)

250 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

251 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

252 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

255 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


256 #i‚de‡
__USE_FILE_OFFSET64


259 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

260 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT_NTH


263 
	`__REDIRECT_NTH
 (
l°©
,

264 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

266 
	`__n⁄nuŒ
 ((1, 2));

268 
	#l°©
 
l°©64


	)

271 #ifde‡
__USE_LARGEFILE64


272 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

273 
°©64
 *
__ª°ri˘
 
__buf
)

274 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

280 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1));

283 #ifde‡
__USE_BSD


287 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


293 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

296 #ifde‡
__USE_ATFILE


299 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
mode
, 
__Êag
)

300 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

307 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

309 #ifdef 
__USE_GNU


312 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

316 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

317 
__THROW
 
	`__n⁄nuŒ
 ((1));

319 #ifde‡
__USE_ATFILE


323 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

324 
__THROW
 
	`__n⁄nuŒ
 ((2));

330 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


331 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 #ifde‡
__USE_ATFILE


339 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

340 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1));

348 #ifde‡
__USE_ATFILE


352 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2));

371 #i‚de‡
_STAT_VER


372 
	#_STAT_VER
 0

	)

374 #i‚de‡
_MKNOD_VER


375 
	#_MKNOD_VER
 0

	)

379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

381 
__THROW
 
	`__n⁄nuŒ
 ((3));

382 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

383 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

384 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

385 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

386 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

387 
°©
 *
__°©_buf
, 
__Êag
)

388 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

390 #ifde‡
__REDIRECT_NTH


391 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

392 
°©
 *
__°©_buf
), 
__fx°©64
)

393 
	`__n⁄nuŒ
 ((3));

394 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

395 
°©
 *
__°©_buf
), 
__x°©64
)

396 
	`__n⁄nuŒ
 ((2, 3));

397 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

398 
°©
 *
__°©_buf
), 
__lx°©64
)

399 
	`__n⁄nuŒ
 ((2, 3));

400 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

401 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
, 
__Êag
),

403 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

406 
	#__fx°©
 
__fx°©64


	)

407 
	#__x°©
 
__x°©64


	)

408 
	#__lx°©
 
__lx°©64


	)

412 #ifde‡
__USE_LARGEFILE64


413 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

414 
__THROW
 
	`__n⁄nuŒ
 ((3));

415 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

416 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

417 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

418 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

419 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

420 
°©64
 *
__°©_buf
, 
__Êag
)

421 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

423 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

424 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

426 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

427 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

428 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

430 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

433 
__ölöe__
 

434 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

436  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

437 
	}
}

439 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


440 
__ölöe__
 

441 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

443  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

444 
	}
}

447 
__ölöe__
 

448 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

450  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

451 
	}
}

453 #ifde‡
__USE_ATFILE


454 
__ölöe__
 

455 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

456 
__Êag
))

458  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

459 
	}
}

462 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


463 
__ölöe__
 

464 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

466  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

467 
	}
}

470 #ifde‡
__USE_ATFILE


471 
__ölöe__
 

472 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

473 
__dev_t
 
__dev
))

475  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

476 
	}
}

479 #i‡
deföed
 
__USE_LARGEFILE64
 \

480 && (! 
deföed
 
__USE_FILE_OFFSET64
 \

481 || (
deföed
 
__REDIRECT_NTH
 && deföed 
__OPTIMIZE__
))

482 
__ölöe__
 

483 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

485  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

486 
	}
}

488 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


489 
__ölöe__
 

490 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

492  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

493 
	}
}

496 
__ölöe__
 

497 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

499  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

500 
	}
}

502 #ifde‡
__USE_GNU


503 
__ölöe__
 

504 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

505 
__Êag
))

507  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

508 
	}
}

515 
__END_DECLS


	@/usr/include/sys/times.h

23 #i‚def 
_SYS_TIMES_H


24 
	#_SYS_TIMES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_˛ock_t


	)

29 
	~<time.h
>

32 
__BEGIN_DECLS


35 
	stms


37 
˛ock_t
 
	mtms_utime
;

38 
˛ock_t
 
	mtms_°ime
;

40 
˛ock_t
 
	mtms_cutime
;

41 
˛ock_t
 
	mtms_c°ime
;

49 
˛ock_t
 
	$times
 (
tms
 *
__buf„r
Ë
__THROW
;

51 
__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || !deföed 
__USE_XOPEN


38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
(
	`__WAIT_INT
(°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
‘ë, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
(sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


176 
rußge
;

179 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

180 
rußge
 *
__ußge
Ë
__THROW
;

184 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

24 #i‚def 
_TIME_H


26 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

27 ! 
deföed
 
	g__√ed_time•ec
)

28 
	#_TIME_H
 1

	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 #ifdef 
_TIME_H


37 
	#__√ed_size_t


	)

38 
	#__√ed_NULL


	)

39 
	~<°ddef.h
>

43 
	~<bôs/time.h
>

46 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


47 #i‚de‡
CLK_TCK


48 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

54 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

55 
	#__˛ock_t_deföed
 1

	)

57 
	~<bôs/ty≥s.h
>

59 
__BEGIN_NAMESPACE_STD


61 
__˛ock_t
 
	t˛ock_t
;

62 
	g__END_NAMESPACE_STD


63 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


64 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

68 #unde‡
__√ed_˛ock_t


70 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

71 
	#__time_t_deföed
 1

	)

73 
	~<bôs/ty≥s.h
>

75 
__BEGIN_NAMESPACE_STD


77 
__time_t
 
	ttime_t
;

78 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


80 
	$__USING_NAMESPACE_STD
(
time_t
)

84 #unde‡
__√ed_time_t


86 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

87 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

88 
	#__˛ockid_t_deföed
 1

	)

90 
	~<bôs/ty≥s.h
>

93 
__˛ockid_t
 
	t˛ockid_t
;

96 #unde‡
__˛ockid_time_t


98 #i‡!
deföed
 
__timî_t_deföed
 && \

99 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

100 
	#__timî_t_deföed
 1

	)

102 
	~<bôs/ty≥s.h
>

105 
__timî_t
 
	ttimî_t
;

108 #unde‡
__√ed_timî_t


111 #i‡!
deföed
 
__time•ec_deföed
 && \

112 ((
deföed
 
_TIME_H
 && \

113 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

114 
deföed
 
__√ed_time•ec
)

115 
	#__time•ec_deföed
 1

	)

117 
	~<bôs/ty≥s.h
>

121 
	stime•ec


123 
__time_t
 
tv_£c
;

124 
tv_n£c
;

128 #unde‡
__√ed_time•ec


131 #ifdef 
_TIME_H


132 
__BEGIN_NAMESPACE_STD


134 
	stm


136 
tm_£c
;

137 
tm_mö
;

138 
tm_hour
;

139 
tm_mday
;

140 
tm_m⁄
;

141 
tm_yór
;

142 
tm_wday
;

143 
tm_yday
;

144 
tm_isd°
;

146 #ifdef 
__USE_BSD


147 
tm_gmtoff
;

148 
__c⁄°
 *
tm_z⁄e
;

150 
__tm_gmtoff
;

151 
__c⁄°
 *
__tm_z⁄e
;

154 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


156 
	$__USING_NAMESPACE_STD
(
tm
)

160 #ifde‡
__USE_POSIX199309


162 
	sôimî•ec


164 
time•ec
 
ô_öãrvÆ
;

165 
time•ec
 
ô_vÆue
;

169 
sigevít
;

173 #ifde‡
__USE_XOPEN2K


174 #i‚de‡
__pid_t_deföed


175 
__pid_t
 
	tpid_t
;

176 
	#__pid_t_deföed


	)

181 
__BEGIN_NAMESPACE_STD


184 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

187 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

190 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

191 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

194 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

200 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

201 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

202 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

203 
__END_NAMESPACE_STD


205 #ifde‡
__USE_XOPEN


208 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

209 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

210 
__THROW
;

213 #ifde‡
__USE_GNU


216 
	~<xloˇÀ.h
>

218 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

219 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

220 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

221 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

224 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

225 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 
__BEGIN_NAMESPACE_STD


232 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

236 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
__END_NAMESPACE_STD


239 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


242 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

243 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

247 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

248 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

251 
__BEGIN_NAMESPACE_STD


254 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

257 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

258 
__END_NAMESPACE_STD


260 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


265 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

266 *
__ª°ri˘
 
__buf
Ë
__THROW
;

269 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

270 *
__ª°ri˘
 
__buf
Ë
__THROW
;

275 *
__tz«me
[2];

276 
__daylight
;

277 
__timez⁄e
;

280 #ifdef 
__USE_POSIX


282 *
tz«me
[2];

286 
	$tz£t
 (Ë
__THROW
;

289 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


290 
daylight
;

291 
timez⁄e
;

294 #ifde‡
__USE_SVID


297 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

303 
	#__i¶óp
(
yór
) \

304 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

307 #ifde‡
__USE_MISC


312 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

315 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

318 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifde‡
__USE_POSIX199309


327 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

328 
time•ec
 *
__ªmaöög
);

332 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

335 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

338 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

339 
__THROW
;

341 #ifde‡
__USE_XOPEN2K


346 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

347 
__c⁄°
 
time•ec
 *
__ªq
,

348 
time•ec
 *
__ªm
);

351 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

356 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

357 
sigevít
 *
__ª°ri˘
 
__evp
,

358 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

361 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

364 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

365 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

366 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

369 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

370 
__THROW
;

373 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

377 #ifde‡
__USE_XOPEN_EXTENDED


389 
gëd©e_îr
;

398 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

401 #ifde‡
__USE_GNU


412 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

413 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

416 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


34 
	#_POSIX_VERSION
 200112L

	)

40 
	#_POSIX2_VERSION
 200112L

	)

44 
	#_POSIX2_C_BIND
 200112L

	)

48 
	#_POSIX2_C_DEV
 200112L

	)

52 
	#_POSIX2_SW_DEV
 200112L

	)

56 
	#_POSIX2_LOCALEDEF
 200112L

	)

59 #ifde‡
__USE_XOPEN2K


60 
	#_XOPEN_VERSION
 600

	)

61 #ñi‡
deföed
 
__USE_UNIX98


62 
	#_XOPEN_VERSION
 500

	)

64 
	#_XOPEN_VERSION
 4

	)

68 
	#_XOPEN_XCU_VERSION
 4

	)

71 
	#_XOPEN_XPG2
 1

	)

72 
	#_XOPEN_XPG3
 1

	)

73 
	#_XOPEN_XPG4
 1

	)

76 
	#_XOPEN_UNIX
 1

	)

79 
	#_XOPEN_CRYPT
 1

	)

83 
	#_XOPEN_ENH_I18N
 1

	)

86 
	#_XOPEN_LEGACY
 1

	)

173 
	~<bôs/posix_›t.h
>

176 #ifde‡
__USE_UNIX98


177 
	~<bôs/ívú⁄míts.h
>

181 
	#STDIN_FILENO
 0

	)

182 
	#STDOUT_FILENO
 1

	)

183 
	#STDERR_FILENO
 2

	)

188 
	~<bôs/ty≥s.h
>

190 #i‚def 
__ssize_t_deföed


191 
__ssize_t
 
	tssize_t
;

192 
	#__ssize_t_deföed


	)

195 
	#__√ed_size_t


	)

196 
	#__√ed_NULL


	)

197 
	~<°ddef.h
>

199 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


202 #i‚de‡
__gid_t_deföed


203 
__gid_t
 
	tgid_t
;

204 
	#__gid_t_deföed


	)

207 #i‚de‡
__uid_t_deföed


208 
__uid_t
 
	tuid_t
;

209 
	#__uid_t_deföed


	)

212 #i‚de‡
__off_t_deföed


213 #i‚de‡
__USE_FILE_OFFSET64


214 
__off_t
 
	toff_t
;

216 
__off64_t
 
	toff_t
;

218 
	#__off_t_deföed


	)

220 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


221 
__off64_t
 
	toff64_t
;

222 
	#__off64_t_deföed


	)

225 #i‚de‡
__u£c⁄ds_t_deföed


226 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

227 
	#__u£c⁄ds_t_deföed


	)

230 #i‚de‡
__pid_t_deföed


231 
__pid_t
 
	tpid_t
;

232 
	#__pid_t_deföed


	)

236 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


237 #i‚de‡
__öçå_t_deföed


238 
__öçå_t
 
	töçå_t
;

239 
	#__öçå_t_deföed


	)

243 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


244 #i‚de‡
__sockÀn_t_deföed


245 
__sockÀn_t
 
	tsockÀn_t
;

246 
	#__sockÀn_t_deföed


	)

252 
	#R_OK
 4

	)

253 
	#W_OK
 2

	)

254 
	#X_OK
 1

	)

255 
	#F_OK
 0

	)

258 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

260 #ifde‡
__USE_GNU


263 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

267 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

268 
__THROW
 
	`__n⁄nuŒ
 ((1));

271 #ifde‡
__USE_ATFILE


275 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

276 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

281 #i‚def 
_STDIO_H


282 
	#SEEK_SET
 0

	)

283 
	#SEEK_CUR
 1

	)

284 
	#SEEK_END
 2

	)

287 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


289 
	#L_SET
 
SEEK_SET


	)

290 
	#L_INCR
 
SEEK_CUR


	)

291 
	#L_XTND
 
SEEK_END


	)

300 #i‚de‡
__USE_FILE_OFFSET64


301 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

303 #ifde‡
__REDIRECT_NTH


304 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

305 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

306 
l£ek64
);

308 
	#l£ek
 
l£ek64


	)

311 #ifde‡
__USE_LARGEFILE64


312 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

313 
__THROW
;

320 
	`˛o£
 (
__fd
);

327 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

333 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

335 #ifde‡
__USE_UNIX98


336 #i‚de‡
__USE_FILE_OFFSET64


343 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

344 
__off_t
 
__off£t
Ë
__wur
;

351 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

352 
__off_t
 
__off£t
Ë
__wur
;

354 #ifde‡
__REDIRECT


355 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

356 
__off64_t
 
__off£t
),

357 
¥ód64
Ë
__wur
;

358 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

359 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

360 
pwrôe64
Ë
__wur
;

362 
	#¥ód
 
¥ód64


	)

363 
	#pwrôe
 
pwrôe64


	)

367 #ifde‡
__USE_LARGEFILE64


371 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

372 
__off64_t
 
__off£t
Ë
__wur
;

375 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

376 
__off64_t
 
__off£t
Ë
__wur
;

384 
	`pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

393 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

405 
	`¶ìp
 (
__£c⁄ds
);

407 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


412 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

413 
__THROW
;

420 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

429 
	`∑u£
 ();

433 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

434 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

436 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


438 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

443 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

444 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

448 #ifde‡
__USE_ATFILE


451 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

452 
__gid_t
 
__group
, 
__Êag
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

457 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

459 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

471 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

473 #ifdef 
__USE_GNU


477 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

480 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


484 *
	$gëwd
 (*
__buf
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

490 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

493 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

496 **
__ívú⁄
;

497 #ifde‡
__USE_GNU


498 **
ívú⁄
;

504 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

505 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

507 #ifde‡
__USE_GNU


510 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

511 
__THROW
;

516 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

517 
__THROW
 
	`__n⁄nuŒ
 ((1));

521 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

522 
__THROW
 
	`__n⁄nuŒ
 ((1));

526 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

527 
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

532 
__THROW
 
	`__n⁄nuŒ
 ((1));

537 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

538 
__THROW
 
	`__n⁄nuŒ
 ((1));

541 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


543 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

548 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
	~<bôs/c⁄‚ame.h
>

557 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

558 
__THROW
 
	`__n⁄nuŒ
 ((1));

561 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

564 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

566 #ifdef 
__USE_POSIX2


568 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

573 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

576 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

580 #i‚de‡
__FAVOR_BSD


581 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

583 #ifde‡
__REDIRECT_NTH


584 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

586 
	#gëpgΩ
 
__gëpgid


	)

591 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

592 #ifde‡
__USE_XOPEN_EXTENDED


593 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

600 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

602 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


613 #i‚de‡
__FAVOR_BSD


617 
	$£çgΩ
 (Ë
__THROW
;

622 #ifde‡
__REDIRECT_NTH


623 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

625 
	#£çgΩ
 
£çgid


	)

634 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

636 #ifde‡
__USE_XOPEN_EXTENDED


638 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

645 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

648 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

651 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

656 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

658 #ifdef 
__USE_GNU


660 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

667 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

669 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


672 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

675 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


677 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

684 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

686 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


689 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

692 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


694 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

697 #ifde‡
__USE_GNU


700 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

701 
__THROW
;

705 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

706 
__THROW
;

710 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

711 
__THROW
;

715 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

716 
__THROW
;

723 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


730 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

736 *
	$ây«me
 (
__fd
Ë
__THROW
;

740 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

741 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

745 
	$ißây
 (
__fd
Ë
__THROW
;

747 #i‡
deföed
 
__USE_BSD
 \

748 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

751 
	$ây¶Ÿ
 (Ë
__THROW
;

756 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

757 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

759 #ifde‡
__USE_ATFILE


762 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

763 
__c⁄°
 *
__to
, 
__Êags
)

764 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

767 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


769 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

775 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

776 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

780 #ifde‡
__USE_ATFILE


782 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

783 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

786 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

787 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

788 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

792 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

794 #ifde‡
__USE_ATFILE


796 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2));

801 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

805 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

808 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

815 *
	`gëlogö
 ();

816 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


823 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

826 #ifdef 
__USE_BSD


828 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

832 #ifdef 
__USE_POSIX2


836 
	#__√ed_gë›t


	)

837 
	~<gë›t.h
>

841 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


845 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

849 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

852 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

857 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

863 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

865 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

866 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

872 
	$vh™gup
 (Ë
__THROW
;

875 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

884 
size_t
 
__off£t
, 
__sˇÀ
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

891 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

895 *
	$gëu£rshñl
 (Ë
__THROW
;

896 
	$ídu£rshñl
 (Ë
__THROW
;

897 
	$£tu£rshñl
 (Ë
__THROW
;

903 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

907 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

910 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

918 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


923 
	`fsync
 (
__fd
);

927 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


930 
	`gëho°id
 ();

933 
	$sync
 (Ë
__THROW
;

938 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

943 
	$gëdèbÀsize
 (Ë
__THROW
;

947 #i‚de‡
__USE_FILE_OFFSET64


948 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 #ifde‡
__REDIRECT_NTH


952 
	`__REDIRECT_NTH
 (
åunˇã
,

953 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

954 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

956 
	#åunˇã
 
åunˇã64


	)

959 #ifde‡
__USE_LARGEFILE64


960 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


969 #i‚de‡
__USE_FILE_OFFSET64


970 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

972 #ifde‡
__REDIRECT_NTH


973 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

974 
·runˇã64
Ë
__wur
;

976 
	#·runˇã
 
·runˇã64


	)

979 #ifde‡
__USE_LARGEFILE64


980 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

986 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


990 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

996 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1000 #ifde‡
__USE_MISC


1011 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1016 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1028 
	#F_ULOCK
 0

	)

1029 
	#F_LOCK
 1

	)

1030 
	#F_TLOCK
 2

	)

1031 
	#F_TEST
 3

	)

1033 #i‚de‡
__USE_FILE_OFFSET64


1034 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1036 #ifde‡
__REDIRECT


1037 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1038 
lockf64
Ë
__wur
;

1040 
	#lockf
 
lockf64


	)

1043 #ifde‡
__USE_LARGEFILE64


1044 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1049 #ifde‡
__USE_GNU


1054 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1055 (
__exãnsi⁄__
 \

1056 ({ 
__ªsu…
; \

1057 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1058 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1059 
__ªsu…
; 
	}
}))

	)

1062 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1065 
fd©async
 (
__fûdes
);

1071 #ifdef 
__USE_XOPEN


1073 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1074 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1078 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1086 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1092 #ifde‡
__USE_XOPEN


1094 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1099 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


1100 
	~<bôs/uni°d.h
>

1103 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/assert.h

23 #ifdef 
_ASSERT_H


25 #unde‡
_ASSERT_H


26 #unde‡
as£π


27 #unde‡
__ASSERT_VOID_CAST


29 #ifdef 
__USE_GNU


30 #unde‡
as£π_≥º‹


35 
	#_ASSERT_H
 1

	)

36 
	~<„©uªs.h
>

38 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

39 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

41 
	#__ASSERT_VOID_CAST
 ()

	)

49 #ifdef 
NDEBUG


51 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

59 #ifdef 
__USE_GNU


60 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

65 
__BEGIN_DECLS


68 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

69 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

70 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

73 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

74 
__löe
,

75 
__c⁄°
 *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


87 
	#as£π
(
ex¥
) \

88 ((
ex¥
) \

89 ? 
	`__ASSERT_VOID_CAST
 (0) \

90 : (
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
), \

91 
	`__ASSERT_VOID_CAST
 (0)))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : (
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
), \

98 
	`__ASSERT_VOID_CAST
 (0)))

	)

106 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

107 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

109 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

110 
	#__ASSERT_FUNCTION
 
__func__


	)

112 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS


502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

508 
	m_CS_PATH
,

509 
	#_CS_PATH
 
_CS_PATH


	)

511 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

512 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

514 
	m_CS_GNU_LIBC_VERSION
,

515 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

516 
	m_CS_GNU_LIBPTHREAD_VERSION
,

517 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

519 
	m_CS_LFS_CFLAGS
 = 1000,

520 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

521 
	m_CS_LFS_LDFLAGS
,

522 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

523 
	m_CS_LFS_LIBS
,

524 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

525 
	m_CS_LFS_LINTFLAGS
,

526 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

527 
	m_CS_LFS64_CFLAGS
,

528 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

529 
	m_CS_LFS64_LDFLAGS
,

530 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

531 
	m_CS_LFS64_LIBS
,

532 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

533 
	m_CS_LFS64_LINTFLAGS
,

534 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

536 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

537 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

538 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

539 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

540 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

541 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

542 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

543 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

544 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

545 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

546 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

547 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

548 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

549 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

550 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

551 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

552 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

553 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

554 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

555 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

556 
	m_CS_XBS5_LP64_OFF64_LIBS
,

557 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

558 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

559 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

560 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

561 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

562 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

563 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

564 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

565 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

566 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

567 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

569 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

570 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

571 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

572 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

573 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

574 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

575 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

576 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

577 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

578 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

579 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

580 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

581 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

582 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

583 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

584 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

585 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

586 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

587 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

588 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

589 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

590 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

591 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

592 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

593 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

594 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

595 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

596 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

597 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

598 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

599 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


600 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/dlfcn.h

20 #i‚de‡
_DLFCN_H


25 
	#RTLD_LAZY
 0x00001

	)

26 
	#RTLD_NOW
 0x00002

	)

27 
	#RTLD_BINDING_MASK
 0x3

	)

28 
	#RTLD_NOLOAD
 0x00004

	)

29 
	#RTLD_DEEPBIND
 0x00008

	)

34 
	#RTLD_GLOBAL
 0x00100

	)

39 
	#RTLD_LOCAL
 0

	)

42 
	#RTLD_NODELETE
 0x01000

	)

44 #ifde‡
__USE_GNU


55 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

56 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

58 
__BEGIN_DECLS


61 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

63 
__END_DECLS


	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

41 #i‡
__WORDSIZE
 == 64

53 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

54 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LP64_OFF64
 1

	)

58 
	#_XBS5_LP64_OFF64
 1

	)

64 
	#_POSIX_V6_ILP32_OFF32
 1

	)

65 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

66 
	#_XBS5_ILP32_OFF32
 1

	)

67 
	#_XBS5_ILP32_OFFBIG
 1

	)

82 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

83 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

84 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

85 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

86 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

87 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
__ASSEMBLER__


43 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

45 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


47 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

52 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bôs/w‹dsize.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

58 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


59 
	#O_DSYNC
 
O_SYNC


	)

60 
	#O_RSYNC
 
O_SYNC


	)

63 #ifde‡
__USE_LARGEFILE64


64 #i‡
__WORDSIZE
 == 64

65 
	#O_LARGEFILE
 0

	)

67 
	#O_LARGEFILE
 0100000

	)

72 
	#F_DUPFD
 0

	)

73 
	#F_GETFD
 1

	)

74 
	#F_SETFD
 2

	)

75 
	#F_GETFL
 3

	)

76 
	#F_SETFL
 4

	)

77 #i‡
__WORDSIZE
 == 64

78 
	#F_GETLK
 5

	)

79 
	#F_SETLK
 6

	)

80 
	#F_SETLKW
 7

	)

82 
	#F_GETLK64
 5

	)

83 
	#F_SETLK64
 6

	)

84 
	#F_SETLKW64
 7

	)

86 #i‚de‡
__USE_FILE_OFFSET64


87 
	#F_GETLK
 5

	)

88 
	#F_SETLK
 6

	)

89 
	#F_SETLKW
 7

	)

91 
	#F_GETLK
 
F_GETLK64


	)

92 
	#F_SETLK
 
F_SETLK64


	)

93 
	#F_SETLKW
 
F_SETLKW64


	)

95 
	#F_GETLK64
 12

	)

96 
	#F_SETLK64
 13

	)

97 
	#F_SETLKW64
 14

	)

100 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


101 
	#F_SETOWN
 8

	)

102 
	#F_GETOWN
 9

	)

105 #ifde‡
__USE_GNU


106 
	#F_SETSIG
 10

	)

107 
	#F_GETSIG
 11

	)

110 #ifde‡
__USE_GNU


111 
	#F_SETLEASE
 1024

	)

112 
	#F_GETLEASE
 1025

	)

113 
	#F_NOTIFY
 1026

	)

117 
	#FD_CLOEXEC
 1

	)

120 
	#F_RDLCK
 0

	)

121 
	#F_WRLCK
 1

	)

122 
	#F_UNLCK
 2

	)

125 
	#F_EXLCK
 4

	)

126 
	#F_SHLCK
 8

	)

128 #ifde‡
__USE_BSD


130 
	#LOCK_SH
 1

	)

131 
	#LOCK_EX
 2

	)

132 
	#LOCK_NB
 4

	)

134 
	#LOCK_UN
 8

	)

137 #ifde‡
__USE_GNU


138 
	#LOCK_MAND
 32

	)

139 
	#LOCK_READ
 64

	)

140 
	#LOCK_WRITE
 128

	)

141 
	#LOCK_RW
 192

	)

144 #ifde‡
__USE_GNU


146 
	#DN_ACCESS
 0x00000001

	)

147 
	#DN_MODIFY
 0x00000002

	)

148 
	#DN_CREATE
 0x00000004

	)

149 
	#DN_DELETE
 0x00000008

	)

150 
	#DN_RENAME
 0x00000010

	)

151 
	#DN_ATTRIB
 0x00000020

	)

152 
	#DN_MULTISHOT
 0x80000000

	)

155 
	sÊock


157 
	ml_ty≥
;

158 
	ml_whí˚
;

159 #i‚de‡
__USE_FILE_OFFSET64


160 
__off_t
 
	ml_°¨t
;

161 
__off_t
 
	ml_Àn
;

163 
__off64_t
 
	ml_°¨t
;

164 
__off64_t
 
	ml_Àn
;

166 
__pid_t
 
	ml_pid
;

169 #ifde‡
__USE_LARGEFILE64


170 
	sÊock64


172 
	ml_ty≥
;

173 
	ml_whí˚
;

174 
__off64_t
 
	ml_°¨t
;

175 
__off64_t
 
	ml_Àn
;

176 
__pid_t
 
	ml_pid
;

182 #ifdef 
__USE_BSD


183 
	#FAPPEND
 
O_APPEND


	)

184 
	#FFSYNC
 
O_FSYNC


	)

185 
	#FASYNC
 
O_ASYNC


	)

186 
	#FNONBLOCK
 
O_NONBLOCK


	)

187 
	#FNDELAY
 
O_NDELAY


	)

191 #ifde‡
__USE_XOPEN2K


192 
	#POSIX_FADV_NORMAL
 0

	)

193 
	#POSIX_FADV_RANDOM
 1

	)

194 
	#POSIX_FADV_SEQUENTIAL
 2

	)

195 
	#POSIX_FADV_WILLNEED
 3

	)

196 
	#POSIX_FADV_DONTNEED
 4

	)

197 
	#POSIX_FADV_NOREUSE
 5

	)

201 #ifde‡
__USE_GNU


203 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

206 
	#SYNC_FILE_RANGE_WRITE
 2

	)

209 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

214 
	#SPLICE_F_MOVE
 1

	)

215 
	#SPLICE_F_NONBLOCK
 2

	)

218 
	#SPLICE_F_MORE
 4

	)

219 
	#SPLICE_F_GIFT
 8

	)

222 
	g__BEGIN_DECLS


224 #ifde‡
__USE_GNU


227 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

228 
__THROW
;

232 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

233 
__Êags
);

237 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
, 
size_t
 
__cou¡
,

238 
__Êags
);

241 
	$•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

242 
__off64_t
 *
__offout
, 
size_t
 
__Àn
, 
__Êags
)

243 
__THROW
;

246 
	$ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
, 
__Êags
)

247 
__THROW
;

251 
__END_DECLS


	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

95 
	#_POSIX_PATH_MAX
 256

	)

98 
	#_POSIX_PIPE_BUF
 512

	)

102 
	#_POSIX_RE_DUP_MAX
 255

	)

105 
	#_POSIX_RTSIG_MAX
 8

	)

108 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

111 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

114 
	#_POSIX_SIGQUEUE_MAX
 32

	)

117 
	#_POSIX_SSIZE_MAX
 32767

	)

120 
	#_POSIX_STREAM_MAX
 8

	)

123 
	#_POSIX_SYMLINK_MAX
 255

	)

127 
	#_POSIX_SYMLOOP_MAX
 8

	)

130 
	#_POSIX_TIMER_MAX
 32

	)

133 
	#_POSIX_TTY_NAME_MAX
 9

	)

136 
	#_POSIX_TZNAME_MAX
 6

	)

139 
	#_POSIX_QLIMIT
 1

	)

143 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

146 
	#_POSIX_UIO_MAXIOV
 16

	)

149 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

153 
	~<bôs/loˇl_lim.h
>

156 #i‚def 
SSIZE_MAX


157 
	#SSIZE_MAX
 
LONG_MAX


	)

164 #i‚def 
NGROUPS_MAX


165 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_POSIX_OPT_H


21 
	#_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200112L

	)

36 
	#_POSIX_FSYNC
 200112L

	)

39 
	#_POSIX_MAPPED_FILES
 200112L

	)

42 
	#_POSIX_MEMLOCK
 200112L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200112L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200112L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200112L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200112L

	)

93 
	#_POSIX_SEMAPHORES
 200112L

	)

96 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

99 
	#_POSIX_ASYNCHRONOUS_IO
 200112L

	)

100 
	#_POSIX_ASYNC_IO
 1

	)

102 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

104 
	#_POSIX_PRIORITIZED_IO
 200112L

	)

107 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

110 
	#_LFS_LARGEFILE
 1

	)

111 
	#_LFS64_LARGEFILE
 1

	)

112 
	#_LFS64_STDIO
 1

	)

115 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

118 
	#_POSIX_CPUTIME
 0

	)

121 
	#_POSIX_THREAD_CPUTIME
 0

	)

124 
	#_POSIX_REGEXP
 1

	)

127 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

130 
	#_POSIX_SHELL
 1

	)

133 
	#_POSIX_TIMEOUTS
 200112L

	)

136 
	#_POSIX_SPIN_LOCKS
 200112L

	)

139 
	#_POSIX_SPAWN
 200112L

	)

142 
	#_POSIX_TIMERS
 200112L

	)

145 
	#_POSIX_BARRIERS
 200112L

	)

148 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

151 
	#_POSIX_THREAD_PROCESS_SHARED
 200112L

	)

154 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

157 
	#_POSIX_CLOCK_SELECTION
 200112L

	)

160 
	#_POSIX_ADVISORY_INFO
 200112L

	)

163 
	#_POSIX_IPV6
 200112L

	)

166 
	#_POSIX_RAW_SOCKETS
 200112L

	)

169 
	#_POSIX2_CHAR_TERM
 200112L

	)

172 
	#_POSIX_SPORADIC_SERVER
 -1

	)

173 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

176 
	#_POSIX_TRACE
 -1

	)

177 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

178 
	#_POSIX_TRACE_INHERIT
 -1

	)

179 
	#_POSIX_TRACE_LOG
 -1

	)

182 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/socket.h

20 #i‚de‡
__BITS_SOCKET_H


21 
	#__BITS_SOCKET_H


	)

23 #i‡!
deföed
 
_SYS_SOCKET_H
 && !deföed 
_NETINET_IN_H


27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<limôs.h
>

32 
	~<sys/ty≥s.h
>

35 #i‚de‡
__sockÀn_t_deföed


36 
__sockÀn_t
 
	tsockÀn_t
;

37 
	#__sockÀn_t_deföed


	)

41 
	e__sockë_ty≥


43 
	mSOCK_STREAM
 = 1,

45 
	#SOCK_STREAM
 
SOCK_STREAM


	)

46 
	mSOCK_DGRAM
 = 2,

48 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

49 
	mSOCK_RAW
 = 3,

50 
	#SOCK_RAW
 
SOCK_RAW


	)

51 
	mSOCK_RDM
 = 4,

52 
	#SOCK_RDM
 
SOCK_RDM


	)

53 
	mSOCK_SEQPACKET
 = 5,

55 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

56 
	mSOCK_PACKET
 = 10

59 
	#SOCK_PACKET
 
SOCK_PACKET


	)

63 
	#PF_UNSPEC
 0

	)

64 
	#PF_LOCAL
 1

	)

65 
	#PF_UNIX
 
PF_LOCAL


	)

66 
	#PF_FILE
 
PF_LOCAL


	)

67 
	#PF_INET
 2

	)

68 
	#PF_AX25
 3

	)

69 
	#PF_IPX
 4

	)

70 
	#PF_APPLETALK
 5

	)

71 
	#PF_NETROM
 6

	)

72 
	#PF_BRIDGE
 7

	)

73 
	#PF_ATMPVC
 8

	)

74 
	#PF_X25
 9

	)

75 
	#PF_INET6
 10

	)

76 
	#PF_ROSE
 11

	)

77 
	#PF_DEC√t
 12

	)

78 
	#PF_NETBEUI
 13

	)

79 
	#PF_SECURITY
 14

	)

80 
	#PF_KEY
 15

	)

81 
	#PF_NETLINK
 16

	)

82 
	#PF_ROUTE
 
PF_NETLINK


	)

83 
	#PF_PACKET
 17

	)

84 
	#PF_ASH
 18

	)

85 
	#PF_ECONET
 19

	)

86 
	#PF_ATMSVC
 20

	)

87 
	#PF_SNA
 22

	)

88 
	#PF_IRDA
 23

	)

89 
	#PF_PPPOX
 24

	)

90 
	#PF_WANPIPE
 25

	)

91 
	#PF_BLUETOOTH
 31

	)

92 
	#PF_MAX
 32

	)

95 
	#AF_UNSPEC
 
PF_UNSPEC


	)

96 
	#AF_LOCAL
 
PF_LOCAL


	)

97 
	#AF_UNIX
 
PF_UNIX


	)

98 
	#AF_FILE
 
PF_FILE


	)

99 
	#AF_INET
 
PF_INET


	)

100 
	#AF_AX25
 
PF_AX25


	)

101 
	#AF_IPX
 
PF_IPX


	)

102 
	#AF_APPLETALK
 
PF_APPLETALK


	)

103 
	#AF_NETROM
 
PF_NETROM


	)

104 
	#AF_BRIDGE
 
PF_BRIDGE


	)

105 
	#AF_ATMPVC
 
PF_ATMPVC


	)

106 
	#AF_X25
 
PF_X25


	)

107 
	#AF_INET6
 
PF_INET6


	)

108 
	#AF_ROSE
 
PF_ROSE


	)

109 
	#AF_DEC√t
 
PF_DEC√t


	)

110 
	#AF_NETBEUI
 
PF_NETBEUI


	)

111 
	#AF_SECURITY
 
PF_SECURITY


	)

112 
	#AF_KEY
 
PF_KEY


	)

113 
	#AF_NETLINK
 
PF_NETLINK


	)

114 
	#AF_ROUTE
 
PF_ROUTE


	)

115 
	#AF_PACKET
 
PF_PACKET


	)

116 
	#AF_ASH
 
PF_ASH


	)

117 
	#AF_ECONET
 
PF_ECONET


	)

118 
	#AF_ATMSVC
 
PF_ATMSVC


	)

119 
	#AF_SNA
 
PF_SNA


	)

120 
	#AF_IRDA
 
PF_IRDA


	)

121 
	#AF_PPPOX
 
PF_PPPOX


	)

122 
	#AF_WANPIPE
 
PF_WANPIPE


	)

123 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

124 
	#AF_MAX
 
PF_MAX


	)

130 
	#SOL_RAW
 255

	)

131 
	#SOL_DECNET
 261

	)

132 
	#SOL_X25
 262

	)

133 
	#SOL_PACKET
 263

	)

134 
	#SOL_ATM
 264

	)

135 
	#SOL_AAL
 265

	)

136 
	#SOL_IRDA
 266

	)

139 
	#SOMAXCONN
 128

	)

142 
	~<bôs/sockaddr.h
>

145 
	ssockaddr


147 
__SOCKADDR_COMMON
 (
ß_
);

148 
	mß_d©a
[14];

154 #i‡
ULONG_MAX
 > 0xffffffff

155 
	#__ss_Æig¡y≥
 
__uöt64_t


	)

157 
	#__ss_Æig¡y≥
 
__uöt32_t


	)

159 
	#_SS_SIZE
 128

	)

160 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

162 
	ssockaddr_°‹age


164 
__SOCKADDR_COMMON
 (
ss_
);

165 
__ss_Æig¡y≥
 
	m__ss_Æign
;

166 
	m__ss_∑ddög
[
_SS_PADSIZE
];

173 
	mMSG_OOB
 = 0x01,

174 
	#MSG_OOB
 
MSG_OOB


	)

175 
	mMSG_PEEK
 = 0x02,

176 
	#MSG_PEEK
 
MSG_PEEK


	)

177 
	mMSG_DONTROUTE
 = 0x04,

178 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

179 #ifde‡
__USE_GNU


181 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

182 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

184 
	mMSG_CTRUNC
 = 0x08,

185 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

186 
	mMSG_PROXY
 = 0x10,

187 
	#MSG_PROXY
 
MSG_PROXY


	)

188 
	mMSG_TRUNC
 = 0x20,

189 
	#MSG_TRUNC
 
MSG_TRUNC


	)

190 
	mMSG_DONTWAIT
 = 0x40,

191 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

192 
	mMSG_EOR
 = 0x80,

193 
	#MSG_EOR
 
MSG_EOR


	)

194 
	mMSG_WAITALL
 = 0x100,

195 
	#MSG_WAITALL
 
MSG_WAITALL


	)

196 
	mMSG_FIN
 = 0x200,

197 
	#MSG_FIN
 
MSG_FIN


	)

198 
	mMSG_SYN
 = 0x400,

199 
	#MSG_SYN
 
MSG_SYN


	)

200 
	mMSG_CONFIRM
 = 0x800,

201 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

202 
	mMSG_RST
 = 0x1000,

203 
	#MSG_RST
 
MSG_RST


	)

204 
	mMSG_ERRQUEUE
 = 0x2000,

205 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

206 
	mMSG_NOSIGNAL
 = 0x4000,

207 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

208 
	mMSG_MORE
 = 0x8000

209 
	#MSG_MORE
 
MSG_MORE


	)

215 
	smsghdr


217 *
	mmsg_«me
;

218 
sockÀn_t
 
	mmsg_«mñí
;

220 
iovec
 *
	mmsg_iov
;

221 
size_t
 
	mmsg_iovÀn
;

223 *
	mmsg_c⁄åﬁ
;

224 
size_t
 
	mmsg_c⁄åﬁÀn
;

229 
	mmsg_Êags
;

233 
	scmsghdr


235 
size_t
 
	mcmsg_Àn
;

240 
	mcmsg_Àvñ
;

241 
	mcmsg_ty≥
;

242 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

243 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

248 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

249 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

251 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

253 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

254 
	#CMSG_FIRSTHDR
(
mhdr
) \

255 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

256 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë
NULL
)

	)

257 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

258 & (
size_t
Ë~( (size_tË- 1))

	)

259 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

260 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

261 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

263 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

264 
cmsghdr
 *
__cmsg
Ë
__THROW
;

265 #ifde‡
__USE_EXTERN_INLINES


266 #i‚de‡
_EXTERN_INLINE


267 
	#_EXTERN_INLINE
 
__ölöe


	)

269 
_EXTERN_INLINE
 
cmsghdr
 *

270 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

272 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

276 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

277 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

278 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


279 + 
__mhdr
->
msg_c⁄åﬁÀn
)

280 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

281 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

284  
__cmsg
;

285 
	}
}

292 
SCM_RIGHTS
 = 0x01

293 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

294 #ifde‡
__USE_BSD


295 , 
SCM_CREDENTIALS
 = 0x02

296 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

302 
	su¸ed


304 
pid_t
 
	mpid
;

305 
uid_t
 
	muid
;

306 
gid_t
 
	mgid
;

310 
	~<asm/sockë.h
>

314 
	slögî


316 
	ml_⁄off
;

317 
	ml_lögî
;

	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

29 
__Æways_ölöe
 
ssize_t


30 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

32 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1

33 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos0
 (
__buf
)))

34  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

35  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

36 
	}
}

38 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

39 
size_t
 
__buÊí
, 
__Êags
,

40 
__SOCKADDR_ARG
 
__addr
,

41 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

42 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

43 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

44 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

45 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

47 
__Æways_ölöe
 
ssize_t


48 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

51 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1

52 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos0
 (
__buf
)))

53  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

54 
__addr
, 
__addr_Àn
);

55  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

56 
	}
}

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

32 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

33 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

34 
__END_NAMESPACE_STD


36 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


37 
__BEGIN_NAMESPACE_C99


38 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

39 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

40 
__END_NAMESPACE_C99


43 #ifdef 
__USE_ISOC99


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

46 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

47 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

48 
__END_NAMESPACE_C99


51 #ifde‡
__USE_GNU


52 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

53 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

54 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

55 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

56 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

57 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

58 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

61 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


62 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

63 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

64 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


65 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

66 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #ifde‡
__˝lu•lus


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


33 
__STDIO_INLINE
 

34 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

36  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

37 
	}
}

40 
__STDIO_INLINE
 

41 
	$gëch¨
 ()

43  
	`_IO_gëc
 (
°dö
);

44 
	}
}

47 #ifde‡
__USE_MISC


49 
__STDIO_INLINE
 

50 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

52  
	`_IO_gëc_u∆ocked
 (
__Â
);

53 
	}
}

57 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


59 
__STDIO_INLINE
 

60 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

62  
	`_IO_gëc_u∆ocked
 (
__Â
);

63 
	}
}

66 
__STDIO_INLINE
 

67 
	$gëch¨_u∆ocked
 ()

69  
	`_IO_gëc_u∆ocked
 (
°dö
);

70 
	}
}

75 
__STDIO_INLINE
 

76 
	$putch¨
 (
__c
)

78  
	`_IO_putc
 (
__c
, 
°dout
);

79 
	}
}

82 #ifde‡
__USE_MISC


84 
__STDIO_INLINE
 

85 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

87  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

88 
	}
}

92 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


94 
__STDIO_INLINE
 

95 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

97  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

98 
	}
}

101 
__STDIO_INLINE
 

102 
	$putch¨_u∆ocked
 (
__c
)

104  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

105 
	}
}

109 #ifdef 
__USE_GNU


111 
__STDIO_INLINE
 
_IO_ssize_t


112 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

114  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

115 
	}
}

119 #ifde‡
__USE_MISC


121 
__STDIO_INLINE
 

122 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

124  
	`_IO_„of_u∆ocked
 (
__°ªam
);

125 
	}
}

128 
__STDIO_INLINE
 

129 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

131  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

132 
	}
}

138 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__


140 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

141 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

142 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

143 && (
size_t
Ë(
size
) != 0) \

144 ? ({ *
__±r
 = (*Ë(
±r
); \

145 
FILE
 *
__°ªam
 = (
°ªam
); \

146 
size_t
 
__˙t
; \

147 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

148 
__˙t
 > 0; --__cnt) \

150 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

151 i‡(
__c
 =
EOF
) \

153 *
__±r
++ = 
__c
; \

155 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

156 / (
size_t
Ë(
size
); }) \

157 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

158 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

160 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

161 (Ë(
n
), (
size_t
) 0) \

162 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

164 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

165 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

166 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

167 && (
size_t
Ë(
size
) != 0) \

168 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

169 
FILE
 *
__°ªam
 = (
°ªam
); \

170 
size_t
 
__˙t
; \

171 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

172 
__˙t
 > 0; --__cnt) \

173 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

175 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

176 / (
size_t
Ë(
size
); }) \

177 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

178 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

180 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

181 (Ë(
n
), (
size_t
) 0) \

182 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

186 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 
	#•rötf
(
°r
, ...) \

31 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

32 
__VA_ARGS__
)

	)

33 
	#v•rötf
(
°r
, 
fmt
, 
≠
) \

34 
	`__buûtö___v•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (°r), 
fmt
, 
≠
)

	)

36 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


38 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

39 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

40 ...Ë
__THROW
;

41 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

42 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

43 
_G_va_li°
 
__≠
Ë
__THROW
;

45 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

46 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

47 
__VA_ARGS__
)

	)

48 
	#v¢¥ötf
(
°r
, 
Àn
, 
fmt
, 
≠
) \

49 
	`__buûtö___v¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

50 
fmt
, 
≠
)

	)

54 #i‡
__USE_FORTIFY_LEVEL
 > 1

56 
	`__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

57 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

58 
	`__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

59 
	`__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

60 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

61 
	`__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

62 
_G_va_li°
 
__≠
);

64 #i‡
	`__GNUC_PREREQ
 (4, 0)

65 
	#¥ötf
(...) \

66 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

67 
	#Ârötf
(
°ªam
, ...) \

68 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

69 
	#v¥ötf
(
f‹m©
, 
≠
) \

70 
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

71 
	#vÂrötf
(
°ªam
, 
f‹m©
, 
≠
) \

72 
	`__vÂrötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

74 
	#¥ötf
(...) \

75 
	`__buûtö___¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

76 
	#Ârötf
(
°ªam
, ...) \

77 
	`__buûtö___Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

78 
	#v¥ötf
(
f‹m©
, 
≠
) \

79 
	`__buûtö___v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

80 
	#vÂrötf
(
°ªam
, 
f‹m©
, 
≠
) \

81 
	`__buûtö___vÂrötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

86 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

87 *
	`__REDIRECT
 (
__gës_Æüs
, (*
__°r
), 
gës
Ë
__wur
;

89 
__Æways_ölöe
 
__wur
 *

90 
	$gës
 (*
__°r
)

92 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

93  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

94  
	`__gës_Æüs
 (
__°r
);

95 
	}
}

97 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

98 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

99 *
	`__REDIRECT
 (
__fgës_Æüs
,

100 (*
__ª°ri˘
 
__s
, 
__n
,

101 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

103 
__Æways_ölöe
 
__wur
 *

104 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

106 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1

107 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| (
size_t
Ë__¿> 
	`__bos
 (
__s
)))

108  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

109  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

110 
	}
}

112 #ifde‡
__USE_GNU


113 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

114 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

115 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

116 (*
__ª°ri˘
 
__s
, 
__n
,

117 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

119 
__Æways_ölöe
 
__wur
 *

120 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

122 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1

123 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| (
size_t
Ë__¿> 
	`__bos
 (
__s
)))

124  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

125  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

126 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 
	#L_cu£rid
 9

	)

34 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


35 #unde‡
FOPEN_MAX


36 
	#FOPEN_MAX
 16

	)

39 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


40 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 
	$__LDBL_REDIR1_DECL
 (
__°πﬁd_öã∫Æ
, 
__°πod_öã∫Æ
)

36 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


37 #ifde‡
__USE_MISC


38 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

40 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

41 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

42 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

31 
__Æways_ölöe
 
__wur
 *

32 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

34 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

35  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

37  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

38 
	}
}

41 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

42 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

43 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

44 
size_t
 
__buÊí
), 
±¢ame_r
)

45 
	`__n⁄nuŒ
 ((2));

47 
__Æways_ölöe
 

48 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

50 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1

51 && (!
	`__buûtö_c⁄°™t_p
 (
__buÊí
Ë|| __buÊí > 
	`__bos
 (
__buf
)))

52  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

53  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

54 
	}
}

57 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

58 
__THROW
 
__wur
;

59 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

60 
w˘omb
Ë
__wur
;

62 
__Æways_ölöe
 
__wur
 

63 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

68 
	#__STDLIB_MB_LEN_MAX
 16

	)

69 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


72 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

73  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

74  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

75 
	}
}

78 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

79 
__c⁄°
 *
__ª°ri˘
 
__§c
,

80 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

81 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

82 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

83 
__c⁄°
 *
__ª°ri˘
 
__§c
,

84 
size_t
 
__Àn
), 
mb°owcs
);

86 
__Æways_ölöe
 
size_t


87 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

88 
size_t
 
__Àn
))

90 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

91 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
)

92 || 
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
)))

93  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

94 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

95  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

96 
	}
}

99 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

100 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

103 (*
__ª°ri˘
 
__d°
,

104 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
wc°ombs
);

107 
__Æways_ölöe
 
size_t


108 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

109 
size_t
 
__Àn
))

111 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

112 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
Ë|| __À¿> 
	`__bos
 (
__d°
)))

113  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

114  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

115 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 ? (((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)) \

1170 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1173 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1174 
__STRING_INLINE
 *

1175 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1177 *
__ªsu…
;

1178 i‡(
__s
 =
NULL
)

1179 
__s
 = *
__√xç
;

1180 *
__s
 =
__£p
)

1181 ++
__s
;

1182 
__ªsu…
 = 
NULL
;

1183 i‡(*
__s
 != '\0')

1185 
__ªsu…
 = 
__s
++;

1186 *
__s
 != '\0')

1187 i‡(*
__s
++ =
__£p
)

1189 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1194  
__ªsu…
;

1195 
	}
}

1196 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1197 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1202 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1203 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1205 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1206 
	#__°r£p
(
s
, 
ªje˘
) \

1207 
__exãnsi⁄__
 \

1208 ({ 
__r0
, 
__r1
, 
__r2
; \

1209 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1210 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1211 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1212 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1213 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1214 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1215 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1216 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1217 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1218 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1220 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1223 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1224 
__STRING_INLINE
 *

1225 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1227 *
__ªtvÆ
 = *
__s
;

1228 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1229 *(*
__s
)++ = '\0';

1230  
__ªtvÆ
;

1231 
	}
}

1233 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1234 
__STRING_INLINE
 *

1235 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1237 *
__ªtvÆ
 = *
__s
;

1238 i‡(
__ªtvÆ
 !
NULL
)

1240 *
__˝
 = 
__ªtvÆ
;

1243 i‡(*
__˝
 == '\0')

1245 
__˝
 = 
NULL
;

1248 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1250 *
__˝
++ = '\0';

1253 ++
__˝
;

1255 *
__s
 = 
__˝
;

1257  
__ªtvÆ
;

1258 
	}
}

1260 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1261 
__ªje˘3
);

1262 
__STRING_INLINE
 *

1263 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1265 *
__ªtvÆ
 = *
__s
;

1266 i‡(
__ªtvÆ
 !
NULL
)

1268 *
__˝
 = 
__ªtvÆ
;

1271 i‡(*
__˝
 == '\0')

1273 
__˝
 = 
NULL
;

1276 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1278 *
__˝
++ = '\0';

1281 ++
__˝
;

1283 *
__s
 = 
__˝
;

1285  
__ªtvÆ
;

1286 
	}
}

1287 #ifde‡
__USE_BSD


1288 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1295 #ifde‡
__USE_MISC


1297 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1298 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1299 
	~<°dlib.h
>

1302 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1304 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1305 
	#__°rdup
(
s
) \

1306 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1307 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1308 ? (*Ë
	`ˇŒoc
 (1, 1) \

1309 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1310 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1311 i‡(
__ªtvÆ
 !
NULL
) \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1313 
__ªtvÆ
; 
	}
})) \

1314 : 
	`__°rdup
 (
s
)))

	)

1316 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1317 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1321 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1323 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1324 
__THROW
 
__©åibuã_mÆloc__
;

1325 
	#__°∫dup
(
s
, 
n
) \

1326 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1327 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1328 ? (*Ë
	`ˇŒoc
 (1, 1) \

1329 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1330 
size_t
 
__n
 = (
n
); \

1331 *
__ªtvÆ
; \

1332 i‡(
__n
 < 
__Àn
) \

1333 
__Àn
 = 
__n
 + 1; \

1334 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1335 i‡(
__ªtvÆ
 !
NULL
) \

1337 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1338 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1339 
__Àn
 - 1); \

1341 
__ªtvÆ
; 
	}
})) \

1342 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1344 #ifde‡
__USE_GNU


1345 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1351 #i‚de‡
_FORCE_INLINES


1352 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


26 #unde‡
mem˝y


27 #unde‡
memmove


28 #unde‡
mem£t


29 #unde‡
°rˇt


30 #unde‡
°r˝y


31 #unde‡
°∫ˇt


32 #unde‡
°∫˝y


33 #ifde‡
__USE_GNU


34 #unde‡
memp˝y


35 #unde‡
°p˝y


37 #ifde‡
__USE_BSD


38 #unde‡
bc›y


39 #unde‡
bzîo


43 
	#mem˝y
(
de°
, 
§c
, 
Àn
) \

44 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

45 ? 
	`__buûtö___mem˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

46 : 
	`__mem˝y_ichk
 (
de°
, 
§c
, 
Àn
))

	)

47 
__Æways_ölöe
 *

48 
__NTH
 (
	$__mem˝y_ichk
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

55 
	#memmove
(
de°
, 
§c
, 
Àn
) \

56 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

57 ? 
	`__buûtö___memmove_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

58 : 
	`__memmove_ichk
 (
de°
, 
§c
, 
Àn
))

	)

59 
__Æways_ölöe
 *

60 
__NTH
 (
	$__memmove_ichk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

62  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

63 
	}
}

66 #ifde‡
__USE_GNU


67 
	#memp˝y
(
de°
, 
§c
, 
Àn
) \

68 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

69 ? 
	`__buûtö___memp˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

70 : 
	`__memp˝y_ichk
 (
de°
, 
§c
, 
Àn
))

	)

71 
__Æways_ölöe
 *

72 
__NTH
 (
	$__memp˝y_ichk
 (*
__ª°ri˘
 
__de°
,

73 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
))

75  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

76 
	}
}

85 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

87 
	#mem£t
(
de°
, 
ch
, 
Àn
) \

88 (
	`__buûtö_c⁄°™t_p
 (
Àn
) && (len) == 0 \

89 ? (
	`__w¨n_mem£t_zîo_Àn
 (), (Ë(
ch
), (Ë(
Àn
), (*Ë(
de°
)) \

90 : ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

91 ? 
	`__buûtö___mem£t_chk
 (
de°
, 
ch
, 
Àn
, 
	`__bos0
 (dest)) \

92 : 
	`__mem£t_ichk
 (
de°
, 
ch
, 
Àn
)))

	)

93 
__Æways_ölöe
 *

94 
__NTH
 (
	$__mem£t_ichk
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

96  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

97 
	}
}

99 #ifde‡
__USE_BSD


100 
	#bc›y
(
§c
, 
de°
, 
Àn
) (() \

101 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

102 ? 
	`__buûtö___memmove_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

103 : 
	`__memmove_ichk
 (
de°
, 
§c
, 
Àn
)))

	)

104 
	#bzîo
(
de°
, 
Àn
) (() \

105 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

106 ? 
	`__buûtö___mem£t_chk
 (
de°
, '\0', 
Àn
, 
	`__bos0
 (dest)) \

107 : 
	`__mem£t_ichk
 (
de°
, '\0', 
Àn
)))

	)

111 
	#°r˝y
(
de°
, 
§c
) \

112 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

113 ? 
	`__buûtö___°r˝y_chk
 (
de°
, 
§c
, 
	`__bos
 (dest)) \

114 : 
	`__°r˝y_ichk
 (
de°
, 
§c
))

	)

115 
__Æways_ölöe
 *

116 
__NTH
 (
	$__°r˝y_ichk
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

118  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

119 
	}
}

122 #ifde‡
__USE_GNU


123 
	#°p˝y
(
de°
, 
§c
) \

124 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

125 ? 
	`__buûtö___°p˝y_chk
 (
de°
, 
§c
, 
	`__bos
 (dest)) \

126 : 
	`__°p˝y_ichk
 (
de°
, 
§c
))

	)

127 
__Æways_ölöe
 *

128 
__NTH
 (
	$__°p˝y_ichk
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

130  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

131 
	}
}

135 
	#°∫˝y
(
de°
, 
§c
, 
Àn
) \

136 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

137 ? 
	`__buûtö___°∫˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos
 (dest)) \

138 : 
	`__°∫˝y_ichk
 (
de°
, 
§c
, 
Àn
))

	)

139 
__Æways_ölöe
 *

140 
__NTH
 (
	$__°∫˝y_ichk
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

141 
size_t
 
__Àn
))

143  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

144 
	}
}

148 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

149 
size_t
 
__de°Àn
Ë
__THROW
;

150 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

151 
__c⁄°
 *
__§c
,

152 
size_t
 
__n
), 
°≤˝y
);

154 
__Æways_ölöe
 *

155 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

158 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

159  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

160  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

161 
	}
}

164 
	#°rˇt
(
de°
, 
§c
) \

165 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

166 ? 
	`__buûtö___°rˇt_chk
 (
de°
, 
§c
, 
	`__bos
 (dest)) \

167 : 
	`__°rˇt_ichk
 (
de°
, 
§c
))

	)

168 
__Æways_ölöe
 *

169 
__NTH
 (
	$__°rˇt_ichk
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

171  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

172 
	}
}

175 
	#°∫ˇt
(
de°
, 
§c
, 
Àn
) \

176 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

177 ? 
	`__buûtö___°∫ˇt_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos
 (dest)) \

178 : 
	`__°∫ˇt_ichk
 (
de°
, 
§c
, 
Àn
))

	)

179 
__Æways_ölöe
 *

180 
__NTH
 (
	$__°∫ˇt_ichk
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

181 
size_t
 
__Àn
))

183  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

184 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

30 
	#__√ed_size_t


	)

31 
	~<°ddef.h
>

34 
	t__u_ch¨
;

35 
	t__u_sh‹t
;

36 
	t__u_öt
;

37 
	t__u_l⁄g
;

40 sig√d 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 sig√d 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 sig√d 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 #i‡
__WORDSIZE
 == 64

47 sig√d 
	t__öt64_t
;

48 
	t__uöt64_t
;

49 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


50 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

51 
__exãnsi⁄__
 
	t__uöt64_t
;

55 #i‡
__WORDSIZE
 == 64

56 
	t__quad_t
;

57 
	t__u_quad_t
;

58 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


59 
__exãnsi⁄__
 
	t__quad_t
;

60 
__exãnsi⁄__
 
	t__u_quad_t
;

64 
	m__vÆ
[2];

65 } 
	t__quad_t
;

68 
__u_l⁄g
 
	m__vÆ
[2];

69 } 
	t__u_quad_t
;

102 
	#__S16_TYPE
 

	)

103 
	#__U16_TYPE
 

	)

104 
	#__S32_TYPE
 

	)

105 
	#__U32_TYPE
 

	)

106 
	#__SLONGWORD_TYPE
 

	)

107 
	#__ULONGWORD_TYPE
 

	)

108 #i‡
__WORDSIZE
 == 32

109 
	#__SQUAD_TYPE
 
__quad_t


	)

110 
	#__UQUAD_TYPE
 
__u_quad_t


	)

111 
	#__SWORD_TYPE
 

	)

112 
	#__UWORD_TYPE
 

	)

113 
	#__SLONG32_TYPE
 

	)

114 
	#__ULONG32_TYPE
 

	)

115 
	#__S64_TYPE
 
__quad_t


	)

116 
	#__U64_TYPE
 
__u_quad_t


	)

119 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

120 #ñi‡
__WORDSIZE
 == 64

121 
	t__SQUAD_TYPE
 

	)

122 
	t__UQUAD_TYPE
 

	)

123 
	t__SWORD_TYPE
 

	)

124 
	t__UWORD_TYPE
 

	)

125 
	t__SLONG32_TYPE
 

	)

126 
	t__ULONG32_TYPE
 

	)

127 
	t__S64_TYPE
 

	)

128 
	t__U64_TYPE
 

	)

130 
	t__STD_TYPE
 

	)

134 
	~<bôs/ty≥sizes.h
>

137 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

138 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

139 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

140 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

141 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

142 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

143 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

144 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

145 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

146 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

147 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

148 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

149 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

150 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

151 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

152 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

153 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

154 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

156 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

157 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

158 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

161 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

164 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

167 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

172 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

173 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

176 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

177 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

180 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

181 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

183 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

187 
__off64_t
 
	t__loff_t
;

188 
__quad_t
 *
	t__qaddr_t
;

189 *
	t__ˇddr_t
;

192 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

195 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

198 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

29 
__Æways_ölöe
 
__wur
 
ssize_t


30 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

32 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1

33 && (!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
Ë|| __nbyã†> 
	`__bos0
 (
__buf
)))

34  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

35  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

36 
	}
}

38 #ifde‡
__USE_UNIX98


39 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

40 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

41 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

42 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

43 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

44 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

45 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

46 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

47 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

48 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
__Æways_ölöe
 
__wur
 
ssize_t


52 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

54 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1

55 && (!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
Ë|| __nbyã†> 
	`__bos0
 (
__buf
)))

56  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

57  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

58 
	}
}

60 
__Æways_ölöe
 
__wur
 
ssize_t


61 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

63 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1

64 && (!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
Ë|| __nbyã†> 
	`__bos0
 (
__buf
)))

65  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

66  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

67 
	}
}

70 #ifde‡
__USE_LARGEFILE64


71 
__Æways_ölöe
 
__wur
 
ssize_t


72 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1

75 && (!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
Ë|| __nbyã†> 
	`__bos0
 (
__buf
)))

76  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

77  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

78 
	}
}

82 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


83 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

84 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

85 
size_t
 
__buÊí
)

86 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

87 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

88 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

89 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

90 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

92 
__Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


93 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

94 
size_t
 
__Àn
))

96 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1

97 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
Ë|| __À¿> 
	`__bos
 (
__buf
)))

98  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

99  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

100 
	}
}

103 #ifde‡
__USE_ATFILE


104 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

105 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

106 
size_t
 
__buÊí
)

107 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

108 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

109 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

110 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

111 
ªadlök©
)

112 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

114 
__Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


115 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

116 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

118 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1

119 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
Ë|| __À¿> 
	`__bos
 (
__buf
)))

120  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

121  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

122 
	}
}

125 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

126 
__THROW
 
__wur
;

127 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

128 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

130 
__Æways_ölöe
 
__wur
 *

131 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

133 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1

134 && (!
	`__buûtö_c⁄°™t_p
 (
__size
Ë|| __sizê> 
	`__bos
 (
__buf
)))

135  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

136  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

137 
	}
}

139 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


140 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

141 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

142 *
	`__REDIRECT_NTH
 (
__gëwd_Æüs
, (*
__buf
), 
gëwd
)

143 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

145 
__Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

146 
	`__NTH
 (
	$gëwd
 (*
__buf
))

148 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

149  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

150  
	`__gëwd_Æüs
 (
__buf
);

151 
	}
}

154 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

155 
size_t
 
__buÊí
Ë
__THROW
;

156 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

157 
size_t
 
__Àn
), 
c⁄f°r
);

159 
__Æways_ölöe
 
size_t


160 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

162 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1

163 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
Ë|| 
	`__bos
 (
__buf
) < __len))

164  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

165  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

166 
	}
}

169 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
li°Àn
)

170 
__THROW
 
__wur
;

171 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

172 
gëgroups
Ë
__wur
;

174 
__Æways_ölöe
 

175 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

177 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1

178 && (!
	`__buûtö_c⁄°™t_p
 (
__size
)

179 || 
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
)))

180  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

181  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

182 
	}
}

185 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

186 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

187 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

188 
size_t
 
__buÊí
), 
ây«me_r
)

189 
	`__n⁄nuŒ
 ((2));

191 
__Æways_ölöe
 

192 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

194 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1

195 && (!
	`__buûtö_c⁄°™t_p
 (
__buÊí
Ë|| __buÊí > 
	`__bos
 (
__buf
)))

196  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

197  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

198 
	}
}

201 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


202 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

203 
	`__n⁄nuŒ
 ((1));

204 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

205 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

207 
__Æways_ölöe
 

208 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

210 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1

211 && (!
	`__buûtö_c⁄°™t_p
 (
__buÊí
Ë|| __buÊí > 
	`__bos
 (
__buf
)))

212  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

213  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

214 
	}
}

218 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


219 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

220 
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

222 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

224 
__Æways_ölöe
 

225 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

227 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1

228 && (!
	`__buûtö_c⁄°™t_p
 (
__buÊí
Ë|| __buÊí > 
	`__bos
 (
__buf
)))

229  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

230  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

231 
	}
}

235 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

236 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

237 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

238 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

239 
size_t
 
__buÊí
),

240 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

242 
__Æways_ölöe
 

243 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

245 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1

246 && (!
	`__buûtö_c⁄°™t_p
 (
__buÊí
Ë|| __buÊí > 
	`__bos
 (
__buf
)))

247  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

248  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

249 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

93 #unde‡
__USE_ISOC99


94 #unde‡
__USE_POSIX


95 #unde‡
__USE_POSIX2


96 #unde‡
__USE_POSIX199309


97 #unde‡
__USE_POSIX199506


98 #unde‡
__USE_XOPEN


99 #unde‡
__USE_XOPEN_EXTENDED


100 #unde‡
__USE_UNIX98


101 #unde‡
__USE_XOPEN2K


102 #unde‡
__USE_LARGEFILE


103 #unde‡
__USE_LARGEFILE64


104 #unde‡
__USE_FILE_OFFSET64


105 #unde‡
__USE_BSD


106 #unde‡
__USE_SVID


107 #unde‡
__USE_MISC


108 #unde‡
__USE_ATFILE


109 #unde‡
__USE_GNU


110 #unde‡
__USE_REENTRANT


111 #unde‡
__USE_FORTIFY_LEVEL


112 #unde‡
__FAVOR_BSD


113 #unde‡
__KERNEL_STRICT_NAMES


117 #i‚de‡
_LOOSE_KERNEL_NAMES


118 
	#__KERNEL_STRICT_NAMES


	)

122 
	#__USE_ANSI
 1

	)

131 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


132 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

133 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

135 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

140 #i‡
deföed
 
_BSD_SOURCE
 && \

141 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

142 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

143 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

144 
	#__FAVOR_BSD
 1

	)

148 #ifde‡
_GNU_SOURCE


149 #unde‡
_ISOC99_SOURCE


150 
	#_ISOC99_SOURCE
 1

	)

151 #unde‡
_POSIX_SOURCE


152 
	#_POSIX_SOURCE
 1

	)

153 #unde‡
_POSIX_C_SOURCE


154 
	#_POSIX_C_SOURCE
 200112L

	)

155 #unde‡
_XOPEN_SOURCE


156 
	#_XOPEN_SOURCE
 600

	)

157 #unde‡
_XOPEN_SOURCE_EXTENDED


158 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

159 #unde‡
_LARGEFILE64_SOURCE


160 
	#_LARGEFILE64_SOURCE
 1

	)

161 #unde‡
_BSD_SOURCE


162 
	#_BSD_SOURCE
 1

	)

163 #unde‡
_SVID_SOURCE


164 
	#_SVID_SOURCE
 1

	)

165 #unde‡
_ATFILE_SOURCE


166 
	#_ATFILE_SOURCE
 1

	)

171 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

172 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

173 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

174 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

175 
	#_BSD_SOURCE
 1

	)

176 
	#_SVID_SOURCE
 1

	)

183 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

184 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

185 
	#__USE_ISOC99
 1

	)

190 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

191 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

192 
	#_POSIX_SOURCE
 1

	)

193 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

194 
	#_POSIX_C_SOURCE
 2

	)

195 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

196 
	#_POSIX_C_SOURCE
 199506L

	)

198 
	#_POSIX_C_SOURCE
 200112L

	)

202 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


203 
	#__USE_POSIX
 1

	)

206 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


207 
	#__USE_POSIX2
 1

	)

210 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

211 
	#__USE_POSIX199309
 1

	)

214 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

215 
	#__USE_POSIX199506
 1

	)

218 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

219 
	#__USE_XOPEN2K
 1

	)

222 #ifdef 
_XOPEN_SOURCE


223 
	#__USE_XOPEN
 1

	)

224 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

225 
	#__USE_XOPEN_EXTENDED
 1

	)

226 
	#__USE_UNIX98
 1

	)

227 #unde‡
_LARGEFILE_SOURCE


228 
	#_LARGEFILE_SOURCE
 1

	)

229 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

230 
	#__USE_XOPEN2K
 1

	)

231 #unde‡
__USE_ISOC99


232 
	#__USE_ISOC99
 1

	)

235 #ifde‡
_XOPEN_SOURCE_EXTENDED


236 
	#__USE_XOPEN_EXTENDED
 1

	)

241 #ifde‡
_LARGEFILE_SOURCE


242 
	#__USE_LARGEFILE
 1

	)

245 #ifde‡
_LARGEFILE64_SOURCE


246 
	#__USE_LARGEFILE64
 1

	)

249 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

250 
	#__USE_FILE_OFFSET64
 1

	)

253 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


254 
	#__USE_MISC
 1

	)

257 #ifdef 
_BSD_SOURCE


258 
	#__USE_BSD
 1

	)

261 #ifdef 
_SVID_SOURCE


262 
	#__USE_SVID
 1

	)

265 #ifdef 
_ATFILE_SOURCE


266 
	#__USE_ATFILE
 1

	)

269 #ifdef 
_GNU_SOURCE


270 
	#__USE_GNU
 1

	)

273 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


274 
	#__USE_REENTRANT
 1

	)

277 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

278 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0 \

279 && (
__GNUC_PREREQ
 (4, 1) \

280 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (4, 0)) \

281 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (3, 4) \

282 && 
	g__GNUC_MINOR__
 == 4 \

283 && (
__GNUC_PATCHLEVEL__
 > 2 \

284 || (
__GNUC_PATCHLEVEL__
 =2 && 
__GNUC_RH_RELEASE__
 >= 8))))

285 #i‡
_FORTIFY_SOURCE
 > 1

286 
	#__USE_FORTIFY_LEVEL
 2

	)

288 
	#__USE_FORTIFY_LEVEL
 1

	)

291 
	#__USE_FORTIFY_LEVEL
 0

	)

295 
	#__STDC_IEC_559__
 1

	)

296 
	#__STDC_IEC_559_COMPLEX__
 1

	)

299 
	#__STDC_ISO_10646__
 200009L

	)

307 #unde‡
__GNU_LIBRARY__


308 
	#__GNU_LIBRARY__
 6

	)

312 
	#__GLIBC__
 2

	)

313 
	#__GLIBC_MINOR__
 5

	)

315 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

316 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

319 #i‡
deföed
 
__GNUC__
 \

320 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

321 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

322 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

323 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

327 #i‚de‡
__ASSEMBLER__


328 #i‚de‡
_SYS_CDEFS_H


329 
	~<sys/cdefs.h
>

334 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


335 
	#__USE_LARGEFILE
 1

	)

336 
	#__USE_LARGEFILE64
 1

	)

342 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

343 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__


344 
	#__USE_EXTERN_INLINES
 1

	)

352 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 
gë›t
 ();

158 #i‚de‡
__√ed_gë›t


159 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
,

161 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

162 
__THROW
;

163 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
,

165 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

166 
__THROW
;

170 #ifdef 
__˝lu•lus


175 #unde‡
__√ed_gë›t


	@/usr/include/lber_types.h

21 #i‚de‡
_LBER_TYPES_H


22 
	#_LBER_TYPES_H


	)

24 
	~<ld≠_cdefs.h
>

26 
	gLDAP_BEGIN_DECL


29 
	#LBER_INT_T
 

	)

32 
	#LBER_TAG_T
 

	)

35 
	#LBER_SOCKET_T
 

	)

38 
	#LBER_LEN_T
 

	)

43 
LBER_INT_T
 
	tbî_öt_t
;

46 sig√d 
	tLBER_INT_T
 
	tbî_söt_t
;

47 
	tLBER_INT_T
 
	tbî_uöt_t
;

50 
	tLBER_TAG_T
 
	tbî_èg_t
;

53 
LBER_SOCKET_T
 
	tbî_sockë_t
;

56 
	tLBER_LEN_T
 
	tbî_Àn_t
;

59 sig√d 
	tLBER_LEN_T
 
	tbî_¶í_t
;

61 
	gLDAP_END_DECL


	@/usr/include/ldap_features.h

21 #i‚de‡
_LDAP_FEATURES_H


22 
	#_LDAP_FEATURES_H
 1

	)

25 
	#LDAP_VENDOR_VERSION
 20343

	)

26 
	#LDAP_VENDOR_VERSION_MAJOR
 2

	)

27 
	#LDAP_VENDOR_VERSION_MINOR
 3

	)

28 
	#LDAP_VENDOR_VERSION_PATCH
 43

	)

56 
	#LDAP_API_FEATURE_X_OPENLDAP_THREAD_SAFE
 1

	)

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

148 
	#_IO_SKIPWS
 01

	)

149 
	#_IO_LEFT
 02

	)

150 
	#_IO_RIGHT
 04

	)

151 
	#_IO_INTERNAL
 010

	)

152 
	#_IO_DEC
 020

	)

153 
	#_IO_OCT
 040

	)

154 
	#_IO_HEX
 0100

	)

155 
	#_IO_SHOWBASE
 0200

	)

156 
	#_IO_SHOWPOINT
 0400

	)

157 
	#_IO_UPPERCASE
 01000

	)

158 
	#_IO_SHOWPOS
 02000

	)

159 
	#_IO_SCIENTIFIC
 04000

	)

160 
	#_IO_FIXED
 010000

	)

161 
	#_IO_UNITBUF
 020000

	)

162 
	#_IO_STDIO
 040000

	)

163 
	#_IO_DONT_CLOSE
 0100000

	)

164 
	#_IO_BOOLALPHA
 0200000

	)

167 
_IO_jump_t
; 
	g_IO_FILE
;

170 #ifde‡
_IO_MTSAFE_IO


171 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

172 
	~<bôs/°dio-lock.h
>

177 
	t_IO_lock_t
;

183 
	s_IO_m¨kî
 {

184 
_IO_m¨kî
 *
	m_√xt
;

185 
_IO_FILE
 *
	m_sbuf
;

189 
	m_pos
;

191 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

192 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

193 
	mpublic
:

194 
°ªamm¨kî
(
°ªambuf
 *
sb
);

195 ~
°ªamm¨kî
();

196 
ßvög
(Ë{  
	m_•os
 == -2; }

197 
dñè
(
°ªamm¨kî
&);

198 
dñè
();

203 
	e__codecvt_ªsu…


205 
	m__codecvt_ok
,

206 
	m__codecvt_∑πül
,

207 
	m__codecvt_îr‹
,

208 
	m__codecvt_noc⁄v


211 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


214 
	s_IO_codecvt


216 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

217 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

218 
	m__mb°©e_t
 *,

219 c⁄° 
	mwch¨_t
 *,

220 c⁄° 
	mwch¨_t
 *,

221 c⁄° 
	mwch¨_t
 **, *,

223 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

224 
	m__mb°©e_t
 *, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *,

229 c⁄° **, 
	mwch¨_t
 *,

230 
	mwch¨_t
 *, wchar_t **);

231 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

232 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

233 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

234 c⁄° *, c⁄° *, 
	m_IO_size_t
);

235 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

237 
_IO_ic⁄v_t
 
	m__cd_ö
;

238 
_IO_ic⁄v_t
 
	m__cd_out
;

242 
	s_IO_wide_d©a


244 
wch¨_t
 *
	m_IO_ªad_±r
;

245 
wch¨_t
 *
	m_IO_ªad_íd
;

246 
wch¨_t
 *
	m_IO_ªad_ba£
;

247 
wch¨_t
 *
	m_IO_wrôe_ba£
;

248 
wch¨_t
 *
	m_IO_wrôe_±r
;

249 
wch¨_t
 *
	m_IO_wrôe_íd
;

250 
wch¨_t
 *
	m_IO_buf_ba£
;

251 
wch¨_t
 *
	m_IO_buf_íd
;

253 
wch¨_t
 *
	m_IO_ßve_ba£
;

254 
wch¨_t
 *
	m_IO_backup_ba£
;

256 
wch¨_t
 *
	m_IO_ßve_íd
;

258 
__mb°©e_t
 
	m_IO_°©e
;

259 
__mb°©e_t
 
	m_IO_œ°_°©e
;

260 
_IO_codecvt
 
	m_codecvt
;

262 
wch¨_t
 
	m_sh‹tbuf
[1];

264 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

268 
	s_IO_FILE
 {

269 
	m_Êags
;

270 
	#_IO_fûe_Êags
 
_Êags


	)

274 * 
	m_IO_ªad_±r
;

275 * 
	m_IO_ªad_íd
;

276 * 
	m_IO_ªad_ba£
;

277 * 
	m_IO_wrôe_ba£
;

278 * 
	m_IO_wrôe_±r
;

279 * 
	m_IO_wrôe_íd
;

280 * 
	m_IO_buf_ba£
;

281 * 
	m_IO_buf_íd
;

283 *
	m_IO_ßve_ba£
;

284 *
	m_IO_backup_ba£
;

285 *
	m_IO_ßve_íd
;

287 
_IO_m¨kî
 *
	m_m¨kîs
;

289 
_IO_FILE
 *
	m_chaö
;

291 
	m_fûío
;

293 
	m_blksize
;

295 
	m_Êags2
;

297 
_IO_off_t
 
	m_ﬁd_off£t
;

299 
	#__HAVE_COLUMN


	)

301 
	m_cur_cﬁumn
;

302 sig√d 
	m_vèbÀ_off£t
;

303 
	m_sh‹tbuf
[1];

307 
_IO_lock_t
 *
	m_lock
;

308 #ifde‡
_IO_USE_OLD_IO_FILE


311 
	s_IO_FILE_com∂ëe


313 
_IO_FILE
 
	m_fûe
;

315 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

316 
_IO_off64_t
 
	m_off£t
;

317 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


319 
_IO_codecvt
 *
	m_codecvt
;

320 
_IO_wide_d©a
 *
	m_wide_d©a
;

321 
_IO_FILE
 *
	m_‰ìªs_li°
;

322 *
	m_‰ìªs_buf
;

323 
size_t
 
	m_‰ìªs_size
;

325 *
	m__∑d1
;

326 *
	m__∑d2
;

327 *
	m__∑d3
;

328 *
	m__∑d4
;

329 
size_t
 
	m__∑d5
;

331 
	m_mode
;

333 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

337 #i‚de‡
__˝lu•lus


338 
_IO_FILE
 
	t_IO_FILE
;

341 
	g_IO_FILE_∂us
;

343 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

344 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

345 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

346 #i‚de‡
_LIBC


347 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

348 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

349 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

351 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

352 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

353 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

361 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

369 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

370 
	tsize_t
 
	t__n
);

378 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

381 
	t__io_˛o£_‚
 (*
	t__cookõ
);

384 #ifde‡
_GNU_SOURCE


386 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

387 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

388 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

389 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

394 
__io_ªad_‚
 *
	mªad
;

395 
__io_wrôe_‚
 *
	mwrôe
;

396 
__io_£ek_‚
 *
	m£ek
;

397 
__io_˛o£_‚
 *
	m˛o£
;

398 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

399 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

401 
	g_IO_cookõ_fûe
;

404 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

405 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

409 #ifde‡
__˝lu•lus


413 
__undîÊow
 (
_IO_FILE
 *);

414 
__uÊow
 (
_IO_FILE
 *);

415 
__ovîÊow
 (
_IO_FILE
 *, );

416 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

417 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

418 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

420 #i‡ 
__GNUC__
 >= 3

421 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

423 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

426 
	#_IO_gëc_u∆ocked
(
_Â
) \

427 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

428 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

429 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

430 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

431 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

432 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

433 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

435 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

436 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

438 
	#_IO_gëwc_u∆ocked
(
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
,\

441 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

442 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

443 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

444 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
, 0) \

445 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

446 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

448 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

449 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

451 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

452 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

453 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

454 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

456 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

459 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

460 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

462 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

463 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

464 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

466 #ifde‡
_IO_MTSAFE_IO


467 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

468 
	#_IO_Êockfûe
(
_Â
) \

469 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

470 
	#_IO_fu∆ockfûe
(
_Â
) \

471 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

473 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

474 
	#_IO_Êockfûe
(
_Â
Ë

	)

475 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

476 
	#_IO_·rylockfûe
(
_Â
Ë

	)

477 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

478 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

481 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

482 
_IO_va_li°
, *
__ª°ri˘
);

483 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

484 
_IO_va_li°
);

485 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

486 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

488 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

489 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

491 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

493 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


494 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

495 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

496 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

497 #i‡
__GNUC__
 >= 2

500 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


501 
	~<shlib-com∑t.h
>

502 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

503 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

504 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

505 c⁄° 
_IO_°dö_u£d
;

506 
wók_exã∫
 (
_IO_°dö_u£d
);

509 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


510 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

514 
	#_IO_fwide
(
__Â
, 
__mode
) \

515 ({ 
__ªsu…
 = (
__mode
); \

516 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

518 i‡((
__Â
)->
_mode
 == 0) \

520 (
__Â
)->
_mode
 = -1; \

521 
__ªsu…
 = (
__Â
)->
_mode
; \

523 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

524 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

526 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

527 
__ªsu…
; })

	)

530 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

531 
_IO_va_li°
, *
__ª°ri˘
);

532 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

533 
_IO_va_li°
);

534 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

535 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

538 #ifde‡
__LDBL_COMPAT


539 
	~<bôs/libio-ldbl.h
>

542 #ifde‡
__˝lu•lus


	@/usr/include/netinet/in.h

19 #i‚def 
_NETINET_IN_H


20 
	#_NETINET_IN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°döt.h
>

24 
	~<sys/sockë.h
>

25 
	~<bôs/ty≥s.h
>

28 
__BEGIN_DECLS


33 
	mIPPROTO_IP
 = 0,

34 
	#IPPROTO_IP
 
IPPROTO_IP


	)

35 
	mIPPROTO_HOPOPTS
 = 0,

36 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

37 
	mIPPROTO_ICMP
 = 1,

38 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

39 
	mIPPROTO_IGMP
 = 2,

40 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

41 
	mIPPROTO_IPIP
 = 4,

42 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

43 
	mIPPROTO_TCP
 = 6,

44 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

45 
	mIPPROTO_EGP
 = 8,

46 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

47 
	mIPPROTO_PUP
 = 12,

48 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

49 
	mIPPROTO_UDP
 = 17,

50 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

51 
	mIPPROTO_IDP
 = 22,

52 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

53 
	mIPPROTO_TP
 = 29,

54 
	#IPPROTO_TP
 
IPPROTO_TP


	)

55 
	mIPPROTO_IPV6
 = 41,

56 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

57 
	mIPPROTO_ROUTING
 = 43,

58 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

59 
	mIPPROTO_FRAGMENT
 = 44,

60 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

61 
	mIPPROTO_RSVP
 = 46,

62 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

63 
	mIPPROTO_GRE
 = 47,

64 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

65 
	mIPPROTO_ESP
 = 50,

66 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

67 
	mIPPROTO_AH
 = 51,

68 
	#IPPROTO_AH
 
IPPROTO_AH


	)

69 
	mIPPROTO_ICMPV6
 = 58,

70 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

71 
	mIPPROTO_NONE
 = 59,

72 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

73 
	mIPPROTO_DSTOPTS
 = 60,

74 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

75 
	mIPPROTO_MTP
 = 92,

76 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

77 
	mIPPROTO_ENCAP
 = 98,

78 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

79 
	mIPPROTO_PIM
 = 103,

80 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

81 
	mIPPROTO_COMP
 = 108,

82 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

83 
	mIPPROTO_SCTP
 = 132,

84 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

85 
	mIPPROTO_RAW
 = 255,

86 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

87 
	mIPPROTO_MAX


92 
uöt16_t
 
	tö_p‹t_t
;

97 
	mIPPORT_ECHO
 = 7,

98 
	mIPPORT_DISCARD
 = 9,

99 
	mIPPORT_SYSTAT
 = 11,

100 
	mIPPORT_DAYTIME
 = 13,

101 
	mIPPORT_NETSTAT
 = 15,

102 
	mIPPORT_FTP
 = 21,

103 
	mIPPORT_TELNET
 = 23,

104 
	mIPPORT_SMTP
 = 25,

105 
	mIPPORT_TIMESERVER
 = 37,

106 
	mIPPORT_NAMESERVER
 = 42,

107 
	mIPPORT_WHOIS
 = 43,

108 
	mIPPORT_MTP
 = 57,

110 
	mIPPORT_TFTP
 = 69,

111 
	mIPPORT_RJE
 = 77,

112 
	mIPPORT_FINGER
 = 79,

113 
	mIPPORT_TTYLINK
 = 87,

114 
	mIPPORT_SUPDUP
 = 95,

117 
	mIPPORT_EXECSERVER
 = 512,

118 
	mIPPORT_LOGINSERVER
 = 513,

119 
	mIPPORT_CMDSERVER
 = 514,

120 
	mIPPORT_EFSSERVER
 = 520,

123 
	mIPPORT_BIFFUDP
 = 512,

124 
	mIPPORT_WHOSERVER
 = 513,

125 
	mIPPORT_ROUTESERVER
 = 520,

128 
	mIPPORT_RESERVED
 = 1024,

131 
	mIPPORT_USERRESERVED
 = 5000

136 
uöt32_t
 
	tö_addr_t
;

137 
	sö_addr


139 
ö_addr_t
 
	ms_addr
;

148 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

149 
	#IN_CLASSA_NET
 0xff000000

	)

150 
	#IN_CLASSA_NSHIFT
 24

	)

151 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

152 
	#IN_CLASSA_MAX
 128

	)

154 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

155 
	#IN_CLASSB_NET
 0xffff0000

	)

156 
	#IN_CLASSB_NSHIFT
 16

	)

157 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

158 
	#IN_CLASSB_MAX
 65536

	)

160 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

161 
	#IN_CLASSC_NET
 0xffffff00

	)

162 
	#IN_CLASSC_NSHIFT
 8

	)

163 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

165 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

166 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

168 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

169 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

172 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

174 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

176 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

179 
	#IN_LOOPBACKNET
 127

	)

181 #i‚de‡
INADDR_LOOPBACK


182 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

186 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

187 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

188 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

189 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

193 
	sö6_addr


197 
uöt8_t
 
	mu6_addr8
[16];

198 
uöt16_t
 
	mu6_addr16
[8];

199 
uöt32_t
 
	mu6_addr32
[4];

200 } 
	mö6_u
;

201 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

202 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

203 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

206 c⁄° 
ö6_addr
 
ö6addr_™y
;

207 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

208 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

209 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

211 
	#INET_ADDRSTRLEN
 16

	)

212 
	#INET6_ADDRSTRLEN
 46

	)

215 
	~<bôs/sockë.h
>

219 
	ssockaddr_ö


221 
__SOCKADDR_COMMON
 (
sö_
);

222 
ö_p‹t_t
 
	msö_p‹t
;

223 
ö_addr
 
	msö_addr
;

226 
	msö_zîo
[ (
sockaddr
) -

227 
__SOCKADDR_COMMON_SIZE
 -

228  (
ö_p‹t_t
) -

229  (
ö_addr
)];

233 
	ssockaddr_ö6


235 
__SOCKADDR_COMMON
 (
sö6_
);

236 
ö_p‹t_t
 
	msö6_p‹t
;

237 
uöt32_t
 
	msö6_Êowöfo
;

238 
ö6_addr
 
	msö6_addr
;

239 
uöt32_t
 
	msö6_sc›e_id
;

244 
	sù_mªq


247 
ö_addr
 
	mimr_mu…üddr
;

250 
ö_addr
 
	mimr_öãrÁ˚
;

253 
	sù_mªq_sour˚


256 
ö_addr
 
	mimr_mu…üddr
;

259 
ö_addr
 
	mimr_öãrÁ˚
;

262 
ö_addr
 
	mimr_sour˚addr
;

266 
	sùv6_mªq


269 
ö6_addr
 
	mùv6mr_mu…üddr
;

272 
	mùv6mr_öãrÁ˚
;

277 
	sgroup_ªq


280 
uöt32_t
 
	mgr_öãrÁ˚
;

283 
sockaddr_°‹age
 
	mgr_group
;

286 
	sgroup_sour˚_ªq


289 
uöt32_t
 
	mg§_öãrÁ˚
;

292 
sockaddr_°‹age
 
	mg§_group
;

295 
sockaddr_°‹age
 
	mg§_sour˚
;

300 
	sù_msfûãr


303 
ö_addr
 
	mimsf_mu…üddr
;

306 
ö_addr
 
	mimsf_öãrÁ˚
;

309 
uöt32_t
 
	mimsf_fmode
;

312 
uöt32_t
 
	mimsf_num§c
;

314 
ö_addr
 
	mimsf_¶i°
[1];

317 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

318 -  (
ö_addr
) \

319 + (
num§c
Ë*  (
ö_addr
))

	)

321 
	sgroup_fûãr


324 
uöt32_t
 
	mgf_öãrÁ˚
;

327 
sockaddr_°‹age
 
	mgf_group
;

330 
uöt32_t
 
	mgf_fmode
;

333 
uöt32_t
 
	mgf_num§c
;

335 
sockaddr_°‹age
 
	mgf_¶i°
[1];

338 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

339 -  (
sockaddr_°‹age
) \

340 + ((
num§c
) \

341 *  (
sockaddr_°‹age
)))

	)

345 
	~<bôs/ö.h
>

354 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

355 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

356 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

357 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

358 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

359 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

360 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

362 
	~<ídün.h
>

365 
	~<bôs/byãsw≠.h
>

367 #ifde‡
__OPTIMIZE__


371 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


374 
	#¡ohl
(
x
Ë(x)

	)

375 
	#¡ohs
(
x
Ë(x)

	)

376 
	#ht⁄l
(
x
Ë(x)

	)

377 
	#ht⁄s
(
x
Ë(x)

	)

379 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


380 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

381 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

382 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

383 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

388 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

389 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

390 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

391 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

392 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

394 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

395 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

396 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

397 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

398 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

400 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

402 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

403 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

404 =
	`ht⁄l
 (0x„800000))

	)

406 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

407 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

408 =
	`ht⁄l
 (0x„c00000))

	)

410 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

411 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

412 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

413 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

415 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

416 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

417 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

418 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

419 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

421 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

425 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

428 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

431 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

432 
__THROW
;

435 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

436 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

437 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

439 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

440 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

441 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

443 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

444 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

445 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

447 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

448 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

449 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

451 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

452 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

453 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

456 
	sö6_pktöfo


458 
ö6_addr
 
ùi6_addr
;

459 
ùi6_ifödex
;

463 
	sù6_mtuöfo


465 
sockaddr_ö6
 
ù6m_addr
;

466 
uöt32_t
 
ù6m_mtu
;

470 #ifde‡
__USE_GNU


472 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

473 
__THROW
 
__©åibuã_dïªˇãd__
;

474 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

475 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

476 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

477 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

478 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

479 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

480 
__mu…x
, 
__∂usy
)

481 
__THROW
 
__©åibuã_dïªˇãd__
;

482 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

483 
uöt8_t
 **
__çåp
)

484 
__THROW
 
__©åibuã_dïªˇãd__
;

485 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

486 
uöt8_t
 **
__çåp
, 
__ty≥
)

487 
__THROW
 
__©åibuã_dïªˇãd__
;

491 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

492 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

493 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

494 **
__d©abuÂ
Ë
__THROW
;

495 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

496 
__THROW
;

497 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

498 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

499 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

500 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

501 **
__d©abuÂ
Ë
__THROW
;

502 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

503 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

504 **
__d©abuÂ
Ë
__THROW
;

505 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

506 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

510 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

511 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

512 
__£gmíts
Ë
__THROW
;

513 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

514 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

515 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

516 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

517 
__THROW
;

523 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

524 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

525 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

526 
__THROW
;

529 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

530 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

531 
uöt32_t
 
__num§c
,

532 
__c⁄°
 
ö_addr
 *
__¶i°
)

533 
__THROW
;

537 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

538 
__c⁄°
 
sockaddr
 *
__group
,

539 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

540 
uöt32_t
 *
__num§c
,

541 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

544 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

545 
__c⁄°
 
sockaddr
 *
__group
,

546 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

547 
uöt32_t
 
__num§c
,

548 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

551 
__END_DECLS


	@/usr/include/openssl/buffer.h

59 #i‚de‡
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<›ís¶/os¶_typ.h
>

64 #ifde‡ 
__˝lu•lus


68 
	~<°ddef.h
>

70 #i‡!
deföed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°


79 
Àngth
;

80 *
d©a
;

81 
max
;

84 
BUF_MEM
 *
BUF_MEM_√w
();

85 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

86 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
Àn
);

87 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, 
Àn
);

88 * 
BUF_°rdup
(c⁄° *
°r
);

89 * 
BUF_°∫dup
(c⁄° *
°r
, 
size_t
 
siz
);

90 * 
BUF_memdup
(c⁄° *
d©a
, 
size_t
 
siz
);

93 
size_t
 
BUF_°æ˝y
(*
d°
,c⁄° *
§c
,size_à
siz
);

94 
size_t
 
BUF_°æˇt
(*
d°
,c⁄° *
§c
,size_à
siz
);

101 
ERR_lﬂd_BUF_°rögs
();

106 
	#BUF_F_BUF_MEMDUP
 103

	)

107 
	#BUF_F_BUF_MEM_GROW
 100

	)

108 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

109 
	#BUF_F_BUF_MEM_NEW
 101

	)

110 
	#BUF_F_BUF_STRDUP
 102

	)

111 
	#BUF_F_BUF_STRNDUP
 104

	)

115 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

139 
	~<›ís¶/symhacks.h
>

141 #ifde‡ 
__˝lu•lus


148 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

149 
	#SSLEAY_VERSION
 0

	)

151 
	#SSLEAY_CFLAGS
 2

	)

152 
	#SSLEAY_BUILT_ON
 3

	)

153 
	#SSLEAY_PLATFORM
 4

	)

154 
	#SSLEAY_DIR
 5

	)

158 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

160 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

161 
	tidx
, 
	t¨gl
, *
	t¨gp
);

163 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

164 
	tidx
, 
	t¨gl
, *
	t¨gp
);

166 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

171 
	s›ís¶_ôem_°


173 
code
;

174 *
vÆue
;

175 
size_t
 
vÆue_size
;

176 
size_t
 *
vÆue_Àngth
;

177 } 
	tOPENSSL_ITEM
;

184 
	#CRYPTO_LOCK_ERR
 1

	)

185 
	#CRYPTO_LOCK_EX_DATA
 2

	)

186 
	#CRYPTO_LOCK_X509
 3

	)

187 
	#CRYPTO_LOCK_X509_INFO
 4

	)

188 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

189 
	#CRYPTO_LOCK_X509_CRL
 6

	)

190 
	#CRYPTO_LOCK_X509_REQ
 7

	)

191 
	#CRYPTO_LOCK_DSA
 8

	)

192 
	#CRYPTO_LOCK_RSA
 9

	)

193 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

194 
	#CRYPTO_LOCK_X509_STORE
 11

	)

195 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

196 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

197 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

198 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

199 
	#CRYPTO_LOCK_SSL
 16

	)

200 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

201 
	#CRYPTO_LOCK_RAND
 18

	)

202 
	#CRYPTO_LOCK_RAND2
 19

	)

203 
	#CRYPTO_LOCK_MALLOC
 20

	)

204 
	#CRYPTO_LOCK_BIO
 21

	)

205 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

206 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

207 
	#CRYPTO_LOCK_READDIR
 24

	)

208 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

209 
	#CRYPTO_LOCK_DH
 26

	)

210 
	#CRYPTO_LOCK_MALLOC2
 27

	)

211 
	#CRYPTO_LOCK_DSO
 28

	)

212 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

213 
	#CRYPTO_LOCK_ENGINE
 30

	)

214 
	#CRYPTO_LOCK_UI
 31

	)

215 
	#CRYPTO_LOCK_ECDSA
 32

	)

216 
	#CRYPTO_LOCK_EC
 33

	)

217 
	#CRYPTO_LOCK_ECDH
 34

	)

218 
	#CRYPTO_LOCK_BN
 35

	)

219 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

220 
	#CRYPTO_LOCK_STORE
 37

	)

221 
	#CRYPTO_LOCK_COMP
 38

	)

222 
	#CRYPTO_LOCK_FIPS
 39

	)

223 
	#CRYPTO_LOCK_FIPS2
 40

	)

224 
	#CRYPTO_NUM_LOCKS
 41

	)

226 
	#CRYPTO_LOCK
 1

	)

227 
	#CRYPTO_UNLOCK
 2

	)

228 
	#CRYPTO_READ
 4

	)

229 
	#CRYPTO_WRITE
 8

	)

231 #i‚de‡
OPENSSL_NO_LOCKING


232 #i‚de‡
CRYPTO_w_lock


233 
	#CRYPTO_w_lock
(
ty≥
) \

234 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

235 
	#CRYPTO_w_u∆ock
(
ty≥
) \

236 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

237 
	#CRYPTO_r_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_r_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

242 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_w_lock
(
a
)

	)

246 
	#CRYPTO_w_u∆ock
(
a
)

	)

247 
	#CRYPTO_r_lock
(
a
)

	)

248 
	#CRYPTO_r_u∆ock
(
a
)

	)

249 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

258 
ª„ªn˚s
;

259 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

260 } 
	tCRYPTO_dy∆ock
;

266 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

267 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

268 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

269 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

275 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

277 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

279 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

283 
bio_°
 
	tBIO_dummy
;

285 
	s¸y±o_ex_d©a_°


287 
STACK
 *
sk
;

288 
dummy
;

294 
	s¸y±o_ex_d©a_func_°


296 
¨gl
;

297 *
¨gp
;

298 
CRYPTO_EX_√w
 *
√w_func
;

299 
CRYPTO_EX_‰ì
 *
‰ì_func
;

300 
CRYPTO_EX_dup
 *
dup_func
;

301 } 
	tCRYPTO_EX_DATA_FUNCS
;

303 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

309 
	#CRYPTO_EX_INDEX_BIO
 0

	)

310 
	#CRYPTO_EX_INDEX_SSL
 1

	)

311 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

312 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

313 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

314 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

315 
	#CRYPTO_EX_INDEX_RSA
 6

	)

316 
	#CRYPTO_EX_INDEX_DSA
 7

	)

317 
	#CRYPTO_EX_INDEX_DH
 8

	)

318 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

319 
	#CRYPTO_EX_INDEX_X509
 10

	)

320 
	#CRYPTO_EX_INDEX_UI
 11

	)

321 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

322 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

323 
	#CRYPTO_EX_INDEX_COMP
 14

	)

324 
	#CRYPTO_EX_INDEX_STORE
 15

	)

328 
	#CRYPTO_EX_INDEX_USER
 100

	)

335 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

336 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

338 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


339 #i‚de‡
CRYPTO_MDEBUG


340 
	#CRYPTO_MDEBUG


	)

346 #ifde‡
OPENSSL_USE_NEW_FUNCTIONS


347 
CRYPTO_mÆloc_debug_öô
();

349 
	#CRYPTO_mÆloc_debug_öô
() do {\

350 
	`CRYPTO_£t_mem_debug_fun˘i⁄s
(\

351 
CRYPTO_dbg_mÆloc
,\

352 
CRYPTO_dbg_ªÆloc
,\

353 
CRYPTO_dbg_‰ì
,\

354 
CRYPTO_dbg_£t_›ti⁄s
,\

355 
CRYPTO_dbg_gë_›ti⁄s
);\

356 } 0)

	)

359 
CRYPTO_mem_˘æ
(
mode
);

360 
CRYPTO_is_mem_check_⁄
();

363 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

364 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

367 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

368 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

369 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

371 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

372 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

373 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

374 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

375 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

376 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

377 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

378 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

379 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

381 
	#OPENSSL_mÆloc_locked
(
num
) \

382 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

383 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

386 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

387 
SSLóy
();

389 
OPENSSL_is£tugid
();

392 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

394 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

396 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

398 
CRYPTO_ex_d©a_√w_˛ass
();

400 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

401 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

402 
CRYPTO_EX_‰ì
 *
‰ì_func
);

405 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

406 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

407 
CRYPTO_EX_DATA
 *
‰om
);

408 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

411 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

412 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
,
idx
);

415 
CRYPTO_˛ónup_Æl_ex_d©a
();

417 
CRYPTO_gë_√w_lockid
(*
«me
);

419 
CRYPTO_num_locks
();

420 
CRYPTO_lock
(
mode
, 
ty≥
,c⁄° *
fûe
,
löe
);

421 
CRYPTO_£t_lockög_ˇŒback
((*
func
)(
mode
,
ty≥
,

422 c⁄° *
fûe
,
löe
));

423 (*
CRYPTO_gë_lockög_ˇŒback
())(
mode
,
ty≥
,c⁄° *
fûe
,

424 
löe
);

425 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)(*
num
,
mou¡
,
ty≥
,

426 c⁄° *
fûe
, 
löe
));

427 (*
CRYPTO_gë_add_lock_ˇŒback
())(*
num
,
mou¡
,
ty≥
,

428 c⁄° *
fûe
,
löe
);

429 
CRYPTO_£t_id_ˇŒback
((*
func
)());

430 (*
CRYPTO_gë_id_ˇŒback
())();

431 
CRYPTO_thªad_id
();

432 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

433 
CRYPTO_add_lock
(*
poöãr
,
amou¡
,
ty≥
, c⁄° *
fûe
,

434 
löe
);

436 
öt_CRYPTO_£t_do_dy∆ock_ˇŒback
(

437 (*
do_dy∆ock_cb
)(
mode
, 
ty≥
, c⁄° *
fûe
, 
löe
));

439 
CRYPTO_gë_√w_dy∆ockid
();

440 
CRYPTO_de°roy_dy∆ockid
(
i
);

441 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

442 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue
 *(*
dyn_¸óã_fun˘i⁄
)(c⁄° *
fûe
, 
löe
));

443 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

444 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

445 
CRYPTO_dy∆ock_vÆue
 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
())(c⁄° *
fûe
,
löe
);

446 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
())(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

447 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
())(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

451 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
)(
size_t
),*(*
r
)(*,size_t), (*
f
)(*));

452 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
)(
size_t
), (*
‰ì_func
)(*));

453 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

454 *(*
r
)(*,
size_t
,const *,),

455 (*
f
)(*));

456 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

457 (*
‰ì_func
)(*));

458 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)(*,,const *,,),

459 (*
r
)(*,*,,const *,,),

460 (*
f
)(*,),

461 (*
so
)(),

462 (*
go
)());

463 
CRYPTO_£t_mem_öfo_fun˘i⁄s
(

464 (*
push_öfo_‚
)(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
),

465 (*
p›_öfo_‚
)(),

466 (*
ªmove_Æl_öfo_‚
)());

467 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
)(
size_t
),*(**
r
)(*, size_t), (**
f
)(*));

468 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
)(
size_t
), (**
f
)(*));

469 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

470 *(**
r
)(*, 
size_t
,const *,),

471 (**
f
)(*));

472 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

473 (**
f
)(*));

474 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)(*,,const *,,),

475 (**
r
)(*,*,,const *,,),

476 (**
f
)(*,),

477 (**
so
)(),

478 (**
go
)());

480 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

481 
CRYPTO_‰ì_locked
(*);

482 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

483 
CRYPTO_‰ì
(*);

484 *
CRYPTO_ªÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

485 *
CRYPTO_ªÆloc_˛ón
(*
addr
,
ﬁd_num
,
num
,c⁄° *
fûe
,

486 
löe
);

487 *
CRYPTO_ªmÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

489 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

491 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

492 
CRYPTO_gë_mem_debug_›ti⁄s
();

494 
	#CRYPTO_push_öfo
(
öfo
) \

495 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

496 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

497 
CRYPTO_p›_öfo
();

498 
CRYPTO_ªmove_Æl_öfo
();

508 
CRYPTO_dbg_mÆloc
(*
addr
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

509 
CRYPTO_dbg_ªÆloc
(*
addr1
,*
addr2
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

510 
CRYPTO_dbg_‰ì
(*
addr
,
bef‹e_p
);

519 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

520 
CRYPTO_dbg_gë_›ti⁄s
();

522 
CRYPTO_dbg_push_öfo
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

523 
CRYPTO_dbg_p›_öfo
();

524 
CRYPTO_dbg_ªmove_Æl_öfo
();

526 #i‚de‡
OPENSSL_NO_FP_API


527 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

529 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

531 *
	tCRYPTO_MEM_LEAK_CB
(, const *, , , *);

532 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

535 
O≥nSSLDõ
(c⁄° *
fûe
,
löe
,c⁄° *
as£πi⁄
);

536 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

538 *
OPENSSL_ü32ˇp_loc
();

539 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

541 #ifde‡
OPENSSL_FIPS


542 
	#FIPS_ERROR_IGNORED
(
Æg
Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

543 
Æg
 "Öªviou†FIPS f‹biddíálg‹ôhmÉº‹ ign‹ed");

	)

545 
	#FIPS_BAD_ABORT
(
Æg
Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

546 #Æg " Alg‹ôhm f‹biddí i¿FIPS mode");

	)

548 #ifde‡
OPENSSL_FIPS_STRICT


549 
	#FIPS_BAD_ALGORITHM
(
Æg
Ë
	`FIPS_BAD_ABORT
◊lg)

	)

551 
	#FIPS_BAD_ALGORITHM
(
Æg
) \

553 
	`FIPSîr
(
FIPS_F_HASH_FINAL
,
FIPS_R_NON_FIPS_METHOD
); \

554 
	`ERR_add_îr‹_d©a
(2, "Algorithm=", #alg); \

556 }

	)

561 
	#FIPS_NON_FIPS_MD_Inô
(
Æg
) \

562 
Æg
##
	`_Inô
◊lg##
_CTX
 *
c
) \

564 i‡(
	`FIPS_mode
()) \

565 
	`FIPS_BAD_ALGORITHM
(
Æg
) \

566  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

568 
¥iv©e_
##
Æg
##
	`_Inô
◊lg##
_CTX
 *
c
)

	)

575 
	#FIPS_NON_FIPS_VCIPHER_Inô
(
Æg
) \

576 
Æg
##
	`_£t_key
◊lg##
_KEY
 *
key
, 
Àn
, c⁄° *
d©a
) \

578 i‡(
	`FIPS_mode
()) \

579 
	`FIPS_BAD_ABORT
(
Æg
) \

580 
¥iv©e_
##
Æg
##
	`_£t_key
(
key
, 
Àn
, 
d©a
); \

582 
¥iv©e_
##
Æg
##
	`_£t_key
◊lg##
_KEY
 *
key
, 
Àn
, \

583 c⁄° *
d©a
)

	)

587 
	#FIPS_NON_FIPS_VCIPHER_Inô
(
Æg
) \

588 
Æg
##
	`_£t_key
◊lg##
_KEY
 *
key
, 
Àn
, c⁄° *
d©a
)

	)

590 
	#FIPS_NON_FIPS_MD_Inô
(
Æg
) \

591 
Æg
##
	`_Inô
◊lg##
_CTX
 *
c
)

	)

599 
ERR_lﬂd_CRYPTO_°rögs
();

601 
	#OPENSSL_HAVE_INIT
 1

	)

602 
OPENSSL_öô
();

607 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

608 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

609 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

610 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

611 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

612 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

613 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

614 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

615 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

618 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

620 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

59 #i‚de‡
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
OPENSSL_NO_DH


65 #îr‹ 
DH
 
is
 
dißbÀd
.

68 #i‚de‡
OPENSSL_NO_BIO


69 
	~<›ís¶/bio.h
>

71 
	~<›ís¶/os¶_typ.h
>

72 #i‚de‡
OPENSSL_NO_DEPRECATED


73 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#OPENSSL_DH_FIPS_MIN_MODULUS_BITS
 1024

	)

82 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

83 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

91 #ifde‡ 
__˝lu•lus


99 
	sdh_mëhod


101 c⁄° *
«me
;

103 (*
gíî©e_key
)(
DH
 *
dh
);

104 (*
compuã_key
)(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

105 (*
bn_mod_exp
)(c⁄° 
DH
 *
dh
, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

106 c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
,

107 
BN_MONT_CTX
 *
m_˘x
);

109 (*
öô
)(
DH
 *
dh
);

110 (*
föish
)(
DH
 *
dh
);

111 
Êags
;

112 *
≠p_d©a
;

114 (*
gíî©e_∑øms
)(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
, 
BN_GENCB
 *
cb
);

117 
	sdh_°


121 
∑d
;

122 
vîsi⁄
;

123 
BIGNUM
 *
p
;

124 
BIGNUM
 *
g
;

125 
Àngth
;

126 
BIGNUM
 *
pub_key
;

127 
BIGNUM
 *
¥iv_key
;

129 
Êags
;

130 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

132 
BIGNUM
 *
q
;

133 
BIGNUM
 *
j
;

134 *
£ed
;

135 
£edÀn
;

136 
BIGNUM
 *
cou¡î
;

138 
ª„ªn˚s
;

139 
CRYPTO_EX_DATA
 
ex_d©a
;

140 c⁄° 
DH_METHOD
 *
mëh
;

141 
ENGINE
 *
ígöe
;

144 
	#DH_GENERATOR_2
 2

	)

146 
	#DH_GENERATOR_5
 5

	)

149 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

150 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

151 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

152 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

155 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

156 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

160 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

162 
	#DH∑øms_dup
(
x
Ë
	`ASN1_dup_of_c⁄°
(
DH
,
i2d_DH∑øms
,
d2i_DH∑øms
,x)

	)

163 
	#d2i_DH∑øms_Â
(
Â
,
x
Ë(
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

164 (*(*)())
d2i_DH∑øms
,(
Â
),(**)(
x
))

	)

165 
	#i2d_DH∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(fp), \

166 (*)(
x
))

	)

167 
	#d2i_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DH∑øms
,bp,x)

	)

168 
	#i2d_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,bp,x)

	)

170 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

172 #ifde‡
OPENSSL_FIPS


173 
DH
 * 
FIPS_dh_√w
();

174 
FIPS_dh_‰ì
(
DH
 *
dh
);

177 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

178 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

179 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

180 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

182 
DH
 * 
DH_√w
();

183 
DH_‰ì
(
DH
 *
dh
);

184 
DH_up_ªf
(
DH
 *
dh
);

185 
DH_size
(c⁄° 
DH
 *
dh
);

186 
DH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

187 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

188 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

189 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

192 #i‚de‡
OPENSSL_NO_DEPRECATED


193 
DH
 * 
DH_gíî©e_∑ømëîs
(
¥ime_Àn
,
gíî©‹
,

194 (*
ˇŒback
)(,,*),*
cb_¨g
);

198 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
,
gíî©‹
, 
BN_GENCB
 *
cb
);

200 
DH_check
(c⁄° 
DH
 *
dh
,*
codes
);

201 
DH_check_pub_key
(c⁄° 
DH
 *
dh
,c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

202 
DH_gíî©e_key
(
DH
 *
dh
);

203 
DH_compuã_key
(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

204 
DH
 * 
d2i_DH∑øms
(DH **
a
,c⁄° **
µ
, 
Àngth
);

205 
i2d_DH∑øms
(c⁄° 
DH
 *
a
,**
µ
);

206 #i‚de‡
OPENSSL_NO_FP_API


207 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

209 #i‚de‡
OPENSSL_NO_BIO


210 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

212 
DH∑øms_¥öt
(*
bp
, c⁄° 
DH
 *
x
);

219 
ERR_lﬂd_DH_°rögs
();

224 
	#DH_F_COMPUTE_KEY
 102

	)

225 
	#DH_F_DHPARAMS_PRINT
 100

	)

226 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

227 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

228 
	#DH_F_DH_COMPUTE_KEY
 107

	)

229 
	#DH_F_DH_GENERATE_KEY
 108

	)

230 
	#DH_F_DH_GENERATE_PARAMETERS
 109

	)

231 
	#DH_F_DH_NEW_METHOD
 105

	)

232 
	#DH_F_GENERATE_KEY
 103

	)

233 
	#DH_F_GENERATE_PARAMETERS
 104

	)

236 
	#DH_R_BAD_GENERATOR
 101

	)

237 
	#DH_R_INVALID_PUBKEY
 102

	)

238 
	#DH_R_KEY_SIZE_TOO_SMALL
 104

	)

239 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

240 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

242 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

65 #i‚de‡
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<›ís¶/e_os2.h
>

70 #ifde‡
OPENSSL_NO_DSA


71 #îr‹ 
DSA
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

77 
	~<›ís¶/¸y±o.h
>

78 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

87 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#OPENSSL_DSA_FIPS_MIN_MODULUS_BITS
 1024

	)

93 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

94 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

108 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

115 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

117 #ifde‡
OPENSSL_FIPS


118 
	#FIPS_DSA_SIZE_T
 

	)

121 #ifde‡ 
__˝lu•lus


129 
	sDSA_SIG_°


131 
BIGNUM
 *
r
;

132 
BIGNUM
 *
s
;

133 } 
	tDSA_SIG
;

135 
	sdß_mëhod


137 c⁄° *
«me
;

138 
DSA_SIG
 * (*
dß_do_sign
)(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

139 (*
dß_sign_£tup
)(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
,

140 
BIGNUM
 **
Ω
);

141 (*
dß_do_vîify
)(c⁄° *
dg°
, 
dg°_Àn
,

142 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

143 (*
dß_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
º
, BIGNUM *
a1
, BIGNUM *
p1
,

144 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

145 
BN_MONT_CTX
 *
ö_m⁄t
);

146 (*
bn_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
r
, BIGNUM *
a
, c⁄° BIGNUM *
p
,

147 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

148 
BN_MONT_CTX
 *
m_˘x
);

149 (*
öô
)(
DSA
 *
dß
);

150 (*
föish
)(
DSA
 *
dß
);

151 
Êags
;

152 *
≠p_d©a
;

154 (*
dß_∑ømgí
)(
DSA
 *
dß
, 
bôs
,

155 *
£ed
, 
£ed_Àn
,

156 *
cou¡î_ªt
, *
h_ªt
,

157 
BN_GENCB
 *
cb
);

159 (*
dß_keygí
)(
DSA
 *
dß
);

162 
	sdß_°


166 
∑d
;

167 
vîsi⁄
;

168 
wrôe_∑øms
;

169 
BIGNUM
 *
p
;

170 
BIGNUM
 *
q
;

171 
BIGNUM
 *
g
;

173 
BIGNUM
 *
pub_key
;

174 
BIGNUM
 *
¥iv_key
;

176 
BIGNUM
 *
köv
;

177 
BIGNUM
 *
r
;

179 
Êags
;

181 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

182 
ª„ªn˚s
;

183 
CRYPTO_EX_DATA
 
ex_d©a
;

184 c⁄° 
DSA_METHOD
 *
mëh
;

186 
ENGINE
 *
ígöe
;

189 
	#DSA∑øms_dup
(
x
Ë
	`ASN1_dup_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,
d2i_DSA∑øms
,x)

	)

190 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

191 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

192 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

193 (*)(
x
))

	)

194 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

195 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

198 
DSA_SIG
 * 
DSA_SIG_√w
();

199 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

200 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

201 
DSA_SIG
 * 
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

203 
DSA_SIG
 * 
DSA_do_sign
(c⁄° *
dg°
,
dÀn
,
DSA
 *
dß
);

204 
DSA_do_vîify
(c⁄° *
dg°
,
dg°_Àn
,

205 
DSA_SIG
 *
sig
,
DSA
 *
dß
);

207 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

209 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

210 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

211 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

213 #ifde‡
OPENSSL_FIPS


214 
DSA
 * 
FIPS_dß_√w
();

215 
FIPS_dß_‰ì
 (
DSA
 *
r
);

218 
DSA
 * 
DSA_√w
();

219 
DSA
 * 
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

220 
DSA_‰ì
 (
DSA
 *
r
);

222 
DSA_up_ªf
(
DSA
 *
r
);

223 
DSA_size
(c⁄° 
DSA
 *);

225 
DSA_sign_£tup
–
DSA
 *
dß
,
BN_CTX
 *
˘x_ö
,
BIGNUM
 **
kövp
,BIGNUM **
Ω
);

226 
DSA_sign
(
ty≥
,c⁄° *
dg°
,
dÀn
,

227 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

228 
DSA_vîify
(
ty≥
,c⁄° *
dg°
,
dg°_Àn
,

229 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

230 
DSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

231 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

232 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

233 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

235 
DSA
 * 
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

236 
DSA
 * 
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

237 
DSA
 * 
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

240 #i‚de‡
OPENSSL_NO_DEPRECATED


241 
DSA
 * 
DSA_gíî©e_∑ømëîs
(
bôs
,

242 *
£ed
,
£ed_Àn
,

243 *
cou¡î_ªt
, *
h_ªt
,

244 (*
ˇŒback
)(, , *),*
cb_¨g
);

248 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

249 *
£ed
,
£ed_Àn
,

250 *
cou¡î_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

252 
DSA_gíî©e_key
(
DSA
 *
a
);

253 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

254 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

255 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
,**
µ
);

257 #i‚de‡
OPENSSL_NO_BIO


258 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

259 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

261 #i‚de‡
OPENSSL_NO_FP_API


262 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

263 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

266 
	#DSS_¥ime_checks
 50

	)

269 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

270 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

272 #i‚de‡
OPENSSL_NO_DH


275 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

278 #ifde‡
OPENSSL_FIPS


279 
FIPS_dß_sig_ícode
(*
out
, 
DSA_SIG
 *
sig
);

280 
FIPS_dß_sig_decode
(
DSA_SIG
 *
sig
, c⁄° *
ö
, 
öÀn
);

287 
ERR_lﬂd_DSA_°rögs
();

292 
	#DSA_F_D2I_DSA_SIG
 110

	)

293 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

294 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

295 
	#DSA_F_DSA_BUILTIN_KEYGEN
 119

	)

296 
	#DSA_F_DSA_BUILTIN_PARAMGEN
 118

	)

297 
	#DSA_F_DSA_DO_SIGN
 112

	)

298 
	#DSA_F_DSA_DO_VERIFY
 113

	)

299 
	#DSA_F_DSA_GENERATE_PARAMETERS
 117

	)

300 
	#DSA_F_DSA_NEW_METHOD
 103

	)

301 
	#DSA_F_DSA_PRINT
 104

	)

302 
	#DSA_F_DSA_PRINT_FP
 105

	)

303 
	#DSA_F_DSA_SET_DEFAULT_METHOD
 115

	)

304 
	#DSA_F_DSA_SET_METHOD
 116

	)

305 
	#DSA_F_DSA_SIGN
 106

	)

306 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

307 
	#DSA_F_DSA_SIG_NEW
 109

	)

308 
	#DSA_F_DSA_VERIFY
 108

	)

309 
	#DSA_F_I2D_DSA_SIG
 111

	)

310 
	#DSA_F_SIG_CB
 114

	)

313 
	#DSA_R_BAD_Q_VALUE
 102

	)

314 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

315 
	#DSA_R_KEY_SIZE_TOO_SMALL
 106

	)

316 
	#DSA_R_MISSING_PARAMETERS
 101

	)

317 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

318 
	#DSA_R_NON_FIPS_METHOD
 104

	)

319 
	#DSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 105

	)

321 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #ifde‡
OPENSSL_SYSNAME_VOS


197 
	#OPENSSL_SYS_VOS


	)

201 #ifde‡
OPENSSL_SYSNAME_VXWORKS


202 
	#OPENSSL_SYS_VXWORKS


	)

211 #ifde‡
OPENSSL_SYS_MSDOS


212 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

213 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

215 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

216 
	#OPENSSL_DECLARE_EXIT


	)

238 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

239 
	#OPENSSL_EXPORT
 
globÆªf


	)

240 
	#OPENSSL_IMPORT
 
globÆªf


	)

241 
	#OPENSSL_GLOBAL
 
globÆdef


	)

242 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

243 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

244 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

245 
	#OPENSSL_GLOBAL


	)

247 
	#OPENSSL_EXPORT
 

	)

248 
	#OPENSSL_IMPORT
 

	)

249 
	#OPENSSL_GLOBAL


	)

251 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

263 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


264 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
) \

265 
ty≥
 
_hide_
##
«me
; \

266 
ty≥
 *
_shadow_
##
	`«me
(Ë{  &
_hide_
##
«me
; } \

267 
ty≥
 
_hide_
##
«me


	)

268 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

269 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

271 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##
	)
name

272 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

273 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

276 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/fips.h

50 
	~<›ís¶/›ís¶c⁄f.h
>

52 #ifde‡
OPENSSL_FIPS


54 #ifde‡ 
__˝lu•lus


58 
dß_°
;

59 
evp_pkey_°
;

60 
ív_md_°
;

61 
evp_cùhî_°
;

62 
evp_cùhî_˘x_°
;

64 
FIPS_mode_£t
(
⁄off
);

65 
FIPS_mode
();

66 c⁄° *
FIPS_ønd_check
();

67 
FIPS_£l·e°_Áûed
();

68 
FIPS_£l·e°_check
();

69 
FIPS_c‹ru±_sha1
();

70 
FIPS_£l·e°_sha1
();

71 
FIPS_£l·e°_sha2
();

72 
FIPS_c‹ru±_´s
();

73 
FIPS_£l·e°_´s
();

74 
FIPS_c‹ru±_des
();

75 
FIPS_£l·e°_des
();

76 
FIPS_c‹ru±_rß
();

77 
FIPS_c‹ru±_rß_keygí
();

78 
FIPS_£l·e°_rß
();

79 
FIPS_c‹ru±_dß
();

80 
FIPS_c‹ru±_dß_keygí
();

81 
FIPS_£l·e°_dß
();

82 
FIPS_c‹ru±_∫g
();

83 
FIPS_∫g_°ick
();

84 
FIPS_£l·e°_∫g
();

85 
FIPS_£l·e°_hmac
();

87 
fùs_pkey_sig«tuª_ã°
(
evp_pkey_°
 *
pkey
,

88 c⁄° *
tbs
, 
tb¶í
,

89 c⁄° *
k©
, 
k©Àn
,

90 c⁄° 
ív_md_°
 *
dige°
, 
md_Êags
,

91 c⁄° *
Áû_°r
);

93 
fùs_cùhî_ã°
(
evp_cùhî_˘x_°
 *
˘x
,

94 c⁄° 
evp_cùhî_°
 *
cùhî
,

95 c⁄° *
key
,

96 c⁄° *
iv
,

97 c⁄° *
∂aöãxt
,

98 c⁄° *
cùhîãxt
,

99 
Àn
);

105 
ERR_lﬂd_FIPS_°rögs
();

110 
	#FIPS_F_DH_BUILTIN_GENPARAMS
 100

	)

111 
	#FIPS_F_DSA_BUILTIN_PARAMGEN
 101

	)

112 
	#FIPS_F_DSA_DO_SIGN
 102

	)

113 
	#FIPS_F_DSA_DO_VERIFY
 103

	)

114 
	#FIPS_F_EVP_CIPHERINIT_EX
 124

	)

115 
	#FIPS_F_EVP_DIGESTINIT_EX
 125

	)

116 
	#FIPS_F_FIPS_CHECK_DSA
 104

	)

117 
	#FIPS_F_FIPS_CHECK_INCORE_FINGERPRINT
 105

	)

118 
	#FIPS_F_FIPS_CHECK_RSA
 106

	)

119 
	#FIPS_F_FIPS_DSA_CHECK
 107

	)

120 
	#FIPS_F_FIPS_MODE_SET
 108

	)

121 
	#FIPS_F_FIPS_PKEY_SIGNATURE_TEST
 109

	)

122 
	#FIPS_F_FIPS_SELFTEST_AES
 110

	)

123 
	#FIPS_F_FIPS_SELFTEST_DES
 111

	)

124 
	#FIPS_F_FIPS_SELFTEST_DSA
 112

	)

125 
	#FIPS_F_FIPS_SELFTEST_HMAC
 113

	)

126 
	#FIPS_F_FIPS_SELFTEST_RNG
 114

	)

127 
	#FIPS_F_FIPS_SELFTEST_SHA1
 115

	)

128 
	#FIPS_F_HASH_FINAL
 123

	)

129 
	#FIPS_F_RSA_BUILTIN_KEYGEN
 116

	)

130 
	#FIPS_F_RSA_EAY_PRIVATE_DECRYPT
 117

	)

131 
	#FIPS_F_RSA_EAY_PRIVATE_ENCRYPT
 118

	)

132 
	#FIPS_F_RSA_EAY_PUBLIC_DECRYPT
 119

	)

133 
	#FIPS_F_RSA_EAY_PUBLIC_ENCRYPT
 120

	)

134 
	#FIPS_F_RSA_X931_GENERATE_KEY_EX
 121

	)

135 
	#FIPS_F_SSLEAY_RAND_BYTES
 122

	)

138 
	#FIPS_R_CANNOT_READ_EXE
 103

	)

139 
	#FIPS_R_CANNOT_READ_EXE_DIGEST
 104

	)

140 
	#FIPS_R_CONTRADICTING_EVIDENCE
 114

	)

141 
	#FIPS_R_EXE_DIGEST_DOES_NOT_MATCH
 105

	)

142 
	#FIPS_R_FINGERPRINT_DOES_NOT_MATCH
 110

	)

143 
	#FIPS_R_FINGERPRINT_DOES_NOT_MATCH_NONPIC_RELOCATED
 111

	)

144 
	#FIPS_R_FINGERPRINT_DOES_NOT_MATCH_SEGMENT_ALIASING
 112

	)

145 
	#FIPS_R_FIPS_MODE_ALREADY_SET
 102

	)

146 
	#FIPS_R_FIPS_SELFTEST_FAILED
 106

	)

147 
	#FIPS_R_INVALID_KEY_LENGTH
 109

	)

148 
	#FIPS_R_KEY_TOO_SHORT
 108

	)

149 
	#FIPS_R_NON_FIPS_METHOD
 100

	)

150 
	#FIPS_R_PAIRWISE_TEST_FAILED
 107

	)

151 
	#FIPS_R_RSA_DECRYPT_ERROR
 115

	)

152 
	#FIPS_R_RSA_ENCRYPT_ERROR
 116

	)

153 
	#FIPS_R_SELFTEST_FAILED
 101

	)

154 
	#FIPS_R_TEST_FAILURE
 117

	)

155 
	#FIPS_R_UNSUPPORTED_PLATFORM
 113

	)

157 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

63 #i‚de‡
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<›ís¶/e_os2.h
>

67 #i‚de‡
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #i‚de‡
OPENSSL_NO_BIO


72 
	~<›ís¶/bio.h
>

75 #ifde‡ 
__˝lu•lus


79 
	slhash_node_°


81 *
d©a
;

82 
lhash_node_°
 *
√xt
;

83 #i‚de‡
OPENSSL_NO_HASH_COMP


84 
hash
;

86 } 
	tLHASH_NODE
;

88 (*
LHASH_COMP_FN_TYPE
)(const *, const *);

89 (*
	tLHASH_HASH_FN_TYPE
)(const *);

90 (*
LHASH_DOALL_FN_TYPE
)(*);

91 (*
LHASH_DOALL_ARG_FN_TYPE
)(*, *);

101 
	#DECLARE_LHASH_HASH_FN
(
f_«me
,
o_ty≥
) \

102 
f_«me
##
	`_LHASH_HASH
(c⁄° *);

	)

103 
	#IMPLEMENT_LHASH_HASH_FN
(
f_«me
,
o_ty≥
) \

104 
f_«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

105 
o_ty≥
 
a
 = (o_ty≥)
¨g
; \

106  
	`f_«me
(
a
); }

	)

107 
	#LHASH_HASH_FN
(
f_«me
Ëf_«me##
_LHASH_HASH


	)

110 
	#DECLARE_LHASH_COMP_FN
(
f_«me
,
o_ty≥
) \

111 
f_«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

112 
	#IMPLEMENT_LHASH_COMP_FN
(
f_«me
,
o_ty≥
) \

113 
f_«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

114 
o_ty≥
 
a
 = (o_ty≥)
¨g1
; \

115 
o_ty≥
 
b
 = (o_ty≥)
¨g2
; \

116  
	`f_«me
(
a
,
b
); }

	)

117 
	#LHASH_COMP_FN
(
f_«me
Ëf_«me##
_LHASH_COMP


	)

120 
	#DECLARE_LHASH_DOALL_FN
(
f_«me
,
o_ty≥
) \

121 
f_«me
##
	`_LHASH_DOALL
(*);

	)

122 
	#IMPLEMENT_LHASH_DOALL_FN
(
f_«me
,
o_ty≥
) \

123 
f_«me
##
	`_LHASH_DOALL
(*
¨g
) { \

124 
o_ty≥
 
a
 = (o_ty≥)
¨g
; \

125 
	`f_«me
(
a
); }

	)

126 
	#LHASH_DOALL_FN
(
f_«me
Ëf_«me##
_LHASH_DOALL


	)

129 
	#DECLARE_LHASH_DOALL_ARG_FN
(
f_«me
,
o_ty≥
,
a_ty≥
) \

130 
f_«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

131 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
f_«me
,
o_ty≥
,
a_ty≥
) \

132 
f_«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

133 
o_ty≥
 
a
 = (o_ty≥)
¨g1
; \

134 
a_ty≥
 
b
 = (a_ty≥)
¨g2
; \

135 
	`f_«me
(
a
,
b
); }

	)

136 
	#LHASH_DOALL_ARG_FN
(
f_«me
Ëf_«me##
_LHASH_DOALL_ARG


	)

138 
	slhash_°


140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Æloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lﬂd
;

148 
down_lﬂd
;

149 
num_ôems
;

151 
num_ex∑nds
;

152 
num_ex∑nd_ªÆlocs
;

153 
num_c⁄åa˘s
;

154 
num_c⁄åa˘_ªÆlocs
;

155 
num_hash_ˇŒs
;

156 
num_comp_ˇŒs
;

157 
num_ö£π
;

158 
num_ª∂a˚
;

159 
num_dñëe
;

160 
num_no_dñëe
;

161 
num_ªåõve
;

162 
num_ªåõve_miss
;

163 
num_hash_comps
;

165 
îr‹
;

166 } 
	tLHASH
;

168 
	#LH_LOAD_MULT
 256

	)

172 
	#lh_îr‹
(
lh
Ë(÷h)->
îr‹
)

	)

174 
LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

175 
lh_‰ì
(
LHASH
 *
lh
);

176 *
lh_ö£π
(
LHASH
 *
lh
, *
d©a
);

177 *
lh_dñëe
(
LHASH
 *
lh
, c⁄° *
d©a
);

178 *
lh_ªåõve
(
LHASH
 *
lh
, c⁄° *
d©a
);

179 
lh_dﬂŒ
(
LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

180 
lh_dﬂŒ_¨g
(
LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
¨g
);

181 
lh_°rhash
(c⁄° *
c
);

182 
lh_num_ôems
(c⁄° 
LHASH
 *
lh
);

184 #i‚de‡
OPENSSL_NO_FP_API


185 
lh_°©s
(c⁄° 
LHASH
 *
lh
, 
FILE
 *
out
);

186 
lh_node_°©s
(c⁄° 
LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_ußge_°©s
(c⁄° 
LHASH
 *
lh
, 
FILE
 *
out
);

190 #i‚de‡
OPENSSL_NO_BIO


191 
lh_°©s_bio
(c⁄° 
LHASH
 *
lh
, 
BIO
 *
out
);

192 
lh_node_°©s_bio
(c⁄° 
LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_ußge_°©s_bio
(c⁄° 
LHASH
 *
lh
, 
BIO
 *
out
);

195 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undeföed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_ôu_t
 "ITU-T"

	)

71 
	#LN_ôu_t
 "ôu-t"

	)

72 
	#NID_ôu_t
 645

	)

73 
	#OBJ_ôu_t
 0L

	)

75 
	#NID_ccôt
 404

	)

76 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

85 
	#NID_joöt_iso_ôu_t
 646

	)

86 
	#OBJ_joöt_iso_ôu_t
 2L

	)

88 
	#NID_joöt_iso_ccôt
 393

	)

89 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

91 
	#SN_membî_body
 "membî-body"

	)

92 
	#LN_membî_body
 "ISO Membî Body"

	)

93 
	#NID_membî_body
 182

	)

94 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

96 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

97 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

98 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

100 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

101 
	#NID_˚πicom_¨c
 677

	)

102 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

104 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

105 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

106 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

107 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

109 
	#SN_w≠
 "w≠"

	)

110 
	#NID_w≠
 678

	)

111 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

113 
	#SN_w≠_wsg
 "w≠-wsg"

	)

114 
	#NID_w≠_wsg
 679

	)

115 
	#OBJ_w≠_wsg
 
OBJ_w≠
,13L

	)

117 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

118 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

119 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

120 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

122 
	#SN_˛óøn˚
 "˛óøn˚"

	)

123 
	#NID_˛óøn˚
 395

	)

124 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

126 
	#SN_ISO_US
 "ISO-US"

	)

127 
	#LN_ISO_US
 "ISO US Membî Body"

	)

128 
	#NID_ISO_US
 183

	)

129 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

131 
	#SN_X9_57
 "X9-57"

	)

132 
	#LN_X9_57
 "X9.57"

	)

133 
	#NID_X9_57
 184

	)

134 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

136 
	#SN_X9cm
 "X9cm"

	)

137 
	#LN_X9cm
 "X9.57 CM ?"

	)

138 
	#NID_X9cm
 185

	)

139 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

141 
	#SN_dß
 "DSA"

	)

142 
	#LN_dß
 "dßEn¸y±i⁄"

	)

143 
	#NID_dß
 116

	)

144 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

146 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

147 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

148 
	#NID_dßWôhSHA1
 113

	)

149 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

151 
	#SN_™si_X9_62
 "™si-X9-62"

	)

152 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

153 
	#NID_™si_X9_62
 405

	)

154 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

156 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

158 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

159 
	#NID_X9_62_¥ime_fõld
 406

	)

160 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

162 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

163 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

164 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

166 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

167 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

168 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

170 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

171 
	#NID_X9_62_⁄Basis
 681

	)

172 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

174 
	#SN_X9_62_çBasis
 "çBasis"

	)

175 
	#NID_X9_62_çBasis
 682

	)

176 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

178 
	#SN_X9_62_µBasis
 "µBasis"

	)

179 
	#NID_X9_62_µBasis
 683

	)

180 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

182 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

184 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

185 
	#NID_X9_62_id_ecPublicKey
 408

	)

186 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

188 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

190 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

192 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

193 
	#NID_X9_62_c2≤b163v1
 684

	)

194 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

196 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

197 
	#NID_X9_62_c2≤b163v2
 685

	)

198 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

200 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

201 
	#NID_X9_62_c2≤b163v3
 686

	)

202 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

204 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

205 
	#NID_X9_62_c2≤b176v1
 687

	)

206 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

208 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

209 
	#NID_X9_62_c2äb191v1
 688

	)

210 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

212 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

213 
	#NID_X9_62_c2äb191v2
 689

	)

214 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

216 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

217 
	#NID_X9_62_c2äb191v3
 690

	)

218 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

220 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

221 
	#NID_X9_62_c2⁄b191v4
 691

	)

222 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

224 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

225 
	#NID_X9_62_c2⁄b191v5
 692

	)

226 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

228 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

229 
	#NID_X9_62_c2≤b208w1
 693

	)

230 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

232 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

233 
	#NID_X9_62_c2äb239v1
 694

	)

234 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

236 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

237 
	#NID_X9_62_c2äb239v2
 695

	)

238 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

240 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

241 
	#NID_X9_62_c2äb239v3
 696

	)

242 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

244 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

245 
	#NID_X9_62_c2⁄b239v4
 697

	)

246 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

248 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

249 
	#NID_X9_62_c2⁄b239v5
 698

	)

250 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

252 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

253 
	#NID_X9_62_c2≤b272w1
 699

	)

254 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

256 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

257 
	#NID_X9_62_c2≤b304w1
 700

	)

258 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

260 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

261 
	#NID_X9_62_c2äb359v1
 701

	)

262 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

264 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

265 
	#NID_X9_62_c2≤b368w1
 702

	)

266 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

268 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

269 
	#NID_X9_62_c2äb431r1
 703

	)

270 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

272 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

274 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

275 
	#NID_X9_62_¥ime192v1
 409

	)

276 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

278 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

279 
	#NID_X9_62_¥ime192v2
 410

	)

280 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

282 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

283 
	#NID_X9_62_¥ime192v3
 411

	)

284 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

286 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

287 
	#NID_X9_62_¥ime239v1
 412

	)

288 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

290 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

291 
	#NID_X9_62_¥ime239v2
 413

	)

292 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

294 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

295 
	#NID_X9_62_¥ime239v3
 414

	)

296 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

298 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

299 
	#NID_X9_62_¥ime256v1
 415

	)

300 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

302 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

304 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

305 
	#NID_ecdß_wôh_SHA1
 416

	)

306 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

308 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

310 
	#SN_£˝112r1
 "£˝112r1"

	)

311 
	#NID_£˝112r1
 704

	)

312 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

314 
	#SN_£˝112r2
 "£˝112r2"

	)

315 
	#NID_£˝112r2
 705

	)

316 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

318 
	#SN_£˝128r1
 "£˝128r1"

	)

319 
	#NID_£˝128r1
 706

	)

320 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

322 
	#SN_£˝128r2
 "£˝128r2"

	)

323 
	#NID_£˝128r2
 707

	)

324 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

326 
	#SN_£˝160k1
 "£˝160k1"

	)

327 
	#NID_£˝160k1
 708

	)

328 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

330 
	#SN_£˝160r1
 "£˝160r1"

	)

331 
	#NID_£˝160r1
 709

	)

332 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

334 
	#SN_£˝160r2
 "£˝160r2"

	)

335 
	#NID_£˝160r2
 710

	)

336 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

338 
	#SN_£˝192k1
 "£˝192k1"

	)

339 
	#NID_£˝192k1
 711

	)

340 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

342 
	#SN_£˝224k1
 "£˝224k1"

	)

343 
	#NID_£˝224k1
 712

	)

344 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

346 
	#SN_£˝224r1
 "£˝224r1"

	)

347 
	#NID_£˝224r1
 713

	)

348 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

350 
	#SN_£˝256k1
 "£˝256k1"

	)

351 
	#NID_£˝256k1
 714

	)

352 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

354 
	#SN_£˝384r1
 "£˝384r1"

	)

355 
	#NID_£˝384r1
 715

	)

356 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

358 
	#SN_£˝521r1
 "£˝521r1"

	)

359 
	#NID_£˝521r1
 716

	)

360 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

362 
	#SN_£˘113r1
 "£˘113r1"

	)

363 
	#NID_£˘113r1
 717

	)

364 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

366 
	#SN_£˘113r2
 "£˘113r2"

	)

367 
	#NID_£˘113r2
 718

	)

368 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

370 
	#SN_£˘131r1
 "£˘131r1"

	)

371 
	#NID_£˘131r1
 719

	)

372 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

374 
	#SN_£˘131r2
 "£˘131r2"

	)

375 
	#NID_£˘131r2
 720

	)

376 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

378 
	#SN_£˘163k1
 "£˘163k1"

	)

379 
	#NID_£˘163k1
 721

	)

380 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

382 
	#SN_£˘163r1
 "£˘163r1"

	)

383 
	#NID_£˘163r1
 722

	)

384 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

386 
	#SN_£˘163r2
 "£˘163r2"

	)

387 
	#NID_£˘163r2
 723

	)

388 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

390 
	#SN_£˘193r1
 "£˘193r1"

	)

391 
	#NID_£˘193r1
 724

	)

392 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

394 
	#SN_£˘193r2
 "£˘193r2"

	)

395 
	#NID_£˘193r2
 725

	)

396 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

398 
	#SN_£˘233k1
 "£˘233k1"

	)

399 
	#NID_£˘233k1
 726

	)

400 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

402 
	#SN_£˘233r1
 "£˘233r1"

	)

403 
	#NID_£˘233r1
 727

	)

404 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

406 
	#SN_£˘239k1
 "£˘239k1"

	)

407 
	#NID_£˘239k1
 728

	)

408 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

410 
	#SN_£˘283k1
 "£˘283k1"

	)

411 
	#NID_£˘283k1
 729

	)

412 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

414 
	#SN_£˘283r1
 "£˘283r1"

	)

415 
	#NID_£˘283r1
 730

	)

416 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

418 
	#SN_£˘409k1
 "£˘409k1"

	)

419 
	#NID_£˘409k1
 731

	)

420 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

422 
	#SN_£˘409r1
 "£˘409r1"

	)

423 
	#NID_£˘409r1
 732

	)

424 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

426 
	#SN_£˘571k1
 "£˘571k1"

	)

427 
	#NID_£˘571k1
 733

	)

428 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

430 
	#SN_£˘571r1
 "£˘571r1"

	)

431 
	#NID_£˘571r1
 734

	)

432 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

434 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

436 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

437 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

438 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

440 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

441 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

442 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

444 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

445 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

446 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

448 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

449 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

450 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

452 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

453 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

454 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

456 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

457 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

458 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

460 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

461 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

462 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

464 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

465 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

466 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

468 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

469 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

470 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

472 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

473 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

474 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

476 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

477 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

478 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

480 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

481 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

482 
	#NID_ˇ°5_cbc
 108

	)

483 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

485 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

486 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

487 
	#NID_ˇ°5_ecb
 109

	)

489 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

490 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

491 
	#NID_ˇ°5_cfb64
 110

	)

493 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

494 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

495 
	#NID_ˇ°5_ofb64
 111

	)

497 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

498 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

499 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

501 
	#SN_rßdsi
 "rßdsi"

	)

502 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

503 
	#NID_rßdsi
 1

	)

504 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

506 
	#SN_pkcs
 "pkcs"

	)

507 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

508 
	#NID_pkcs
 2

	)

509 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

511 
	#SN_pkcs1
 "pkcs1"

	)

512 
	#NID_pkcs1
 186

	)

513 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

515 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

516 
	#NID_rßEn¸y±i⁄
 6

	)

517 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

519 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

520 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

521 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

522 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

524 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

525 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

526 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

527 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

529 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

530 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

531 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

532 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

534 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

535 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

536 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

537 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

539 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

540 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

541 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

542 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

544 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

545 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

546 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

547 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

549 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

550 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

551 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

552 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

554 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

555 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

556 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

557 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

559 
	#SN_pkcs3
 "pkcs3"

	)

560 
	#NID_pkcs3
 27

	)

561 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

563 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

564 
	#NID_dhKeyAgªemít
 28

	)

565 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

567 
	#SN_pkcs5
 "pkcs5"

	)

568 
	#NID_pkcs5
 187

	)

569 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

571 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

572 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

573 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

574 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

576 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

577 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

578 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

579 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

581 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

582 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

583 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

584 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

586 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

587 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

588 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

589 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

591 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

592 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

593 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

594 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

596 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

597 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

598 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

599 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

601 
	#LN_id_pbkdf2
 "PBKDF2"

	)

602 
	#NID_id_pbkdf2
 69

	)

603 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

605 
	#LN_pbes2
 "PBES2"

	)

606 
	#NID_pbes2
 161

	)

607 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

609 
	#LN_pbmac1
 "PBMAC1"

	)

610 
	#NID_pbmac1
 162

	)

611 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

613 
	#SN_pkcs7
 "pkcs7"

	)

614 
	#NID_pkcs7
 20

	)

615 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

617 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

618 
	#NID_pkcs7_d©a
 21

	)

619 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

621 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

622 
	#NID_pkcs7_sig√d
 22

	)

623 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

625 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

626 
	#NID_pkcs7_ívñ›ed
 23

	)

627 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

629 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

630 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

631 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

633 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

634 
	#NID_pkcs7_dige°
 25

	)

635 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

637 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

638 
	#NID_pkcs7_í¸y±ed
 26

	)

639 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

641 
	#SN_pkcs9
 "pkcs9"

	)

642 
	#NID_pkcs9
 47

	)

643 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

645 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

646 
	#NID_pkcs9_emaûAddªss
 48

	)

647 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

649 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

650 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

651 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

653 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

654 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

655 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

657 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

658 
	#NID_pkcs9_mesßgeDige°
 51

	)

659 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

661 
	#LN_pkcs9_signögTime
 "signögTime"

	)

662 
	#NID_pkcs9_signögTime
 52

	)

663 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

665 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

666 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

667 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

669 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

670 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

671 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

673 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

674 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

675 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

677 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

678 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

679 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

681 
	#SN_ext_ªq
 "extReq"

	)

682 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

683 
	#NID_ext_ªq
 172

	)

684 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

686 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

687 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

688 
	#NID_SMIMEC≠abûôõs
 167

	)

689 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

691 
	#SN_SMIME
 "SMIME"

	)

692 
	#LN_SMIME
 "S/MIME"

	)

693 
	#NID_SMIME
 188

	)

694 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

696 
	#SN_id_smime_mod
 "id-smime-mod"

	)

697 
	#NID_id_smime_mod
 189

	)

698 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

700 
	#SN_id_smime_˘
 "id-smime-˘"

	)

701 
	#NID_id_smime_˘
 190

	)

702 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

704 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

705 
	#NID_id_smime_Ø
 191

	)

706 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

708 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

709 
	#NID_id_smime_Æg
 192

	)

710 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

712 
	#SN_id_smime_cd
 "id-smime-cd"

	)

713 
	#NID_id_smime_cd
 193

	)

714 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

716 
	#SN_id_smime_•q
 "id-smime-•q"

	)

717 
	#NID_id_smime_•q
 194

	)

718 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

720 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

721 
	#NID_id_smime_˘i
 195

	)

722 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

724 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

725 
	#NID_id_smime_mod_cms
 196

	)

726 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

728 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

729 
	#NID_id_smime_mod_ess
 197

	)

730 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

732 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

733 
	#NID_id_smime_mod_oid
 198

	)

734 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

736 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

737 
	#NID_id_smime_mod_msg_v3
 199

	)

738 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

740 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

741 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

742 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

744 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

745 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

746 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

748 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

749 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

750 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

752 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

753 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

754 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

756 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

757 
	#NID_id_smime_˘_ª˚ùt
 204

	)

758 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

760 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

761 
	#NID_id_smime_˘_authD©a
 205

	)

762 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

764 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

765 
	#NID_id_smime_˘_publishCît
 206

	)

766 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

768 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

769 
	#NID_id_smime_˘_TSTInfo
 207

	)

770 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

772 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

773 
	#NID_id_smime_˘_TDTInfo
 208

	)

774 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

776 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

777 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

778 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

780 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

781 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

782 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

784 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

785 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

786 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

788 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

789 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

790 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

792 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

793 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

794 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

796 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

797 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

798 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

800 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

801 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

802 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

804 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

805 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

806 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

808 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

809 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

810 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

812 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

813 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

814 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

816 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

817 
	#NID_id_smime_Ø_macVÆue
 219

	)

818 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

820 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

821 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

822 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

824 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

825 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

826 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

828 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

829 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

830 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

832 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

833 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

834 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

836 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

837 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

838 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

840 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

841 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

842 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

844 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

845 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

846 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

848 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

849 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

850 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

852 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

853 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

854 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

856 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

857 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

858 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

860 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

861 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

862 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

864 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

865 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

866 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

868 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

869 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

870 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

872 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

873 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

874 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

876 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

877 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

878 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

880 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

881 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

882 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

884 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

885 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

886 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

888 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

889 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

890 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

892 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

893 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

894 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

896 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

897 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

898 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

900 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

901 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

902 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

904 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

905 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

906 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

908 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

909 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

910 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

912 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

913 
	#NID_id_smime_Æg_3DESwøp
 243

	)

914 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

916 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

917 
	#NID_id_smime_Æg_RC2wøp
 244

	)

918 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

920 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

921 
	#NID_id_smime_Æg_ESDH
 245

	)

922 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

924 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

925 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

926 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

928 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

929 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

930 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

932 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

933 
	#NID_id_smime_cd_ld≠
 248

	)

934 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

936 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

937 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

938 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

940 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

941 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

942 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

944 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

945 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

946 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

948 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

949 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

950 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

952 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

953 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

954 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

956 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

957 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

958 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

960 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

961 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

962 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

964 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

965 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

966 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

968 
	#LN_‰õndlyName
 "‰õndlyName"

	)

969 
	#NID_‰õndlyName
 156

	)

970 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

972 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

973 
	#NID_loˇlKeyID
 157

	)

974 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

976 
	#SN_ms_c•_«me
 "CSPName"

	)

977 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

978 
	#NID_ms_c•_«me
 417

	)

979 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

981 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

983 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

984 
	#NID_x509Cîtifiˇã
 158

	)

985 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

987 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

988 
	#NID_sdsiCîtifiˇã
 159

	)

989 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

991 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

993 
	#LN_x509Cæ
 "x509Cæ"

	)

994 
	#NID_x509Cæ
 160

	)

995 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

997 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

999 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1001 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1002 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1003 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1004 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1006 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1007 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1008 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1009 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1011 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1012 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1013 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1014 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1016 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1017 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1018 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1019 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1021 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1022 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1023 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1024 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1026 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1027 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1028 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1029 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1031 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1033 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1035 
	#LN_keyBag
 "keyBag"

	)

1036 
	#NID_keyBag
 150

	)

1037 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1039 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1040 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1041 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1043 
	#LN_˚πBag
 "˚πBag"

	)

1044 
	#NID_˚πBag
 152

	)

1045 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1047 
	#LN_¸lBag
 "¸lBag"

	)

1048 
	#NID_¸lBag
 153

	)

1049 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1051 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1052 
	#NID_£¸ëBag
 154

	)

1053 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1055 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1056 
	#NID_ß„C⁄ã¡sBag
 155

	)

1057 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1059 
	#SN_md2
 "MD2"

	)

1060 
	#LN_md2
 "md2"

	)

1061 
	#NID_md2
 3

	)

1062 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1064 
	#SN_md4
 "MD4"

	)

1065 
	#LN_md4
 "md4"

	)

1066 
	#NID_md4
 257

	)

1067 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1069 
	#SN_md5
 "MD5"

	)

1070 
	#LN_md5
 "md5"

	)

1071 
	#NID_md5
 4

	)

1072 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1074 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1075 
	#LN_md5_sha1
 "md5-sha1"

	)

1076 
	#NID_md5_sha1
 114

	)

1078 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1079 
	#NID_hmacWôhSHA1
 163

	)

1080 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1082 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1083 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1084 
	#NID_rc2_cbc
 37

	)

1085 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1087 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1088 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1089 
	#NID_rc2_ecb
 38

	)

1091 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1092 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1093 
	#NID_rc2_cfb64
 39

	)

1095 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1096 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1097 
	#NID_rc2_ofb64
 40

	)

1099 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1100 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1101 
	#NID_rc2_40_cbc
 98

	)

1103 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1104 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1105 
	#NID_rc2_64_cbc
 166

	)

1107 
	#SN_rc4
 "RC4"

	)

1108 
	#LN_rc4
 "rc4"

	)

1109 
	#NID_rc4
 5

	)

1110 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1112 
	#SN_rc4_40
 "RC4-40"

	)

1113 
	#LN_rc4_40
 "rc4-40"

	)

1114 
	#NID_rc4_40
 97

	)

1116 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1117 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1118 
	#NID_des_ede3_cbc
 44

	)

1119 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1121 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1122 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1123 
	#NID_rc5_cbc
 120

	)

1124 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1126 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1127 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1128 
	#NID_rc5_ecb
 121

	)

1130 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1131 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1132 
	#NID_rc5_cfb64
 122

	)

1134 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1135 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1136 
	#NID_rc5_ofb64
 123

	)

1138 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1139 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1140 
	#NID_ms_ext_ªq
 171

	)

1141 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1143 
	#SN_ms_code_öd
 "msCodeInd"

	)

1144 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1145 
	#NID_ms_code_öd
 134

	)

1146 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1148 
	#SN_ms_code_com
 "msCodeCom"

	)

1149 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1150 
	#NID_ms_code_com
 135

	)

1151 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1153 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1154 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1155 
	#NID_ms_˘l_sign
 136

	)

1156 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1158 
	#SN_ms_sgc
 "msSGC"

	)

1159 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1160 
	#NID_ms_sgc
 137

	)

1161 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1163 
	#SN_ms_efs
 "msEFS"

	)

1164 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1165 
	#NID_ms_efs
 138

	)

1166 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1168 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1169 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1170 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1171 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1173 
	#SN_ms_u≤
 "msUPN"

	)

1174 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1175 
	#NID_ms_u≤
 649

	)

1176 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1178 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1179 
	#LN_idó_cbc
 "idó-cbc"

	)

1180 
	#NID_idó_cbc
 34

	)

1181 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1183 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1184 
	#LN_idó_ecb
 "idó-ecb"

	)

1185 
	#NID_idó_ecb
 36

	)

1187 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1188 
	#LN_idó_cfb64
 "idó-cfb"

	)

1189 
	#NID_idó_cfb64
 35

	)

1191 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1192 
	#LN_idó_ofb64
 "idó-ofb"

	)

1193 
	#NID_idó_ofb64
 46

	)

1195 
	#SN_bf_cbc
 "BF-CBC"

	)

1196 
	#LN_bf_cbc
 "bf-cbc"

	)

1197 
	#NID_bf_cbc
 91

	)

1198 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1200 
	#SN_bf_ecb
 "BF-ECB"

	)

1201 
	#LN_bf_ecb
 "bf-ecb"

	)

1202 
	#NID_bf_ecb
 92

	)

1204 
	#SN_bf_cfb64
 "BF-CFB"

	)

1205 
	#LN_bf_cfb64
 "bf-cfb"

	)

1206 
	#NID_bf_cfb64
 93

	)

1208 
	#SN_bf_ofb64
 "BF-OFB"

	)

1209 
	#LN_bf_ofb64
 "bf-ofb"

	)

1210 
	#NID_bf_ofb64
 94

	)

1212 
	#SN_id_pkix
 "PKIX"

	)

1213 
	#NID_id_pkix
 127

	)

1214 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1216 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1217 
	#NID_id_pkix_mod
 258

	)

1218 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1220 
	#SN_id_≥
 "id-≥"

	)

1221 
	#NID_id_≥
 175

	)

1222 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1224 
	#SN_id_qt
 "id-qt"

	)

1225 
	#NID_id_qt
 259

	)

1226 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1228 
	#SN_id_kp
 "id-kp"

	)

1229 
	#NID_id_kp
 128

	)

1230 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1232 
	#SN_id_ô
 "id-ô"

	)

1233 
	#NID_id_ô
 260

	)

1234 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1236 
	#SN_id_pkù
 "id-pkù"

	)

1237 
	#NID_id_pkù
 261

	)

1238 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1240 
	#SN_id_Æg
 "id-Æg"

	)

1241 
	#NID_id_Æg
 262

	)

1242 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1244 
	#SN_id_cmc
 "id-cmc"

	)

1245 
	#NID_id_cmc
 263

	)

1246 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1248 
	#SN_id_⁄
 "id-⁄"

	)

1249 
	#NID_id_⁄
 264

	)

1250 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1252 
	#SN_id_pda
 "id-pda"

	)

1253 
	#NID_id_pda
 265

	)

1254 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1256 
	#SN_id_aˇ
 "id-aˇ"

	)

1257 
	#NID_id_aˇ
 266

	)

1258 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1260 
	#SN_id_qcs
 "id-qcs"

	)

1261 
	#NID_id_qcs
 267

	)

1262 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1264 
	#SN_id_c˘
 "id-c˘"

	)

1265 
	#NID_id_c˘
 268

	)

1266 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1268 
	#SN_id_µl
 "id-µl"

	)

1269 
	#NID_id_µl
 662

	)

1270 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1272 
	#SN_id_ad
 "id-ad"

	)

1273 
	#NID_id_ad
 176

	)

1274 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1276 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1277 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1278 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1280 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1281 
	#NID_id_pkix1_im∂icô_88
 270

	)

1282 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1284 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1285 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1286 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1288 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1289 
	#NID_id_pkix1_im∂icô_93
 272

	)

1290 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1292 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1293 
	#NID_id_mod_¸mf
 273

	)

1294 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1296 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1297 
	#NID_id_mod_cmc
 274

	)

1298 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1300 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1301 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1302 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1304 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1305 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1306 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1308 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1309 
	#NID_id_mod_cmp
 277

	)

1310 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1312 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1313 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1314 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1316 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1317 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1318 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1320 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1321 
	#NID_id_mod_©åibuã_˚π
 280

	)

1322 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1324 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1325 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1326 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1328 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1329 
	#NID_id_mod_oc•
 282

	)

1330 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1332 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1333 
	#NID_id_mod_dvcs
 283

	)

1334 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1336 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1337 
	#NID_id_mod_cmp2000
 284

	)

1338 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1340 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1341 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1342 
	#NID_öfo_ac˚ss
 177

	)

1343 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1345 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1346 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1347 
	#NID_biomëricInfo
 285

	)

1348 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1350 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1351 
	#NID_qcSèãmíts
 286

	)

1352 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1354 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1355 
	#NID_ac_audôE¡ôy
 287

	)

1356 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1358 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1359 
	#NID_ac_èrgëög
 288

	)

1360 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1362 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1363 
	#NID_ØC⁄åﬁs
 289

	)

1364 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1366 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1367 
	#NID_sbgp_ùAddrBlock
 290

	)

1368 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1370 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1371 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1372 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1374 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1375 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1376 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1378 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1379 
	#NID_ac_¥oxyög
 397

	)

1380 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1382 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1383 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1384 
	#NID_söfo_ac˚ss
 398

	)

1385 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1387 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1388 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1389 
	#NID_¥oxyCîtInfo
 663

	)

1390 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1392 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1393 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1394 
	#NID_id_qt_˝s
 164

	)

1395 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1397 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1398 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1399 
	#NID_id_qt_unŸi˚
 165

	)

1400 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1402 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1403 
	#NID_ãxtNŸi˚
 293

	)

1404 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1406 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1407 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1408 
	#NID_£rvî_auth
 129

	)

1409 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1411 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1412 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1413 
	#NID_˛õ¡_auth
 130

	)

1414 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1416 
	#SN_code_sign
 "codeSignög"

	)

1417 
	#LN_code_sign
 "CodêSignög"

	)

1418 
	#NID_code_sign
 131

	)

1419 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1421 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1422 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1423 
	#NID_emaû_¥Ÿe˘
 132

	)

1424 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1426 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1427 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1428 
	#NID_ù£cEndSy°em
 294

	)

1429 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1431 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1432 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1433 
	#NID_ù£cTu¬ñ
 295

	)

1434 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1436 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1437 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1438 
	#NID_ù£cU£r
 296

	)

1439 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1441 
	#SN_time_°amp
 "timeSèmpög"

	)

1442 
	#LN_time_°amp
 "TimêSèmpög"

	)

1443 
	#NID_time_°amp
 133

	)

1444 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1446 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1447 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1448 
	#NID_OCSP_sign
 180

	)

1449 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1451 
	#SN_dvcs
 "DVCS"

	)

1452 
	#LN_dvcs
 "dvcs"

	)

1453 
	#NID_dvcs
 297

	)

1454 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1456 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1457 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1458 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1460 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1461 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1462 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1464 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1465 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1466 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1468 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1469 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1470 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1472 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1473 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1474 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1476 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1477 
	#NID_id_ô_cuºítCRL
 303

	)

1478 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1480 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1481 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1482 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1484 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1485 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1486 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1488 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1489 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1490 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1492 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1493 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1494 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1496 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1497 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1498 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1500 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1501 
	#NID_id_ô_ªvPas•hø£
 309

	)

1502 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1504 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1505 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1506 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1508 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1509 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1510 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1512 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1513 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1514 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1516 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1517 
	#NID_id_ªgCål
 313

	)

1518 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1520 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1521 
	#NID_id_ªgInfo
 314

	)

1522 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1524 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1525 
	#NID_id_ªgCål_ªgTokí
 315

	)

1526 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1528 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1529 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1530 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1532 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1533 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1534 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1536 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1537 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1538 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1540 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1541 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1542 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1544 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1545 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1546 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1548 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1549 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1550 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1552 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1553 
	#NID_id_ªgInfo_˚πReq
 322

	)

1554 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1556 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1557 
	#NID_id_Æg_des40
 323

	)

1558 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1560 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1561 
	#NID_id_Æg_noSig«tuª
 324

	)

1562 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1564 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1565 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1566 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1568 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1569 
	#NID_id_Æg_dh_p›
 326

	)

1570 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1572 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1573 
	#NID_id_cmc_°©usInfo
 327

	)

1574 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1576 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1577 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1578 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1580 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1581 
	#NID_id_cmc_idítôyProof
 329

	)

1582 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1584 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1585 
	#NID_id_cmc_d©aRëu∫
 330

	)

1586 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1588 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1589 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1590 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1592 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1593 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1594 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1596 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1597 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1598 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1600 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1601 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1602 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1604 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1605 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1606 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1608 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1609 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1610 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1612 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1613 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1614 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1616 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1617 
	#NID_id_cmc_gëCît
 338

	)

1618 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1620 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1621 
	#NID_id_cmc_gëCRL
 339

	)

1622 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1624 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1625 
	#NID_id_cmc_ªvokeReque°
 340

	)

1626 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1628 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1629 
	#NID_id_cmc_ªgInfo
 341

	)

1630 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1632 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1633 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1634 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1636 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1637 
	#NID_id_cmc_quîyPídög
 343

	)

1638 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1640 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1641 
	#NID_id_cmc_p›LökR™dom
 344

	)

1642 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1644 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1645 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1646 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1648 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1649 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1650 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1652 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1653 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1654 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1656 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1657 
	#NID_id_pda_d©eOfBúth
 348

	)

1658 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1660 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1661 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1662 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1664 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1665 
	#NID_id_pda_gídî
 351

	)

1666 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1668 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1669 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1670 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1672 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1673 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1674 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1676 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1677 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1678 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1680 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1681 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1682 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1684 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1685 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1686 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1688 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1689 
	#NID_id_aˇ_group
 357

	)

1690 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1692 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1693 
	#NID_id_aˇ_rﬁe
 358

	)

1694 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1696 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1697 
	#NID_id_aˇ_ícAârs
 399

	)

1698 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1700 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1701 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1702 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1704 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1705 
	#NID_id_c˘_¸s
 360

	)

1706 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1708 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1709 
	#NID_id_c˘_PKID©a
 361

	)

1710 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1712 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1713 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1714 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1716 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1717 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1718 
	#NID_id_µl_™yL™guage
 664

	)

1719 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1721 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1722 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1723 
	#NID_id_µl_öhîôAŒ
 665

	)

1724 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1726 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1727 
	#LN_Indïídít
 "Indïídít"

	)

1728 
	#NID_Indïídít
 667

	)

1729 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1731 
	#SN_ad_OCSP
 "OCSP"

	)

1732 
	#LN_ad_OCSP
 "OCSP"

	)

1733 
	#NID_ad_OCSP
 178

	)

1734 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1736 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1737 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1738 
	#NID_ad_ˇ_issuîs
 179

	)

1739 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1741 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1742 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1743 
	#NID_ad_timeSèmpög
 363

	)

1744 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1746 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1747 
	#LN_ad_dvcs
 "ad dvcs"

	)

1748 
	#NID_ad_dvcs
 364

	)

1749 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1751 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1753 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1754 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1755 
	#NID_id_pkix_OCSP_basic
 365

	)

1756 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1758 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1759 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1760 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1761 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1763 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1764 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1765 
	#NID_id_pkix_OCSP_CæID
 367

	)

1766 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1768 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1769 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1770 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1771 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1773 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1774 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1775 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1776 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1778 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1779 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1780 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1781 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1783 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1784 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1785 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1786 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1788 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1789 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1790 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1791 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1793 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1794 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1795 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1797 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1798 
	#NID_id_pkix_OCSP_∑th
 374

	)

1799 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1801 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1802 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1803 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1804 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1806 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1807 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1808 
	#NID_Æg‹ôhm
 376

	)

1809 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1811 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1812 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1813 
	#NID_md5WôhRSA
 104

	)

1814 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1816 
	#SN_des_ecb
 "DES-ECB"

	)

1817 
	#LN_des_ecb
 "des-ecb"

	)

1818 
	#NID_des_ecb
 29

	)

1819 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1821 
	#SN_des_cbc
 "DES-CBC"

	)

1822 
	#LN_des_cbc
 "des-cbc"

	)

1823 
	#NID_des_cbc
 31

	)

1824 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1826 
	#SN_des_ofb64
 "DES-OFB"

	)

1827 
	#LN_des_ofb64
 "des-ofb"

	)

1828 
	#NID_des_ofb64
 45

	)

1829 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1831 
	#SN_des_cfb64
 "DES-CFB"

	)

1832 
	#LN_des_cfb64
 "des-cfb"

	)

1833 
	#NID_des_cfb64
 30

	)

1834 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1836 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1837 
	#NID_rßSig«tuª
 377

	)

1838 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1840 
	#SN_dß_2
 "DSA-ﬁd"

	)

1841 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1842 
	#NID_dß_2
 67

	)

1843 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1845 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1846 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1847 
	#NID_dßWôhSHA
 66

	)

1848 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1850 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1851 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1852 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1853 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1855 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1856 
	#LN_des_ede_ecb
 "des-ede"

	)

1857 
	#NID_des_ede_ecb
 32

	)

1858 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1860 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1861 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1862 
	#NID_des_ede3_ecb
 33

	)

1864 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1865 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1866 
	#NID_des_ede_cbc
 43

	)

1868 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1869 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1870 
	#NID_des_ede_cfb64
 60

	)

1872 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1873 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1874 
	#NID_des_ede3_cfb64
 61

	)

1876 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1877 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1878 
	#NID_des_ede_ofb64
 62

	)

1880 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1881 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1882 
	#NID_des_ede3_ofb64
 63

	)

1884 
	#SN_desx_cbc
 "DESX-CBC"

	)

1885 
	#LN_desx_cbc
 "desx-cbc"

	)

1886 
	#NID_desx_cbc
 80

	)

1888 
	#SN_sha
 "SHA"

	)

1889 
	#LN_sha
 "sha"

	)

1890 
	#NID_sha
 41

	)

1891 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

1893 
	#SN_sha1
 "SHA1"

	)

1894 
	#LN_sha1
 "sha1"

	)

1895 
	#NID_sha1
 64

	)

1896 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

1898 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

1899 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

1900 
	#NID_dßWôhSHA1_2
 70

	)

1901 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

1903 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

1904 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

1905 
	#NID_sha1WôhRSA
 115

	)

1906 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

1908 
	#SN_rùemd160
 "RIPEMD160"

	)

1909 
	#LN_rùemd160
 "rùemd160"

	)

1910 
	#NID_rùemd160
 117

	)

1911 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

1913 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

1914 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

1915 
	#NID_rùemd160WôhRSA
 119

	)

1916 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

1918 
	#SN_sx√t
 "SXNëID"

	)

1919 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

1920 
	#NID_sx√t
 143

	)

1921 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

1923 
	#SN_X500
 "X500"

	)

1924 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

1925 
	#NID_X500
 11

	)

1926 
	#OBJ_X500
 2L,5L

	)

1928 
	#SN_X509
 "X509"

	)

1929 
	#NID_X509
 12

	)

1930 
	#OBJ_X509
 
OBJ_X500
,4L

	)

1932 
	#SN_comm⁄Name
 "CN"

	)

1933 
	#LN_comm⁄Name
 "comm⁄Name"

	)

1934 
	#NID_comm⁄Name
 13

	)

1935 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

1937 
	#SN_su∫ame
 "SN"

	)

1938 
	#LN_su∫ame
 "su∫ame"

	)

1939 
	#NID_su∫ame
 100

	)

1940 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

1942 
	#LN_£rülNumbî
 "£rülNumbî"

	)

1943 
	#NID_£rülNumbî
 105

	)

1944 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

1946 
	#SN_cou¡ryName
 "C"

	)

1947 
	#LN_cou¡ryName
 "cou¡ryName"

	)

1948 
	#NID_cou¡ryName
 14

	)

1949 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

1951 
	#SN_loˇlôyName
 "L"

	)

1952 
	#LN_loˇlôyName
 "loˇlôyName"

	)

1953 
	#NID_loˇlôyName
 15

	)

1954 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

1956 
	#SN_°©eOrProvö˚Name
 "ST"

	)

1957 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

1958 
	#NID_°©eOrProvö˚Name
 16

	)

1959 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

1961 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

1962 
	#NID_°ªëAddªss
 660

	)

1963 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

1965 
	#SN_‹g™iz©i⁄Name
 "O"

	)

1966 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

1967 
	#NID_‹g™iz©i⁄Name
 17

	)

1968 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

1970 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

1971 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

1972 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

1973 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

1975 
	#LN_tôÀ
 "tôÀ"

	)

1976 
	#NID_tôÀ
 106

	)

1977 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

1979 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

1980 
	#NID_des¸ùti⁄
 107

	)

1981 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

1983 
	#LN_po°ÆCode
 "po°ÆCode"

	)

1984 
	#NID_po°ÆCode
 661

	)

1985 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

1987 
	#SN_«me
 "«me"

	)

1988 
	#LN_«me
 "«me"

	)

1989 
	#NID_«me
 173

	)

1990 
	#OBJ_«me
 
OBJ_X509
,41L

	)

1992 
	#SN_givíName
 "GN"

	)

1993 
	#LN_givíName
 "givíName"

	)

1994 
	#NID_givíName
 99

	)

1995 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

1997 
	#LN_öôüls
 "öôüls"

	)

1998 
	#NID_öôüls
 101

	)

1999 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2001 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2002 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2003 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2005 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2006 
	#NID_x500UniqueIdítifõr
 503

	)

2007 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2009 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2010 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2011 
	#NID_dnQuÆifõr
 174

	)

2012 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2014 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2015 
	#NID_p£ud⁄ym
 510

	)

2016 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2018 
	#SN_rﬁe
 "rﬁe"

	)

2019 
	#LN_rﬁe
 "rﬁe"

	)

2020 
	#NID_rﬁe
 400

	)

2021 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2023 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2024 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2025 
	#NID_X500Æg‹ôhms
 378

	)

2026 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2028 
	#SN_rß
 "RSA"

	)

2029 
	#LN_rß
 "rß"

	)

2030 
	#NID_rß
 19

	)

2031 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2033 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2034 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2035 
	#NID_mdc2WôhRSA
 96

	)

2036 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2038 
	#SN_mdc2
 "MDC2"

	)

2039 
	#LN_mdc2
 "mdc2"

	)

2040 
	#NID_mdc2
 95

	)

2041 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2043 
	#SN_id_˚
 "id-˚"

	)

2044 
	#NID_id_˚
 81

	)

2045 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2047 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2048 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2049 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2050 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2052 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2053 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2054 
	#NID_subje˘_key_idítifõr
 82

	)

2055 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2057 
	#SN_key_ußge
 "keyUßge"

	)

2058 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2059 
	#NID_key_ußge
 83

	)

2060 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2062 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2063 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2064 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2065 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2067 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2068 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2069 
	#NID_subje˘_Æt_«me
 85

	)

2070 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2072 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2073 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2074 
	#NID_issuî_Æt_«me
 86

	)

2075 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2077 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2078 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2079 
	#NID_basic_c⁄°øöts
 87

	)

2080 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2082 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2083 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2084 
	#NID_¸l_numbî
 88

	)

2085 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2087 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2088 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2089 
	#NID_¸l_ªas⁄
 141

	)

2090 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2092 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2093 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2094 
	#NID_övÆidôy_d©e
 142

	)

2095 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2097 
	#SN_dñè_¸l
 "dñèCRL"

	)

2098 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2099 
	#NID_dñè_¸l
 140

	)

2100 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2102 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2103 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°rubuti⁄ Poöt"

	)

2104 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2105 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2107 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2108 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2109 
	#NID_˚πifiˇã_issuî
 771

	)

2110 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2112 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2113 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2114 
	#NID_«me_c⁄°øöts
 666

	)

2115 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2117 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2118 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2119 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2120 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2122 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2123 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2124 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2125 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2127 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2128 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2129 
	#NID_™y_pﬁicy
 746

	)

2130 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2132 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2133 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2134 
	#NID_pﬁicy_m≠pögs
 747

	)

2135 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2137 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2138 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2139 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2140 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2142 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2143 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2144 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2145 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2147 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2148 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2149 
	#NID_ext_key_ußge
 126

	)

2150 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2152 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2153 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2154 
	#NID_öhibô_™y_pﬁicy
 748

	)

2155 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2157 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2158 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2159 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2160 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2162 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2163 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2164 
	#NID_no_ªv_avaû
 403

	)

2165 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2167 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2168 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2169 
	#NID_√tsˇ≥
 57

	)

2170 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2172 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2173 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2174 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2175 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2177 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2178 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2179 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2180 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2182 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2183 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2184 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2185 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2187 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2188 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2189 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2190 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2192 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2193 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2194 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2195 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2197 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2198 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2199 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2200 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2202 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2203 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2204 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2205 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2207 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2208 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2209 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2210 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2212 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2213 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2214 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2215 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2217 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2218 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2219 
	#NID_√tsˇ≥_commít
 78

	)

2220 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2222 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2223 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2224 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2225 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2227 
	#SN_ns_sgc
 "nsSGC"

	)

2228 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2229 
	#NID_ns_sgc
 139

	)

2230 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2232 
	#SN_‹g
 "ORG"

	)

2233 
	#LN_‹g
 "‹g"

	)

2234 
	#NID_‹g
 379

	)

2235 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2237 
	#SN_dod
 "DOD"

	)

2238 
	#LN_dod
 "dod"

	)

2239 
	#NID_dod
 380

	)

2240 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2242 
	#SN_ü«
 "IANA"

	)

2243 
	#LN_ü«
 "ü«"

	)

2244 
	#NID_ü«
 381

	)

2245 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2247 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2249 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2250 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2251 
	#NID_Dúe˘‹y
 382

	)

2252 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2254 
	#SN_M™agemít
 "mgmt"

	)

2255 
	#LN_M™agemít
 "M™agemít"

	)

2256 
	#NID_M™agemít
 383

	)

2257 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2259 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2260 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2261 
	#NID_Ex≥rimíèl
 384

	)

2262 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2264 
	#SN_Priv©e
 "¥iv©e"

	)

2265 
	#LN_Priv©e
 "Priv©e"

	)

2266 
	#NID_Priv©e
 385

	)

2267 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2269 
	#SN_Securôy
 "£curôy"

	)

2270 
	#LN_Securôy
 "Securôy"

	)

2271 
	#NID_Securôy
 386

	)

2272 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2274 
	#SN_SNMPv2
 "¢mpv2"

	)

2275 
	#LN_SNMPv2
 "SNMPv2"

	)

2276 
	#NID_SNMPv2
 387

	)

2277 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2279 
	#LN_Maû
 "Maû"

	)

2280 
	#NID_Maû
 388

	)

2281 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2283 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2284 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2285 
	#NID_E¡î¥i£s
 389

	)

2286 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2288 
	#SN_dcObje˘
 "dcobje˘"

	)

2289 
	#LN_dcObje˘
 "dcObje˘"

	)

2290 
	#NID_dcObje˘
 390

	)

2291 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2293 
	#SN_mime_mhs
 "mime-mhs"

	)

2294 
	#LN_mime_mhs
 "MIME MHS"

	)

2295 
	#NID_mime_mhs
 504

	)

2296 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2298 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2299 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2300 
	#NID_mime_mhs_hódögs
 505

	)

2301 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2303 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2304 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2305 
	#NID_mime_mhs_bodõs
 506

	)

2306 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2308 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2309 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2310 
	#NID_id_hex_∑πül_mesßge
 507

	)

2311 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2313 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2314 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2315 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2316 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2318 
	#SN_æe_com¥essi⁄
 "RLE"

	)

2319 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

2320 
	#NID_æe_com¥essi⁄
 124

	)

2321 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

2323 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2324 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2325 
	#NID_zlib_com¥essi⁄
 125

	)

2326 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

2328 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2330 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2332 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2334 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2335 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2336 
	#NID_´s_128_ecb
 418

	)

2337 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2339 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2340 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2341 
	#NID_´s_128_cbc
 419

	)

2342 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2344 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2345 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2346 
	#NID_´s_128_ofb128
 420

	)

2347 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2349 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2350 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2351 
	#NID_´s_128_cfb128
 421

	)

2352 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2354 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2355 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2356 
	#NID_´s_192_ecb
 422

	)

2357 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2359 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2360 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2361 
	#NID_´s_192_cbc
 423

	)

2362 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2364 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2365 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2366 
	#NID_´s_192_ofb128
 424

	)

2367 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2369 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2370 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2371 
	#NID_´s_192_cfb128
 425

	)

2372 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2374 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2375 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2376 
	#NID_´s_256_ecb
 426

	)

2377 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2379 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2380 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2381 
	#NID_´s_256_cbc
 427

	)

2382 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2384 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2385 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2386 
	#NID_´s_256_ofb128
 428

	)

2387 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2389 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2390 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2391 
	#NID_´s_256_cfb128
 429

	)

2392 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2394 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2395 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2396 
	#NID_´s_128_cfb1
 650

	)

2398 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2399 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2400 
	#NID_´s_192_cfb1
 651

	)

2402 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2403 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2404 
	#NID_´s_256_cfb1
 652

	)

2406 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2407 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2408 
	#NID_´s_128_cfb8
 653

	)

2410 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2411 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2412 
	#NID_´s_192_cfb8
 654

	)

2414 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2415 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2416 
	#NID_´s_256_cfb8
 655

	)

2418 
	#SN_des_cfb1
 "DES-CFB1"

	)

2419 
	#LN_des_cfb1
 "des-cfb1"

	)

2420 
	#NID_des_cfb1
 656

	)

2422 
	#SN_des_cfb8
 "DES-CFB8"

	)

2423 
	#LN_des_cfb8
 "des-cfb8"

	)

2424 
	#NID_des_cfb8
 657

	)

2426 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2427 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2428 
	#NID_des_ede3_cfb1
 658

	)

2430 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2431 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2432 
	#NID_des_ede3_cfb8
 659

	)

2434 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2436 
	#SN_sha256
 "SHA256"

	)

2437 
	#LN_sha256
 "sha256"

	)

2438 
	#NID_sha256
 672

	)

2439 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2441 
	#SN_sha384
 "SHA384"

	)

2442 
	#LN_sha384
 "sha384"

	)

2443 
	#NID_sha384
 673

	)

2444 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2446 
	#SN_sha512
 "SHA512"

	)

2447 
	#LN_sha512
 "sha512"

	)

2448 
	#NID_sha512
 674

	)

2449 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2451 
	#SN_sha224
 "SHA224"

	)

2452 
	#LN_sha224
 "sha224"

	)

2453 
	#NID_sha224
 675

	)

2454 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2456 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2457 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2458 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2459 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2461 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2463 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2464 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2465 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2466 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2468 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2469 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2470 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2471 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2473 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2474 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2475 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2476 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2478 
	#SN_d©a
 "d©a"

	)

2479 
	#NID_d©a
 434

	)

2480 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2482 
	#SN_pss
 "pss"

	)

2483 
	#NID_pss
 435

	)

2484 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2486 
	#SN_u˛
 "u˛"

	)

2487 
	#NID_u˛
 436

	)

2488 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2490 
	#SN_pûŸ
 "pûŸ"

	)

2491 
	#NID_pûŸ
 437

	)

2492 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2494 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2495 
	#NID_pûŸAâribuãTy≥
 438

	)

2496 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2498 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2499 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2500 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2502 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2503 
	#NID_pûŸObje˘Cœss
 440

	)

2504 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2506 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2507 
	#NID_pûŸGroups
 441

	)

2508 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2510 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2511 
	#NID_iA5SåögSy¡ax
 442

	)

2512 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2514 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2515 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2516 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2518 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2519 
	#NID_pûŸObje˘
 444

	)

2520 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2522 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2523 
	#NID_pûŸPîs⁄
 445

	)

2524 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2526 
	#SN_accou¡
 "accou¡"

	)

2527 
	#NID_accou¡
 446

	)

2528 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2530 
	#SN_documít
 "documít"

	)

2531 
	#NID_documít
 447

	)

2532 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2534 
	#SN_room
 "room"

	)

2535 
	#NID_room
 448

	)

2536 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2538 
	#LN_documítSîõs
 "documítSîõs"

	)

2539 
	#NID_documítSîõs
 449

	)

2540 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2542 
	#SN_Domaö
 "domaö"

	)

2543 
	#LN_Domaö
 "Domaö"

	)

2544 
	#NID_Domaö
 392

	)

2545 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2547 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2548 
	#NID_rFC822loˇlP¨t
 450

	)

2549 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2551 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2552 
	#NID_dNSDomaö
 451

	)

2553 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2555 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2556 
	#NID_domaöRñ©edObje˘
 452

	)

2557 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2559 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2560 
	#NID_‰õndlyCou¡ry
 453

	)

2561 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2563 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2564 
	#NID_sim∂eSecurôyObje˘
 454

	)

2565 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2567 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2568 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2569 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2571 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2572 
	#NID_pûŸDSA
 456

	)

2573 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2575 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2576 
	#NID_quÆôyLabñÀdD©a
 457

	)

2577 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2579 
	#SN_u£rId
 "UID"

	)

2580 
	#LN_u£rId
 "u£rId"

	)

2581 
	#NID_u£rId
 458

	)

2582 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2584 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2585 
	#NID_ãxtEncodedORAddªss
 459

	)

2586 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2588 
	#SN_rfc822Maûbox
 "maû"

	)

2589 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2590 
	#NID_rfc822Maûbox
 460

	)

2591 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2593 
	#SN_öfo
 "öfo"

	)

2594 
	#NID_öfo
 461

	)

2595 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2597 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2598 
	#NID_ÁvourôeDrök
 462

	)

2599 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2601 
	#LN_roomNumbî
 "roomNumbî"

	)

2602 
	#NID_roomNumbî
 463

	)

2603 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2605 
	#SN_phŸo
 "phŸo"

	)

2606 
	#NID_phŸo
 464

	)

2607 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2609 
	#LN_u£rCœss
 "u£rCœss"

	)

2610 
	#NID_u£rCœss
 465

	)

2611 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2613 
	#SN_ho°
 "ho°"

	)

2614 
	#NID_ho°
 466

	)

2615 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2617 
	#SN_m™agî
 "m™agî"

	)

2618 
	#NID_m™agî
 467

	)

2619 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2621 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2622 
	#NID_documítIdítifõr
 468

	)

2623 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2625 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2626 
	#NID_documítTôÀ
 469

	)

2627 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2629 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2630 
	#NID_documítVîsi⁄
 470

	)

2631 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2633 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2634 
	#NID_documítAuth‹
 471

	)

2635 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2637 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

2638 
	#NID_documítLoˇti⁄
 472

	)

2639 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

2641 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

2642 
	#NID_homeTñïh⁄eNumbî
 473

	)

2643 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

2645 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

2646 
	#NID_£¸ë¨y
 474

	)

2647 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

2649 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

2650 
	#NID_ŸhîMaûbox
 475

	)

2651 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

2653 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

2654 
	#NID_œ°ModifõdTime
 476

	)

2655 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

2657 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

2658 
	#NID_œ°ModifõdBy
 477

	)

2659 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

2661 
	#SN_domaöComp⁄ít
 "DC"

	)

2662 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

2663 
	#NID_domaöComp⁄ít
 391

	)

2664 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

2666 
	#LN_aRec‹d
 "aRec‹d"

	)

2667 
	#NID_aRec‹d
 478

	)

2668 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

2670 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

2671 
	#NID_pûŸAâribuãTy≥27
 479

	)

2672 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

2674 
	#LN_mXRec‹d
 "mXRec‹d"

	)

2675 
	#NID_mXRec‹d
 480

	)

2676 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

2678 
	#LN_nSRec‹d
 "nSRec‹d"

	)

2679 
	#NID_nSRec‹d
 481

	)

2680 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

2682 
	#LN_sOARec‹d
 "sOARec‹d"

	)

2683 
	#NID_sOARec‹d
 482

	)

2684 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

2686 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

2687 
	#NID_cNAMERec‹d
 483

	)

2688 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

2690 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

2691 
	#NID_assocüãdDomaö
 484

	)

2692 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

2694 
	#LN_assocüãdName
 "assocüãdName"

	)

2695 
	#NID_assocüãdName
 485

	)

2696 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

2698 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

2699 
	#NID_homePo°ÆAddªss
 486

	)

2700 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

2702 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

2703 
	#NID_≥rs⁄ÆTôÀ
 487

	)

2704 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

2706 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

2707 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

2708 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

2710 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

2711 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

2712 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

2714 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

2715 
	#NID_‰õndlyCou¡ryName
 490

	)

2716 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

2718 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

2719 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

2720 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

2722 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

2723 
	#NID_j™ëMaûbox
 492

	)

2724 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

2726 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

2727 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

2728 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

2730 
	#LN_buûdögName
 "buûdögName"

	)

2731 
	#NID_buûdögName
 494

	)

2732 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

2734 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

2735 
	#NID_dSAQuÆôy
 495

	)

2736 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

2738 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

2739 
	#NID_sögÀLevñQuÆôy
 496

	)

2740 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

2742 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

2743 
	#NID_subåìMöimumQuÆôy
 497

	)

2744 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

2746 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

2747 
	#NID_subåìMaximumQuÆôy
 498

	)

2748 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

2750 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

2751 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

2752 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

2754 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

2755 
	#NID_dITRedúe˘
 500

	)

2756 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

2758 
	#SN_audio
 "audio"

	)

2759 
	#NID_audio
 501

	)

2760 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

2762 
	#LN_documítPublishî
 "documítPublishî"

	)

2763 
	#NID_documítPublishî
 502

	)

2764 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

2766 
	#SN_id_£t
 "id-£t"

	)

2767 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

2768 
	#NID_id_£t
 512

	)

2769 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

2771 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

2772 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

2773 
	#NID_£t_˘y≥
 513

	)

2774 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

2776 
	#SN_£t_msgExt
 "£t-msgExt"

	)

2777 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

2778 
	#NID_£t_msgExt
 514

	)

2779 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

2781 
	#SN_£t_©å
 "£t-©å"

	)

2782 
	#NID_£t_©å
 515

	)

2783 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

2785 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

2786 
	#NID_£t_pﬁicy
 516

	)

2787 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

2789 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

2790 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

2791 
	#NID_£t_˚πExt
 517

	)

2792 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

2794 
	#SN_£t_bønd
 "£t-bønd"

	)

2795 
	#NID_£t_bønd
 518

	)

2796 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

2798 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

2799 
	#NID_£t˘_PAND©a
 519

	)

2800 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

2802 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

2803 
	#NID_£t˘_PANTokí
 520

	)

2804 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

2806 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

2807 
	#NID_£t˘_PANO∆y
 521

	)

2808 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

2810 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

2811 
	#NID_£t˘_OID©a
 522

	)

2812 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

2814 
	#SN_£t˘_PI
 "£t˘-PI"

	)

2815 
	#NID_£t˘_PI
 523

	)

2816 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

2818 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

2819 
	#NID_£t˘_PID©a
 524

	)

2820 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

2822 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

2823 
	#NID_£t˘_PID©aUnsig√d
 525

	)

2824 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

2826 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

2827 
	#NID_£t˘_HODI≈ut
 526

	)

2828 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

2830 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

2831 
	#NID_£t˘_AuthResBaggage
 527

	)

2832 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

2834 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

2835 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

2836 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

2838 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

2839 
	#NID_£t˘_AuthRevResBaggage
 529

	)

2840 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

2842 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

2843 
	#NID_£t˘_C≠TokíSeq
 530

	)

2844 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

2846 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

2847 
	#NID_£t˘_PInôResD©a
 531

	)

2848 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

2850 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

2851 
	#NID_£t˘_PI_TBS
 532

	)

2852 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

2854 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

2855 
	#NID_£t˘_PResD©a
 533

	)

2856 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

2858 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

2859 
	#NID_£t˘_AuthReqTBS
 534

	)

2860 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

2862 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

2863 
	#NID_£t˘_AuthResTBS
 535

	)

2864 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

2866 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

2867 
	#NID_£t˘_AuthResTBSX
 536

	)

2868 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

2870 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

2871 
	#NID_£t˘_AuthTokíTBS
 537

	)

2872 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

2874 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

2875 
	#NID_£t˘_C≠TokíD©a
 538

	)

2876 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

2878 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

2879 
	#NID_£t˘_C≠TokíTBS
 539

	)

2880 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

2882 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

2883 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

2884 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

2886 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

2887 
	#NID_£t˘_AuthRevReqTBS
 541

	)

2888 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

2890 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

2891 
	#NID_£t˘_AuthRevResD©a
 542

	)

2892 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

2894 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

2895 
	#NID_£t˘_AuthRevResTBS
 543

	)

2896 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

2898 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

2899 
	#NID_£t˘_C≠ReqTBS
 544

	)

2900 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

2902 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

2903 
	#NID_£t˘_C≠ReqTBSX
 545

	)

2904 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

2906 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

2907 
	#NID_£t˘_C≠ResD©a
 546

	)

2908 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

2910 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

2911 
	#NID_£t˘_C≠RevReqTBS
 547

	)

2912 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

2914 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

2915 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

2916 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

2918 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

2919 
	#NID_£t˘_C≠RevResD©a
 549

	)

2920 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

2922 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

2923 
	#NID_£t˘_CªdReqTBS
 550

	)

2924 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

2926 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

2927 
	#NID_£t˘_CªdReqTBSX
 551

	)

2928 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

2930 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

2931 
	#NID_£t˘_CªdResD©a
 552

	)

2932 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

2934 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

2935 
	#NID_£t˘_CªdRevReqTBS
 553

	)

2936 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

2938 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

2939 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

2940 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

2942 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

2943 
	#NID_£t˘_CªdRevResD©a
 555

	)

2944 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

2946 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

2947 
	#NID_£t˘_PCîtReqD©a
 556

	)

2948 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

2950 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

2951 
	#NID_£t˘_PCîtResTBS
 557

	)

2952 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

2954 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

2955 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

2956 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

2958 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

2959 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

2960 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

2962 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

2963 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

2964 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

2966 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

2967 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

2968 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

2970 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

2971 
	#NID_£t˘_RegF‹mResTBS
 562

	)

2972 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

2974 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

2975 
	#NID_£t˘_CîtReqD©a
 563

	)

2976 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

2978 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

2979 
	#NID_£t˘_CîtReqTBS
 564

	)

2980 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

2982 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

2983 
	#NID_£t˘_CîtResD©a
 565

	)

2984 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

2986 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

2987 
	#NID_£t˘_CîtInqReqTBS
 566

	)

2988 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

2990 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

2991 
	#NID_£t˘_Eº‹TBS
 567

	)

2992 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

2994 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

2995 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

2996 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

2998 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

2999 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3000 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3002 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3003 
	#NID_£t˘_AuthReqTBE
 570

	)

3004 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3006 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3007 
	#NID_£t˘_AuthResTBE
 571

	)

3008 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3010 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3011 
	#NID_£t˘_AuthResTBEX
 572

	)

3012 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3014 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3015 
	#NID_£t˘_AuthTokíTBE
 573

	)

3016 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3018 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3019 
	#NID_£t˘_C≠TokíTBE
 574

	)

3020 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3022 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3023 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3024 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3026 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3027 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3028 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3030 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3031 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3032 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3034 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3035 
	#NID_£t˘_AuthRevResTBE
 578

	)

3036 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3038 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3039 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3040 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3042 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3043 
	#NID_£t˘_C≠ReqTBE
 580

	)

3044 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3046 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3047 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3048 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3050 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3051 
	#NID_£t˘_C≠ResTBE
 582

	)

3052 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3054 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3055 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3056 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3058 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3059 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3060 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3062 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3063 
	#NID_£t˘_C≠RevResTBE
 585

	)

3064 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3066 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3067 
	#NID_£t˘_CªdReqTBE
 586

	)

3068 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3070 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3071 
	#NID_£t˘_CªdReqTBEX
 587

	)

3072 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3074 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3075 
	#NID_£t˘_CªdResTBE
 588

	)

3076 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3078 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3079 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3080 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3082 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3083 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3084 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3086 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3087 
	#NID_£t˘_CªdRevResTBE
 591

	)

3088 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3090 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3091 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3092 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3094 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3095 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3096 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3098 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3099 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3100 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3102 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3103 
	#NID_£t˘_CîtReqTBE
 595

	)

3104 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3106 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3107 
	#NID_£t˘_CîtReqTBEX
 596

	)

3108 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3110 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3111 
	#NID_£t˘_CîtResTBE
 597

	)

3112 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3114 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3115 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3116 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3118 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3119 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3120 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3122 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3123 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3124 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3126 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3127 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3128 
	#NID_£ãxt_gíCry±
 601

	)

3129 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3131 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3132 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3133 
	#NID_£ãxt_miAuth
 602

	)

3134 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3136 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3137 
	#NID_£ãxt_pöSecuª
 603

	)

3138 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3140 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3141 
	#NID_£ãxt_pöAny
 604

	)

3142 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3144 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3145 
	#NID_£ãxt_åack2
 605

	)

3146 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3148 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3149 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3150 
	#NID_£ãxt_cv
 606

	)

3151 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3153 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3154 
	#NID_£t_pﬁicy_roŸ
 607

	)

3155 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3157 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3158 
	#NID_£tCext_hashedRoŸ
 608

	)

3159 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3161 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3162 
	#NID_£tCext_˚πTy≥
 609

	)

3163 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3165 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3166 
	#NID_£tCext_mîchD©a
 610

	)

3167 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3169 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3170 
	#NID_£tCext_cCîtRequúed
 611

	)

3171 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3173 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3174 
	#NID_£tCext_tu¬ñög
 612

	)

3175 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3177 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3178 
	#NID_£tCext_£tExt
 613

	)

3179 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3181 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3182 
	#NID_£tCext_£tQuÆf
 614

	)

3183 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3185 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3186 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3187 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3189 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3190 
	#NID_£tCext_TokíIdítifõr
 616

	)

3191 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3193 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3194 
	#NID_£tCext_Tøck2D©a
 617

	)

3195 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3197 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3198 
	#NID_£tCext_TokíTy≥
 618

	)

3199 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3201 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3202 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3203 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3205 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3206 
	#NID_£tAâr_Cît
 620

	)

3207 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3209 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3210 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3211 
	#NID_£tAâr_PGWYˇp
 621

	)

3212 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3214 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3215 
	#NID_£tAâr_TokíTy≥
 622

	)

3216 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3218 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3219 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3220 
	#NID_£tAâr_IssC≠
 623

	)

3221 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3223 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3224 
	#NID_£t_roŸKeyThumb
 624

	)

3225 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3227 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3228 
	#NID_£t_addPﬁicy
 625

	)

3229 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3231 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3232 
	#NID_£tAâr_Tokí_EMV
 626

	)

3233 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3235 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3236 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3237 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3239 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3240 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3241 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3243 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3244 
	#NID_£tAâr_IssC≠_T2
 629

	)

3245 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3247 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3248 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3249 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3251 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3252 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3253 
	#NID_£tAâr_GíCry±grm
 631

	)

3254 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3256 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3257 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3258 
	#NID_£tAâr_T2Enc
 632

	)

3259 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3261 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3262 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3263 
	#NID_£tAâr_T2˛óπxt
 633

	)

3264 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3266 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3267 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3268 
	#NID_£tAâr_TokICCsig
 634

	)

3269 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3271 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3272 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3273 
	#NID_£tAâr_SecDevSig
 635

	)

3274 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3276 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3277 
	#NID_£t_bønd_IATA_ATA
 636

	)

3278 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3280 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3281 
	#NID_£t_bønd_Döîs
 637

	)

3282 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3284 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3285 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3286 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3288 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3289 
	#NID_£t_bønd_JCB
 639

	)

3290 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3292 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3293 
	#NID_£t_bønd_Viß
 640

	)

3294 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3296 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3297 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3298 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3300 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3301 
	#NID_£t_bønd_Novus
 642

	)

3302 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3304 
	#SN_des_cdmf
 "DES-CDMF"

	)

3305 
	#LN_des_cdmf
 "des-cdmf"

	)

3306 
	#NID_des_cdmf
 643

	)

3307 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3309 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3310 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3311 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3313 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3314 
	#LN_ù£c3
 "ù£c3"

	)

3315 
	#NID_ù£c3
 749

	)

3317 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3318 
	#LN_ù£c4
 "ù£c4"

	)

3319 
	#NID_ù£c4
 750

	)

3321 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

3322 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

3323 
	#NID_ˇmñlü_128_cbc
 751

	)

3324 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3326 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

3327 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

3328 
	#NID_ˇmñlü_192_cbc
 752

	)

3329 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3331 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

3332 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

3333 
	#NID_ˇmñlü_256_cbc
 753

	)

3334 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3336 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

3338 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

3340 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

3341 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

3342 
	#NID_ˇmñlü_128_ecb
 754

	)

3343 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

3345 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

3346 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

3347 
	#NID_ˇmñlü_128_ofb128
 766

	)

3348 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

3350 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

3351 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

3352 
	#NID_ˇmñlü_128_cfb128
 757

	)

3353 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

3355 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

3356 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

3357 
	#NID_ˇmñlü_192_ecb
 755

	)

3358 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

3360 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

3361 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

3362 
	#NID_ˇmñlü_192_ofb128
 767

	)

3363 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

3365 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

3366 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

3367 
	#NID_ˇmñlü_192_cfb128
 758

	)

3368 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

3370 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

3371 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

3372 
	#NID_ˇmñlü_256_ecb
 756

	)

3373 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

3375 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

3376 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

3377 
	#NID_ˇmñlü_256_ofb128
 768

	)

3378 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

3380 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

3381 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

3382 
	#NID_ˇmñlü_256_cfb128
 759

	)

3383 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

3385 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3386 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

3387 
	#NID_ˇmñlü_128_cfb1
 760

	)

3389 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3390 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

3391 
	#NID_ˇmñlü_192_cfb1
 761

	)

3393 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3394 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

3395 
	#NID_ˇmñlü_256_cfb1
 762

	)

3397 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3398 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

3399 
	#NID_ˇmñlü_128_cfb8
 763

	)

3401 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3402 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

3403 
	#NID_ˇmñlü_192_cfb8
 764

	)

3405 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3406 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

3407 
	#NID_ˇmñlü_256_cfb8
 765

	)

3409 
	#SN_kiß
 "KISA"

	)

3410 
	#LN_kiß
 "kiß"

	)

3411 
	#NID_kiß
 773

	)

3412 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

3414 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3415 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3416 
	#NID_£ed_ecb
 776

	)

3417 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

3419 
	#SN_£ed_cbc
 "SEED-CBC"

	)

3420 
	#LN_£ed_cbc
 "£ed-cbc"

	)

3421 
	#NID_£ed_cbc
 777

	)

3422 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

3424 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

3425 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

3426 
	#NID_£ed_cfb128
 779

	)

3427 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

3429 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

3430 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

3431 
	#NID_£ed_ofb128
 778

	)

3432 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

	@/usr/include/openssl/opensslconf.h

7 #ifde‡
›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


10 
	#›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


	)

12 #i‡
deföed
(
__i386__
)

13 
	~"›ís¶c⁄f-i386.h
"

14 #ñi‡
deföed
(
__ü64__
)

15 
	~"›ís¶c⁄f-ü64.h
"

16 #ñi‡
deföed
(
__powîpc64__
)

17 
	~"›ís¶c⁄f-µc64.h
"

18 #ñi‡
deföed
(
__powîpc__
)

19 
	~"›ís¶c⁄f-µc.h
"

20 #ñi‡
deföed
(
__s390x__
)

21 
	~"›ís¶c⁄f-s390x.h
"

22 #ñi‡
deföed
(
__s390__
)

23 
	~"›ís¶c⁄f-s390.h
"

24 #ñi‡
deföed
(
__x86_64__
)

25 
	~"›ís¶c⁄f-x86_64.h
"

30 #unde‡
›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 
	~<›ís¶/e_os2.h
>

60 #ifde‡
NO_ASN1_TYPEDEFS


61 
	#ASN1_INTEGER
 
ASN1_STRING


	)

62 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

63 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

64 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

65 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

66 
	#ASN1_T61STRING
 
ASN1_STRING


	)

67 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

68 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

69 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

70 
	#ASN1_TIME
 
ASN1_STRING


	)

71 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

72 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

73 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

74 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

75 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

76 
	#ASN1_BOOLEAN
 

	)

77 
	#ASN1_NULL
 

	)

79 
a¢1_°rög_°
 
	tASN1_INTEGER
;

80 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

81 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

82 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

83 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

84 
a¢1_°rög_°
 
	tASN1_T61STRING
;

85 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

86 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

87 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

88 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

89 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

90 
a¢1_°rög_°
 
	tASN1_TIME
;

91 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

92 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

94 
	tASN1_BOOLEAN
;

95 
	tASN1_NULL
;

98 #ifde‡
OPENSSL_SYS_WIN32


99 #unde‡
X509_NAME


100 #unde‡
X509_CERT_PAIR


101 #unde‡
PKCS7_ISSUER_AND_SERIAL


104 #ifde‡
BIGNUM


105 #unde‡
BIGNUM


107 
bignum_°
 
	tBIGNUM
;

108 
bignum_˘x
 
	tBN_CTX
;

109 
bn_blödög_°
 
	tBN_BLINDING
;

110 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

111 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

112 
bn_gícb_°
 
	tBN_GENCB
;

114 
buf_mem_°
 
	tBUF_MEM
;

116 
evp_cùhî_°
 
	tEVP_CIPHER
;

117 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

118 
ív_md_°
 
	tEVP_MD
;

119 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

120 
evp_pkey_°
 
	tEVP_PKEY
;

122 
dh_°
 
	tDH
;

123 
dh_mëhod
 
	tDH_METHOD
;

125 
dß_°
 
	tDSA
;

126 
dß_mëhod
 
	tDSA_METHOD
;

128 
rß_°
 
	tRSA
;

129 
rß_mëh_°
 
	tRSA_METHOD
;

131 
ønd_mëh_°
 
	tRAND_METHOD
;

133 
ecdh_mëhod
 
	tECDH_METHOD
;

134 
ecdß_mëhod
 
	tECDSA_METHOD
;

136 
x509_°
 
	tX509
;

137 
X509_Æg‹_°
 
	tX509_ALGOR
;

138 
X509_¸l_°
 
	tX509_CRL
;

139 
X509_«me_°
 
	tX509_NAME
;

140 
x509_°‹e_°
 
	tX509_STORE
;

141 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

143 
v3_ext_˘x
 
	tX509V3_CTX
;

144 
c⁄f_°
 
	tCONF
;

146 
°‹e_°
 
	tSTORE
;

147 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

149 
ui_°
 
	tUI
;

150 
ui_mëhod_°
 
	tUI_METHOD
;

152 
°_ERR_FNS
 
	tERR_FNS
;

154 
ígöe_°
 
	tENGINE
;

156 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

157 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

158 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

159 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

162 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
Ë

	)

163 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
Ë

	)

165 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

167 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

168 
	tidx
, 
	t¨gl
, *
	t¨gp
);

169 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

170 
	tidx
, 
	t¨gl
, *
	t¨gp
);

171 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

172 
	tidx
, 
	t¨gl
, *
	t¨gp
);

	@/usr/include/openssl/pem2.h

60 #ifde‡
__˝lu•lus


64 #i‚de‡
HEADER_PEM_H


65 
ERR_lﬂd_PEM_°rögs
();

68 #ifde‡
__˝lu•lus


	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 (*
	t›ís¶_Âå
)();

61 
	#›ís¶_fˇ°
(
f
Ë((
›ís¶_Âå
)f)

	)

63 #ifde‡
DEBUG_SAFESTACK


65 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

66 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

68 
	#DECLARE_STACK_OF
(
ty≥
) \

69 
	`STACK_OF
(
ty≥
) \

71 
STACK
 
°ack
; \

72 
	}
};

	)

74 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

78 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

79 ((
	`STACK_OF
(
ty≥
Ë* (*)((*)(c⁄°Åy≥ * c⁄° *, c⁄°Åy≥ * c⁄° *)))
	`›ís¶_fˇ°
(
sk_√w
))(
cmp
)

	)

80 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

81 ((
	`STACK_OF
(
ty≥
Ë* (*)())
	`›ís¶_fˇ°
(
sk_√w_nuŒ
))()

	)

82 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

83 (((*)(
	`STACK_OF
(
ty≥
Ë*))
	`›ís¶_fˇ°
(
sk_‰ì
))(
°
)

	)

84 
	#SKM_sk_num
(
ty≥
, 
°
) \

85 (((*)(c⁄° 
	`STACK_OF
(
ty≥
Ë*))
	`›ís¶_fˇ°
(
sk_num
))(
°
)

	)

86 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

87 ((
ty≥
 * (*)(c⁄° 
	`STACK_OF
—y≥Ë*, ))
	`›ís¶_fˇ°
(
sk_vÆue
))(
°
, 
i
)

	)

88 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

89 ((
ty≥
 * (*)(
	`STACK_OF
—y≥Ë*, ,Åy≥ *))
	`›ís¶_fˇ°
(
sk_£t
))(
°
, 
i
, 
vÆ
)

	)

90 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

91 (((*)(
	`STACK_OF
(
ty≥
Ë*))
	`›ís¶_fˇ°
(
sk_zîo
))(
°
)

	)

92 
	#SKM_sk_push
(
ty≥
, 
°
,
vÆ
) \

93 (((*)(
	`STACK_OF
(
ty≥
Ë*,Åy≥ *))
	`›ís¶_fˇ°
(
sk_push
))(
°
, 
vÆ
)

	)

94 
	#SKM_sk_unshi·
(
ty≥
, 
°
,
vÆ
) \

95 (((*)(
	`STACK_OF
(
ty≥
Ë*,Åy≥ *))
	`›ís¶_fˇ°
(
sk_unshi·
))(
°
, 
vÆ
)

	)

96 
	#SKM_sk_föd
(
ty≥
, 
°
,
vÆ
) \

97 (((*)(
	`STACK_OF
(
ty≥
Ë*,Åy≥ *))
	`›ís¶_fˇ°
(
sk_föd
))(
°
, 
vÆ
)

	)

98 
	#SKM_sk_dñëe
(
ty≥
, 
°
,
i
) \

99 ((
ty≥
 * (*)(
	`STACK_OF
—y≥Ë*, ))
	`›ís¶_fˇ°
(
sk_dñëe
))(
°
, 
i
)

	)

100 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
,
±r
) \

101 ((
ty≥
 * (*)(
	`STACK_OF
—y≥Ë*,Åy≥ *))
	`›ís¶_fˇ°
(
sk_dñëe_±r
))(
°
, 
±r
)

	)

102 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
,
i
) \

103 (((*)(
	`STACK_OF
(
ty≥
Ë*,Åy≥ *, ))
	`›ís¶_fˇ°
(
sk_ö£π
))(
°
, 
vÆ
, 
i
)

	)

104 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
,
cmp
) \

105 (((*(*)(
	`STACK_OF
(
ty≥
) *, (*)(constÅype * const *, constÅype * const *))) \

106 (c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))
	`›ís¶_fˇ°
(
sk_£t_cmp_func
))\

107 (
°
, 
cmp
)

	)

108 
	#SKM_sk_dup
(
ty≥
, 
°
) \

109 ((
	`STACK_OF
(
ty≥
Ë*(*)(STACK_OF—y≥Ë*))
	`›ís¶_fˇ°
(
sk_dup
))(
°
)

	)

110 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
,
‰ì_func
) \

111 (((*)(
	`STACK_OF
(
ty≥
Ë*, (*)—y≥ *)))
	`›ís¶_fˇ°
(
sk_p›_‰ì
))\

112 (
°
, 
‰ì_func
)

	)

113 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

114 ((
ty≥
 * (*)(
	`STACK_OF
—y≥Ë*))
	`›ís¶_fˇ°
(
sk_shi·
))(
°
)

	)

115 
	#SKM_sk_p›
(
ty≥
, 
°
) \

116 ((
ty≥
 * (*)(
	`STACK_OF
—y≥Ë*))
	`›ís¶_fˇ°
(
sk_p›
))(
°
)

	)

117 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

118 (((*)(
	`STACK_OF
(
ty≥
Ë*))
	`›ís¶_fˇ°
(
sk_s‹t
))(
°
)

	)

119 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

120 (((*)(c⁄° 
	`STACK_OF
(
ty≥
Ë*))
	`›ís¶_fˇ°
(
sk_is_s‹ãd
))(
°
)

	)

122 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

123 ((
	`STACK_OF
(
ty≥
) * (*) (STACK_OF(type) **,const **, , \

124 
ty≥
 *(*)(type **, const **,), \

125 (*)(
ty≥
 *), ,)Ë
	`›ís¶_fˇ°
(
d2i_ASN1_SET
)) \

126 (
°
,
µ
,
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
,
ex_˛ass
)

	)

127 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

128 (((*)(
	`STACK_OF
(
ty≥
) *,**, \

129 (*)(
ty≥
 *,**), , , )Ë
	`›ís¶_fˇ°
(
i2d_ASN1_SET
)) \

130 (
°
,
µ
,
i2d_func
,
ex_èg
,
ex_˛ass
,
is_£t
)

	)

132 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

133 ((*(*)(
	`STACK_OF
(
ty≥
) *, \

134 (*)(
ty≥
 *,**), **,*)Ë
	`›ís¶_fˇ°
(
ASN1_£q_∑ck
)) \

135 (
°
, 
i2d_func
, 
buf
, 
Àn
)

	)

136 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

137 ((
	`STACK_OF
(
ty≥
) * (*)(const *,, \

138 
ty≥
 *(*)(type **,const **, ), \

139 (*)(
ty≥
 *)))
	`›ís¶_fˇ°
(
ASN1_£q_u≈ack
)) \

140 (
buf
,
Àn
,
d2i_func
, 
‰ì_func
)

	)

142 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

143 ((
	`STACK_OF
(
ty≥
Ë* (*)(
X509_ALGOR
 *, \

144 
ty≥
 *(*)(type **, const **, ), \

145 (*)(
ty≥
 *), \

147 
ASN1_STRING
 *, ))
PKCS12_de¸y±_d2i
) \

148 (
Æg‹
,
d2i_func
,
‰ì_func
,
∑ss
,
∑s¶í
,
o˘
,
£q
)

	)

152 
	#STACK_OF
(
ty≥
Ë
STACK


	)

153 
	#PREDECLARE_STACK_OF
(
ty≥
Ë

	)

154 
	#DECLARE_STACK_OF
(
ty≥
Ë

	)

155 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

157 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

158 
	`sk_√w
(((*)(c⁄° * c⁄° *, c⁄° * c⁄° *))(
cmp
))

	)

159 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

160 
	`sk_√w_nuŒ
()

	)

161 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

162 
	`sk_‰ì
(
°
)

	)

163 
	#SKM_sk_num
(
ty≥
, 
°
) \

164 
	`sk_num
(
°
)

	)

165 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

166 ((
ty≥
 *)
	`sk_vÆue
(
°
, 
i
))

	)

167 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

168 ((
ty≥
 *)
	`sk_£t
(
°
, 
i
,(*)
vÆ
))

	)

169 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

170 
	`sk_zîo
(
°
)

	)

171 
	#SKM_sk_push
(
ty≥
, 
°
,
vÆ
) \

172 
	`sk_push
(
°
, (*)
vÆ
)

	)

173 
	#SKM_sk_unshi·
(
ty≥
, 
°
,
vÆ
) \

174 
	`sk_unshi·
(
°
, 
vÆ
)

	)

175 
	#SKM_sk_föd
(
ty≥
, 
°
,
vÆ
) \

176 
	`sk_föd
(
°
, (*)
vÆ
)

	)

177 
	#SKM_sk_dñëe
(
ty≥
, 
°
,
i
) \

178 ((
ty≥
 *)
	`sk_dñëe
(
°
, 
i
))

	)

179 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
,
±r
) \

180 ((
ty≥
 *)
	`sk_dñëe_±r
(
°
,(*)
±r
))

	)

181 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
,
i
) \

182 
	`sk_ö£π
(
°
, (*)
vÆ
, 
i
)

	)

183 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
,
cmp
) \

184 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

185 
	`sk_£t_cmp_func
(
°
, ((*)(c⁄° * c⁄° *, c⁄° * c⁄° *))(
cmp
)))

	)

186 
	#SKM_sk_dup
(
ty≥
, 
°
) \

187 
	`sk_dup
(
°
)

	)

188 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
,
‰ì_func
) \

189 
	`sk_p›_‰ì
(
°
, ((*)(*))
‰ì_func
)

	)

190 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

191 ((
ty≥
 *)
	`sk_shi·
(
°
))

	)

192 
	#SKM_sk_p›
(
ty≥
, 
°
) \

193 ((
ty≥
 *)
	`sk_p›
(
°
))

	)

194 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

195 
	`sk_s‹t
(
°
)

	)

196 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

197 
	`sk_is_s‹ãd
(
°
)

	)

199 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

200 
	`d2i_ASN1_SET
(
°
,
µ
,
Àngth
, (*(*)(** ,c⁄° ** ,))
d2i_func
, ((*)(*))
‰ì_func
, 
ex_èg
,
ex_˛ass
)

	)

201 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

202 
	`i2d_ASN1_SET
(
°
,
µ
,((*)(*, **))
i2d_func
,
ex_èg
,
ex_˛ass
,
is_£t
)

	)

204 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

205 
	`ASN1_£q_∑ck
(
°
, ((*)(*, **))
i2d_func
, 
buf
, 
Àn
)

	)

206 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

207 
	`ASN1_£q_u≈ack
(
buf
,
Àn
,(*(*)(**,c⁄° **,))
d2i_func
, ((*)(*))
‰ì_func
)

	)

209 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

210 ((
STACK
 *)
	`PKCS12_de¸y±_d2i
(
Æg‹
,(*(*)())
d2i_func
, ((*)(*))
‰ì_func
,
∑ss
,
∑s¶í
,
o˘
,
£q
))

	)

215 
	#sk_ACCESS_DESCRIPTION_√w
(
°
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (°))

	)

216 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

217 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

218 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

219 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

220 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

221 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

222 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

223 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

224 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

225 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

226 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

227 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

228 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

229 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

230 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

231 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

232 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

233 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

234 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

235 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

237 
	#sk_ASIdOrR™ge_√w
(
°
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (°))

	)

238 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

239 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

240 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

241 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

242 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

243 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

244 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

245 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

246 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

247 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

248 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

249 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

250 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

251 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

252 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

253 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

254 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

255 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

256 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

257 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

259 
	#sk_ASN1_GENERALSTRING_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (°))

	)

260 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

261 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

262 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

263 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

264 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

265 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

266 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

267 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

268 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

269 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

270 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

271 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

272 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

273 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

274 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

275 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

276 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

277 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

278 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

279 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

281 
	#sk_ASN1_INTEGER_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (°))

	)

282 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

283 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

284 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

285 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

286 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

287 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

288 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

289 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

290 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

291 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

292 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

293 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

294 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

295 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

296 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

297 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

298 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

299 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

300 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

301 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

303 
	#sk_ASN1_OBJECT_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (°))

	)

304 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

305 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

306 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

307 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

308 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

309 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

310 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

311 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

312 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

313 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

314 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

315 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

316 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

317 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

318 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

319 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

320 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

321 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

322 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

323 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

325 
	#sk_ASN1_STRING_TABLE_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (°))

	)

326 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

327 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

328 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

329 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

330 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

331 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

332 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

333 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

334 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

335 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

336 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

337 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

338 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

339 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

340 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

341 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

342 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

343 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

344 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

345 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

347 
	#sk_ASN1_TYPE_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (°))

	)

348 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

349 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

350 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

351 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

352 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

353 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

354 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

355 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

356 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

357 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

358 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

359 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

360 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

361 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

362 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

363 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

364 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

365 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

366 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

367 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

369 
	#sk_ASN1_VALUE_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (°))

	)

370 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

371 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

372 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

373 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

374 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

375 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

376 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

377 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

378 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

379 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

380 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

381 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

382 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

383 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

384 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

385 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

386 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

387 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

388 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

389 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

391 
	#sk_BIO_√w
(
°
Ë
	`SKM_sk_√w
(
BIO
, (°))

	)

392 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

393 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

394 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

395 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

396 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

397 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

398 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

399 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

400 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

401 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

402 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

403 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

404 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

405 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

406 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

407 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

408 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

409 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

410 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

411 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

413 
	#sk_CONF_IMODULE_√w
(
°
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (°))

	)

414 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

415 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

416 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

417 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

418 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

419 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

420 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

421 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

422 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

423 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

424 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

425 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

426 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

427 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

428 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

429 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

430 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

431 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

432 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

433 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

435 
	#sk_CONF_MODULE_√w
(
°
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (°))

	)

436 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

437 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

438 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

439 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

440 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

441 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

442 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

443 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

444 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

445 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

446 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

447 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

448 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

449 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

450 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

451 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

452 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

453 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

454 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

455 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

457 
	#sk_CONF_VALUE_√w
(
°
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (°))

	)

458 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

459 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

460 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

461 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

462 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

463 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

464 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

465 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

466 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

467 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

468 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

469 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

470 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

471 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

472 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

473 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

474 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

475 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

476 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

477 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

479 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
°
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

480 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

481 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

482 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

483 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

484 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

485 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

486 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

487 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

488 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

489 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

490 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

491 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

492 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

493 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

494 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

495 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

496 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

497 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

498 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

499 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

501 
	#sk_CRYPTO_dy∆ock_√w
(
°
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (°))

	)

502 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

503 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

504 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

505 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

506 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

507 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

508 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

509 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

510 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

511 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

512 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

513 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

514 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

515 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

516 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

517 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

518 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

519 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

520 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

521 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

523 
	#sk_DIST_POINT_√w
(
°
Ë
	`SKM_sk_√w
(
DIST_POINT
, (°))

	)

524 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

525 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

526 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

527 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

528 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

529 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

530 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

531 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

532 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

533 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

534 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

535 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

536 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

537 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

538 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

539 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

540 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

541 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

542 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

543 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

545 
	#sk_ENGINE_√w
(
°
Ë
	`SKM_sk_√w
(
ENGINE
, (°))

	)

546 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

547 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

548 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

549 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

550 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

551 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

552 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

553 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

554 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

555 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

556 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

557 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

558 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

559 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

560 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

561 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

562 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

563 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

564 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

565 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

567 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
°
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (°))

	)

568 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

569 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

570 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

571 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

572 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

573 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

574 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

575 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

576 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

577 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

578 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

579 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

580 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

581 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

582 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

583 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

584 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

585 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

586 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

587 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

589 
	#sk_GENERAL_NAME_√w
(
°
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (°))

	)

590 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

591 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

592 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

593 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

594 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

595 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

596 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

597 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

598 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

599 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

600 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

601 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

602 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

603 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

604 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

605 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

606 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

607 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

608 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

609 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

611 
	#sk_GENERAL_SUBTREE_√w
(
°
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (°))

	)

612 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

613 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

614 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

615 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

616 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

617 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

618 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

619 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

620 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

621 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

622 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

623 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

624 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

625 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

626 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

627 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

628 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

629 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

630 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

631 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

633 
	#sk_IPAddªssFamûy_√w
(
°
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (°))

	)

634 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

635 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

636 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

637 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

638 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

639 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

640 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

641 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

642 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

643 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

644 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

645 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

646 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

647 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

648 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

649 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

650 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

651 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

652 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

653 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

655 
	#sk_IPAddªssOrR™ge_√w
(
°
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (°))

	)

656 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

657 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

658 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

659 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

660 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

661 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

662 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

663 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

664 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

665 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

666 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

667 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

668 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

669 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

670 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

671 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

672 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

673 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

674 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

675 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

677 
	#sk_KRB5_APREQBODY_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (°))

	)

678 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

679 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

680 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

681 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

682 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

683 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

684 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

685 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

686 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

687 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

688 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

689 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

690 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

691 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

692 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

693 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

694 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

695 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

696 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

697 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

699 
	#sk_KRB5_AUTHDATA_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (°))

	)

700 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

701 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

702 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

703 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

704 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

705 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

706 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

707 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

708 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

709 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

710 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

711 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

712 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

713 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

714 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

715 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

716 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

717 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

718 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

719 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

721 
	#sk_KRB5_AUTHENTBODY_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (°))

	)

722 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

723 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

724 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

725 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

726 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

727 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

728 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

729 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

730 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

731 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

732 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

733 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

734 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

735 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

736 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

737 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

738 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

739 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

740 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

741 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

743 
	#sk_KRB5_CHECKSUM_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (°))

	)

744 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

745 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

746 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

747 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

748 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

749 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

750 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

751 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

752 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

753 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

754 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

755 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

756 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

757 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

758 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

759 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

760 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

761 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

762 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

763 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

765 
	#sk_KRB5_ENCDATA_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (°))

	)

766 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

767 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

768 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

769 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

770 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

771 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

772 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

773 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

774 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

775 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

776 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

777 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

778 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

779 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

780 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

781 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

782 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

783 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

784 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

785 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

787 
	#sk_KRB5_ENCKEY_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (°))

	)

788 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

789 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

790 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

791 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

792 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

793 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

794 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

795 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

796 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

797 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

798 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

799 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

800 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

801 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

802 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

803 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

804 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

805 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

806 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

807 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

809 
	#sk_KRB5_PRINCNAME_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (°))

	)

810 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

811 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

812 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

813 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

814 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

815 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

816 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

817 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

818 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

819 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

820 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

821 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

822 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

823 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

824 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

825 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

826 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

827 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

828 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

829 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

831 
	#sk_KRB5_TKTBODY_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (°))

	)

832 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

833 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

834 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

835 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

836 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

837 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

838 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

839 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

840 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

841 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

842 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

843 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

844 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

845 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

846 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

847 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

848 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

849 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

850 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

851 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

853 
	#sk_MIME_HEADER_√w
(
°
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (°))

	)

854 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

855 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

856 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

857 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

858 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

859 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

860 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

861 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

862 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

863 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

864 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

865 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

866 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

867 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

868 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

869 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

870 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

871 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

872 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

873 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

875 
	#sk_MIME_PARAM_√w
(
°
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (°))

	)

876 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

877 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

878 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

879 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

880 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

881 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

882 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

883 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

884 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

885 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

886 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

887 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

888 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

889 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

890 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

891 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

892 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

893 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

894 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

895 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

897 
	#sk_NAME_FUNCS_√w
(
°
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (°))

	)

898 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

899 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

900 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

901 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

902 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

903 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

904 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

905 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

906 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

907 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

908 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

909 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

910 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

911 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

912 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

913 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

914 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

915 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

916 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

917 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

919 
	#sk_OCSP_CERTID_√w
(
°
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (°))

	)

920 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

921 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

922 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

923 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

924 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

925 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

926 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

927 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

928 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

929 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

930 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

931 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

932 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

933 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

934 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

935 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

936 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

937 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

938 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

939 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

941 
	#sk_OCSP_ONEREQ_√w
(
°
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (°))

	)

942 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

943 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

944 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

945 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

946 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

947 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

948 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

949 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

950 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

951 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

952 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

953 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

954 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

955 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

956 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

957 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

958 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

959 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

960 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

961 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

963 
	#sk_OCSP_SINGLERESP_√w
(
°
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (°))

	)

964 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

965 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

966 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

967 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

968 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

969 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

970 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

971 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

972 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

973 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

974 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

975 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

976 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

977 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

978 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

979 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

980 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

981 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

982 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

983 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

985 
	#sk_PKCS12_SAFEBAG_√w
(
°
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (°))

	)

986 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

987 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

988 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

989 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

990 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

991 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

992 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

993 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

994 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

995 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

996 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

997 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

998 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

999 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1000 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1001 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1002 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1003 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1004 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1005 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1007 
	#sk_PKCS7_√w
(
°
Ë
	`SKM_sk_√w
(
PKCS7
, (°))

	)

1008 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1009 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1010 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1011 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1012 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1013 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1014 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1015 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1016 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1017 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1018 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1019 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1020 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1021 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1022 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1023 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1024 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1025 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1026 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1027 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1029 
	#sk_PKCS7_RECIP_INFO_√w
(
°
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (°))

	)

1030 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1031 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1032 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1033 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1034 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1035 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1036 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1037 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1038 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1039 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1040 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1041 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1042 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1043 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1044 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1045 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1046 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1047 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1048 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1049 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1051 
	#sk_PKCS7_SIGNER_INFO_√w
(
°
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (°))

	)

1052 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1053 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1054 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1055 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1056 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1057 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1058 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1059 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1060 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1061 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1062 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1063 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1064 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1065 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1066 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1067 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1068 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1069 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1070 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1071 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1073 
	#sk_POLICYINFO_√w
(
°
Ë
	`SKM_sk_√w
(
POLICYINFO
, (°))

	)

1074 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1075 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1076 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1077 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1078 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1079 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1080 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1081 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1082 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1083 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1084 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1085 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1086 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1087 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1088 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1089 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1090 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1091 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1092 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1093 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1095 
	#sk_POLICYQUALINFO_√w
(
°
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (°))

	)

1096 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1097 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1098 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1099 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1100 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1101 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1102 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1103 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1104 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1105 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1106 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1107 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1108 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1109 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1110 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1111 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1112 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1113 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1114 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1115 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1117 
	#sk_POLICY_MAPPING_√w
(
°
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (°))

	)

1118 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1119 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1120 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1121 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1122 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1123 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1124 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1125 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1126 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1127 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1128 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1129 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1130 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1131 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1132 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1133 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1134 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1135 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1136 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1137 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1139 
	#sk_SSL_CIPHER_√w
(
°
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (°))

	)

1140 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1141 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1142 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1143 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1144 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1145 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1146 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1147 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1148 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1149 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1150 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1151 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1152 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1153 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1154 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1155 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1156 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1157 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1158 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1159 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1161 
	#sk_SSL_COMP_√w
(
°
Ë
	`SKM_sk_√w
(
SSL_COMP
, (°))

	)

1162 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1163 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1164 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1165 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1166 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1167 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1168 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1169 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1170 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1171 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1172 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1173 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1174 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1175 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1176 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1177 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1178 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1179 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1180 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1181 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1183 
	#sk_STORE_OBJECT_√w
(
°
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (°))

	)

1184 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1185 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1186 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1187 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1188 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1189 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1190 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1191 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1192 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1193 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1194 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1195 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1196 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1197 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1198 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1199 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1200 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1201 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1202 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1203 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1205 
	#sk_SXNETID_√w
(
°
Ë
	`SKM_sk_√w
(
SXNETID
, (°))

	)

1206 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1207 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1208 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1209 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1210 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1211 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1212 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1213 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1214 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1215 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1216 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1217 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1218 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1219 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1220 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1221 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1222 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1223 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1224 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1225 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1227 
	#sk_UI_STRING_√w
(
°
Ë
	`SKM_sk_√w
(
UI_STRING
, (°))

	)

1228 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1229 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1230 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1231 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1232 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1233 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1234 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1235 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1236 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1237 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1238 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1239 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1240 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1241 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1242 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1243 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1244 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1245 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1246 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1247 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1249 
	#sk_X509_√w
(
°
Ë
	`SKM_sk_√w
(
X509
, (°))

	)

1250 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1251 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1252 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1253 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1254 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1255 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1256 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1257 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1258 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1259 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1260 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1261 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1262 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1263 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1264 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1265 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1266 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1267 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1268 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1269 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1271 
	#sk_X509V3_EXT_METHOD_√w
(
°
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (°))

	)

1272 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1273 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1274 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1275 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1276 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1277 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1278 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1279 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1280 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1281 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1282 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1283 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1284 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1285 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1286 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1287 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1288 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1289 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1290 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1291 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1293 
	#sk_X509_ALGOR_√w
(
°
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (°))

	)

1294 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1295 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1296 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1297 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1298 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1299 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1300 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1301 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1302 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1303 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1304 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1305 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1306 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1307 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1308 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1309 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1310 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1311 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1312 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1313 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1315 
	#sk_X509_ATTRIBUTE_√w
(
°
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (°))

	)

1316 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1317 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1318 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1319 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1320 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1321 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1322 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1323 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1324 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1325 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1326 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1327 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1328 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1329 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1330 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1331 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1332 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1333 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1334 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1335 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1337 
	#sk_X509_CRL_√w
(
°
Ë
	`SKM_sk_√w
(
X509_CRL
, (°))

	)

1338 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1339 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1340 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1341 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1342 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1343 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1344 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1345 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1346 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1347 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1348 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1349 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1350 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1351 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1352 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1353 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1354 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1355 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1356 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1357 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1359 
	#sk_X509_EXTENSION_√w
(
°
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (°))

	)

1360 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1361 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1362 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1363 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1364 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1365 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1366 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1367 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1368 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1369 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1370 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1371 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1372 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1373 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1374 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1375 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1376 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1377 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1378 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1379 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1381 
	#sk_X509_INFO_√w
(
°
Ë
	`SKM_sk_√w
(
X509_INFO
, (°))

	)

1382 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1383 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1384 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1385 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1386 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1387 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1388 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1389 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1390 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1391 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1392 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1393 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1394 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1395 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1396 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1397 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1398 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1399 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1400 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1401 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1403 
	#sk_X509_LOOKUP_√w
(
°
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (°))

	)

1404 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1405 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1406 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1407 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1408 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1409 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1410 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1411 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1412 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1413 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1414 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1415 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1416 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1417 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1418 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1419 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1420 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1421 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1422 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1423 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1425 
	#sk_X509_NAME_√w
(
°
Ë
	`SKM_sk_√w
(
X509_NAME
, (°))

	)

1426 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1427 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1428 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1429 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1430 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1431 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1432 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1433 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1434 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1435 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1436 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1437 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1438 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1439 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1440 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1441 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1442 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1443 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1444 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1445 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1447 
	#sk_X509_NAME_ENTRY_√w
(
°
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (°))

	)

1448 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1449 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1450 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1451 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1452 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1453 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1454 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1455 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1456 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1457 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1458 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1459 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1460 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1461 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1462 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1463 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1464 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1465 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1466 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1467 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1469 
	#sk_X509_OBJECT_√w
(
°
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (°))

	)

1470 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1471 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1472 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1473 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1474 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1475 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1476 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1477 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1478 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1479 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1480 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1481 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1482 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1483 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1484 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1485 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1486 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1487 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1488 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1489 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1491 
	#sk_X509_POLICY_DATA_√w
(
°
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (°))

	)

1492 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1493 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1494 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

1495 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

1496 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

1497 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

1498 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1499 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1500 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1501 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1502 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

1503 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

1504 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

1505 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

1506 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

1507 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

1508 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

1509 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

1510 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

1511 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

1513 
	#sk_X509_POLICY_NODE_√w
(
°
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (°))

	)

1514 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

1515 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

1516 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

1517 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

1518 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

1519 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

1520 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1521 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1522 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1523 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1524 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

1525 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

1526 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

1527 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

1528 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

1529 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

1530 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

1531 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

1532 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

1533 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

1535 
	#sk_X509_POLICY_REF_√w
(
°
Ë
	`SKM_sk_√w
(
X509_POLICY_REF
, (°))

	)

1536 
	#sk_X509_POLICY_REF_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_REF
)

	)

1537 
	#sk_X509_POLICY_REF_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_REF
, (°))

	)

1538 
	#sk_X509_POLICY_REF_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_REF
, (°))

	)

1539 
	#sk_X509_POLICY_REF_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_REF
, (°), (i))

	)

1540 
	#sk_X509_POLICY_REF_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_REF
, (°), (i), (vÆ))

	)

1541 
	#sk_X509_POLICY_REF_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_REF
, (°))

	)

1542 
	#sk_X509_POLICY_REF_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_REF
, (°), (vÆ))

	)

1543 
	#sk_X509_POLICY_REF_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_REF
, (°), (vÆ))

	)

1544 
	#sk_X509_POLICY_REF_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_REF
, (°), (vÆ))

	)

1545 
	#sk_X509_POLICY_REF_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_REF
, (°), (vÆ))

	)

1546 
	#sk_X509_POLICY_REF_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_REF
, (°), (i))

	)

1547 
	#sk_X509_POLICY_REF_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_REF
, (°), (±r))

	)

1548 
	#sk_X509_POLICY_REF_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_REF
, (°), (vÆ), (i))

	)

1549 
	#sk_X509_POLICY_REF_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_REF
, (°), (cmp))

	)

1550 
	#sk_X509_POLICY_REF_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_REF
, st)

	)

1551 
	#sk_X509_POLICY_REF_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_REF
, (°), (‰ì_func))

	)

1552 
	#sk_X509_POLICY_REF_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_REF
, (°))

	)

1553 
	#sk_X509_POLICY_REF_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_REF
, (°))

	)

1554 
	#sk_X509_POLICY_REF_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_REF
, (°))

	)

1555 
	#sk_X509_POLICY_REF_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_REF
, (°))

	)

1557 
	#sk_X509_PURPOSE_√w
(
°
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (°))

	)

1558 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

1559 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

1560 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

1561 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

1562 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

1563 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

1564 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

1565 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

1566 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

1567 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

1568 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

1569 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

1570 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

1571 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

1572 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

1573 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

1574 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

1575 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

1576 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

1577 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

1579 
	#sk_X509_REVOKED_√w
(
°
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (°))

	)

1580 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

1581 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

1582 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

1583 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

1584 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

1585 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

1586 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

1587 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

1588 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

1589 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

1590 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

1591 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

1592 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

1593 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

1594 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

1595 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

1596 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

1597 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

1598 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

1599 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

1601 
	#sk_X509_TRUST_√w
(
°
Ë
	`SKM_sk_√w
(
X509_TRUST
, (°))

	)

1602 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

1603 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

1604 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

1605 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

1606 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

1607 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

1608 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

1609 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

1610 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

1611 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

1612 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

1613 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

1614 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

1615 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

1616 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

1617 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

1618 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

1619 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

1620 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

1621 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

1623 
	#sk_X509_VERIFY_PARAM_√w
(
°
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (°))

	)

1624 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

1625 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

1626 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

1627 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

1628 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

1629 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

1630 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1631 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1632 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1633 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1634 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

1635 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

1636 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

1637 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

1638 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

1639 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

1640 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

1641 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

1642 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

1643 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

1645 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1646 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1647 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1648 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1649 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1650 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1651 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1652 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1654 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1655 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1656 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1657 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1658 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1659 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1660 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1661 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1663 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1664 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1665 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1666 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1667 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1668 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1669 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1670 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1672 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1673 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1674 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1675 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1676 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1677 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1678 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1679 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1681 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1682 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1683 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1684 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1685 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1686 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1687 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1688 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1690 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1691 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1692 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1693 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1694 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1695 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1696 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1697 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1699 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1700 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1701 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1702 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1703 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1704 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1705 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1706 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1708 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1709 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1710 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1711 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1712 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1713 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1714 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1715 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1717 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1718 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1719 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1720 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1721 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1722 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1723 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1724 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1726 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1727 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1728 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1729 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1730 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1731 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1732 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1733 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1735 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1736 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1737 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1738 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1739 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1740 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1741 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1742 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1744 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1745 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1746 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1747 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1748 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1749 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1750 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1751 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1753 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1754 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1755 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1756 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1757 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1758 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1759 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1760 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1762 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1763 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1764 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1765 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1766 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1767 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1768 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1769 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1771 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1772 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1773 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1774 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1775 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1776 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1777 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1778 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1780 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1781 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1782 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1783 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1784 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1785 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1786 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1787 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1789 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1790 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1791 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1792 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1793 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1794 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1795 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1796 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1798 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1799 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1800 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1801 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1802 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1803 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1804 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1805 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1807 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1808 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1809 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1810 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1811 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1812 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1813 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1814 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1816 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1817 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1818 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1819 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1820 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1821 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1822 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1823 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1825 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1826 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1827 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1828 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1829 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1830 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1831 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1832 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1834 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1835 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1836 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1837 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1838 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1839 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1840 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1841 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1843 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

1844 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

1846 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

1847 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

	@/usr/include/openssl/sha.h

59 #i‚de‡
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #i‡
deföed
(
OPENSSL_NO_SHA
Ë|| (deföed(
OPENSSL_NO_SHA0
Ë&& deföed(
OPENSSL_NO_SHA1
))

70 #îr‹ 
SHA
 
is
 
dißbÀd
.

73 #i‡
deföed
(
OPENSSL_FIPS
)

74 
	#FIPS_SHA_SIZE_T
 
size_t


	)

84 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë|| deföed(
__LP32__
)

85 
	#SHA_LONG
 

	)

86 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

87 
	#SHA_LONG
 

	)

88 
	#SHA_LONG_LOG2
 3

	)

90 
	#SHA_LONG
 

	)

93 
	#SHA_LBLOCK
 16

	)

94 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

97 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

98 
	#SHA_DIGEST_LENGTH
 20

	)

100 
	sSHA°©e_°


102 
SHA_LONG
 
h0
,
h1
,
h2
,
h3
,
h4
;

103 
SHA_LONG
 
Nl
,
Nh
;

104 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

105 
num
;

106 } 
	tSHA_CTX
;

108 #i‚de‡
OPENSSL_NO_SHA0


109 #ifde‡
OPENSSL_FIPS


110 
¥iv©e_SHA_Inô
(
SHA_CTX
 *
c
);

112 
SHA_Inô
(
SHA_CTX
 *
c
);

113 
SHA_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

114 
SHA_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

115 *
SHA
(c⁄° *
d
, 
size_t
 
n
, *
md
);

116 
SHA_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

118 #i‚de‡
OPENSSL_NO_SHA1


119 
SHA1_Inô
(
SHA_CTX
 *
c
);

120 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

121 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

122 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

123 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

126 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

129 
	#SHA224_DIGEST_LENGTH
 28

	)

130 
	#SHA256_DIGEST_LENGTH
 32

	)

132 
	sSHA256°©e_°


134 
SHA_LONG
 
h
[8];

135 
SHA_LONG
 
Nl
,
Nh
;

136 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

137 
num
,
md_Àn
;

138 } 
	tSHA256_CTX
;

140 #i‚de‡
OPENSSL_NO_SHA256


141 
SHA224_Inô
(
SHA256_CTX
 *
c
);

142 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

143 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

144 *
SHA224
(c⁄° *
d
, 
size_t
 
n
,*
md
);

145 
SHA256_Inô
(
SHA256_CTX
 *
c
);

146 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

147 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

148 *
SHA256
(c⁄° *
d
, 
size_t
 
n
,*
md
);

149 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

152 
	#SHA384_DIGEST_LENGTH
 48

	)

153 
	#SHA512_DIGEST_LENGTH
 64

	)

155 #i‚de‡
OPENSSL_NO_SHA512


161 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8Ë

	)

164 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

165 
	#SHA_LONG64
 
__öt64


	)

166 
	#U64
(
C
ËC##
UI64


	)

167 #ñi‡
deföed
(
__¨ch64__
)

168 
	#SHA_LONG64
 

	)

169 
	#U64
(
C
ËC##
UL


	)

171 
	#SHA_LONG64
 

	)

172 
	#U64
(
C
ËC##
ULL


	)

175 
	sSHA512°©e_°


177 
SHA_LONG64
 
h
[8];

178 
SHA_LONG64
 
Nl
,
Nh
;

180 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

181 
p
[
SHA512_CBLOCK
];

182 } 
u
;

183 
num
,
md_Àn
;

184 } 
	tSHA512_CTX
;

187 #i‚de‡
OPENSSL_NO_SHA512


188 
SHA384_Inô
(
SHA512_CTX
 *
c
);

189 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

190 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

191 *
SHA384
(c⁄° *
d
, 
size_t
 
n
,*
md
);

192 
SHA512_Inô
(
SHA512_CTX
 *
c
);

193 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

194 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

195 *
SHA512
(c⁄° *
d
, 
size_t
 
n
,*
md
);

196 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

199 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°


68 
num
;

69 **
d©a
;

70 
s‹ãd
;

72 
num_Æloc
;

73 (*
comp
)(const * const *, const * const *);

74 } 
	tSTACK
;

76 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

77 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

79 
sk_num
(c⁄° 
STACK
 *);

80 *
sk_vÆue
(c⁄° 
STACK
 *, );

82 *
sk_£t
(
STACK
 *, , *);

84 
STACK
 *
sk_√w
((*
cmp
)(const * const *, const * const *));

85 
STACK
 *
sk_√w_nuŒ
();

86 
sk_‰ì
(
STACK
 *);

87 
sk_p›_‰ì
(
STACK
 *
°
, (*
func
)(*));

88 
sk_ö£π
(
STACK
 *
sk
,*
d©a
,
whîe
);

89 *
sk_dñëe
(
STACK
 *
°
,
loc
);

90 *
sk_dñëe_±r
(
STACK
 *
°
, *
p
);

91 
sk_föd
(
STACK
 *
°
,*
d©a
);

92 
sk_föd_ex
(
STACK
 *
°
,*
d©a
);

93 
sk_push
(
STACK
 *
°
,*
d©a
);

94 
sk_unshi·
(
STACK
 *
°
,*
d©a
);

95 *
sk_shi·
(
STACK
 *
°
);

96 *
sk_p›
(
STACK
 *
°
);

97 
sk_zîo
(
STACK
 *
°
);

98 (*
sk_£t_cmp_func
(
STACK
 *
sk
, (*
c
)(const * const *,

101 
STACK
 *
sk_dup
(STACK *
°
);

102 
sk_s‹t
(
STACK
 *
°
);

103 
sk_is_s‹ãd
(c⁄° 
STACK
 *
°
);

105 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

63 #ifde‡
OPENSSL_SYS_VMS


66 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


67 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

68 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


69 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

72 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


73 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

77 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


78 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

79 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


80 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

85 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


86 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

87 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


88 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

93 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


94 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

95 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


96 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

100 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


101 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

102 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


103 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

104 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


105 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

106 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


107 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

108 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


109 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

112 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


113 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

114 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


115 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

116 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


117 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

118 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


119 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

120 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


121 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

124 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


125 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

128 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


129 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

130 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


131 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

132 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


133 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

134 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


135 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

138 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


139 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

140 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


141 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

142 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


143 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

144 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


145 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

146 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


147 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

148 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


149 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

150 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


151 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

152 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


153 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

156 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


157 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

158 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


159 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

160 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


161 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

162 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


163 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

164 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


165 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

166 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


167 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

168 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


169 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

170 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


171 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

174 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


175 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

176 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


177 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

178 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


179 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

180 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


181 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

184 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


185 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

186 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


187 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

188 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


189 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

192 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


193 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

194 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


195 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

198 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


199 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

200 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


201 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

204 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


205 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

206 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


207 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

208 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


209 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

210 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


211 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

212 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

213 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


214 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

215 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

216 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


217 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

218 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


219 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

220 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


221 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

222 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


223 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

224 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


225 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

226 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


227 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

228 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

229 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


230 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

231 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


232 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

233 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


234 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

235 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


236 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

237 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


238 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

239 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


240 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

241 
ec_GF2m_smp_±_£t_af_co‹ds


	)

242 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


243 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

244 
ec_GF2m_smp_±_gë_af_co‹ds


	)

245 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


246 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

247 
ec_GF2m_smp_£t_com¥_co‹ds


	)

248 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


249 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

250 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


251 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

252 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


253 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

254 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


255 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

256 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


257 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

258 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


259 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

260 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


261 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

262 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


263 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

264 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


265 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

266 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


267 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

268 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


269 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

270 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

271 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


272 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

273 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

274 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


275 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

276 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

277 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


278 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

279 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

280 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


281 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

282 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

283 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


284 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

285 
ec_GFp_smp_±_£t_af_co‹ds


	)

286 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


287 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

288 
ec_GFp_smp_±_gë_af_co‹ds


	)

289 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


290 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

291 
ec_GFp_smp_£t_com¥_co‹ds


	)

292 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


293 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

296 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


297 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

298 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


299 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

300 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


301 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

302 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


303 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

304 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


305 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

306 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


307 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

308 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


309 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

310 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


311 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

312 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


313 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

314 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


315 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

316 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


317 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

318 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


319 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

320 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


321 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

322 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


323 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

324 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


325 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

326 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


327 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

328 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


329 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

330 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


331 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

332 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


333 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

334 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


335 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

336 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


337 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

338 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


339 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

340 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


341 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

342 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


343 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

349 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë|| deföed(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

350 #unde‡
ERR_lﬂd_CRYPTO_°rögs


351 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

352 #unde‡
OCSP_¸lID_√w


353 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

355 #unde‡
d2i_ECPARAMETERS


356 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

357 #unde‡
i2d_ECPARAMETERS


358 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

359 #unde‡
d2i_ECPKPARAMETERS


360 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

361 #unde‡
i2d_ECPKPARAMETERS


362 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

370 #unde‡
X509v3_˛ónup_exãnsi⁄s


371 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

372 #unde‡
X509v3_add_exãnsi⁄


373 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

374 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


375 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

376 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


377 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

	@/usr/include/openssl/x509_vfy.h

59 #i‚de‡
HEADER_X509_H


60 
	~<›ís¶/x509.h
>

65 #i‚de‡
HEADER_X509_VFY_H


66 
	#HEADER_X509_VFY_H


	)

68 
	~<›ís¶/›ís¶c⁄f.h
>

69 #i‚de‡
OPENSSL_NO_LHASH


70 
	~<›ís¶/lhash.h
>

72 
	~<›ís¶/bio.h
>

73 
	~<›ís¶/¸y±o.h
>

74 
	~<›ís¶/symhacks.h
>

76 #ifde‡ 
__˝lu•lus


81 
	sx509_hash_dú_°


83 
num_dús
;

84 **
dús
;

85 *
dús_ty≥
;

86 
num_dús_Ælo˚d
;

87 } 
	tX509_HASH_DIR_CTX
;

89 
	sx509_fûe_°


91 
num_∑ths
;

92 
num_Ælo˚d
;

93 **
∑ths
;

94 *
∑th_ty≥
;

95 } 
	tX509_CERT_FILE_CTX
;

115 
	#X509_LU_RETRY
 -1

	)

116 
	#X509_LU_FAIL
 0

	)

117 
	#X509_LU_X509
 1

	)

118 
	#X509_LU_CRL
 2

	)

119 
	#X509_LU_PKEY
 3

	)

121 
	sx509_obje˘_°


124 
ty≥
;

126 *
±r
;

127 
X509
 *
x509
;

128 
X509_CRL
 *
¸l
;

129 
EVP_PKEY
 *
pkey
;

130 } 
d©a
;

131 } 
	tX509_OBJECT
;

133 
x509_lookup_°
 
	tX509_LOOKUP
;

135 
DECLARE_STACK_OF
(
X509_LOOKUP
)

136 
DECLARE_STACK_OF
(
X509_OBJECT
)

139 
	sx509_lookup_mëhod_°


141 c⁄° *
«me
;

142 (*
√w_ôem
)(
X509_LOOKUP
 *
˘x
);

143 (*
‰ì
)(
X509_LOOKUP
 *
˘x
);

144 (*
öô
)(
X509_LOOKUP
 *
˘x
);

145 (*
shutdown
)(
X509_LOOKUP
 *
˘x
);

146 (*
˘æ
)(
X509_LOOKUP
 *
˘x
,
cmd
,c⁄° *
¨gc
,
¨gl
,

147 **
ªt
);

148 (*
gë_by_subje˘
)(
X509_LOOKUP
 *
˘x
,
ty≥
,
X509_NAME
 *
«me
,

149 
X509_OBJECT
 *
ªt
);

150 (*
gë_by_issuî_£rül
)(
X509_LOOKUP
 *
˘x
,
ty≥
,
X509_NAME
 *
«me
,

151 
ASN1_INTEGER
 *
£rül
,
X509_OBJECT
 *
ªt
);

152 (*
gë_by_fögî¥öt
)(
X509_LOOKUP
 *
˘x
,
ty≥
,

153 *
byãs
,
Àn
,

154 
X509_OBJECT
 *
ªt
);

155 (*
gë_by_Æüs
)(
X509_LOOKUP
 *
˘x
,
ty≥
,*
°r
,
Àn
,

156 
X509_OBJECT
 *
ªt
);

157 } 
	tX509_LOOKUP_METHOD
;

164 
	sX509_VERIFY_PARAM_°


166 *
«me
;

167 
time_t
 
check_time
;

168 
öh_Êags
;

169 
Êags
;

170 
puΩo£
;

171 
åu°
;

172 
dïth
;

173 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
;

174 } 
	tX509_VERIFY_PARAM
;

176 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

181 
	sx509_°‹e_°


184 
ˇche
;

185 
STACK_OF
(
X509_OBJECT
Ë*
objs
;

188 
STACK_OF
(
X509_LOOKUP
Ë*
gë_˚π_mëhods
;

190 
X509_VERIFY_PARAM
 *
∑øm
;

193 (*
vîify
)(
X509_STORE_CTX
 *
˘x
);

194 (*
vîify_cb
)(
ok
,
X509_STORE_CTX
 *
˘x
);

195 (*
gë_issuî
)(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

196 (*
check_issued
)(
X509_STORE_CTX
 *
˘x
, 
X509
 *
x
, X509 *
issuî
);

197 (*
check_ªvoˇti⁄
)(
X509_STORE_CTX
 *
˘x
);

198 (*
gë_¸l
)(
X509_STORE_CTX
 *
˘x
, 
X509_CRL
 **
¸l
, 
X509
 *
x
);

199 (*
check_¸l
)(
X509_STORE_CTX
 *
˘x
, 
X509_CRL
 *
¸l
);

200 (*
˚π_¸l
)(
X509_STORE_CTX
 *
˘x
, 
X509_CRL
 *
¸l
, 
X509
 *
x
);

201 (*
˛ónup
)(
X509_STORE_CTX
 *
˘x
);

203 
CRYPTO_EX_DATA
 
ex_d©a
;

204 
ª„ªn˚s
;

207 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

209 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
Ë((˘x)->
vîify_cb
=(func))

	)

210 
	#X509_STORE_£t_vîify_func
(
˘x
,
func
Ë((˘x)->
vîify
=(func))

	)

213 
	sx509_lookup_°


215 
öô
;

216 
skù
;

217 
X509_LOOKUP_METHOD
 *
mëhod
;

218 *
mëhod_d©a
;

220 
X509_STORE
 *
°‹e_˘x
;

226 
	sx509_°‹e_˘x_°


228 
X509_STORE
 *
˘x
;

229 
cuºít_mëhod
;

232 
X509
 *
˚π
;

233 
STACK_OF
(
X509
Ë*
u¡ru°ed
;

234 
STACK_OF
(
X509_CRL
Ë*
¸ls
;

236 
X509_VERIFY_PARAM
 *
∑øm
;

237 *
Ÿhî_˘x
;

240 (*
vîify
)(
X509_STORE_CTX
 *
˘x
);

241 (*
vîify_cb
)(
ok
,
X509_STORE_CTX
 *
˘x
);

242 (*
gë_issuî
)(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

243 (*
check_issued
)(
X509_STORE_CTX
 *
˘x
, 
X509
 *
x
, X509 *
issuî
);

244 (*
check_ªvoˇti⁄
)(
X509_STORE_CTX
 *
˘x
);

245 (*
gë_¸l
)(
X509_STORE_CTX
 *
˘x
, 
X509_CRL
 **
¸l
, 
X509
 *
x
);

246 (*
check_¸l
)(
X509_STORE_CTX
 *
˘x
, 
X509_CRL
 *
¸l
);

247 (*
˚π_¸l
)(
X509_STORE_CTX
 *
˘x
, 
X509_CRL
 *
¸l
, 
X509
 *
x
);

248 (*
check_pﬁicy
)(
X509_STORE_CTX
 *
˘x
);

249 (*
˛ónup
)(
X509_STORE_CTX
 *
˘x
);

252 
vÆid
;

253 
œ°_u¡ru°ed
;

254 
STACK_OF
(
X509
Ë*
chaö
;

255 
X509_POLICY_TREE
 *
åì
;

257 
ex∂icô_pﬁicy
;

260 
îr‹_dïth
;

261 
îr‹
;

262 
X509
 *
cuºít_˚π
;

263 
X509
 *
cuºít_issuî
;

264 
X509_CRL
 *
cuºít_¸l
;

266 
CRYPTO_EX_DATA
 
ex_d©a
;

269 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

271 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

272 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

273 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

274 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

276 
	#X509_L_FILE_LOAD
 1

	)

277 
	#X509_L_ADD_DIR
 2

	)

279 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

280 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

282 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

283 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

285 
	#X509_V_OK
 0

	)

288 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

289 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

290 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

291 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

292 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

293 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

294 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

295 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

296 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

297 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

298 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

299 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

300 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

301 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

302 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

303 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

304 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

305 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

306 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

307 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

308 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

309 
	#X509_V_ERR_CERT_REVOKED
 23

	)

310 
	#X509_V_ERR_INVALID_CA
 24

	)

311 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

312 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

313 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

314 
	#X509_V_ERR_CERT_REJECTED
 28

	)

316 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

317 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

318 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

319 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

321 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

322 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

323 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

324 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

325 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

326 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

327 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

328 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

330 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

331 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

332 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

334 
	#X509_V_ERR_UNNESTED_RESOURCE
 44

	)

337 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

342 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

344 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

346 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

348 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

350 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

352 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

354 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

356 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

358 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

360 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

362 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

364 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

366 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

367 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

368 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

369 
	#X509_VP_FLAG_LOCKED
 0x8

	)

370 
	#X509_VP_FLAG_ONCE
 0x10

	)

373 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

374 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

375 | 
X509_V_FLAG_INHIBIT_ANY
 \

376 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

378 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

379 
X509_NAME
 *
«me
);

380 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,
ty≥
,
X509_NAME
 *
«me
);

381 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
, X509_OBJECT *
x
);

382 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

383 
X509_OBJECT_‰ì_c⁄ã¡s
(
X509_OBJECT
 *
a
);

384 
X509_STORE
 *
X509_STORE_√w
();

385 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

387 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

388 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

389 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

390 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

392 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

394 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

396 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

397 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

398 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

399 
X509_STORE_CTX_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

400 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

402 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

404 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

405 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

407 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

408 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

410 
X509_STORE_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
,
ty≥
,
X509_NAME
 *
«me
,

411 
X509_OBJECT
 *
ªt
);

413 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

414 
¨gl
, **
ªt
);

416 #i‚de‡
OPENSSL_NO_STDIO


417 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

418 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

419 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

423 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

424 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

425 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

426 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

427 
X509_OBJECT
 *
ªt
);

428 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

429 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

430 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

431 *
byãs
, 
Àn
, 
X509_OBJECT
 *
ªt
);

432 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
,

433 
Àn
, 
X509_OBJECT
 *
ªt
);

434 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

436 #i‚de‡
OPENSSL_NO_STDIO


437 
X509_STORE_lﬂd_loˇti⁄s
 (
X509_STORE
 *
˘x
,

438 c⁄° *
fûe
, c⁄° *
dú
);

439 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

442 
X509_STORE_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

443 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

444 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
,*
d©a
);

445 * 
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
);

446 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

447 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
,
s
);

448 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

449 
X509
 * 
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

450 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë_chaö
(
X509_STORE_CTX
 *
˘x
);

451 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

452 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
,
X509
 *
x
);

453 
X509_STORE_CTX_£t_chaö
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509
Ë*
sk
);

454 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509_CRL
Ë*
sk
);

455 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

456 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

457 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

458 
puΩo£
, 
åu°
);

459 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

460 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

461 
time_t
 
t
);

462 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

463 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

465 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

466 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

468 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

469 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

470 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

474 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

475 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

476 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

477 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

478 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

479 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

480 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

481 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
, 
Êags
);

482 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

483 
Êags
);

484 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

485 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

486 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

487 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

488 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

489 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

490 
ASN1_OBJECT
 *
pﬁicy
);

491 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

492 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

493 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

495 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

496 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

497 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

499 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

500 
STACK_OF
(
X509
Ë*
˚πs
,

501 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
,

502 
Êags
);

504 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

506 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

507 
X509_POLICY_LEVEL
 *

508 
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
, 
i
);

510 
STACK_OF
(
X509_POLICY_NODE
) *

511 
X509_pﬁicy_åì_gë0_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

513 
STACK_OF
(
X509_POLICY_NODE
) *

514 
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

516 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

518 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
, 
i
);

520 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

522 
STACK_OF
(
POLICYQUALINFO
) *

523 
X509_pﬁicy_node_gë0_quÆifõrs
(c⁄° 
X509_POLICY_NODE
 *
node
);

524 c⁄° 
X509_POLICY_NODE
 *

525 
X509_pﬁicy_node_gë0_∑ª¡
(c⁄° 
X509_POLICY_NODE
 *
node
);

527 #ifde‡ 
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

75 (*
	t__sigh™dÀr_t
) ();

80 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

82 #ifde‡
__USE_GNU


83 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

84 
__THROW
;

90 
__BEGIN_NAMESPACE_STD


91 #ifde‡
__USE_BSD


92 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

96 #ifde‡
__REDIRECT_NTH


97 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

98 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

99 
__sysv_sig«l
);

101 
	#sig«l
 
__sysv_sig«l


	)

104 
__END_NAMESPACE_STD


106 #ifde‡
__USE_XOPEN


109 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

110 
__THROW
;

116 #ifde‡
__USE_POSIX


117 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

120 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


124 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

127 
__BEGIN_NAMESPACE_STD


129 
	$øi£
 (
__sig
Ë
__THROW
;

130 
__END_NAMESPACE_STD


132 #ifde‡
__USE_SVID


134 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

135 
__THROW
;

136 
	$gsig«l
 (
__sig
Ë
__THROW
;

139 #ifde‡
__USE_MISC


141 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 #ifde‡
__FAVOR_BSD


158 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

160 #ifde‡
__USE_XOPEN


161 #ifde‡
__GNUC__


162 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

165 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

171 #ifde‡
__USE_BSD


178 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

181 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

184 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

187 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

191 #ifde‡
__USE_MISC


192 
	#NSIG
 
_NSIG


	)

195 #ifde‡
__USE_GNU


196 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

200 #ifde‡
__USE_BSD


201 
__sigh™dÀr_t
 
	tsig_t
;

204 #ifde‡
__USE_POSIX


206 #ifde‡
__USE_POSIX199309


208 
	#__√ed_time•ec


	)

209 
	~<time.h
>

212 
	~<bôs/sigöfo.h
>

216 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 #ifde‡
__USE_GNU


233 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

236 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

237 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

240 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

241 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	~<bôs/siga˘i⁄.h
>

249 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

250 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

257 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

260 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

261 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

264 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

271 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 #ifde‡
__USE_POSIX199309


279 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

280 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

287 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

288 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

289 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

290 
	`__n⁄nuŒ
 ((1));

294 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

295 
__THROW
;

300 #ifde‡
__USE_BSD


304 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

305 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

308 
	ssigvec


310 
__sigh™dÀr_t
 
sv_h™dÀr
;

311 
sv_mask
;

313 
sv_Êags
;

314 
	#sv_⁄°ack
 
sv_Êags


	)

318 
	#SV_ONSTACK
 (1 << 0)

	)

319 
	#SV_INTERRUPT
 (1 << 1)

	)

320 
	#SV_RESETHAND
 (1 << 2)

	)

328 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

329 
sigvec
 *
__ovec
Ë
__THROW
;

333 
	~<bôs/sigc⁄ãxt.h
>

336 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

341 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


346 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

348 
	~<bôs/sig°ack.h
>

349 #ifde‡
__USE_XOPEN


351 
	~<sys/uc⁄ãxt.h
>

357 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

358 
__THROW
 
__©åibuã_dïªˇãd__
;

362 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

363 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

367 #ifde‡
__USE_XOPEN_EXTENDED


371 
	$sighﬁd
 (
__sig
Ë
__THROW
;

374 
	$sigªl£
 (
__sig
Ë
__THROW
;

377 
	$sigign‹e
 (
__sig
Ë
__THROW
;

380 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

383 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


386 
	~<bôs/±hªadty≥s.h
>

387 
	~<bôs/sigthªad.h
>

394 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

396 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

400 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/syslog.h

32 #i‚de‡
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<„©uªs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

40 
	~<bôs/sy¶og-∑th.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë(((ÁcË<< 3Ë| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 
CODE
 
	g¥i‹ôy«mes
[] =

76 { "Æît", 
LOG_ALERT
 },

77 { "¸ô", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emîg", 
LOG_EMERG
 },

80 { "îr", 
LOG_ERR
 },

81 { "îr‹", 
LOG_ERR
 },

82 { "öfo", 
LOG_INFO
 },

83 { "n⁄e", 
INTERNAL_NOPRI
 },

84 { "nŸi˚", 
LOG_NOTICE
 },

85 { "∑nic", 
LOG_EMERG
 },

86 { "w¨n", 
LOG_WARNING
 },

87 { "w¨nög", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3Ë

	)

94 
	#LOG_USER
 (1<<3Ë

	)

95 
	#LOG_MAIL
 (2<<3Ë

	)

96 
	#LOG_DAEMON
 (3<<3Ë

	)

97 
	#LOG_AUTH
 (4<<3Ë

	)

98 
	#LOG_SYSLOG
 (5<<3Ë

	)

99 
	#LOG_LPR
 (6<<3Ë

	)

100 
	#LOG_NEWS
 (7<<3Ë

	)

101 
	#LOG_UUCP
 (8<<3Ë

	)

102 
	#LOG_CRON
 (9<<3Ë

	)

103 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_LOCAL0
 (16<<3Ë

	)

108 
	#LOG_LOCAL1
 (17<<3Ë

	)

109 
	#LOG_LOCAL2
 (18<<3Ë

	)

110 
	#LOG_LOCAL3
 (19<<3Ë

	)

111 
	#LOG_LOCAL4
 (20<<3Ë

	)

112 
	#LOG_LOCAL5
 (21<<3Ë

	)

113 
	#LOG_LOCAL6
 (22<<3Ë

	)

114 
	#LOG_LOCAL7
 (23<<3Ë

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

121 #ifde‡
SYSLOG_NAMES


122 
CODE
 
	gÁcûôy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "auth¥iv", 
LOG_AUTHPRIV
 },

126 { "¸⁄", 
LOG_CRON
 },

127 { "d´m⁄", 
LOG_DAEMON
 },

128 { "·p", 
LOG_FTP
 },

129 { "kîn", 
LOG_KERN
 },

130 { "Õr", 
LOG_LPR
 },

131 { "maû", 
LOG_MAIL
 },

132 { "m¨k", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curôy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uu˝", 
LOG_UUCP
 },

138 { "loˇl0", 
LOG_LOCAL0
 },

139 { "loˇl1", 
LOG_LOCAL1
 },

140 { "loˇl2", 
LOG_LOCAL2
 },

141 { "loˇl3", 
LOG_LOCAL3
 },

142 { "loˇl4", 
LOG_LOCAL4
 },

143 { "loˇl5", 
LOG_LOCAL5
 },

144 { "loˇl6", 
LOG_LOCAL6
 },

145 { "loˇl7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

154 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
˛o£log
 ();

181 
›ílog
 (
__c⁄°
 *
__idít
, 
__›ti⁄
, 
__Ácûôy
);

184 
	$£éogmask
 (
__mask
Ë
__THROW
;

190 
	$sy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, ...)

191 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

193 #ifde‡
__USE_BSD


200 
	$vsy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

206 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


207 
	~<bôs/sy¶og.h
>

209 #ifde‡
__LDBL_COMPAT


210 
	~<bôs/sy¶og-ldbl.h
>

213 
__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__exãnsi⁄__


30 
__ölöe
 
	$gnu_dev_maj‹
 (
__dev
)

31 
__THROW
;

32 
__exãnsi⁄__


33 
__ölöe
 
	$gnu_dev_mö‹
 (
__dev
)

34 
__THROW
;

35 
__exãnsi⁄__


36 
__ölöe
 
	$gnu_dev_makedev
 (
__maj‹
,

37 
__mö‹
)

38 
__THROW
;

40 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

41 
__exãnsi⁄__
 
__ölöe
 

42 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

44  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

45 
	}
}

47 
__exãnsi⁄__
 
__ölöe
 

48 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

50  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

51 
	}
}

53 
__exãnsi⁄__
 
__ölöe
 

54 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

56  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

57 | (((Ë(
__mö‹
 & ~0xff)) << 12)

58 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

59 
	}
}

64 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

65 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

66 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
);

50 
ssize_t
 
wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
);

52 
	g__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 
	#__√ed_wch¨_t


	)

12 
	#__√ed_wöt_t


	)

13 
	#__√ed_NULL


	)

14 
	~<°ddef.h
>

15 #i‚de‡
_WINT_T


20 
	#_WINT_T


	)

21 
	twöt_t
;

23 
	#__√ed_mb°©e_t


	)

24 
	~<wch¨.h
>

25 
	#_G_size_t
 
size_t


	)

28 
__off_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos_t
;

33 
__off64_t
 
	m__pos
;

34 
__mb°©e_t
 
	m__°©e
;

35 } 
	t_G_Âos64_t
;

36 
	#_G_ssize_t
 
__ssize_t


	)

37 
	#_G_off_t
 
__off_t


	)

38 
	#_G_off64_t
 
__off64_t


	)

39 
	#_G_pid_t
 
__pid_t


	)

40 
	#_G_uid_t
 
__uid_t


	)

41 
	#_G_wch¨_t
 
wch¨_t


	)

42 
	#_G_wöt_t
 
wöt_t


	)

43 
	#_G_°©64
 
°©64


	)

44 
	~<gc⁄v.h
>

47 
__gc⁄v_öfo
 
	m__cd
;

50 
__gc⁄v_öfo
 
	m__cd
;

51 
__gc⁄v_°ï_d©a
 
	m__d©a
;

52 } 
	m__comböed
;

53 } 
	t_G_ic⁄v_t
;

55 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

57 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

58 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

60 
	#_G_HAVE_BOOL
 1

	)

64 
	#_G_HAVE_ATEXIT
 1

	)

65 
	#_G_HAVE_SYS_CDEFS
 1

	)

66 
	#_G_HAVE_SYS_WAIT
 1

	)

67 
	#_G_NEED_STDARG_H
 1

	)

68 
	#_G_va_li°
 
__gnuc_va_li°


	)

70 
	#_G_HAVE_PRINTF_FP
 1

	)

71 
	#_G_HAVE_MMAP
 1

	)

72 
	#_G_HAVE_MREMAP
 1

	)

73 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

74 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

75 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

77 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

79 
	#_G_OPEN64
 
__›í64


	)

80 
	#_G_LSEEK64
 
__l£ek64


	)

81 
	#_G_MMAP64
 
__mm≠64


	)

82 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

85 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

87 
	#_G_BUFSIZ
 8192

	)

90 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

91 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

92 
	#_G_USING_THUNKS
 1

	)

93 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

94 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

97 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


98 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

100 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/socket.h

2 #i‚de‡
__ASM_STUB_SOCKET_H


3 
	#__ASM_STUB_SOCKET_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/sockë.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/sockë.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/bits/byteswap.h

20 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H


24 #i‚de‡
_BITS_BYTESWAP_H


25 
	#_BITS_BYTESWAP_H
 1

	)

27 
	~<bôs/w‹dsize.h
>

30 
	#__bsw≠_c⁄°™t_16
(
x
) \

31 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

33 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

34 
	#__bsw≠_16
(
x
) \

35 (
__exãnsi⁄__
 \

36 ({ 
__v
, 
__x
 = (
x
); \

37 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

38 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

40 
	`__asm__
 ("rorw $8, %w0" \

41 : "Ù" (
__v
) \

42 : "0" (
__x
) \

44 
__v
; }))

	)

47 
	#__bsw≠_16
(
x
) \

48 (
__exãnsi⁄__
 \

49 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

54 
	#__bsw≠_c⁄°™t_32
(
x
) \

55 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

56 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

58 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

59 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

60 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

61 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

62 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

63 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

64 || 
deföed
 
	g__amdÁm10__
)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

74 
__v
; }))

	)

76 
	#__bsw≠_32
(
x
) \

77 (
__exãnsi⁄__
 \

78 ({ 
__v
, 
__x
 = (
x
); \

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

80 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

82 
	`__asm__
 ("rorw $8, %w0;" \

85 : "Ù" (
__v
) \

86 : "0" (
__x
) \

88 
__v
; }))

	)

91 
	#__bsw≠_32
(
x
) \

92 (
__exãnsi⁄__
 \

93 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

97 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

99 
	#__bsw≠_c⁄°™t_64
(
x
) \

100 ((((
x
) & 0xff00000000000000ull) >> 56) \

101 | (((
x
) & 0x00ff000000000000ull) >> 40) \

102 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

103 | (((
x
) & 0x000000ff00000000ull) >> 8) \

104 | (((
x
) & 0x00000000ff000000ull) << 8) \

105 | (((
x
) & 0x0000000000ff0000ull) << 24) \

106 | (((
x
) & 0x000000000000ff00ull) << 40) \

107 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

109 #i‡
__WORDSIZE
 == 64

110 
	#__bsw≠_64
(
x
) \

111 (
__exãnsi⁄__
 \

112 ({ 
__v
, 
__x
 = (
x
); \

113 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

114 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

116 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

117 
__v
; }))

	)

119 
	#__bsw≠_64
(
x
) \

120 (
__exãnsi⁄__
 \

121 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

122 
__l
[2]; } 
__w
, 
__r
; \

123 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

124 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

127 
__w
.
__Œ
 = (
x
); \

128 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

129 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

131 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 
	#MCAST_JOIN_GROUP
 42

	)

47 
	#MCAST_BLOCK_SOURCE
 43

	)

48 
	#MCAST_UNBLOCK_SOURCE
 44

	)

49 
	#MCAST_LEAVE_GROUP
 45

	)

50 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

51 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

52 
	#MCAST_MSFILTER
 48

	)

54 
	#MCAST_EXCLUDE
 0

	)

55 
	#MCAST_INCLUDE
 1

	)

57 
	#IP_ROUTER_ALERT
 5

	)

58 
	#IP_PKTINFO
 8

	)

59 
	#IP_PKTOPTIONS
 9

	)

60 
	#IP_PMTUDISC
 10

	)

61 
	#IP_MTU_DISCOVER
 10

	)

62 
	#IP_RECVERR
 11

	)

63 
	#IP_RECVTTL
 12

	)

64 
	#IP_RECVTOS
 13

	)

68 
	#IP_PMTUDISC_DONT
 0

	)

69 
	#IP_PMTUDISC_WANT
 1

	)

70 
	#IP_PMTUDISC_DO
 2

	)

73 
	#SOL_IP
 0

	)

75 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

76 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

77 
	#IP_MAX_MEMBERSHIPS
 20

	)

82 
	sù_›ts


84 
ö_addr
 
	mù_d°
;

85 
	mù_›ts
[40];

89 
	sù_mªqn


91 
ö_addr
 
	mimr_mu…üddr
;

92 
ö_addr
 
	mimr_addªss
;

93 
	mimr_ifödex
;

97 
	sö_pktöfo


99 
	mùi_ifödex
;

100 
ö_addr
 
	mùi_•ec_d°
;

101 
ö_addr
 
	mùi_addr
;

107 
	#IPV6_ADDRFORM
 1

	)

108 
	#IPV6_2292PKTINFO
 2

	)

109 
	#IPV6_2292HOPOPTS
 3

	)

110 
	#IPV6_2292DSTOPTS
 4

	)

111 
	#IPV6_2292RTHDR
 5

	)

112 
	#IPV6_2292PKTOPTIONS
 6

	)

113 
	#IPV6_CHECKSUM
 7

	)

114 
	#IPV6_2292HOPLIMIT
 8

	)

116 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

118 
	#IPV6_NEXTHOP
 9

	)

119 
	#IPV6_AUTHHDR
 10

	)

120 
	#IPV6_UNICAST_HOPS
 16

	)

121 
	#IPV6_MULTICAST_IF
 17

	)

122 
	#IPV6_MULTICAST_HOPS
 18

	)

123 
	#IPV6_MULTICAST_LOOP
 19

	)

124 
	#IPV6_JOIN_GROUP
 20

	)

125 
	#IPV6_LEAVE_GROUP
 21

	)

126 
	#IPV6_ROUTER_ALERT
 22

	)

127 
	#IPV6_MTU_DISCOVER
 23

	)

128 
	#IPV6_MTU
 24

	)

129 
	#IPV6_RECVERR
 25

	)

130 
	#IPV6_V6ONLY
 26

	)

131 
	#IPV6_JOIN_ANYCAST
 27

	)

132 
	#IPV6_LEAVE_ANYCAST
 28

	)

133 
	#IPV6_IPSEC_POLICY
 34

	)

134 
	#IPV6_XFRM_POLICY
 35

	)

136 
	#IPV6_RECVPKTINFO
 49

	)

137 
	#IPV6_PKTINFO
 50

	)

138 
	#IPV6_RECVHOPLIMIT
 51

	)

139 
	#IPV6_HOPLIMIT
 52

	)

140 
	#IPV6_RECVHOPOPTS
 53

	)

141 
	#IPV6_HOPOPTS
 54

	)

142 
	#IPV6_RTHDRDSTOPTS
 55

	)

143 
	#IPV6_RECVRTHDR
 56

	)

144 
	#IPV6_RTHDR
 57

	)

145 
	#IPV6_RECVDSTOPTS
 58

	)

146 
	#IPV6_DSTOPTS
 59

	)

148 
	#IPV6_RECVTCLASS
 66

	)

149 
	#IPV6_TCLASS
 67

	)

152 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

153 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

154 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

155 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

158 
	#IPV6_PMTUDISC_DONT
 0

	)

159 
	#IPV6_PMTUDISC_WANT
 1

	)

160 
	#IPV6_PMTUDISC_DO
 2

	)

163 
	#SOL_IPV6
 41

	)

164 
	#SOL_ICMPV6
 58

	)

167 
	#IPV6_RTHDR_LOOSE
 0

	)

168 
	#IPV6_RTHDR_STRICT
 1

	)

170 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

36 
	~<löux/limôs.h
>

39 #ifde‡
__undef_NR_OPEN


40 #unde‡
NR_OPEN


41 #unde‡
__undef_NR_OPEN


44 #ifde‡
__undef_LINK_MAX


45 #unde‡
LINK_MAX


46 #unde‡
__undef_LINK_MAX


49 #ifde‡
__undef_OPEN_MAX


50 #unde‡
OPEN_MAX


51 #unde‡
__undef_OPEN_MAX


55 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

57 
	#PTHREAD_KEYS_MAX
 1024

	)

60 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

62 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

65 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

67 #unde‡
PTHREAD_THREADS_MAX


71 
	#AIO_PRIO_DELTA_MAX
 20

	)

74 
	#PTHREAD_STACK_MIN
 16384

	)

77 
	#DELAYTIMER_MAX
 2147483647

	)

80 
	#TTY_NAME_MAX
 32

	)

83 
	#LOGIN_NAME_MAX
 256

	)

86 
	#HOST_NAME_MAX
 64

	)

89 
	#MQ_PRIO_MAX
 32768

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1,

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


166 
	mRUSAGE_THREAD
 = 1

167 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

169 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

173 
	#__√ed_timevÆ


	)

174 
	~<bôs/time.h
>

177 
	srußge


180 
timevÆ
 
	mru_utime
;

182 
timevÆ
 
	mru_°ime
;

184 
	mru_maxrss
;

187 
	mru_ixrss
;

189 
	mru_idrss
;

191 
	mru_i§ss
;

194 
	mru_möÊt
;

196 
	mru_majÊt
;

198 
	mru_nsw≠
;

201 
	mru_öblock
;

203 
	mru_oublock
;

205 
	mru_msg¢d
;

207 
	mru_msgrcv
;

209 
	mru_nsig«ls
;

213 
	mru_nvcsw
;

216 
	mru_nivcsw
;

220 
	#PRIO_MIN
 -20

	)

221 
	#PRIO_MAX
 20

	)

225 
	e__¥i‹ôy_which


227 
	mPRIO_PROCESS
 = 0,

228 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

229 
	mPRIO_PGRP
 = 1,

230 
	#PRIO_PGRP
 
PRIO_PGRP


	)

231 
	mPRIO_USER
 = 2

232 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


26 
	#__FD_ZERO
(
s
) \

28 
__i
; \

29 
fd_£t
 *
__¨r
 = (
s
); \

30 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

31 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

32 } 0)

	)

33 
	#__FD_SET
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] |
	`__FDMASK
(d))

	)

34 
	#__FD_CLR
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] &~
	`__FDMASK
(d))

	)

35 
	#__FD_ISSET
(
d
, 
s
Ë((
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] & 
	`__FDMASK
(d)Ë!0)

	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/syslog-ldbl.h

20 #i‚de‡
_SYS_SYSLOG_H


24 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

26 #ifde‡
__USE_BSD


27 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

30 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


31 
	$__LDBL_REDIR_DECL
 (
__sy¶og_chk
)

33 #ifde‡
__USE_BSD


34 
	$__LDBL_REDIR_DECL
 (
__vsy¶og_chk
)

	@/usr/include/bits/syslog-path.h

20 #i‚de‡
_SYS_SYSLOG_H


24 #i‚de‡
_BITS_SYSLOG_PATH_H


25 
	#_BITS_SYSLOG_PATH_H
 1

	)

27 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/bits/syslog.h

20 #i‚de‡
_SYS_SYSLOG_H


25 
	$__sy¶og_chk
 (
__¥i
, 
__Êag
, 
__c⁄°
 *
__fmt
, ...)

26 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

28 
	#sy¶og
(
¥i
, ...) \

29 
	`__sy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

32 #ifde‡
__USE_BSD


33 
	$__vsy¶og_chk
 (
__¥i
, 
__Êag
, 
__c⁄°
 *
__fmt
,

34 
__gnuc_va_li°
 
__≠
)

35 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

37 
	#vsy¶og
(
¥i
, 
fmt
, 
≠
) \

38 
	`__vsy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
fmt
, 
≠
)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/ldap_cdefs.h

17 #i‚de‡
_LDAP_CDEFS_H


18 
	#_LDAP_CDEFS_H


	)

20 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

21 
	#LDAP_BEGIN_DECL
 "C" {

	)

22 
	#LDAP_END_DECL
 }

	)

24 
	#LDAP_BEGIN_DECL


	)

25 
	#LDAP_END_DECL


	)

28 #i‡!
deföed
(
LDAP_NO_PROTOTYPES
Ë&& ( deföed(
LDAP_NEEDS_PROTOTYPES
) || \

29 
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
Ë|| 
	$deföed
(
c_∂u•lus
) )

32 
	#LDAP_P
(
¥Ÿos
Ë
	)
protos

33 
	#LDAP_CONCAT1
(
x
,
y
Ëx ## 
	)
y

34 
	#LDAP_CONCAT
(
x
,
y
Ë
	`LDAP_CONCAT1
(x,y)

	)

35 
	#LDAP_STRING
(
x
Ë#x

	)

36 
	#LDAP_XSTRING
(
x
Ë
	`LDAP_STRING
(xË

	)

38 #i‚de‡
LDAP_CONST


39 
	#LDAP_CONST
 c⁄°

	)

45 
	#LDAP_P
(
¥Ÿos
Ë()

	)

46 
	#LDAP_CONCAT
(
x
,
y
Ëx 
	)
y

47 
	#LDAP_STRING
(
x
Ë"x"

	)

49 #i‚de‡
LDAP_CONST


50 
	#LDAP_CONST


	)

55 #i‡(
__GNUC__
Ë* 1000 + (
__GNUC_MINOR__
) >= 2006

56 
	#LDAP_GCCATTR
(
©ås
Ë
	`__©åibuã__
◊ârs)

	)

58 
	#LDAP_GCCATTR
(
©ås
)

	)

130 #i‡
	`deföed
(
_WIN32
) && \

131 ((
	`deföed
(
LDAP_LIBS_DYNAMIC
Ë&& !deföed(
LBER_LIBRARY
)) || \

132 (!
	`deföed
(
LDAP_LIBS_DYNAMIC
Ë&& 
	$deföed
(
SLAPD_IMPORT
)))

133 
	#LBER_F
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

134 
	#LBER_V
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

136 
	#LBER_F
(
ty≥
Ë
	)
type

137 
	#LBER_V
(
ty≥
Ë
	)
type

141 #i‡
	`deföed
(
_WIN32
) && \

142 ((
	`deföed
(
LDAP_LIBS_DYNAMIC
Ë&& !deföed(
LDAP_LIBRARY
)) || \

143 (!
	`deföed
(
LDAP_LIBS_DYNAMIC
Ë&& 
	$deföed
(
SLAPD_IMPORT
)))

144 
	#LDAP_F
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

145 
	#LDAP_V
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

147 
	#LDAP_F
(
ty≥
Ë
	)
type

148 
	#LDAP_V
(
ty≥
Ë
	)
type

152 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
SLAPD_IMPORT
)

153 
	#LDAP_AVL_F
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

154 
	#LDAP_AVL_V
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

156 
	#LDAP_AVL_F
(
ty≥
Ë
	)
type

157 
	#LDAP_AVL_V
(
ty≥
Ë
	)
type

162 
	#LDAP_LDBM_F
(
ty≥
Ë
	)
type

163 
	#LDAP_LDBM_V
(
ty≥
Ë
	)
type

166 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
SLAPD_IMPORT
)

167 
	#LDAP_LDIF_F
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

168 
	#LDAP_LDIF_V
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

170 
	#LDAP_LDIF_F
(
ty≥
Ë
	)
type

171 
	#LDAP_LDIF_V
(
ty≥
Ë
	)
type

175 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
SLAPD_IMPORT
)

176 
	#LDAP_LUNICODE_F
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

177 
	#LDAP_LUNICODE_V
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

179 
	#LDAP_LUNICODE_F
(
ty≥
Ë
	)
type

180 
	#LDAP_LUNICODE_V
(
ty≥
Ë
	)
type

184 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
SLAPD_IMPORT
)

185 
	#LDAP_LUTIL_F
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

186 
	#LDAP_LUTIL_V
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

188 
	#LDAP_LUTIL_F
(
ty≥
Ë
	)
type

189 
	#LDAP_LUTIL_V
(
ty≥
Ë
	)
type

193 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
SLAPD_IMPORT
)

194 
	#LDAP_REWRITE_F
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

195 
	#LDAP_REWRITE_V
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

197 
	#LDAP_REWRITE_F
(
ty≥
Ë
	)
type

198 
	#LDAP_REWRITE_V
(
ty≥
Ë
	)
type

202 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
SLAPD_IMPORT
)

203 
	#LDAP_SLAPD_F
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

204 
	#LDAP_SLAPD_V
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

206 
	#LDAP_SLAPD_F
(
ty≥
Ë
	)
type

207 
	#LDAP_SLAPD_V
(
ty≥
Ë
	)
type

211 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
SLAPD_IMPORT
)

212 
	#LDAP_SLAPI_F
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

213 
	#LDAP_SLAPI_V
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

215 
	#LDAP_SLAPI_F
(
ty≥
Ë
	)
type

216 
	#LDAP_SLAPI_V
(
ty≥
Ë
	)
type

220 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
SLAPD_IMPORT
)

221 
	#SLAPI_F
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

222 
	#SLAPI_V
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

224 
	#SLAPI_F
(
ty≥
Ë
	)
type

225 
	#SLAPI_V
(
ty≥
Ë
	)
type

244 #i‡(
	`deföed
(
__MINGW32__
Ë&& !deföed(
CSTATIC
)) || \

245 (
	`deföed
(
_MSC_VER
Ë&& 
	$deföed
(
_DLL
))

246 
	#LDAP_LIBC_F
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

247 
	#LDAP_LIBC_V
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ë
	)
type

249 
	#LDAP_LIBC_F
(
ty≥
Ë
	)
type

250 
	#LDAP_LIBC_V
(
ty≥
Ë
	)
type

	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

9 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

10 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

11 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

12 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

14 c⁄° 
os_tﬂscii
[256];

15 c⁄° 
os_t€bcdic
[256];

16 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

17 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

138 #i‡
__GNUC_PREREQ
 (2,97)

140 
	#__Êex¨r
 []

	)

142 #ifde‡
__GNUC__


143 
	#__Êex¨r
 [0]

	)

145 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

146 
	#__Êex¨r
 []

	)

149 
	#__Êex¨r
 [1]

	)

165 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

167 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

168 #ifde‡
__˝lu•lus


169 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

170 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

172 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

173 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

175 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

176 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

189 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

190 
	#__©åibuã__
(
xyz
Ë

	)

196 #i‡
__GNUC_PREREQ
 (2,96)

197 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

199 
	#__©åibuã_mÆloc__


	)

205 #i‡
__GNUC_PREREQ
 (2,96)

206 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

208 
	#__©åibuã_puª__


	)

214 #i‡
__GNUC_PREREQ
 (3,1)

215 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

216 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

218 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

219 
	#__©åibuã_noölöe__


	)

223 #i‡
__GNUC_PREREQ
 (3,2)

224 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

226 
	#__©åibuã_dïªˇãd__


	)

235 #i‡
__GNUC_PREREQ
 (2,8)

236 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

238 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

245 #i‡
__GNUC_PREREQ
 (2,97)

246 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

247 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

249 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

254 #i‡
__GNUC_PREREQ
 (3,3)

255 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

257 
	#__n⁄nuŒ
(
∑øms
)

	)

262 #i‡
__GNUC_PREREQ
 (3,4)

263 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

264 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

265 #i‡
__USE_FORTIFY_LEVEL
 > 0

266 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

269 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

271 #i‚de‡
__wur


272 
	#__wur


	)

276 #i‡
__GNUC_PREREQ
 (3,2)

277 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

279 
	#__Æways_ölöe
 
__ölöe


	)

286 #i‡!
__GNUC_PREREQ
 (2,8)

287 
	#__exãnsi⁄__


	)

291 #i‡!
__GNUC_PREREQ
 (2,92)

292 
	#__ª°ri˘


	)

298 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


299 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

301 #ifde‡
__GNUC__


302 
	#__ª°ri˘_¨r


	)

304 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

305 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

308 
	#__ª°ri˘_¨r


	)

313 
	~<bôs/w‹dsize.h
>

315 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


316 
	#__LDBL_COMPAT
 1

	)

317 #ifde‡
__REDIRECT


318 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

319 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

320 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

321 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

322 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

323 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

324 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

325 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

326 
	#__LDBL_REDIR_DECL
(
«me
) \

327 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

330 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


331 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

332 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

333 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

334 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

335 
	#__LDBL_REDIR_DECL
(
«me
)

	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/asm-i386/socket.h

1 #i‚de‡
_ASM_SOCKET_H


2 
	#_ASM_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

26 
	#SO_PASSCRED
 16

	)

27 
	#SO_PEERCRED
 17

	)

28 
	#SO_RCVLOWAT
 18

	)

29 
	#SO_SNDLOWAT
 19

	)

30 
	#SO_RCVTIMEO
 20

	)

31 
	#SO_SNDTIMEO
 21

	)

34 
	#SO_SECURITY_AUTHENTICATION
 22

	)

35 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

36 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

38 
	#SO_BINDTODEVICE
 25

	)

41 
	#SO_ATTACH_FILTER
 26

	)

42 
	#SO_DETACH_FILTER
 27

	)

44 
	#SO_PEERNAME
 28

	)

45 
	#SO_TIMESTAMP
 29

	)

46 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

48 
	#SO_ACCEPTCONN
 30

	)

50 
	#SO_PEERSEC
 31

	)

51 
	#SO_PASSSEC
 34

	)

	@/usr/include/asm-x86_64/socket.h

1 #i‚de‡
_ASM_SOCKET_H


2 
	#_ASM_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

26 
	#SO_PASSCRED
 16

	)

27 
	#SO_PEERCRED
 17

	)

28 
	#SO_RCVLOWAT
 18

	)

29 
	#SO_SNDLOWAT
 19

	)

30 
	#SO_RCVTIMEO
 20

	)

31 
	#SO_SNDTIMEO
 21

	)

34 
	#SO_SECURITY_AUTHENTICATION
 22

	)

35 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

36 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

38 
	#SO_BINDTODEVICE
 25

	)

41 
	#SO_ATTACH_FILTER
 26

	)

42 
	#SO_DETACH_FILTER
 27

	)

44 
	#SO_PEERNAME
 28

	)

45 
	#SO_TIMESTAMP
 29

	)

46 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

48 
	#SO_ACCEPTCONN
 30

	)

50 
	#SO_PEERSEC
 31

	)

51 
	#SO_PASSSEC
 34

	)

	@/usr/include/asm/errno.h

2 #i‚de‡
__ASM_STUB_ERRNO_H


3 
	#__ASM_STUB_ERRNO_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/î∫o.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/î∫o.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

63 
	g__gc⁄v_°ï
;

64 
	g__gc⁄v_°ï_d©a
;

65 
	g__gc⁄v_lﬂded_obje˘
;

66 
	g__gc⁄v_å™s_d©a
;

70 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

71 
	t__c⁄°
 **, __const *,

72 **, 
	tsize_t
 *, , );

75 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

78 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

79 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

83 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

84 
	t__gc⁄v_°ï_d©a
 *, *,

85 
	t__c⁄°
 *,

86 
	t__c⁄°
 **,

87 
	t__c⁄°
 *, **,

88 
	tsize_t
 *);

91 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

92 
	t__c⁄°
 *,

96 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

97 
	tsize_t
 *);

100 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

101 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

103 
	s__gc⁄v_å™s_d©a


106 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

107 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

108 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

109 *
__d©a
;

110 
__gc⁄v_å™s_d©a
 *
__√xt
;

115 
	s__gc⁄v_°ï


117 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

118 
__c⁄°
 *
__mod«me
;

120 
__cou¡î
;

122 *
__‰om_«me
;

123 *
__to_«me
;

125 
__gc⁄v_f˘
 
__f˘
;

126 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

127 
__gc⁄v_öô_f˘
 
__öô_f˘
;

128 
__gc⁄v_íd_f˘
 
__íd_f˘
;

132 
__mö_√eded_‰om
;

133 
__max_√eded_‰om
;

134 
__mö_√eded_to
;

135 
__max_√eded_to
;

138 
__°©eful
;

140 *
__d©a
;

145 
	s__gc⁄v_°ï_d©a


147 *
__outbuf
;

148 *
__outbu„nd
;

152 
__Êags
;

156 
__övoˇti⁄_cou¡î
;

160 
__öã∫Æ_u£
;

162 
__mb°©e_t
 *
__°©ï
;

163 
__mb°©e_t
 
__°©e
;

167 
__gc⁄v_å™s_d©a
 *
__å™s
;

172 
	s__gc⁄v_öfo


174 
size_t
 
__n°ïs
;

175 
__gc⁄v_°ï
 *
__°ïs
;

176 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

177 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_lutimes


	)

20 
	#__°ub_ªvoke


	)

21 
	#__°ub_£éogö


	)

22 
	#__°ub_sigªtu∫


	)

23 
	#__°ub_s°k


	)

24 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_ªm_pio2l


	)

12 
	#__°ub___kî√l_söl


	)

13 
	#__°ub___kî√l_è∆


	)

14 
	#__°ub_bdÊush


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_„upd©ìnv


	)

20 
	#__°ub_gëmsg


	)

21 
	#__°ub_gây


	)

22 
	#__°ub_lchmod


	)

23 
	#__°ub_lutimes


	)

24 
	#__°ub_putmsg


	)

25 
	#__°ub_ªvoke


	)

26 
	#__°ub_£éogö


	)

27 
	#__°ub_sigªtu∫


	)

28 
	#__°ub_s°k


	)

29 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#CHILD_MAX
 999

	)

9 
	#OPEN_MAX
 256

	)

10 
	#LINK_MAX
 127

	)

11 
	#MAX_CANON
 255

	)

12 
	#MAX_INPUT
 255

	)

13 
	#NAME_MAX
 255

	)

14 
	#PATH_MAX
 4096

	)

15 
	#PIPE_BUF
 4096

	)

16 
	#XATTR_NAME_MAX
 255

	)

17 
	#XATTR_SIZE_MAX
 65536

	)

18 
	#XATTR_LIST_MAX
 65536

	)

20 
	#RTSIG_MAX
 32

	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‚de‡
__√ed_mb°©e_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #ifde‡
__USE_UNIX98


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

43 
	#__√ed_size_t


	)

44 
	#__√ed_wch¨_t


	)

45 
	#__√ed_NULL


	)

47 
	#__√ed_wöt_t


	)

48 
	~<°ddef.h
>

50 
	~<bôs/wch¨.h
>

54 #i‚de‡
_WINT_T


59 
	#_WINT_T


	)

60 
	twöt_t
;

64 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

65 && 
deföed
 
__WINT_TYPE__


66 
__BEGIN_NAMESPACE_STD


67 
__WINT_TYPE__
 
	twöt_t
;

68 
	g__END_NAMESPACE_STD


73 #i‚de‡
__mb°©e_t_deföed


74 
	#__mb°©e_t_deföed
 1

	)

78 
	m__cou¡
;

81 
wöt_t
 
	m__wch
;

82 
	m__wchb
[4];

83 } 
	m__vÆue
;

84 } 
	t__mb°©e_t
;

86 #unde‡
__√ed_mb°©e_t


91 #ifde‡
_WCHAR_H


93 
__BEGIN_NAMESPACE_C99


95 
__mb°©e_t
 
	tmb°©e_t
;

96 
	g__END_NAMESPACE_C99


97 #ifde‡
__USE_GNU


98 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

101 #i‚de‡
WCHAR_MIN


103 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

104 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

107 #i‚de‡
WEOF


108 
	#WEOF
 (0xffffffffu)

	)

113 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


114 
	~<w˘y≥.h
>

118 
__BEGIN_DECLS


120 
__BEGIN_NAMESPACE_STD


123 
tm
;

127 
	$__USING_NAMESPACE_STD
(
tm
)

128 
__END_NAMESPACE_STD


131 
__BEGIN_NAMESPACE_C99


133 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

134 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

136 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

137 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

138 
__THROW
;

141 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

142 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

144 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
;

149 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

150 
__THROW
 
__©åibuã_puª__
;

152 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

153 
__THROW
 
__©åibuã_puª__
;

154 
__END_NAMESPACE_C99


156 #ifde‡
__USE_GNU


158 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

161 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

162 
size_t
 
__n
Ë
__THROW
;

166 
	~<xloˇÀ.h
>

168 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

169 
__loˇÀ_t
 
__loc
Ë
__THROW
;

171 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

172 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

175 
__BEGIN_NAMESPACE_C99


178 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

182 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

184 
__END_NAMESPACE_C99


186 #ifde‡
__USE_GNU


192 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

193 
__loˇÀ_t
 
__loc
Ë
__THROW
;

198 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

199 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

202 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

205 
__BEGIN_NAMESPACE_C99


207 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

208 
__THROW
 
__©åibuã_puª__
;

210 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

211 
__THROW
 
__©åibuã_puª__
;

212 
__END_NAMESPACE_C99


214 #ifde‡
__USE_GNU


217 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

218 
__THROW
 
__©åibuã_puª__
;

221 
__BEGIN_NAMESPACE_C99


224 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

225 
__THROW
 
__©åibuã_puª__
;

228 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

229 
__THROW
 
__©åibuã_puª__
;

231 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

232 
__THROW
 
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

235 
__THROW
 
__©åibuã_puª__
;

238 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

240 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

243 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

244 
__END_NAMESPACE_C99


246 #ifde‡
__USE_XOPEN


248 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

249 
__THROW
 
__©åibuã_puª__
;

252 #ifde‡
__USE_GNU


254 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

255 
__THROW
 
__©åibuã_puª__
;

259 
__BEGIN_NAMESPACE_C99


261 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

262 
__THROW
 
__©åibuã_puª__
;

265 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

266 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

267 
__THROW
 
__©åibuã_puª__
;

270 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

271 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

275 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

276 
__THROW
;

279 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

280 
__END_NAMESPACE_C99


282 #ifde‡
__USE_GNU


285 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

286 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

287 
__THROW
;

291 
__BEGIN_NAMESPACE_C99


294 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

298 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

302 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

306 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

307 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

308 
mb°©e_t
 *
__p
Ë
__THROW
;

311 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

312 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

315 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

317 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

318 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

319 
__END_NAMESPACE_C99


321 #ifde‡
__USE_EXTERN_INLINES


324 #i‚de‡
__˝lu•lus


328 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

329 
__ölöe
 
wöt_t


330 
	`__NTH
 (
	$btowc
 (
__c
))

331 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

332 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

334 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

335 
__ölöe
 

336 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

337 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

338 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

341 
__ölöe
 
size_t


342 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

343 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

344 {  (
__ps
 !
NULL


345 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

348 
__BEGIN_NAMESPACE_C99


351 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

352 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

353 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

357 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

358 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

359 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

360 
__END_NAMESPACE_C99


363 #ifdef 
__USE_GNU


366 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

367 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

368 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

373 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

374 
size_t
 
__nwc
, size_à
__Àn
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

380 #ifde‡
__USE_XOPEN


382 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

386 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

390 
__BEGIN_NAMESPACE_C99


393 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

394 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

396 #ifde‡
__USE_ISOC99


398 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

399 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

400 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

407 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

408 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

412 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

413 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

414 
__THROW
;

416 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

419 
__exãnsi⁄__


420 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

421 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

422 
__THROW
;

426 
__exãnsi⁄__


427 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

428 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

429 
__ba£
Ë
__THROW
;

431 
__END_NAMESPACE_C99


433 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


436 
__exãnsi⁄__


437 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

438 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

439 
__THROW
;

443 
__exãnsi⁄__


444 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

445 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

446 
__ba£
Ë
__THROW
;

449 #ifde‡
__USE_GNU


463 
	~<xloˇÀ.h
>

467 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

468 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

469 
__loˇÀ_t
 
__loc
Ë
__THROW
;

471 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

473 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

475 
__exãnsi⁄__


476 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

478 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

480 
__exãnsi⁄__


481 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

483 
__ba£
, 
__loˇÀ_t
 
__loc
)

484 
__THROW
;

486 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

488 
__THROW
;

490 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

492 
__THROW
;

494 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

495 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

496 
__loˇÀ_t
 
__loc
Ë
__THROW
;

502 
	$__wc°od_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

503 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

504 
__THROW
;

505 
	$__wc°of_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

507 
__THROW
;

508 
	$__wc°ﬁd_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

509 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

510 
__group
Ë
__THROW
;

512 #i‡!
deföed
 
__wc°ﬁ_öã∫Æ_deföed
 \

513 && 
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

514 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

515 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

516 
__ba£
, 
__group
Ë
__THROW
;

517 
	#__wc°ﬁ_öã∫Æ_deföed
 1

	)

519 #i‡!
deföed
 
__wc°oul_öã∫Æ_deföed
 \

520 && 
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

521 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈t
,

522 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

523 
__ba£
, 
__group
Ë
__THROW
;

524 
	#__wc°oul_öã∫Æ_deföed
 1

	)

526 #i‡!
deföed
 
__wc°ﬁl_öã∫Æ_deföed
 \

527 && 
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

528 
__exãnsi⁄__


529 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

530 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

531 
__ba£
, 
__group
Ë
__THROW
;

532 
	#__wc°ﬁl_öã∫Æ_deföed
 1

	)

534 #i‡!
deföed
 
__wc°ouŒ_öã∫Æ_deföed
 \

535 && 
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

536 
__exãnsi⁄__


537 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *

538 
__ª°ri˘
 
__≈å
,

539 
wch¨_t
 **

540 
__ª°ri˘
 
__íd±r
,

541 
__ba£
,

542 
__group
Ë
__THROW
;

543 
	#__wc°ouŒ_öã∫Æ_deföed
 1

	)

547 #i‡
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

549 
__BEGIN_NAMESPACE_C99


551 
__ölöe
 

552 
	`__NTH
 (
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

554 {  
	`__wc°od_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

555 
__ölöe
 

556 
__NTH
 (
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

558 {  
	`__wc°ﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

559 
__ölöe
 

560 
__NTH
 (
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

562 {  
	`__wc°oul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

563 
__END_NAMESPACE_C99


565 #ifde‡
__USE_GNU


566 
__ölöe
 

567 
__NTH
 (
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

568 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

569 {  
	`__wc°of_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

570 #i‚de‡
__LDBL_COMPAT


571 
__ölöe
 

572 
__NTH
 (
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

573 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

574 {  
	`__wc°ﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

576 
__exãnsi⁄__


577 
__ölöe
 

578 
__NTH
 (
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

579 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

580 {  
	`__wc°ﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

581 
__exãnsi⁄__


582 
__ölöe
 

583 
__NTH
 (
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

584 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

585 {  
	`__wc°ouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

590 #ifdef 
__USE_GNU


593 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

597 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

598 
__THROW
;

604 #ifdef 
__USE_GNU


607 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

610 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


611 
__BEGIN_NAMESPACE_C99


614 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

621 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

622 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

628 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

631 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

632 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

633 
__THROW
 ;

639 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

640 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

641 
__gnuc_va_li°
 
__¨g
)

647 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

648 
__gnuc_va_li°
 
__¨g
)

652 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

653 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

654 
__gnuc_va_li°
 
__¨g
)

655 
__THROW
 ;

662 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

663 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

669 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

672 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

673 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

674 
__THROW
 ;

676 
__END_NAMESPACE_C99


679 #ifde‡
__USE_ISOC99


680 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 
__END_NAMESPACE_C99


707 
__BEGIN_NAMESPACE_C99


712 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

713 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

719 
wöt_t
 
	`gëwch¨
 ();

726 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

727 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

733 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

741 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

742 
__FILE
 *
__ª°ri˘
 
__°ªam
);

748 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

749 
__FILE
 *
__ª°ri˘
 
__°ªam
);

756 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

757 
__END_NAMESPACE_C99


760 #ifde‡
__USE_GNU


768 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

777 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

785 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

794 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

795 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

804 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

805 
__FILE
 *
__ª°ri˘
 
__°ªam
);

813 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

814 
__FILE
 *
__ª°ri˘
 
__°ªam
);

818 
__BEGIN_NAMESPACE_C99


822 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

823 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

824 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

825 
__END_NAMESPACE_C99


827 #ifde‡
__USE_GNU


828 
	~<xloˇÀ.h
>

832 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

833 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

834 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

835 
__loˇÀ_t
 
__loc
Ë
__THROW
;

844 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


845 
	#__√ed_iswxxx


	)

846 
	~<w˘y≥.h
>

850 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


851 
	~<bôs/wch¨2.h
>

854 #ifde‡
__LDBL_COMPAT


855 
	~<bôs/wch¨-ldbl.h
>

858 
__END_DECLS


	@/usr/include/asm-i386/errno.h

1 #i‚de‡
_I386_ERRNO_H


2 
	#_I386_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm-x86_64/errno.h

1 #i‚de‡
_X8664_ERRNO_H


2 
	#_X8664_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/sockios.h

2 #i‚de‡
__ASM_STUB_SOCKIOS_H


3 
	#__ASM_STUB_SOCKIOS_H


	)

4 #i‡
deföed
 
__x86_64__


5 
	~<asm-x86_64/sockios.h
>

6 #ñi‡
deföed
 
__i386__


7 
	~<asm-i386/sockios.h
>

9 #w¨nög 
This
 
machöe
 
≠≥¨s
 
to
 
be
 
√ôhî
 
x86_64
 
n‹
 
i386
.

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 
__LDBL_REDIR_DECL
 (
fwsˇnf
);

33 
__LDBL_REDIR_DECL
 (
wsˇnf
);

34 
__LDBL_REDIR_DECL
 (
swsˇnf
);

35 
	g__END_NAMESPACE_C99


38 #ifde‡
__USE_ISOC99


39 
__BEGIN_NAMESPACE_C99


40 
__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

41 
__LDBL_REDIR_DECL
 (
vfwsˇnf
);

42 
__LDBL_REDIR_DECL
 (
vwsˇnf
);

43 
__LDBL_REDIR_DECL
 (
vswsˇnf
);

44 
	g__END_NAMESPACE_C99


47 #ifde‡
__USE_GNU


48 
__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

51 
__LDBL_REDIR1_DECL
 (
__wc°ﬁd_öã∫Æ
, 
__wc°od_öã∫Æ
);

53 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


54 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

55 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

56 #i‡
__USE_FORTIFY_LEVEL
 > 1

57 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

58 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

59 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

60 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

33 
__Æways_ölöe
 
wch¨_t
 *

34 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

35 
size_t
 
__n
))

37 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

38  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
, 
	`__bos0
 (__s1Ë/  (
wch¨_t
));

39  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

40 
	}
}

43 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

44 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

45 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

46 
__c⁄°
 
wch¨_t
 *
__s2
,

47 
size_t
 
__n
), 
wmemmove
);

49 
__Æways_ölöe
 
wch¨_t
 *

50 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

51 
size_t
 
__n
))

53 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

54  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
, 
	`__bos0
 (__s1Ë/  (
wch¨_t
));

55  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

56 
	}
}

59 #ifde‡
__USE_GNU


60 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

61 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

62 
size_t
 
__ns1
Ë
__THROW
;

63 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

64 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

65 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

66 
size_t
 
__n
), 
wmemp˝y
);

68 
__Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

70 
size_t
 
__n
))

72 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
, 
	`__bos0
 (__s1Ë/  (
wch¨_t
));

74  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

75 
	}
}

79 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

80 
size_t
 
__ns
Ë
__THROW
;

81 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

82 
size_t
 
__n
), 
wmem£t
);

84 
__Æways_ölöe
 
wch¨_t
 *

85 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

87 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

88  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

89  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

90 
	}
}

93 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

94 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

95 
size_t
 
__n
Ë
__THROW
;

96 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

97 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

98 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

100 
__Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

103 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

104  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

105  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

106 
	}
}

109 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

110 
size_t
 
__de°Àn
Ë
__THROW
;

111 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

112 
__c⁄°
 
wch¨_t
 *
__§c
),

113 
w˝˝y
);

115 
__Æways_ölöe
 
wch¨_t
 *

116 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

118 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

119  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

120  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

121 
	}
}

124 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

125 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

128 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

129 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

130 
size_t
 
__n
), 
wc¢˝y
);

132 
__Æways_ölöe
 
wch¨_t
 *

133 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

135 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

136 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| 
	`__bos
 (
__de°
) >= __n))

137  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

138 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

139  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

144 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

145 
size_t
 
__de°Àn
Ë
__THROW
;

146 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

147 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
), 
w˝n˝y
);

151 
__Æways_ölöe
 
wch¨_t
 *

152 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

155 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| 
	`__bos
 (
__de°
) >= __n))

156  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

157 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

158  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

159 
	}
}

162 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

163 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

166 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

167 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

169 
__Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

180 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢ˇt
);

186 
__Æways_ölöe
 
wch¨_t
 *

187 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

189 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

190  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

191 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

192  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

193 
	}
}

196 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

197 
__Êag
, 
size_t
 
__s_Àn
,

198 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

199 
__THROW
 ;

202 
	#sw¥ötf
(
s
, 
n
, ...) \

203 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

204 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (s), 
__VA_ARGS__
) \

205 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

208 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

209 
__Êag
, 
size_t
 
__s_Àn
,

210 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

211 
__gnuc_va_li°
 
__¨g
)

212 
__THROW
 ;

214 
	#vsw¥ötf
(
s
, 
n
, 
fmt
, 
≠
) \

215 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

216 ? 
	`__vsw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (s), 
fmt
, 
≠
) \

217 : 
	`vsw¥ötf
 (
s
, 
n
, 
fmt
, 
≠
))

	)

220 #i‡
__USE_FORTIFY_LEVEL
 > 1

222 
	`__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

223 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

224 
	`__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

226 
	`__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

227 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

228 
__gnuc_va_li°
 
__≠
);

229 
	`__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

230 
__gnuc_va_li°
 
__≠
);

232 
	#w¥ötf
(...) \

233 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

234 
	#fw¥ötf
(
°ªam
, ...) \

235 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

236 
	#vw¥ötf
(
f‹m©
, 
≠
) \

237 
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

238 
	#vfw¥ötf
(
°ªam
, 
f‹m©
, 
≠
) \

239 
	`__vfw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

243 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

244 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

245 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

246 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

247 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

249 
__Æways_ölöe
 
__wur
 
wch¨_t
 *

250 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

252 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1

253 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| (
size_t
Ë__¿> 
	`__bos
 (
__s
)))

254  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 #ifde‡
__USE_GNU


259 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

260 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

261 
__wur
;

262 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

263 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

264 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

265 
__wur
;

267 
__Æways_ölöe
 
__wur
 
wch¨_t
 *

268 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

270 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1

271 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| (
size_t
Ë__¿> 
	`__bos
 (
__s
)))

272  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

273  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

274 
	}
}

278 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

279 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

280 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

281 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

282 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

284 
__Æways_ölöe
 
__wur
 
size_t


285 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

290 
	#__WCHAR_MB_LEN_MAX
 16

	)

291 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


294 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

295  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

296  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

297 
	}
}

300 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

301 
__c⁄°
 **
__ª°ri˘
 
__§c
,

302 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

303 
size_t
 
__d°Àn
Ë
__THROW
;

304 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

305 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

306 
__c⁄°
 **
__ª°ri˘
 
__§c
,

307 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

308 
mb§towcs
);

310 
__Æways_ölöe
 
size_t


311 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

312 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

314 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

315 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
)

316 || 
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
)))

317  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

318 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

319  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

320 
	}
}

323 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

324 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

325 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

326 
size_t
 
__d°Àn
Ë
__THROW
;

327 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

328 (*
__ª°ri˘
 
__d°
,

329 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

330 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

331 
wc§tombs
);

333 
__Æways_ölöe
 
size_t


334 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

335 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

337 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

338 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
Ë|| __À¿> 
	`__bos
 (
__d°
)))

339  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

340  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

341 
	}
}

344 #ifde‡
__USE_GNU


345 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

346 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

347 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

348 
size_t
 
__d°Àn
Ë
__THROW
;

349 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

350 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

351 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

352 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

353 
mb¢πowcs
);

355 
__Æways_ölöe
 
size_t


356 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

357 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

359 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

360 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
)

361 || 
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
)))

362  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

363 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

364  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

365 
	}
}

368 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

369 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

370 
size_t
 
__nwc
, size_à
__Àn
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

372 
__THROW
;

373 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

374 (*
__ª°ri˘
 
__d°
,

375 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

376 
size_t
 
__nwc
, size_à
__Àn
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

379 
__Æways_ölöe
 
size_t


380 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

381 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

383 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

384 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
Ë|| __À¿> 
	`__bos
 (
__d°
)))

385  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

386  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

387 
	}
}

	@/usr/include/pthread.h

19 #i‚de‡
_PTHREAD_H


20 
	#_PTHREAD_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<ídün.h
>

24 
	~<sched.h
>

25 
	~<time.h
>

27 
	#__√ed_sig£t_t


	)

28 
	~<sig«l.h
>

29 
	~<bôs/±hªadty≥s.h
>

30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/w‹dsize.h
>

37 
	mPTHREAD_CREATE_JOINABLE
,

38 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

39 
	mPTHREAD_CREATE_DETACHED


40 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

47 
	mPTHREAD_MUTEX_TIMED_NP
,

48 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

49 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

50 
	mPTHREAD_MUTEX_ADAPTIVE_NP


51 #ifde‡
__USE_UNIX98


53 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

54 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

55 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

56 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


58 #ifde‡
__USE_GNU


60 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


65 #ifde‡
__USE_GNU


69 
	mPTHREAD_MUTEX_STALLED_NP
,

70 
	mPTHREAD_MUTEX_ROBUST_NP


75 #ifde‡
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


87 #i‡
__WORDSIZE
 == 64

88 
	#PTHREAD_MUTEX_INITIALIZER
 \

89 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

90 #ifde‡
__USE_GNU


91 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

93 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

95 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

96 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

99 
	#PTHREAD_MUTEX_INITIALIZER
 \

100 { { 0, 0, 0, 0, 0, { 0 } } }

	)

101 #ifde‡
__USE_GNU


102 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

104 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

106 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

107 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


123 
	#PTHREAD_RWLOCK_INITIALIZER
 \

124 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

125 #ifde‡
__USE_GNU


126 #i‡
__WORDSIZE
 == 64

127 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

129 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

131 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


132 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

133 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

134 0, 0, 0, 0 } }

	)

136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

138 0 } }

	)

148 
	mPTHREAD_INHERIT_SCHED
,

149 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

150 
	mPTHREAD_EXPLICIT_SCHED


151 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

158 
	mPTHREAD_SCOPE_SYSTEM
,

159 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

160 
	mPTHREAD_SCOPE_PROCESS


161 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

168 
	mPTHREAD_PROCESS_PRIVATE
,

169 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

170 
	mPTHREAD_PROCESS_SHARED


171 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

177 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

181 
	s_±hªad_˛ónup_buf„r


183 (*
	m__routöe
) (*);

184 *
	m__¨g
;

185 
	m__ˇn˚…y≥
;

186 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

192 
	mPTHREAD_CANCEL_ENABLE
,

193 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

194 
	mPTHREAD_CANCEL_DISABLE


195 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

199 
	mPTHREAD_CANCEL_DEFERRED
,

200 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

201 
	mPTHREAD_CANCEL_ASYNCHRONOUS


202 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

204 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

208 
	#PTHREAD_ONCE_INIT
 0

	)

211 #ifde‡
__USE_XOPEN2K


215 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

219 
__BEGIN_DECLS


224 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

225 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

226 *(*
__°¨t_routöe
) (*),

227 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

233 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

241 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

243 #ifde‡
__USE_GNU


246 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

254 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

255 
__c⁄°
 
time•ec
 *
__ab°ime
);

262 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

266 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

269 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

277 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

280 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1));

284 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

285 *
__dëach°©e
)

286 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

289 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

290 
__dëach°©e
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

296 
size_t
 *
__gu¨dsize
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

300 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

301 
size_t
 
__gu¨dsize
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

306 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


307 
__©å
,

308 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

309 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

312 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

313 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


314 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

317 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


318 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

322 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__öhîô
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

332 
__öhîô
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1));

337 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

338 *
__ª°ri˘
 
__sc›e
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

354 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

355 *
__°ackaddr
)

356 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

359 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


360 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

366 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

367 
size_t
 
__°acksize
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1));

370 #ifde‡
__USE_XOPEN2K


372 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

373 **
__ª°ri˘
 
__°ackaddr
,

374 
size_t
 *
__ª°ri˘
 
__°acksize
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

380 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

381 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

384 #ifde‡
__USE_GNU


387 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

388 
size_t
 
__˝u£tsize
,

389 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

394 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

395 
size_t
 
__˝u£tsize
,

396 
˝u_£t_t
 *
__˝u£t
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

404 
__THROW
 
	`__n⁄nuŒ
 ((2));

412 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

413 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

414 
__THROW
 
	`__n⁄nuŒ
 ((3));

417 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

418 *
__ª°ri˘
 
__pﬁicy
,

419 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

420 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

423 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

424 
__THROW
;

427 #ifde‡
__USE_UNIX98


429 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

432 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

435 #ifde‡
__USE_GNU


440 
	$±hªad_yõld
 (Ë
__THROW
;

445 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

446 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3));

450 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

451 
˝u_£t_t
 *
__˝u£t
)

452 
__THROW
 
	`__n⁄nuŒ
 ((3));

465 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

466 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

477 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

481 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

484 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

489 
	`±hªad_ã°ˇn˚l
 ();

498 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

499 
__mask_was_ßved
;

500 } 
__ˇn˚l_jmp_buf
[1];

501 *
__∑d
[4];

502 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

505 #i‚de‡
__˛ónup_f˘_©åibuã


506 
	#__˛ónup_f˘_©åibuã


	)

511 
	s__±hªad_˛ónup_‰ame


513 (*
__ˇn˚l_routöe
) (*);

514 *
__ˇn˚l_¨g
;

515 
__do_ô
;

516 
__ˇn˚l_ty≥
;

519 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


520 #ifde‡
__˝lu•lus


522 ˛as†
	c__±hªad_˛ónup_˛ass


524 (*
__ˇn˚l_routöe
) (*);

525 *
__ˇn˚l_¨g
;

526 
__do_ô
;

527 
__ˇn˚l_ty≥
;

529 
public
:

530 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

531 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	`__do_ô
 (1) { }

532 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

533 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

534 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

535 &
__ˇn˚l_ty≥
); 
	}
}

536 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

546 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

548 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

552 
	#±hªad_˛ónup_p›
(
execuã
) \

553 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

554 } 0)

	)

556 #ifde‡
__USE_GNU


560 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

562 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

563 
__˛‰ame
.
	`__de„r
 ()

	)

568 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

569 
__˛‰ame
.
	`__ª°‹e
 (); \

570 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

571 } 0)

	)

578 
__ölöe
 

579 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

581 i‡(
__‰ame
->
__do_ô
)

582 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

583 
	}
}

592 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

594 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

595 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

596 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

597 .
__do_ô
 = 1 };

	)

601 
	#±hªad_˛ónup_p›
(
execuã
) \

602 
__˛‰ame
.
__do_ô
 = (
execuã
); \

603 } 0)

	)

605 #ifde‡
__USE_GNU


609 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

611 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

612 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

613 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

614 .
__do_ô
 = 1 }; \

615 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

616 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

621 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

622 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

623 
__˛‰ame
.
__do_ô
 = (
execuã
); \

624 } 0)

	)

635 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

637 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

638 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

639 *
__ˇn˚l_¨g
 = (
¨g
); \

640 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) \

641 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

642 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

644 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

645 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

649 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

650 dÿ{

	)

651 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

652 
__˛ónup_f˘_©åibuã
;

656 
	#±hªad_˛ónup_p›
(
execuã
) \

658 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

659 i‡(
execuã
) \

660 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

661 } 0)

	)

662 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

663 
__˛ónup_f˘_©åibuã
;

665 #ifde‡
__USE_GNU


669 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

671 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

672 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

673 *
__ˇn˚l_¨g
 = (
¨g
); \

674 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) \

675 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

676 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

678 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

679 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

683 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

684 dÿ{

	)

685 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

686 
__˛ónup_f˘_©åibuã
;

691 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

693 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

694 i‡(
execuã
) \

695 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

696 
	}
} 0)

	)

697 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

698 
__˛ónup_f˘_©åibuã
;

702 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

703 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

704 #i‚de‡
SHARED


705 
	`__©åibuã__
 ((
__wók__
))

711 
__jmp_buf_èg
;

712 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

718 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

719 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

720 
__THROW
 
	`__n⁄nuŒ
 ((1));

723 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1));

727 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

728 
__THROW
 
	`__n⁄nuŒ
 ((1));

731 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

732 
__THROW
 
	`__n⁄nuŒ
 ((1));

734 #ifde‡
__USE_XOPEN2K


736 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

737 
__c⁄°
 
time•ec
 *
__ª°ri˘


738 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

742 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 #ifde‡
__USE_UNIX98


748 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

749 
__ª°ri˘
 
__muãx
,

750 *
__ª°ri˘
 
__¥io˚ûög
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

755 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

756 
__¥io˚ûög
,

757 *
__ª°ri˘
 
__ﬁd_˚ûög
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

762 #ifde‡
__USE_GNU


764 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

774 
__THROW
 
	`__n⁄nuŒ
 ((1));

777 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

781 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

782 
__ª°ri˘
 
__©å
,

783 *
__ª°ri˘
 
__psh¨ed
)

784 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

787 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

788 
__psh¨ed
)

789 
__THROW
 
	`__n⁄nuŒ
 ((1));

791 #ifde‡
__USE_UNIX98


793 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


794 
__©å
, *
__ª°ri˘
 
__köd
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

800 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1));

804 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

805 
__ª°ri˘
 
__©å
,

806 *
__ª°ri˘
 
__¥Ÿocﬁ
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

811 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

812 
__¥Ÿocﬁ
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1));

816 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

817 
__ª°ri˘
 
__©å
,

818 *
__ª°ri˘
 
__¥io˚ûög
)

819 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

822 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

823 
__¥io˚ûög
)

824 
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #ifde‡
__USE_GNU


829 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

830 *
__robu°√ss
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

834 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

835 
__robu°√ss
)

836 
__THROW
 
	`__n⁄nuŒ
 ((1));

840 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


845 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

846 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


847 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

851 
__THROW
 
	`__n⁄nuŒ
 ((1));

854 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

855 
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 #ifde‡
__USE_XOPEN2K


863 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

864 
__c⁄°
 
time•ec
 *
__ª°ri˘


865 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

869 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

876 #ifde‡
__USE_XOPEN2K


878 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

879 
__c⁄°
 
time•ec
 *
__ª°ri˘


880 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

884 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

891 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

892 
__THROW
 
	`__n⁄nuŒ
 ((1));

895 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1));

899 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

900 
__ª°ri˘
 
__©å
,

901 *
__ª°ri˘
 
__psh¨ed
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

905 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

906 
__psh¨ed
)

907 
__THROW
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

911 
__ª°ri˘
 
__©å
,

912 *
__ª°ri˘
 
__¥ef
)

913 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

916 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

917 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

926 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


927 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

930 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

931 
__THROW
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

946 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

947 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

948 
	`__n⁄nuŒ
 ((1, 2));

957 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

958 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

959 
__c⁄°
 
time•ec
 *
__ª°ri˘


960 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

965 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

969 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

974 
__ª°ri˘
 
__©å
,

975 *
__ª°ri˘
 
__psh¨ed
)

976 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

979 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

980 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

982 #ifde‡
__USE_XOPEN2K


984 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

985 
__ª°ri˘
 
__©å
,

986 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

987 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

990 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

991 
__˛ockid_t
 
__˛ock_id
)

992 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 #ifde‡
__USE_XOPEN2K


1001 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1002 
__THROW
 
	`__n⁄nuŒ
 ((1));

1005 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1));

1013 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1018 
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1026 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1027 
__©å
, 
__cou¡
)

1028 
__THROW
 
	`__n⁄nuŒ
 ((1));

1031 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1032 
__THROW
 
	`__n⁄nuŒ
 ((1));

1035 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1049 
__ª°ri˘
 
__©å
,

1050 *
__ª°ri˘
 
__psh¨ed
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1054 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1055 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1068 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1069 (*
__de°r_fun˘i⁄
) (*))

1070 
__THROW
 
	`__n⁄nuŒ
 ((1));

1073 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1076 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1079 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1080 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1083 #ifde‡
__USE_XOPEN2K


1085 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1086 
__˛ockid_t
 *
__˛ock_id
)

1087 
__THROW
 
	`__n⁄nuŒ
 ((2));

1102 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1103 (*
__∑ª¡
) (),

1104 (*
__chûd
Ë()Ë
__THROW
;

1107 #ifde‡
__USE_EXTERN_INLINES


1109 
__ölöe
 

1110 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1112  
__thªad1
 =
__thªad2
;

1113 
	}
}

1116 
__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

34 
	#__√ed_wöt_t


	)

35 
	~<°ddef.h
>

36 #i‚de‡
_WINT_T


41 
	#_WINT_T


	)

42 
	twöt_t
;

44 #ifde‡
__USE_ISOC99


45 
	$__USING_NAMESPACE_C99
(
wöt_t
)

51 #i‚de‡
WEOF


52 
	#WEOF
 (0xffffffffu)

	)

55 #unde‡
__√ed_iswxxx


60 #i‚de‡
__iswxxx_deföed


61 
	#__iswxxx_deföed
 1

	)

63 
__BEGIN_NAMESPACE_C99


66 
	tw˘y≥_t
;

67 
__END_NAMESPACE_C99


69 #i‚de‡
_ISwbô


74 
	~<ídün.h
>

75 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

78 
	#_ISwbô
(
bô
) \

79 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

80 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

81 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

82 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

87 
__ISwuµî
 = 0,

88 
__ISwlowî
 = 1,

89 
__ISwÆpha
 = 2,

90 
__ISwdigô
 = 3,

91 
__ISwxdigô
 = 4,

92 
__ISw•a˚
 = 5,

93 
__ISw¥öt
 = 6,

94 
__ISwgøph
 = 7,

95 
__ISwbœnk
 = 8,

96 
__ISw˙ål
 = 9,

97 
__ISwpun˘
 = 10,

98 
__ISwÆnum
 = 11,

100 
_ISwuµî
 = 
	`_ISwbô
 (
__ISwuµî
),

101 
_ISwlowî
 = 
	`_ISwbô
 (
__ISwlowî
),

102 
_ISwÆpha
 = 
	`_ISwbô
 (
__ISwÆpha
),

103 
_ISwdigô
 = 
	`_ISwbô
 (
__ISwdigô
),

104 
_ISwxdigô
 = 
	`_ISwbô
 (
__ISwxdigô
),

105 
_ISw•a˚
 = 
	`_ISwbô
 (
__ISw•a˚
),

106 
_ISw¥öt
 = 
	`_ISwbô
 (
__ISw¥öt
),

107 
_ISwgøph
 = 
	`_ISwbô
 (
__ISwgøph
),

108 
_ISwbœnk
 = 
	`_ISwbô
 (
__ISwbœnk
),

109 
_ISw˙ål
 = 
	`_ISwbô
 (
__ISw˙ål
),

110 
_ISwpun˘
 = 
	`_ISwbô
 (
__ISwpun˘
),

111 
_ISwÆnum
 = 
	`_ISwbô
 (
__ISwÆnum
)

116 
__BEGIN_DECLS


118 
__BEGIN_NAMESPACE_C99


125 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

131 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

138 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

150 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

155 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

160 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

165 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

170 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

175 #ifde‡
__USE_ISOC99


176 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

185 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

189 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

190 
__END_NAMESPACE_C99


197 
__BEGIN_NAMESPACE_C99


200 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

201 
__END_NAMESPACE_C99


202 #ifde‡
__USE_GNU


203 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

206 
__BEGIN_NAMESPACE_C99


208 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

211 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

212 
__END_NAMESPACE_C99


214 
__END_DECLS


221 #ifde‡
_WCTYPE_H


227 
__BEGIN_DECLS


229 
__BEGIN_NAMESPACE_C99


232 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

235 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

236 
__END_NAMESPACE_C99


238 #ifde‡
__USE_GNU


240 
	~<xloˇÀ.h
>

244 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

250 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

257 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

269 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

274 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

279 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

289 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

294 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

298 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

299 
__THROW
;

303 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

304 
__THROW
;

312 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

319 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

320 
__THROW
;

323 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

324 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

328 
__END_DECLS


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-i386/sockios.h

1 #i‚de‡
__ARCH_I386_SOCKIOS__


2 
	#__ARCH_I386_SOCKIOS__


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

	@/usr/include/asm-x86_64/sockios.h

1 #i‚de‡
__ARCH_X8664_SOCKIOS__


2 
	#__ARCH_X8664_SOCKIOS__


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_time•ec


	)

29 
	~<time.h
>

32 
	~<bôs/sched.h
>

34 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

37 
__BEGIN_DECLS


40 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

41 
__THROW
;

44 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

47 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

48 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

51 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

54 
	$sched_yõld
 (Ë
__THROW
;

57 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

66 #ifde‡
__USE_GNU


68 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

69 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET
 (˝u, cpu£ç)

	)

70 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR
 (˝u, cpu£ç)

	)

71 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET
 (˝u, cpu£ç)

	)

72 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO
 (˝u£ç)

	)

76 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

77 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

80 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

81 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

32 #ifde‡
__USE_GNU


33 
	#SCHED_BATCH
 3

	)

36 #ifde‡
__USE_MISC


38 
	#CSIGNAL
 0x000000f‡

	)

39 
	#CLONE_VM
 0x00000100

	)

40 
	#CLONE_FS
 0x00000200

	)

41 
	#CLONE_FILES
 0x00000400

	)

42 
	#CLONE_SIGHAND
 0x00000800

	)

43 
	#CLONE_PTRACE
 0x00002000

	)

44 
	#CLONE_VFORK
 0x00004000

	)

46 
	#CLONE_PARENT
 0x00008000

	)

48 
	#CLONE_THREAD
 0x00010000

	)

49 
	#CLONE_NEWNS
 0x00020000

	)

50 
	#CLONE_SYSVSEM
 0x00040000

	)

51 
	#CLONE_SETTLS
 0x00080000

	)

52 
	#CLONE_PARENT_SETTID
 0x00100000

	)

54 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

56 
	#CLONE_DETACHED
 0x00400000

	)

57 
	#CLONE_UNTRACED
 0x00800000

	)

59 
	#CLONE_CHILD_SETTID
 0x01000000

	)

61 
	#CLONE_STOPPED
 0x02000000

	)

65 
	ssched_∑øm


67 
	m__sched_¥i‹ôy
;

70 
	g__BEGIN_DECLS


72 #ifde‡
__USE_MISC


74 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

75 
__Êags
, *
__¨g
, ...Ë
__THROW
;

78 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

81 
__END_DECLS


85 #i‡!
deföed
 
__deföed_sched∑øm
 \

86 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

87 
	#__deföed_sched∑øm
 1

	)

89 
	s__sched_∑øm


91 
__sched_¥i‹ôy
;

93 #unde‡
__√ed_sched∑øm


97 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


98 
	#__˝u_£t_t_deföed


	)

100 
	#__CPU_SETSIZE
 1024

	)

101 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

104 
	t__˝u_mask
;

107 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

108 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

113 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

114 } 
	t˝u_£t_t
;

117 
	#__CPU_ZERO
(
˝u£ç
) \

119 
__i
; \

120 
˝u_£t_t
 *
__¨r
 = (
˝u£ç
); \

121 
__i
 = 0; __ò<  (
˝u_£t_t
Ë/  (
__˝u_mask
); ++__i) \

122 
__¨r
->
__bôs
[
__i
] = 0; \

123 
	}
} 0)

	)

124 
	#__CPU_SET
(
˝u
, 
˝u£ç
) \

125 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] |
	`__CPUMASK
 (˝u))

	)

126 
	#__CPU_CLR
(
˝u
, 
˝u£ç
) \

127 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] &~
	`__CPUMASK
 (˝u))

	)

128 
	#__CPU_ISSET
(
˝u
, 
˝u£ç
) \

129 (((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] & 
	`__CPUMASK
 (˝u)Ë!0)

	)

	@
1
.
1
/usr/include
239
6280
acconfig.h
lib/attr.c
lib/badreply.c
lib/certrep.c
lib/check.c
lib/createreq.c
lib/decode.c
lib/encode.c
lib/fingerprint.c
lib/getcert.c
lib/getcertinitial.c
lib/getcrl.c
lib/goodreply.c
lib/grant.c
lib/http.c
lib/init.c
lib/isasu.c
lib/iser.c
lib/openscep_err.c
lib/openscep_vers.c
lib/payload.c
lib/pending.c
lib/pkcsreq.c
lib/proxy.c
lib/scepldap.c
lib/selfsigned.c
lib/sigattr.c
lib/spki2file.c
lib/transcheck.c
lib/v2request.c
libltdl/acconfig.h
libltdl/ltdl.c
rogi/openscep-0.4.2/acconfig.h
rogi/openscep-0.4.2/lib/attr.c
rogi/openscep-0.4.2/lib/badreply.c
rogi/openscep-0.4.2/lib/certrep.c
rogi/openscep-0.4.2/lib/check.c
rogi/openscep-0.4.2/lib/createreq.c
rogi/openscep-0.4.2/lib/decode.c
rogi/openscep-0.4.2/lib/encode.c
rogi/openscep-0.4.2/lib/fingerprint.c
rogi/openscep-0.4.2/lib/getcert.c
rogi/openscep-0.4.2/lib/getcertinitial.c
rogi/openscep-0.4.2/lib/getcrl.c
rogi/openscep-0.4.2/lib/goodreply.c
rogi/openscep-0.4.2/lib/grant.c
rogi/openscep-0.4.2/lib/http.c
rogi/openscep-0.4.2/lib/init.c
rogi/openscep-0.4.2/lib/isasu.c
rogi/openscep-0.4.2/lib/iser.c
rogi/openscep-0.4.2/lib/openscep_vers.c
rogi/openscep-0.4.2/lib/payload.c
rogi/openscep-0.4.2/lib/pending.c
rogi/openscep-0.4.2/lib/pkcsreq.c
rogi/openscep-0.4.2/lib/proxy.c
rogi/openscep-0.4.2/lib/scepldap.c
rogi/openscep-0.4.2/lib/selfsigned.c
rogi/openscep-0.4.2/lib/sigattr.c
rogi/openscep-0.4.2/lib/spki2file.c
rogi/openscep-0.4.2/lib/transcheck.c
rogi/openscep-0.4.2/lib/v2request.c
rogi/openscep-0.4.2/libltdl/acconfig.h
rogi/openscep-0.4.2/libltdl/ltdl.c
rogi/openscep-0.4.2/scep/scep.c
rogi/openscep-0.4.2/scep/scepxid.c
rogi/openscep-0.4.2/scepd/cafingerprint.c
rogi/openscep-0.4.2/scepd/crl2ldap.c
rogi/openscep-0.4.2/scepd/derdump.c
rogi/openscep-0.4.2/scepd/dn2xid.c
rogi/openscep-0.4.2/scepd/scepconf.c
rogi/openscep-0.4.2/scepd/scepd.c
rogi/openscep-0.4.2/scepd/sceplist.c
scep/scep.c
scep/scepxid.c
scepd/cafingerprint.c
scepd/crl2ldap.c
scepd/derdump.c
scepd/dn2xid.c
scepd/scepconf.c
scepd/scepd.c
scepd/sceplist.c
/usr/include/arpa/inet.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/lber.h
/usr/include/ldap.h
/usr/include/malloc.h
/usr/include/memory.h
/usr/include/netdb.h
/usr/include/openssl/asn1.h
/usr/include/openssl/asn1_mac.h
/usr/include/openssl/bio.h
/usr/include/openssl/bn.h
/usr/include/openssl/conf.h
/usr/include/openssl/err.h
/usr/include/openssl/evp.h
/usr/include/openssl/md5.h
/usr/include/openssl/objects.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/pem.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/rand.h
/usr/include/openssl/rsa.h
/usr/include/openssl/x509.h
/usr/include/openssl/x509v3.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/times.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/assert.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/siginfo.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/lber_types.h
/usr/include/ldap_features.h
/usr/include/libio.h
/usr/include/netinet/in.h
/usr/include/openssl/buffer.h
/usr/include/openssl/crypto.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/fips.h
/usr/include/openssl/lhash.h
/usr/include/openssl/obj_mac.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem2.h
/usr/include/openssl/safestack.h
/usr/include/openssl/sha.h
/usr/include/openssl/stack.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/x509_vfy.h
/usr/include/rpc/netdb.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/syslog.h
/usr/include/sys/sysmacros.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/socket.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/in.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/resource.h
/usr/include/bits/select.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/syslog-ldbl.h
/usr/include/bits/syslog-path.h
/usr/include/bits/syslog.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs.h
/usr/include/ldap_cdefs.h
/usr/include/limits.h
/usr/include/linux/errno.h
/usr/include/openssl/ebcdic.h
/usr/include/sys/cdefs.h
/usr/include/sys/ucontext.h
/usr/include/asm-i386/socket.h
/usr/include/asm-x86_64/socket.h
/usr/include/asm/errno.h
/usr/include/bits/libc-lock.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/xopen_lim.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/limits.h
/usr/include/wchar.h
/usr/include/asm-i386/errno.h
/usr/include/asm-x86_64/errno.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno.h
/usr/include/asm-i386/sockios.h
/usr/include/asm-x86_64/sockios.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/asm-generic/errno-base.h
/usr/include/bits/sched.h
